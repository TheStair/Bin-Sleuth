from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
from .analysis import *

def upload_file_view(request):
    context = {}
    if request.method == 'POST' and request.FILES['malware_file']:
        uploaded_file = request.FILES['malware_file']
        fs = FileSystemStorage()
        file_path = fs.save(uploaded_file.name, uploaded_file)
        file_path = fs.path(file_path)

        output_dir = full_analysis(file_path)
        context['results stored in'] = output_dir

    return render(request, 'malware_insights/upload.html', context)

import json
from django.http import JsonResponse

def view_json_file(request, filename):
    output_dir = request.GET.get("dir")
    file_path = os.path.join(output_dir, filename)
    with open(file_path, "r") as f:
        data = json.load(f)
    return JsonResponse(data)

def landing_page(request):
    return render(request, 'malware_insights/landing.html')

def list_analyzed_files(request):
    base_dir = os.path.join(settings.BASE_DIR, 'analyzed_binaries')
    files = []

    if os.path.exists(base_dir):
        files = [f for f in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, f))]

    return render(request, 'malware_insights/list_files.html', {'files': files})

def view_file_results(request, filename):
    import json
    import os
    from django.conf import settings

    base_path = os.path.join(settings.BASE_DIR, 'analyzed_binaries', filename)
    matches_file = os.path.join(base_path, f"{filename}_results" , "overall_matches.json")
    headers_file = os.path.join(base_path, f"{filename}_results" , "header_info.json")
    functions_dir = os.path.join(base_path, f"{filename}_results" , "functions")

    print("Looking for matches file at:", matches_file)
    match_list = []  # renamed for clarity
    if os.path.exists(matches_file):
        print("Matches file found.")
        with open(matches_file) as f:
            match_list = json.load(f)
            print(match_list)
    else:
        print("Matches file not found.")

    header_info = []
    if os.path.exists(headers_file):
        with open(headers_file) as f:
            header_info = json.load(f)
            print(header_info)
    else:
        print("Header info file not found.")
    
    functions = []
    if os.path.exists(functions_dir):
        for func_file in os.listdir(functions_dir):
            if func_file.endswith('.json'):
                func_name = func_file[:-5]  # strip .json
                func_path = os.path.join(functions_dir, func_file)
                with open(func_path) as f:
                    func_data = json.load(f)
                    func_data["name"] = func_name  # inject filename as function name
                    functions.append(func_data)


    # Alphabetical sort based on address or label
    functions = sorted(functions, key=lambda f: f['name'])

    # Pass to template (no need to sort again)
    return render(request, 'malware_insights/file_results.html', {
        'filename': filename,
        'match_list': match_list,
        'header_info': header_info,
        'functions': functions,
    })


