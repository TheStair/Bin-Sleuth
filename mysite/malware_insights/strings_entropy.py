# Runs Strings
import re
import sys
import lief
import numpy as np
from scipy.stats import entropy
from pathlib import Path
import requests
import hashlib
import os


#Extracts Strings from a binary using regex
def extract_strings(input_file, min_length: int):
    """
    Return a list of all ASCII‐printable substrings in `data`
    of at least `min_length` characters.
    """
    # [\x20-\x7E] is the range of printable ASCII (space through tilde)
    with open(input_file, "rb") as f:
        data = f.read()

    print("Running Strings")
    pattern = re.compile(rb'[\x20-\x7E]{%d,}' % min_length)
    return [match.decode('ascii', errors='ignore')
            for match in pattern.findall(data)]

# Compute Shannon entropy of a bytes object
def shannon_entropy(data: bytes) -> float:
    """Compute Shannon entropy (base‑2) of a bytes object."""
    if not data:
        return 0.0
    arr = np.frombuffer(data, dtype=np.uint8)
    counts = np.bincount(arr, minlength=256)
    probs = counts / counts.sum()
    probs = probs[probs > 0]               # drop zero‑probability symbols
    return entropy(probs, base=2)          # bits per byte

#Compute the Entropy for Every Sections
def compute_section_entropies(input_file) -> dict[str, float]:
    """Parse the binary at `path` and return a dict of section→entropy."""
    binary = lief.parse(input_file)
    entropies: dict[str, float] = {}
    for sec in binary.sections:
        raw = bytes(sec.content)           # LIEF gives section.content as List[int]
        ent = shannon_entropy(raw)
        entropies[sec.name] = ent
    return entropies

#Pulls the VirusTotal API key from the environment
def get_virus_total_api_key():
    """
    Retrieve the VirusTotal API key from an environment variable.
    """
    api_key = os.getenv('VT_KEY')
    if not api_key:
        raise ValueError("VirusTotal API key not found in environment variables.")
    return api_key


# Retrieves the VirusTotal report for a given file hash
def get_virus_total_report(file_hash):
    """
    Retrieve the VirusTotal report for a given file hash.
    """
    api_key = get_virus_total_api_key()
    print("Getting VirusTotal report")
    url = f"https://www.virustotal.com/vtapi/v2/file/report"
    params = {
        'apikey': api_key,
        'resource': file_hash
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Error retrieving report: {response.status_code}")


#Gets the filehash
def get_filehash(input_file):
    """
    Retrieve the file hash from the user.
    """
    if not os.path.exists(input_file):
        raise ValueError("File does not exist.")
    
    with open(input_file, "rb") as f:
        file_hash = hashlib.md5(f.read()).hexdigest()
    
    return file_hash


# Main for debugging and testing
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python entropy.py <path-to-binary>")
        sys.exit(1)

    path = sys.argv[1]
    path = Path(path)
    if not path.exists():
        print(f"File not found: {path}")
        sys.exit(1)
    # ents = compute_section_entropies(path)
    # for name, e in ents.items():
    #     print(f"{name:15} {e:.2f} bits/byte")
    # print("Running Strings")
    # strings = extract_strings(path, 5)
    # print("Strings found:")
    # for s in strings:
    #     print(s)
    print("Running VirusTotal")
    file_hash = get_filehash(path)
    report = get_virus_total_report(file_hash)
    print("VirusTotal report:")
    print(report)
