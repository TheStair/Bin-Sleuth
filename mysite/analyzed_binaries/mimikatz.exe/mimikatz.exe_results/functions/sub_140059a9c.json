{
  "address": "0x140059a9c",
  "rules": [
    "encrypt data using RSA via embedded library/5013d5f9ed38420496e3af7e38d68d8f",
    "encrypt data using chaskey/4b6f9d91d05f46dd9aa3662f80cb6278",
    "hash data using djb2/1485ed9954f84e3481d22b64bc4cfca7",
    "hash data using jshash/79354a2ef36a4036b42806ea4b41f8bd",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "allocate or change RWX memory/e5d60c23edee4683a25ac882b99be25c/be08ffa5ddd942e8ab0706a663121e4b",
    "contain loop"
  ],
  "disassembly": [
    "mov     qword [rsp+0x20], r9",
    "mov     qword [rsp+0x10], rdx",
    "push    rbx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0xf8",
    "mov     rsi, qword [rcx]",
    "xor     eax, eax",
    "test    r9, r9",
    "setne   al",
    "mov     r13, rcx",
    "mov     r12, r8",
    "movsxd  rcx, eax",
    "mov     qword [rsp+0xe0], rcx",
    "movzx   r15d, byte [rcx+r8+0x2d]",
    "mov     dword [rsp+0x150], r15d",
    "cmp     r15d, 0x7",
    "jne     0x140059afa",
    "mov     rbx, qword [r8+rcx*8+0x30]",
    "test    r15d, r15d",
    "je      0x14005a108",
    "mov     eax, dword [rsi+0x30]",
    "bt      rax, 0x13",
    "jae     0x140059afa",
    "mov     rax, rbx",
    "test    rbx, rbx",
    "jne     0x14005a108",
    "xor     eax, eax",
    "jmp     0x14005a10b",
    "lea     rax, [rsp+0x50]",
    "lea     r9, [rsp+0x88]",
    "mov     rcx, r13",
    "mov     qword [rsp+0x88], rbx",
    "mov     qword [rsp+0x50], rbx",
    "mov     rbp, rbx",
    "mov     qword [rsp+0x20], rax",
    "mov     rdi, rbx",
    "mov     qword [rsp+0x60], rbx",
    "mov     qword [rsp+0x58], rbx",
    "mov     qword [rsp+0x70], rbx",
    "mov     r14, rbx",
    "call    sub_14005841c",
    "cmp     eax, ebx",
    "jne     0x140059af3",
    "add     rsp, 0xf8",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "pop     rbx",
    "retn    ",
    "cmp     dword [r12+0x28], ebx",
    "mov     dword [rsp+0x140], ebx",
    "mov     qword [rsp+0xb0], r15",
    "jle     0x140059eaa",
    "cmp     qword [rsp+0x50], rbx",
    "je      0x140059ebe",
    "mov     rax, qword [rsp+0x50]",
    "mov     rbp, qword [rsp+0x158]",
    "mov     r15, qword [rsp+0x148]",
    "mov     qword [rsp+0x98], rax",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x90], rbx",
    "mov     rax, qword [r12]",
    "mov     rdx, qword [rax]",
    "mov     rcx, rdx",
    "mov     qword [rsp+0x68], rdx",
    "call    sub_140019074",
    "mov     dword [rsp+0x140], eax",
    "cmp     r15d, 0x7",
    "jne     0x140059f73",
    "mov     rdx, qword [rsp+0x50]",
    "mov     rcx, rsi",
    "call    sub_1400169a8",
    "mov     r8d, dword [r12+0x40]",
    "mov     r8d, dword [rax]",
    "jmp     0x140059bdb",
    "inc     dword [rsi+0x168]",
    "movsxd  rdx, eax",
    "mov     rcx, rsi",
    "add     rdx, 0xa1",
    "call    sub_140016ba8",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x14005a03f",
    "mov     qword [rsp+0x78], rdx",
    "lea     r8, [rel data_1400f40e0]  {\"FOREIGN KEY constraint failed\"}",
    "lea     edx, [r15+0x40]",
    "mov     rcx, rsi",
    "mov     dword [rsp+0x80], eax",
    "call    sub_14004397c",
    "mov     qword [rsp+0x150], rax",
    "cmp     rax, rbx",
    "je      0x140059f13",
    "movsx   ecx, word [r15+0x44]",
    "mov     rax, qword [rax+0x8]",
    "movsx   ecx, word [rax+rdx]",
    "jmp     0x140059bf7",
    "mov     rax, qword [rsp+0x88]",
    "cmp     rax, rbx",
    "je      0x140059bf2",
    "dec     dword [rsi+0x168]",
    "test    rdi, rdi",
    "je      0x14005a055",
    "movsxd  r8, dword [rsp+0x140]",
    "mov     rdx, qword [rsp+0x68]",
    "lea     rbp, [rax+0x48]",
    "lea     rcx, [rbp+0x58]",
    "mov     qword [rax+0x38], rbp",
    "mov     qword [rbp+0x18], rcx",
    "call    memcpy",
    "test    rdi, rdi",
    "je      0x140059fd2",
    "lea     r8, [rsp+0x78]",
    "xor     r9d, r9d",
    "xor     edx, edx",
    "mov     rcx, r13",
    "call    sub_1400532cc",
    "mov     r8, qword [rsp+0x150]",
    "xor     edx, edx",
    "mov     rcx, r13",
    "mov     rbx, rax",
    "call    sub_140044974",
    "mov     r9, rdi",
    "mov     r8, rbx",
    "mov     rdx, rax",
    "xor     eax, eax",
    "mov     rcx, r13",
    "mov     qword [rsp+0x40], rax",
    "mov     dword [rsp+0x38], eax",
    "mov     qword [rsp+0x30], rax",
    "mov     qword [rsp+0x28], rax",
    "mov     qword [rsp+0x20], rax",
    "call    sub_140062cac",
    "mov     qword [rsp+0x70], rax",
    "mov     eax, dword [rsp+0x140]",
    "xor     edi, edi",
    "mov     byte [rax+0x1], 0x2",
    "mov     rax, qword [rsp+0xb0]",
    "cmp     rax, 0x7",
    "je      0x140059e57",
    "xor     r9d, r9d",
    "lea     r8, [rsp+0xa0]",
    "mov     rcx, rsi",
    "lea     edi, [r9+0x3b]",
    "mov     edx, edi",
    "call    sub_140043858",
    "lea     r8, [rsp+0xc8]",
    "xor     r9d, r9d",
    "mov     edx, edi",
    "mov     rcx, rsi",
    "mov     rbx, rax",
    "call    sub_140043858",
    "lea     edx, [rdi+0x4e]",
    "mov     r9, rbx",
    "mov     r8, rax",
    "mov     rcx, r13",
    "call    sub_140043a14",
    "xor     r9d, r9d",
    "lea     r8, [rsp+0xa0]",
    "lea     edx, [r9+0x3b]",
    "mov     rcx, rsi",
    "mov     rdi, rax",
    "call    sub_140043858",
    "xor     r9d, r9d",
    "lea     r8, [rsp+0xb8]",
    "lea     edx, [r9+0x3b]",
    "mov     rcx, rsi",
    "mov     rbx, rax",
    "call    sub_140043858",
    "mov     r9, rbx",
    "mov     edx, 0x89",
    "mov     r8, rax",
    "mov     rcx, r13",
    "call    sub_140043a14",
    "mov     r9, rdi",
    "mov     edx, 0x2d",
    "mov     r8, rax",
    "mov     rcx, r13",
    "call    sub_140043a14",
    "mov     rdx, r14",
    "mov     rcx, r13",
    "mov     r8, rax",
    "call    sub_140043af4",
    "mov     rdi, qword [rsp+0x60]",
    "mov     r14, rax",
    "mov     rax, qword [r15+0x8]",
    "movsxd  rcx, ecx",
    "shl     rcx, 0x5",
    "mov     rcx, qword [rcx+rax]",
    "mov     qword [rsp+0xa0], rcx",
    "call    sub_140019074",
    "movsxd  rdx, r8d",
    "mov     dword [rsp+0xa8], eax",
    "mov     rax, qword [r12]",
    "shl     rdx, 0x5",
    "mov     rcx, qword [rax+0x8]",
    "mov     qword [rsp+0xd8], rdx",
    "mov     rcx, qword [rdx+rcx]",
    "mov     qword [rsp+0x78], rcx",
    "call    sub_140019074",
    "xor     r9d, r9d",
    "lea     r8, [rsp+0x78]",
    "lea     edx, [r9+0x3b]",
    "mov     rcx, rsi",
    "mov     dword [rsp+0x80], eax",
    "call    sub_140043858",
    "xor     r9d, r9d",
    "lea     r8, [rsp+0xa0]",
    "lea     edx, [r9+0x3b]",
    "mov     rcx, rsi",
    "mov     rdi, rax",
    "call    sub_140043858",
    "xor     r9d, r9d",
    "lea     r8, [rsp+0xb8]",
    "lea     edx, [r9+0x3b]",
    "mov     rcx, rsi",
    "mov     rbx, rax",
    "call    sub_140043858",
    "mov     r9, rbx",
    "mov     edx, 0x89",
    "mov     rcx, r13",
    "mov     r8, rax",
    "call    sub_140043a14",
    "mov     r9, rdi",
    "mov     edx, 0x35",
    "mov     r8, rax",
    "mov     rcx, r13",
    "call    sub_140043a14",
    "mov     rdx, qword [rsp+0x60]",
    "mov     rcx, r13",
    "mov     r8, rax",
    "call    sub_140043af4",
    "mov     rdi, rax",
    "mov     qword [rsp+0x60], rax",
    "test    rbp, rbp",
    "je      0x140059d87",
    "test    r14, r14",
    "je      0x14005a065",
    "mov     rdx, rdi",
    "mov     rcx, rsi",
    "call    sub_140043de4",
    "xor     eax, eax",
    "xor     r9d, r9d",
    "mov     rdx, rdi",
    "mov     rcx, rsi",
    "lea     r8d, [r9+0x1]",
    "call    sub_140043fa4",
    "jmp     0x140059fd4",
    "mov     ecx, dword [rsp+0x140]",
    "mov     rax, qword [rsp+0x98]",
    "mov     rdx, qword [rsp+0x90]",
    "inc     ecx",
    "add     rax, 0x4",
    "add     rdx, 0x2",
    "cmp     ecx, dword [r12+0x28]",
    "mov     dword [rsp+0x140], ecx",
    "mov     qword [rsp+0x98], rax",
    "mov     qword [rsp+0x90], rdx",
    "mov     ebx, 0x0",
    "jl      0x140059b96",
    "cmp     rax, 0xa",
    "jne     0x140059ded",
    "mov     rax, qword [rsp+0x58]",
    "test    rax, rax",
    "je      0x14005a07a",
    "mov     rdx, r14",
    "mov     rcx, rsi",
    "call    sub_140043de4",
    "xor     r9d, r9d",
    "mov     r8, r14",
    "mov     rcx, r13",
    "lea     edx, [r9+0x13]",
    "call    sub_140043a14",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x14005a039",
    "mov     rdx, qword [rsp+0x58]",
    "mov     r8d, 0x1",
    "mov     rcx, rsi",
    "mov     qword [rbp+0x20], rax",
    "call    sub_140044284",
    "mov     rdx, qword [rsp+0x70]",
    "mov     r8d, 0x1",
    "mov     rcx, rsi",
    "mov     qword [rbp+0x28], rax",
    "call    sub_14004463c",
    "mov     qword [rbp+0x10], rax",
    "test    r14, r14",
    "je      0x14005a03f",
    "lea     rcx, [rel data_1400f45a8]",
    "mov     dword [rsp+0xc0], 0x3",
    "mov     dword [rsp+0xd0], 0x3",
    "mov     qword [rsp+0xb8], rcx",
    "lea     rcx, [rel data_1400f45a4]",
    "mov     qword [rsp+0xc8], rcx",
    "cmp     qword [rsp+0x50], rbx",
    "je      0x140059bd6",
    "mov     r15d, dword [rsp+0x150]",
    "mov     rbp, rbx",
    "cmp     rax, 0x9",
    "jne     0x140059e1d",
    "test    rbp, rbp",
    "je      0x140059e57",
    "mov     rax, qword [rsp+0x70]",
    "test    rax, rax",
    "je      0x14005a095",
    "mov     rdx, rax",
    "mov     rcx, rsi",
    "call    sub_140044bf4",
    "xor     eax, eax",
    "xor     r9d, r9d",
    "mov     rdx, rax",
    "mov     rcx, rsi",
    "lea     r8d, [r9+0x1]",
    "call    sub_140043fa4",
    "jmp     0x14005a03b",
    "mov     rcx, rsi",
    "mov     rax, qword [r12]",
    "mov     rdx, qword [rsp+0xd8]",
    "mov     rcx, qword [rax+0x8]",
    "mov     rdx, qword [rcx+rdx+0x8]",
    "mov     rcx, rsi",
    "test    rdx, rdx",
    "je      0x140059e20",
    "lea     r8, [rsp+0xa0]",
    "lea     edx, [rax+0x31]",
    "xor     r9d, r9d",
    "mov     rcx, rsi",
    "call    sub_140043858",
    "xor     r9d, r9d",
    "lea     r8, [rsp+0xc8]",
    "lea     edx, [r9+0x3b]",
    "mov     rcx, rsi",
    "mov     rbx, rax",
    "call    sub_140043858",
    "mov     r9, rbx",
    "mov     edx, 0x89",
    "mov     r8, rax",
    "mov     rcx, r13",
    "call    sub_140043a14",
    "jmp     0x140059e2f",
    "cmp     byte [rsi+0x61], 0x1",
    "jne     0x14005a0ab",
    "mov     r8d, 0x1",
    "mov     rdx, rax",
    "mov     rcx, rsi",
    "call    sub_140062ba0",
    "mov     qword [rbx+0x18], rax",
    "xor     r9d, r9d",
    "xor     r8d, r8d",
    "lea     edx, [r9+0x75]",
    "call    sub_140043858",
    "xor     r9d, r9d",
    "xor     r8d, r8d",
    "call    sub_140043fa4",
    "jmp     0x140059e2f",
    "mov     rdx, qword [rsp+0x58]",
    "mov     r8, rax",
    "mov     rcx, r13",
    "call    sub_140044974",
    "lea     r8, [rsp+0x78]",
    "xor     r9d, r9d",
    "mov     rdx, rax",
    "mov     rcx, r13",
    "mov     qword [rsp+0x58], rax",
    "call    sub_140044b64",
    "mov     rcx, qword [rsp+0x158]",
    "cmp     r15d, 0x7",
    "je      0x14005a0d0",
    "mov     rdx, rbx",
    "mov     rcx, rsi",
    "call    sub_140059000",
    "jmp     0x140059af3",
    "mov     byte [rbp], 0x86",
    "cmp     r15d, 0xa",
    "jne     0x14005a0ca",
    "mov     byte [rbp], 0x7d",
    "jmp     0x14005a0d4",
    "test    rcx, rcx",
    "jne     0x14005a0ca",
    "mov     rdx, qword [rsp+0x148]",
    "mov     qword [rbp+0x8], rbx",
    "test    rcx, rcx",
    "mov     rax, qword [rdx+0x70]",
    "mov     qword [rbx+0x28], rax",
    "mov     rax, qword [rdx+0x70]",
    "mov     qword [rbx+0x30], rax",
    "mov     rax, qword [rsp+0xe0]",
    "mov     qword [r12+rax*8+0x30], rbx",
    "setne   al",
    "add     al, 0x7c",
    "mov     byte [rbx+0x10], al",
    "mov     byte [rbp], 0x7c",
    "jmp     0x14005a0d4"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}