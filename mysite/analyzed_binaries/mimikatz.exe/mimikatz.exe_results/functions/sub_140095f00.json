{
  "address": "0x140095f00",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "allocate or change RWX memory/e5d60c23edee4683a25ac882b99be25c/be08ffa5ddd942e8ab0706a663121e4b",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "compute adler32 checksum/aded99c950db4d9b8d119cbfc64de8e4",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     qword [rsp+0x20], rbx",
    "mov     qword [rsp+0x10], rdx",
    "mov     qword [rsp+0x8], rcx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x110",
    "and     qword [rsp+0x60], 0x0",
    "mov     rbx, rcx",
    "mov     r12, r8",
    "lea     rcx, [rsp+0x68]",
    "xor     edx, edx",
    "mov     r8d, 0xa0",
    "mov     r14, r9",
    "call    memset",
    "mov     r15, qword [rsp+0x170]",
    "mov     rax, qword [r15]",
    "xor     esi, esi",
    "xor     edi, edi",
    "mov     qword [rsp+0xb8], rax",
    "mov     rax, qword [r15+0x8]",
    "lea     edx, [rsi+0x18]",
    "mov     qword [rsp+0xc0], rax",
    "mov     rax, qword [r15+0x10]",
    "lea     ecx, [rsi+0x40]",
    "xor     ebp, ebp",
    "mov     qword [rsp+0x50], rdi",
    "xor     r13d, r13d",
    "mov     qword [rsp+0xc8], rax",
    "mov     dword [rsp+0x160], ebp",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rsp+0x90], rax",
    "lea     ecx, [rsi+0x1]",
    "test    rax, rax",
    "je      0x140095fc1",
    "mov     edx, 0x28",
    "lea     ecx, [rdx+0x18]",
    "call    qword [rel LocalAlloc]",
    "mov     ebx, 0x2",
    "mov     qword [rsp+0x60], rax",
    "test    rax, rax",
    "je      0x140096023",
    "mov     word [rax+0x2], cx",
    "mov     rax, qword [rsp+0x90]",
    "mov     rdx, rbx",
    "mov     word [rax], cx",
    "mov     rcx, qword [rsp+0x90]",
    "add     rcx, 0x8",
    "call    RtlInitUnicodeString",
    "mov     rdx, qword [rsp+0x158]",
    "lea     rcx, [rsp+0x68]",
    "call    RtlInitUnicodeString",
    "mov     edx, dword [rsp+0x1c8]",
    "mov     r14d, dword [rsp+0x188]",
    "movdqu  xmm5, xmmword [rsp+0x68]",
    "movdqu  xmmword [rsp+0x98], xmm5",
    "movdqu  xmmword [rsp+0x80], xmm5",
    "neg     r12",
    "mov     r12d, dword [rsp+0x180]",
    "mov     ecx, 0x40",
    "sbb     eax, eax",
    "mov     dword [rsp+0xd0], r14d",
    "mov     dword [rsp+0xec], r14d",
    "not     eax",
    "mov     dword [rsp+0xd8], r12d",
    "and     eax, 0x400000",
    "or      eax, 0x40a00000",
    "mov     dword [rsp+0xe8], eax",
    "mov     eax, edx",
    "shl     eax, 0x10",
    "or      eax, 0x1",
    "test    edx, edx",
    "mov     rdx, r12",
    "cmovne  ebx, eax",
    "mov     dword [rsp+0xf0], ebx",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rsp+0xe0], rax",
    "test    rax, rax",
    "je      0x1400960d2",
    "mov     word [rax+0x2], bx",
    "mov     rax, qword [rsp+0x60]",
    "lea     rdx, [rel data_140103580]  {u\"krbtgt\"}",
    "mov     word [rax], bx",
    "mov     rcx, qword [rsp+0x60]",
    "test    r12, r12",
    "cmovne  rdx, r12",
    "add     rcx, 0x8",
    "call    RtlInitUnicodeString",
    "mov     rcx, qword [rsp+0x60]",
    "mov     rdx, qword [rsp+0x158]",
    "test    r14, r14",
    "cmovne  rdx, r14",
    "add     rcx, 0x18",
    "call    RtlInitUnicodeString",
    "mov     eax, r14d",
    "sub     eax, 0x3",
    "je      0x1400960f9",
    "mov     edx, dword [rsp+0xd8]",
    "mov     rcx, rax",
    "call    CDGenerateRandomBits",
    "mov     ebx, 0xffffff7b",
    "sub     eax, 0xe",
    "je      0x1400960f2",
    "mov     ecx, 0x1",
    "call    qword [rel Ordinal_WLDAP32_304]",
    "test    rax, rax",
    "je      0x14009622b",
    "mov     eax, dword [rsp+0x1c0]",
    "mov     r9, qword [rsp+0x198]",
    "mov     r8, qword [rsp+0x158]",
    "mov     dword [rsp+0x48], eax",
    "mov     rax, qword [rsp+0x1b8]",
    "mov     rcx, r15",
    "mov     qword [rsp+0x40], rax",
    "mov     eax, dword [rsp+0x1b0]",
    "mov     dword [rsp+0x38], eax",
    "mov     rax, qword [rsp+0x1a8]",
    "mov     qword [rsp+0x30], rax",
    "mov     eax, dword [rsp+0x1a0]",
    "mov     dword [rsp+0x28], eax",
    "mov     qword [rsp+0x20], rdx",
    "mov     rdx, qword [rsp+0x150]",
    "call    sub_140097830",
    "mov     rsi, rax",
    "test    rax, rax",
    "je      0x140096314",
    "mov     ebx, 0xf",
    "jmp     0x1400960fe",
    "cmp     eax, 0x1",
    "je      0x1400960eb",
    "xor     ebx, ebx",
    "lea     rcx, [rsp+0x60]",
    "mov     r9, rax",
    "mov     r8d, ebp",
    "mov     rdx, rdi",
    "call    sub_14009859c",
    "mov     rbx, rax",
    "jmp     0x14009622d",
    "mov     rcx, qword [rsp+0xe0]",
    "test    rcx, rcx",
    "je      0x140096327",
    "mov     rcx, qword [rsp+0x1d0]",
    "lea     rax, [rsp+0x160]",
    "mov     r9d, ebx",
    "mov     qword [rsp+0x30], rax",
    "lea     rax, [rsp+0x50]",
    "xor     r8d, r8d",
    "mov     qword [rsp+0x28], rax",
    "mov     qword [rsp+0x20], rcx",
    "mov     rcx, rsi",
    "xor     edx, edx",
    "call    sub_140097368",
    "test    eax, eax",
    "je      0x140096221",
    "mov     rdx, qword [rsp+0x190]",
    "test    rdx, rdx",
    "je      0x1400961f9",
    "mov     ebx, 0x10",
    "jmp     0x1400960fe",
    "mov     ebx, 0xffffff76",
    "jmp     0x1400960fe",
    "test    rdi, rdi",
    "je      0x140096306",
    "lea     rcx, [rel data_140105148]  {u\" * EncTicketPart generated\\n\"}",
    "call    sub_14000c030",
    "mov     ebp, dword [rbx]",
    "mov     r12, qword [rbx+0x8]",
    "lea     rdx, [rsp+0x170]",
    "mov     ecx, r14d",
    "call    CDLocateCSystem",
    "test    eax, eax",
    "js      0x1400962e1",
    "test    rbx, rbx",
    "je      0x1400962f8",
    "mov     rcx, qword [rsp+0x90]",
    "test    rcx, rcx",
    "je      0x14009633a",
    "call    qword [rel LocalFree]",
    "mov     rdi, qword [rsp+0x50]",
    "jmp     0x1400962f8",
    "lea     rcx, [rel data_140105100]  {u\" * PAC generated\\n\"}",
    "call    sub_14000c030",
    "mov     ebp, dword [rsp+0x160]",
    "mov     rdi, qword [rsp+0x50]",
    "mov     r9, qword [rsp+0x178]",
    "mov     edx, ebp",
    "mov     rcx, rdi",
    "mov     r8d, ebx",
    "mov     dword [rsp+0x20], r12d",
    "call    sub_1400976c4",
    "test    eax, eax",
    "js      0x1400962f8",
    "test    rsi, rsi",
    "je      0x140096314",
    "mov     rcx, rdi",
    "call    qword [rel LocalFree]",
    "lea     rcx, [rel data_1401051f0]  {u\"ERROR kuhl_m_kerberos_golden_dat\u2026\"}",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0x180]",
    "mov     rcx, qword [rsp+0x178]",
    "lea     rax, [rsp+0x170]",
    "mov     qword [rsp+0x30], rax",
    "lea     rax, [rsp+0xf8]",
    "mov     r9d, ebp",
    "mov     qword [rsp+0x28], rax",
    "lea     rax, [rsp+0x100]",
    "mov     r8, r12",
    "mov     qword [rsp+0x20], rax",
    "call    sub_140095e2c",
    "test    eax, eax",
    "js      0x1400962e1",
    "mov     rcx, qword [rsp+0x60]",
    "test    rcx, rcx",
    "je      0x14009634a",
    "call    qword [rel LocalFree]",
    "lea     rcx, [rel data_140105128]  {u\" * PAC signed\\n\"}",
    "call    sub_14000c030",
    "mov     rcx, rsi",
    "call    qword [rel LocalFree]",
    "lea     rcx, [rel data_140105180]  {u\" * EncTicketPart encrypted\\n\"}",
    "call    sub_14000c030",
    "lea     rcx, [rsp+0x60]",
    "xor     edx, edx",
    "call    sub_1400981f0",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x1400962d1",
    "mov     rax, r13",
    "mov     rbx, qword [rsp+0x168]",
    "add     rsp, 0x110",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "retn    ",
    "call    qword [rel LocalFree]",
    "mov     rcx, qword [rsp+0x100]",
    "call    qword [rel LocalFree]",
    "jmp     0x1400962ef",
    "lea     rcx, [rel data_1401051b8]  {u\" * KrbCred generated\\n\"}",
    "call    sub_14000c030",
    "mov     rcx, rbx",
    "call    qword [rel Ordinal_WLDAP32_54]"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}