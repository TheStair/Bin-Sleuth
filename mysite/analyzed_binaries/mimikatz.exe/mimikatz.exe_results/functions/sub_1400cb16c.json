{
  "address": "0x1400cb16c",
  "rules": [
    "contain loop",
    "hash data with CRC32/dc8063c9cb1c41b9a5bafe66f5117ac4",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using Curve25519/4be2ead1b08a4c049dae9c8694881d76",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "hide graphical window from taskbar/c26bad2600334fd9a84ba1d9de3384f6",
    "check for trap flag exception/f2973fbf4b89419fb73ecd274d9581c2",
    "decompress data using aPLib/88da69e00a6e49ce8c080be3a0beeb89"
  ],
  "disassembly": [
    "mov     qword [rsp+0x20 {__saved_rbx}], rbx",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x2a0",
    "mov     rax, qword [rel data_140139000]",
    "xor     rax, rsp {var_2d8}",
    "mov     qword [rsp+0x298 {var_40}], rax",
    "xor     ebx, ebx  {0x0}",
    "mov     rsi, rdx",
    "mov     r15, r8",
    "mov     rbp, rcx",
    "mov     qword [rsp+0x68 {var_270}], rcx",
    "mov     r11d, ebx  {0x0}",
    "mov     dword [rsp+0x54 {var_284}], ebx  {0x0}",
    "mov     r12d, ebx  {0x0}",
    "mov     r10d, ebx  {0x0}",
    "mov     dword [rsp+0x40 {var_298}], ebx  {0x0}",
    "mov     edx, ebx  {0x0}",
    "mov     dword [rsp+0x34 {var_2a4}], ebx  {0x0}",
    "mov     r9d, ebx  {0x0}",
    "mov     dword [rsp+0x30 {var_2a8}], ebx  {0x0}",
    "mov     dword [rsp+0x58 {var_280}], ebx  {0x0}",
    "mov     dword [rsp+0x60 {var_278}], ebx  {0x0}",
    "mov     dword [rsp+0x50 {var_288}], ebx  {0x0}",
    "cmp     rcx, rbx",
    "jne     0x1400cb1fc",
    "cmp     rsi, rbx",
    "je      0x1400cb1d4",
    "call    qword [rel _errno]",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "xor     edx, edx  {0x0}",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rsp+0x20 {var_2b8_1}], rbx  {0x0}",
    "mov     dword [rax], 0x16",
    "call    sub_1400c9168",
    "or      eax, 0xffffffff  {0xffffffff}",
    "jmp     0x1400cbb47",
    "mov     dil, byte [rsi]",
    "mov     dword [rsp+0x38 {result_1}], ebx  {0x0}",
    "mov     r13d, ebx  {0x0}",
    "mov     dword [rsp+0x48 {var_290}], ebx  {0x0}",
    "mov     r8d, ebx  {0x0}",
    "mov     qword [rsp+0x78 {var_260_1}], rbx  {0x0}",
    "cmp     dil, bl",
    "je      0x1400cbb43",
    "mov     rcx, qword [rsp+0x298 {var_40}]",
    "xor     rcx, rsp {var_2d8}",
    "call    sub_1400c9220",
    "mov     rbx, qword [rsp+0x2f8 {__saved_rbx}]",
    "add     rsp, 0x2a0",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     eax, dword [rsp+0x38 {result_1}]",
    "mov     rbx, qword [rsp+0x80 {var_258}]",
    "or      r14, 0xffffffffffffffff",
    "xor     ecx, ecx  {0x0}",
    "xor     edi, edi  {0x0}",
    "cmp     r8d, edi",
    "je      0x1400cbb43",
    "lea     eax, [rdi-0x20]",
    "cmp     al, 0x58",
    "ja      0x1400cb25f",
    "cmp     r8d, 0x7",
    "je      0x1400cbb43",
    "xor     eax, eax",
    "mov     ecx, eax  {0x0}",
    "lea     rcx, [rel data_1400d2670]",
    "movsx   rax, dil",
    "movzx   ecx, byte [rax+rcx-0x20]",
    "and     ecx, 0xf",
    "jmp     0x1400cb263",
    "call    qword [rel _errno]",
    "mov     qword [rsp+0x20 {var_2b8_2}], rdi  {0x0}",
    "mov     dword [rax], 0x16",
    "jmp     0x1400cbb2f",
    "call    qword [rel _errno]",
    "mov     dword [rax], 0x16",
    "xor     eax, eax  {0x0}",
    "mov     qword [rsp+0x20 {var_2b8_4}], rax  {0x0}",
    "xor     eax, eax  {0x0}",
    "mov     ecx, r8d",
    "cmp     r8d, eax",
    "je      0x1400cbac1",
    "movsxd  rax, ecx",
    "lea     rcx, [rax+rax*8]",
    "movsxd  rax, r8d",
    "add     rcx, rax",
    "lea     rax, [rel data_1400d2670]",
    "movzx   r8d, byte [rcx+rax]",
    "shr     r8d, 0x4",
    "mov     dword [rsp+0x5c {var_27c_1}], r8d",
    "cmp     r8d, 0x8",
    "je      0x1400cbb1c",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "xor     edx, edx  {0x0}",
    "xor     ecx, ecx  {0x0}",
    "call    sub_1400c9168",
    "mov     eax, r14d  {0xffffffff}",
    "jmp     0x1400cbb47",
    "xor     ecx, ecx  {0x0}",
    "sub     ecx, 0x1",
    "je      0x1400cba96",
    "lea     r8, [rsp+0x38 {result_1}]",
    "mov     rdx, rbp",
    "mov     cl, dil",
    "call    sub_1400cae6c",
    "jmp     0x1400cb8d4",
    "lea     r8, [rsp+0x38 {result_1}]",
    "mov     rdx, rbp",
    "mov     cl, dil",
    "call    sub_1400cae6c",
    "mov     dil, byte [rsi]",
    "xor     eax, eax  {0x0}",
    "inc     rsi",
    "cmp     dil, al",
    "je      0x1400cbb1c",
    "xor     edi, edi  {0x0}",
    "mov     edx, r14d  {0xffffffff}",
    "mov     dword [rsp+0x58 {var_280}], edi  {0x0}",
    "mov     dword [rsp+0x60 {var_278}], edi  {0x0}",
    "mov     r10d, edi  {0x0}",
    "mov     dword [rsp+0x40 {var_298}], edi  {0x0}",
    "mov     r9d, edi  {0x0}",
    "mov     dword [rsp+0x30 {var_2a8}], edi  {0x0}",
    "mov     r12d, edi  {0x0}",
    "mov     dword [rsp+0x34 {var_2a4}], edx  {0xffffffff}",
    "mov     dword [rsp+0x50 {var_288}], edi  {0x0}",
    "jmp     0x1400cb8ec",
    "sub     ecx, 0x1",
    "je      0x1400cba46",
    "mov     edx, dword [rsp+0x34 {var_2a4}]",
    "mov     r8d, dword [rsp+0x5c {var_27c_1}]",
    "mov     r9d, dword [rsp+0x30 {var_2a8}]",
    "mov     r10d, dword [rsp+0x40 {var_298}]",
    "mov     r11d, dword [rsp+0x54 {var_284}]",
    "mov     dil, byte [rsi]",
    "xor     ecx, ecx  {0x0}",
    "cmp     dil, cl",
    "jne     0x1400cb22e",
    "cmp     dil, 0x20",
    "je      0x1400cba8d",
    "sub     ecx, 0x1",
    "je      0x1400cba09",
    "inc     rsi",
    "cmp     dword [rsp+0x38 {result_1}], ecx",
    "mov     qword [rsp+0x80 {var_258_1}], rsi",
    "jl      0x1400cb8fa",
    "or      r12d, 0x2",
    "jmp     0x1400cb8ec",
    "cmp     dil, 0x23",
    "je      0x1400cba83",
    "cmp     dil, 0x2a",
    "jne     0x1400cba2f",
    "sub     ecx, 0x1",
    "je      0x1400cb9fe",
    "bts     r12d, 0x7",
    "jmp     0x1400cb8ec",
    "cmp     dil, 0x2b",
    "je      0x1400cba7a",
    "lea     ecx, [r10+r10*4]",
    "movsx   eax, dil",
    "lea     r10d, [rax+rcx*2-0x30]",
    "mov     r10d, dword [r15]",
    "add     r15, 0x8",
    "xor     edi, edi  {0x0}",
    "cmp     r10d, edi",
    "mov     dword [rsp+0x40 {var_298}], r10d",
    "jge     0x1400cb8ec",
    "xor     edx, edx  {0x0}",
    "sub     ecx, 0x1",
    "je      0x1400cb9d1",
    "or      r12d, 0x1",
    "jmp     0x1400cb8ec",
    "cmp     dil, 0x2d",
    "je      0x1400cba71",
    "or      r12d, 0x4",
    "neg     r10d",
    "jmp     0x1400cba3c",
    "cmp     dil, 0x2a",
    "jne     0x1400cb9f1",
    "sub     ecx, 0x1",
    "je      0x1400cb925",
    "or      r12d, 0x4",
    "jmp     0x1400cb8ec",
    "cmp     dil, 0x30",
    "jne     0x1400cb8ec",
    "mov     dword [rsp+0x40 {var_298}], r10d",
    "jmp     0x1400cb8ec",
    "lea     ecx, [rdx+rdx*4]",
    "movsx   eax, dil",
    "lea     edx, [rax+rcx*2-0x30]",
    "jmp     0x1400cba00",
    "mov     edx, dword [r15]",
    "add     r15, 0x8",
    "xor     edi, edi  {0x0}",
    "cmp     edx, edi",
    "mov     dword [rsp+0x34 {var_2a4}], edx",
    "jge     0x1400cb8ec",
    "cmp     dil, 0x49",
    "je      0x1400cb95f",
    "cmp     ecx, 0x1",
    "jne     0x1400cb8ec",
    "or      r12d, 0x8",
    "jmp     0x1400cb8ec",
    "mov     dword [rsp+0x34 {var_2a4}], edx",
    "jmp     0x1400cb8ec",
    "mov     edx, r14d  {0xffffffff}",
    "jmp     0x1400cba00",
    "mov     al, byte [rsi]",
    "bts     r12d, 0xf",
    "cmp     al, 0x36",
    "jne     0x1400cb97e",
    "cmp     dil, 0x68",
    "je      0x1400cb959",
    "movsx   eax, dil",
    "cmp     eax, 0x64",
    "jg      0x1400cb49b",
    "cmp     al, 0x33",
    "jne     0x1400cb996",
    "cmp     byte [rsi+0x1], 0x34",
    "jne     0x1400cb97e",
    "or      r12d, 0x20",
    "jmp     0x1400cb8ec",
    "cmp     dil, 0x6c",
    "je      0x1400cb944",
    "cmp     eax, 0x65",
    "jl      0x1400cb771",
    "je      0x1400cb575",
    "cmp     al, 0x64",
    "je      0x1400cb8ec",
    "cmp     byte [rsi+0x1], 0x32",
    "jne     0x1400cb996",
    "add     rsi, 0x2",
    "bts     r12d, 0xf",
    "jmp     0x1400cb8ec",
    "cmp     byte [rsi], 0x6c",
    "jne     0x1400cb953",
    "cmp     dil, 0x77",
    "jne     0x1400cb8ec",
    "mov     esi, dword [rsp+0x30 {var_2a8}]",
    "cmp     eax, 0x67",
    "jle     0x1400cb6a0",
    "or      r12d, 0x40",
    "cmp     eax, 0x41",
    "je      0x1400cb487",
    "cmp     al, 0x69",
    "je      0x1400cb8ec",
    "add     rsi, 0x2",
    "btr     r12d, 0xf",
    "jmp     0x1400cb8ec",
    "or      r12d, 0x10",
    "jmp     0x1400cb8ec",
    "inc     rsi",
    "bts     r12d, 0xc",
    "jmp     0x1400cb8ec",
    "bts     r12d, 0xb",
    "jmp     0x1400cb8ec",
    "xor     esi, esi  {0x0}",
    "test    r12b, 0x40",
    "je      0x1400cb7b5",
    "mov     r13d, dword [rsp+0x58 {var_280}]",
    "cmp     eax, 0x69",
    "je      0x1400cb575",
    "mov     rdi, qword [r15]",
    "add     r15, 0x8",
    "jmp     0x1400cb5c4",
    "bt      r12d, 0xc",
    "jae     0x1400cb596",
    "mov     r13d, 0x1",
    "add     dil, 0x20",
    "mov     dword [rsp+0x58 {var_280}], r13d  {0x1}",
    "jmp     0x1400cb6a5",
    "cmp     eax, 0x43",
    "je      0x1400cb417",
    "cmp     al, 0x6f",
    "je      0x1400cb8ec",
    "mov     rbp, qword [rsp+0x68 {var_270}]",
    "mov     rsi, qword [rsp+0x80 {var_258_1}]",
    "mov     rcx, r11",
    "call    qword [rel free]",
    "mov     qword [rsp+0x78 {var_260_1}], rsi  {0x0}",
    "mov     ebp, dword [rsp+0x40 {var_298}]",
    "mov     rdi, qword [rsp+0x68 {var_270}]",
    "sub     ebp, r13d",
    "sub     ebp, esi",
    "test    r12b, 0xc",
    "jne     0x1400cb7da",
    "bt      r12d, 0x8",
    "jae     0x1400cb794",
    "jne     0x1400cb6d2",
    "lea     edx, [rax+0x6]",
    "jmp     0x1400cb711",
    "cmp     eax, 0x6e",
    "je      0x1400cbb1c",
    "xor     r13d, r13d  {0x0}",
    "test    r12b, 0x40",
    "je      0x1400cb5da",
    "add     r15, 0x8",
    "test    r12b, 0x20",
    "je      0x1400cb5b4",
    "xor     eax, eax  {0x0}",
    "mov     ecx, 0x200",
    "or      r12d, 0x40",
    "cmp     edx, eax",
    "lea     rbx, [rsp+0x90 {var_248}]",
    "mov     ebp, ecx  {0x200}",
    "jge     0x1400cb6c3",
    "test    r12d, 0x830",
    "jne     0x1400cb425",
    "cmp     eax, 0x45",
    "je      0x1400cb487",
    "cmp     al, 0x75",
    "je      0x1400cb8ec",
    "lea     r9, [rsp+0x38 {result_1}]",
    "lea     rcx, [rsp+0x3c {var_29c}]",
    "mov     r8, rdi",
    "mov     edx, esi",
    "call    sub_1400caf08",
    "test    r12b, 0x8",
    "je      0x1400cb80b",
    "lea     r9, [rsp+0x38 {result_1}]",
    "mov     r8, rdi",
    "mov     edx, ebp",
    "mov     cl, 0x20",
    "call    write_multi_char",
    "test    r12b, 0x1",
    "je      0x1400cb7a1",
    "mov     byte [rsp+0x3c {var_29c}], 0x2d",
    "jmp     0x1400cb7ac",
    "cmp     edx, ecx",
    "cmovg   edx, ecx  {0x200}",
    "cmp     edx, 0xa3",
    "mov     dword [rsp+0x34 {var_2a4}], edx",
    "jle     0x1400cb715",
    "cmp     dil, 0x67",
    "jne     0x1400cb715",
    "mov     dword [rsp+0x34 {var_2a4}], edx",
    "cmp     eax, 0x6f",
    "je      0x1400cb563",
    "bt      r12d, 0xf",
    "jb      0x1400cb5ea",
    "cmp     rdi, r13",
    "jge     0x1400cb5da",
    "test    r12b, 0x40",
    "je      0x1400cb5c0",
    "test    r12b, 0x40",
    "je      0x1400cb5ad",
    "add     r15, 0x8",
    "test    r12d, 0x810",
    "je      0x1400cb464",
    "bts     r12d, 0xb",
    "cmp     eax, 0x47",
    "je      0x1400cb487",
    "cmp     al, 0x78",
    "je      0x1400cb8ec",
    "xor     eax, eax  {0x0}",
    "cmp     dword [rsp+0x50 {var_288}], eax",
    "je      0x1400cb879",
    "test    r12b, 0x4",
    "jne     0x1400cb80b",
    "test    r12b, 0x2",
    "je      0x1400cb7b5",
    "mov     byte [rsp+0x3c {var_29c}], 0x2b",
    "jmp     0x1400cb7ac",
    "mov     esi, 0x1",
    "mov     dword [rsp+0x30 {var_2a8}], esi  {0x1}",
    "test    r12b, r12b",
    "jns     0x1400cb724",
    "lea     esi, [rdx+0x15d]",
    "movsxd  rcx, esi",
    "call    qword [rel malloc]",
    "mov     r11, rax",
    "mov     qword [rsp+0x78 {var_260_1}], rax",
    "xor     eax, eax  {0x0}",
    "cmp     r11, rax",
    "je      0x1400cb70c",
    "mov     edx, 0x1",
    "jmp     0x1400cb711",
    "mov     rax, qword [r15]",
    "add     r15, 0x8",
    "mov     dword [rsp+0x28 {var_2b0_1}], r13d",
    "mov     dword [rsp+0x20 {var_2b8}], edx",
    "lea     rcx, [rsp+0x48 {var_290}]",
    "movsx   r9d, dil",
    "movsxd  r8, ebp",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x48 {var_290}], rax",
    "call    sub_1400caf88",
    "cmp     byte [rbx], 0x2d",
    "jne     0x1400cb75a",
    "bts     r13d, 0x7",
    "mov     dword [rsp+0x58 {var_280}], r13d",
    "mov     r8d, 0x8",
    "test    r12b, r12b",
    "jns     0x1400cb57f",
    "cmp     eax, 0x70",
    "je      0x1400cb52d",
    "mov     r14d, dword [rsp+0x34 {var_2a4}]",
    "cmp     r14d, r13d",
    "jge     0x1400cb5fc",
    "bt      r12d, 0xc",
    "jb      0x1400cb5ea",
    "neg     rdi",
    "bts     r12d, 0x8",
    "mov     edi, dword [r15-0x8]",
    "movsxd  rdi, dword [r15-0x8]",
    "jmp     0x1400cb5c4",
    "movzx   edi, word [r15-0x8]",
    "jmp     0x1400cb5c4",
    "movsx   rdi, word [r15-0x8]",
    "jmp     0x1400cb5c4",
    "mov     al, byte [r15-0x8]",
    "mov     r13d, 0x1",
    "mov     byte [rsp+0x90 {var_248}], al",
    "mov     dword [rsp+0x48 {var_290}], r13d  {0x1}",
    "movzx   r9d, word [r15-0x8]",
    "lea     rdx, [rsp+0x90 {var_248}]",
    "lea     rcx, [rsp+0x48 {var_290}]",
    "mov     r8d, 0x200",
    "call    sub_1400cb064",
    "mov     r13d, dword [rsp+0x48 {var_290}]",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "je      0x1400cb47a",
    "cmp     eax, 0x53",
    "je      0x1400cb3cb",
    "cmp     al, 0x58",
    "je      0x1400cb8ec",
    "lea     r9, [rsp+0x38 {result_1}]",
    "mov     r8, rdi",
    "mov     edx, r13d",
    "mov     rcx, rbx",
    "call    sub_1400caf08",
    "cmp     r13d, eax",
    "jle     0x1400cb879",
    "lea     r9, [rsp+0x38 {result_1}]",
    "mov     r8, rdi",
    "mov     edx, ebp",
    "mov     cl, 0x30",
    "call    write_multi_char",
    "mov     byte [rsp+0x3c {var_29c}], 0x20",
    "mov     edx, 0xa3",
    "mov     edx, dword [rsp+0x34 {var_2a4}]",
    "mov     rbx, r11",
    "mov     ebp, esi",
    "jmp     0x1400cb715",
    "xor     eax, eax  {0x0}",
    "mov     rcx, r14  {-0x1}",
    "mov     rdi, rbx",
    "repne scasb byte [rdi]  {0x0}",
    "not     rcx",
    "dec     rcx",
    "bts     r12d, 0x8",
    "inc     rbx",
    "bt      r12d, 0xf",
    "jb      0x1400cb58d",
    "bts     r12d, 0x9",
    "jmp     0x1400cb57f",
    "mov     dword [rsp+0x34 {var_2a4}], 0x10",
    "bts     r12d, 0xf",
    "cmp     eax, 0x73",
    "je      0x1400cb3d9",
    "mov     eax, 0x200",
    "and     r12d, 0xfffffff7",
    "cmp     r14d, eax",
    "cmovg   r14d, eax  {0x200}",
    "mov     r14d, 0x1",
    "jmp     0x1400cb60c",
    "mov     edi, edi",
    "lea     rbx, [rsp+0x90 {var_248}]",
    "jmp     0x1400cb771",
    "mov     dword [rsp+0x60 {var_278}], 0x1",
    "jmp     0x1400cb47a",
    "test    r12d, 0x830",
    "jne     0x1400cb3d9",
    "cmp     eax, 0x58",
    "je      0x1400cb53a",
    "xor     ecx, ecx  {0x0}",
    "mov     dword [rsp+0x5c {var_27c_1}], ecx  {0x0}",
    "jmp     0x1400cbac3",
    "mov     r11, qword [rsp+0x78 {var_260_1}]",
    "cmp     r11, rsi",
    "je      0x1400cb8c7",
    "test    r12b, 0x4",
    "je      0x1400cb8af",
    "mov     rsi, rbx",
    "mov     edi, r13d",
    "lea     eax, [r11+0x51]",
    "mov     byte [rsp+0x3c {var_29c}], 0x30",
    "lea     r9d, [r8-0xe]  {0x2}",
    "mov     byte [rsp+0x3d {var_29b_1}], al",
    "jmp     0x1400cb57f",
    "mov     rbx, qword [r15]",
    "cmp     edx, r14d",
    "mov     eax, edx",
    "mov     ecx, 0x7fffffff",
    "cmove   eax, ecx  {0x7fffffff}",
    "add     r15, 0x8",
    "xor     esi, esi  {0x0}",
    "test    r12d, 0x810",
    "je      0x1400cb508",
    "cmp     eax, 0x75",
    "je      0x1400cb579",
    "xor     edx, edx  {0x0}",
    "mov     rax, rdi",
    "movsxd  rcx, r8d",
    "div     rcx",
    "mov     rdi, rax",
    "lea     eax, [rdx+0x30]",
    "cmp     eax, 0x39",
    "jle     0x1400cb64e",
    "cmp     rdi, r13",
    "je      0x1400cb655",
    "mov     rax, rdi",
    "lea     rbx, [rsp+0x28f {var_49}]",
    "neg     rax",
    "sbb     ecx, ecx",
    "and     ecx, r9d",
    "mov     esi, ecx",
    "mov     dword [rsp+0x30 {var_2a8}], ecx",
    "bts     r12d, 0xb",
    "mov     r11d, 0x7",
    "cmp     eax, 0x5a",
    "je      0x1400cb341",
    "mov     dword [rsp+0x50 {var_288}], ecx  {0x0}",
    "movzx   ecx, dil",
    "call    qword [rel isleadbyte]",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "je      0x1400cbaf4",
    "lea     r9, [rsp+0x38 {result_1}]",
    "mov     r8, rdi",
    "mov     edx, ebp",
    "mov     cl, 0x20",
    "call    write_multi_char",
    "jmp     0x1400cb8af",
    "mov     dword [rsp+0x38 {result_1}], r14d  {0xffffffff}",
    "mov     edx, dword [rsp+0x70 {var_268}]",
    "cmp     edx, ecx",
    "je      0x1400cb86d",
    "cmp     rbx, rsi",
    "cmove   rbx, qword [rel data_140139010]",
    "mov     rcx, rbx",
    "jmp     0x1400cb522",
    "cmp     rbx, rsi",
    "mov     dword [rsp+0x50 {var_288}], 0x1",
    "cmove   rbx, qword [rel data_140139018]",
    "mov     rcx, rbx",
    "jmp     0x1400cb4f9",
    "mov     r8d, 0xa",
    "cmp     eax, 0x78",
    "jne     0x1400cb771",
    "mov     byte [rbx], al",
    "dec     rbx",
    "jmp     0x1400cb625",
    "add     eax, r11d",
    "lea     rax, [rsp+0x28f {var_49}]",
    "mov     dword [rsp+0x34 {var_2a4}], r14d",
    "mov     r14, 0xffffffffffffffff",
    "sub     eax {var_49}, ebx",
    "inc     rbx",
    "bt      r12d, 0x9",
    "mov     r13d, eax",
    "mov     dword [rsp+0x48 {var_290}], eax",
    "jae     0x1400cb775",
    "mov     rcx, qword [r15]",
    "add     r15, 0x8",
    "xor     esi, esi  {0x0}",
    "cmp     rcx, rsi",
    "je      0x1400cb3ac",
    "cmp     eax, 0x61",
    "je      0x1400cb6a0",
    "xor     esi, esi  {0x0}",
    "cmp     dword [rsp+0x38 {result_1}], esi",
    "jl      0x1400cb8af",
    "mov     r8, qword [rsp+0x68 {var_270}]",
    "lea     r9, [rsp+0x38 {result_1}]",
    "lea     rcx, [rsp+0x290 {var_48}]",
    "call    sub_1400caf08",
    "xor     eax, eax  {0x0}",
    "cmp     edi, eax",
    "jne     0x1400cb81e",
    "cmp     eax, esi",
    "jne     0x1400cb518",
    "cmp     eax, esi",
    "jne     0x1400cb4ee",
    "lea     r11d, [rax-0x51]",
    "jmp     0x1400cb540",
    "mov     ecx, r14d",
    "dec     r14d",
    "cmp     ecx, r13d",
    "jg      0x1400cb635",
    "cmp     dword [rsp+0x60 {var_278}], 0x0",
    "jne     0x1400cb8ad",
    "test    eax, eax",
    "je      0x1400cb68d",
    "mov     rbx, qword [rel data_140139010]",
    "xor     eax, eax  {0x0}",
    "mov     rcx, r14  {-0x1}",
    "mov     rdi, rbx",
    "repne scasb byte [rdi]  {0x0}",
    "not     rcx",
    "dec     rcx",
    "mov     r13, rcx",
    "jmp     0x1400cb76d",
    "mov     rbx, qword [rcx+0x8]",
    "cmp     rbx, rsi",
    "je      0x1400cb3ac",
    "cmp     eax, 0x63",
    "je      0x1400cb425",
    "movzx   r9d, word [rsi]",
    "lea     rdx, [rsp+0x290 {var_48}]",
    "lea     rcx, [rsp+0x70 {var_268}]",
    "mov     r8d, 0x6",
    "dec     edi",
    "add     rsi, 0x2",
    "call    sub_1400cb064",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x1400cb86d",
    "jmp     0x1400cb872",
    "dec     eax",
    "cmp     byte [rcx], sil",
    "je      0x1400cb526",
    "sub     ecx, ebx",
    "jmp     0x1400cb76a",
    "dec     eax",
    "cmp     word [rcx], si",
    "je      0x1400cb4fd",
    "sub     rcx, rbx",
    "sar     rcx, 0x1",
    "jmp     0x1400cb76a",
    "mov     dword [rsp+0x54 {var_284}], r11d",
    "mov     r8d, 0x10",
    "test    r12b, r12b",
    "jns     0x1400cb57f",
    "dec     rbx",
    "inc     r13d",
    "mov     byte [rbx], 0x30",
    "mov     dword [rsp+0x48 {var_290}], r13d",
    "jmp     0x1400cb775",
    "cmp     byte [rbx], 0x30",
    "je      0x1400cb775",
    "mov     dword [rsp+0x48 {var_290}], ecx",
    "movzx   eax, word [rcx]",
    "cmp     word [rcx+0x2], ax",
    "jb      0x1400cbb09",
    "jmp     0x1400cb771",
    "mov     rdi, qword [rsp+0x68 {var_270}]",
    "jmp     0x1400cb88c",
    "inc     rcx",
    "mov     r13d, ecx",
    "add     rcx, 0x2",
    "call    qword [rel _errno]",
    "mov     qword [rsp+0x20 {var_2b8_3}], rsi  {0x0}",
    "mov     dword [rax], 0x16",
    "jmp     0x1400cbb2f",
    "bt      r12d, 0xb",
    "movzx   r13d, ax",
    "jae     0x1400cb39e",
    "mov     dword [rsp+0x50 {var_288}], esi  {0x0}",
    "mov     dword [rsp+0x48 {var_290}], r13d",
    "jmp     0x1400cb771",
    "mov     eax, r13d",
    "not     eax",
    "test    al, 0x1",
    "je      0x1400cbb09",
    "mov     eax, ebx",
    "not     eax",
    "test    al, 0x1",
    "je      0x1400cbb09",
    "shr     r13d, 0x1",
    "mov     dword [rsp+0x50 {var_288}], 0x1",
    "mov     dword [rsp+0x48 {var_290}], r13d",
    "jmp     0x1400cb771"
  ],
  "high_level_IL": [
    "void var_2d8",
    "int64_t rax_1 = data_140139000 ^ &var_2d8",
    "char* rsi = arg2",
    "void* r15 = arg3",
    "int64_t* rbp = arg1",
    "int32_t r11 = 0",
    "int32_t var_284 = 0",
    "int32_t r12 = 0",
    "uint64_t r10 = 0",
    "int32_t var_298 = 0",
    "uint64_t rdx = 0",
    "int32_t var_2a4 = 0",
    "int32_t r9 = 0",
    "int32_t var_2a8 = 0",
    "int32_t var_280 = 0",
    "int32_t var_278 = 0",
    "int32_t var_288 = 0",
    "uint64_t result",
    "if (arg1 != 0 && rsi != 0)",
    "int64_t rdi",
    "rdi.b = *rsi",
    "int32_t result_1 = 0",
    "uint32_t r13_1 = 0",
    "uint32_t var_290 = 0",
    "uint32_t r8_1 = 0",
    "int16_t* var_260_1 = nullptr",
    "if (rdi.b != 0)",
    "int16_t* var_258",
    "int16_t* rbx_1 = var_258",
    "while (true)",
    "rsi = &rsi[1]",
    "if (result_1 s>= 0)",
    "int32_t rcx_1",
    "if ((rdi - 0x20).b u> 0x58)",
    "rcx_1 = 0",
    "rcx_1 = zx.d(data_1400d2620[0x30][sx.q(rdi.b)]) & 0xf",
    "r8_1 = zx.d(*(sx.q(rcx_1) * 9 + sx.q(r8_1) + &data_1400d2670)) u>> 4",
    "uint32_t var_27c_1 = r8_1",
    "if (r8_1 == 8)",
    "label_1400cbb22:",
    "*_errno() = 0x16",
    "int64_t var_2b8_4 = 0",
    "goto label_1400cbb39",
    "if (r8_1 == 0)",
    "goto label_1400cbac3",
    "if (r8_1 != 1)",
    "if (r8_1 == 2)",
    "if (rdi.b == 0x20)",
    "r12 |= 2",
    "if (rdi.b == 0x23)",
    "r12 |= 0x80",
    "if (rdi.b == 0x2b)",
    "r12 |= 1",
    "if (rdi.b == 0x2d)",
    "r12 |= 4",
    "if (rdi.b == 0x30)",
    "r12 |= 8",
    "goto label_1400cb8ec",
    "if (r8_1 == 3)",
    "if (rdi.b != 0x2a)",
    "r10 = zx.q(sx.d(rdi.b) + ((r10 * 5).d << 1) - 0x30)",
    "var_298 = r10.d",
    "r10 = zx.q(*r15)",
    "r15 += 8",
    "var_298 = r10.d",
    "if (r10.d s< 0)",
    "r12 |= 4",
    "r10 = zx.q(neg.d(r10.d))",
    "var_298 = r10.d",
    "goto label_1400cb8ec",
    "if (r8_1 == 4)",
    "rdx = 0",
    "var_2a4 = rdx.d",
    "goto label_1400cb8ec",
    "if (r8_1 == 5)",
    "if (rdi.b != 0x2a)",
    "rdx = zx.q(sx.d(rdi.b) + ((rdx * 5).d << 1) - 0x30)",
    "var_2a4 = rdx.d",
    "goto label_1400cb8ec",
    "rdx = zx.q(*r15)",
    "r15 += 8",
    "var_2a4 = rdx.d",
    "if (rdx.d s>= 0)",
    "goto label_1400cb8ec",
    "rdx = 0xffffffff",
    "var_2a4 = rdx.d",
    "goto label_1400cb8ec",
    "uint64_t rcx_10 = zx.q(r8_1 - 6)",
    "if (r8_1 == 6)",
    "if (rdi.b != 0x49)",
    "if (rdi.b == 0x68)",
    "r12 |= 0x20",
    "if (rdi.b == 0x6c)",
    "if (*rsi != 0x6c)",
    "r12 |= 0x10",
    "rsi = &rsi[1]",
    "r12 |= 0x1000",
    "if (rdi.b == 0x77)",
    "r12 |= 0x800",
    "goto label_1400cb8ec",
    "char rax_7 = *rsi",
    "r12 |= 0x8000",
    "if (rax_7 == 0x36 && rsi[1] == 0x34)",
    "rsi = &rsi[2]",
    "r12 |= 0x8000",
    "goto label_1400cb8ec",
    "if (rax_7 == 0x33 && rsi[1] == 0x32)",
    "rsi = &rsi[2]",
    "r12 &= 0xffff7fff",
    "goto label_1400cb8ec",
    "if (rax_7 == 0x64 || rax_7 == 0x69 || rax_7 == 0x6f || rax_7 == 0x75 || rax_7 == 0x78 || rax_7 == 0x58)",
    "goto label_1400cb8ec",
    "var_27c_1 = 0",
    "label_1400cbac3:",
    "var_288 = 0",
    "int32_t rax_28 = isleadbyte(zx.d(rdi.b))",
    "if (rax_28 != 0)",
    "sub_1400cae6c(rdi.b, rbp, &result_1)",
    "rdi.b = *rsi",
    "rsi = &rsi[1]",
    "if (rax_28 != 0 && rdi.b == 0)",
    "goto label_1400cbb22",
    "sub_1400cae6c(rdi.b, rbp, &result_1)",
    "if (rcx_10.d != 1)",
    "goto label_1400cb8ec",
    "int32_t rax_8 = sx.d(rdi.b)",
    "char var_248",
    "int32_t rsi_1",
    "int32_t r8_3",
    "int32_t r13_2",
    "if (rax_8 s<= 0x64)",
    "if (rax_8 == 0x64)",
    "label_1400cb575:",
    "r12 |= 0x40",
    "label_1400cb579:",
    "r8_3 = 0xa",
    "label_1400cb58b:",
    "if (test_bit(r12, 0xf) || test_bit(r12, 0xc))",
    "rdi = *r15",
    "r15 += 8",
    "r15 += 8",
    "if ((r12.b & 0x20) == 0)",
    "if ((r12.b & 0x40) == 0)",
    "rdi = zx.q(*(r15 - 8))",
    "rdi = sx.q(*(r15 - 8))",
    "if ((r12.b & 0x40) == 0)",
    "rdi = zx.q(*(r15 - 8))",
    "rdi = sx.q(*(r15 - 8))",
    "if ((r12.b & 0x40) != 0 && rdi s< 0)",
    "rdi = neg.q(rdi)",
    "r12 |= 0x100",
    "if (not(test_bit(r12, 0xf)) && not(test_bit(r12, 0xc)))",
    "rdi = zx.q(rdi.d)",
    "int32_t r14_1 = var_2a4",
    "if (r14_1 s>= 0)",
    "r12 &= 0xfffffff7",
    "if (r14_1 s> 0x200)",
    "r14_1 = 0x200",
    "r14_1 = 1",
    "void var_49",
    "void* rbx_2 = &var_49",
    "int32_t rcx_17 = sbb.d(rcx_10.d, rcx_10.d, rdi != 0) & r9",
    "rsi_1 = rcx_17",
    "var_2a8 = rcx_17",
    "while (true)",
    "rcx_10 = zx.q(r14_1)",
    "r14_1 -= 1",
    "if (rcx_10.d s<= 0 && rdi == 0)",
    "break",
    "int64_t rdx_3 = 0",
    "int64_t rcx_18 = sx.q(r8_3)",
    "uint32_t temp1_1 = (modu.dp.q(rdx_3:rdi, rcx_18)).d",
    "rdi = divu.dp.q(rdx_3:rdi, rcx_18)",
    "int32_t rax_20 = temp1_1 + 0x30",
    "if (rax_20 s> 0x39)",
    "rax_20 += r11",
    "*rbx_2 = rax_20.b",
    "rbx_2 -= 1",
    "var_2a4 = r14_1",
    "uint32_t rax_21 = &var_49 - rbx_2.d",
    "rbx_1 = rbx_2 + 1",
    "r13_1 = rax_21",
    "var_290 = rax_21",
    "if (test_bit(r12, 9) && (rax_21 == 0 || *rbx_1 != 0x30))",
    "rbx_1 -= 1",
    "r13_1 += 1",
    "*rbx_1 = 0x30",
    "var_290 = r13_1",
    "goto label_1400cb77a",
    "if (rax_8 != 0x41)",
    "if (rax_8 == 0x43)",
    "if ((r12 & 0x830) == 0)",
    "r12 |= 0x800",
    "goto label_1400cb425",
    "if (rax_8 != 0x45 && rax_8 != 0x47)",
    "if (rax_8 == 0x53)",
    "if ((r12 & 0x830) == 0)",
    "r12 |= 0x800",
    "goto label_1400cb3d9",
    "if (rax_8 == 0x58)",
    "goto label_1400cb53a",
    "if (rax_8 != 0x5a)",
    "if (rax_8 == 0x61)",
    "goto label_1400cb6a0",
    "if (rax_8 == 0x63)",
    "label_1400cb425:",
    "r15 += 8",
    "if ((r12 & 0x810) == 0)",
    "rax_8.b = *(r15 - 8)",
    "r13_1 = 1",
    "var_248 = rax_8.b",
    "var_290 = 1",
    "int32_t rax_14 = sub_1400cb064(&var_290, &var_248, 0x200, *(r15 - 8))",
    "r13_1 = var_290",
    "if (rax_14 != 0)",
    "var_278 = 1",
    "rbx_1 = &var_248",
    "goto label_1400cb771",
    "goto label_1400cb771",
    "rcx_10 = *r15",
    "r15 += 8",
    "if (rcx_10 != 0)",
    "rbx_1 = *(rcx_10 + 8)",
    "if (rcx_10 == 0 || rbx_1 == 0)",
    "rbx_1 = data_140139010",
    "int64_t i = -1",
    "rdi = rbx_1",
    "while (i != 0)",
    "bool cond:10_1 = 0 != *rdi",
    "rdi += 1",
    "i -= 1",
    "if (not(cond:10_1))",
    "break",
    "rcx_10 = not.q(i) - 1",
    "r13_1 = rcx_10.d",
    "goto label_1400cb76d",
    "int16_t rax_9 = *rcx_10",
    "if (*(rcx_10 + 2) u< rax_9)",
    "label_1400cbb0f:",
    "int64_t var_2b8_3 = 0",
    "*_errno() = 0x16",
    "goto label_1400cbb39",
    "r13_1 = zx.d(rax_9)",
    "if (not(test_bit(r12, 0xb)))",
    "var_288 = 0",
    "var_290 = r13_1",
    "if (((not.d(r13_1)).b & 1) == 0 || ((not.d(rbx_1.d)).b & 1) == 0)",
    "goto label_1400cbb0f",
    "r13_1 u>>= 1",
    "var_288 = 1",
    "var_290 = r13_1",
    "goto label_1400cb771",
    "r13_2 = 1",
    "rdi.b += 0x20",
    "var_280 = 1",
    "goto label_1400cb6ac",
    "if (rax_8 s< 0x65)",
    "goto label_1400cb771",
    "char var_29c",
    "if (rax_8 s> 0x67)",
    "if (rax_8 == 0x69)",
    "goto label_1400cb575",
    "if (rax_8 == 0x6e)",
    "goto label_1400cbb22",
    "if (rax_8 == 0x6f)",
    "r8_3 = 8",
    "if (r12.b s< 0)",
    "r12 |= 0x200",
    "goto label_1400cb58b",
    "if (rax_8 == 0x70)",
    "var_2a4 = 0x10",
    "r12 |= 0x8000",
    "label_1400cb53a:",
    "r11 = 7",
    "label_1400cb540:",
    "var_284 = r11",
    "r8_3 = 0x10",
    "if (r12.b s< 0)",
    "var_29c = 0x30",
    "r9 = 2",
    "char var_29b_1 = r11.b + 0x51",
    "goto label_1400cb58b",
    "if (rax_8 != 0x73)",
    "if (rax_8 == 0x75)",
    "goto label_1400cb579",
    "if (rax_8 != 0x78)",
    "goto label_1400cb771",
    "r11 = rax_8 - 0x51",
    "goto label_1400cb540",
    "label_1400cb3d9:",
    "rbx_1 = *r15",
    "int32_t i_1 = rdx.d",
    "if (rdx.d == 0xffffffff)",
    "i_1 = 0x7fffffff",
    "r15 += 8",
    "if ((r12 & 0x810) == 0)",
    "if (rbx_1 == 0)",
    "rbx_1 = data_140139010",
    "int16_t* rcx_15 = rbx_1",
    "while (i_1 != 0)",
    "i_1 -= 1",
    "if (*rcx_15 == 0)",
    "break",
    "rcx_15 += 1",
    "rcx_10 = zx.q(rcx_15.d - rbx_1.d)",
    "var_288 = 1",
    "if (rbx_1 == 0)",
    "rbx_1 = data_140139018",
    "int16_t* rcx_12 = rbx_1",
    "while (i_1 != 0)",
    "i_1 -= 1",
    "if (*rcx_12 == 0)",
    "break",
    "rcx_12 = &rcx_12[1]",
    "rcx_10 = (rcx_12 - rbx_1) s>> 1",
    "goto label_1400cb76a",
    "label_1400cb6a0:",
    "r13_2 = var_280",
    "label_1400cb6ac:",
    "r12 |= 0x40",
    "rbx_1 = &var_248",
    "int32_t rbp_1 = 0x200",
    "if (rdx.d s< 0)",
    "rdx = 6",
    "var_2a4 = rdx.d",
    "if (rdx.d != 0)",
    "if (rdx.d s> 0x200)",
    "rdx = 0x200",
    "var_2a4 = rdx.d",
    "if (rdx.d s> 0xa3)",
    "int32_t rsi_2 = (rdx + 0x15d).d",
    "int16_t* rax_22 = malloc(sx.q(rsi_2))",
    "var_260_1 = rax_22",
    "if (rax_22 == 0)",
    "rdx = 0xa3",
    "var_2a4 = rdx.d",
    "rdx = zx.q(var_2a4)",
    "rbx_1 = rax_22",
    "rbp_1 = rsi_2",
    "if (rdi.b == 0x67)",
    "rdx = 1",
    "var_2a4 = rdx.d",
    "if (r12.b s< 0)",
    "r13_2 |= 0x80",
    "var_280 = r13_2",
    "int64_t rax_23 = *r15",
    "r15 += 8",
    "var_290.q = rax_23",
    "sub_1400caf88(&var_290, rbx_1, sx.q(rbp_1), sx.d(rdi.b), rdx.d, r13_2.b)",
    "if (*rbx_1 == 0x2d)",
    "r12 |= 0x100",
    "rbx_1 += 1",
    "int64_t i_2 = -1",
    "rdi = rbx_1",
    "while (i_2 != 0)",
    "bool cond:7_1 = 0 != *rdi",
    "rdi += 1",
    "i_2 -= 1",
    "if (not(cond:7_1))",
    "break",
    "rcx_10 = not.q(i_2) - 1",
    "label_1400cb76a:",
    "r13_1 = rcx_10.d",
    "label_1400cb76d:",
    "var_290 = rcx_10.d",
    "label_1400cb771:",
    "rsi_1 = var_2a8",
    "label_1400cb77a:",
    "if (var_278 == 0)",
    "if ((r12.b & 0x40) != 0)",
    "if (test_bit(r12, 8))",
    "var_29c = 0x2d",
    "rsi_1 = 1",
    "var_2a8 = 1",
    "if ((r12.b & 1) != 0)",
    "var_29c = 0x2b",
    "rsi_1 = 1",
    "var_2a8 = 1",
    "if ((r12.b & 2) != 0)",
    "var_29c = 0x20",
    "rsi_1 = 1",
    "var_2a8 = 1",
    "rdi = arg1",
    "int32_t rbp_4 = var_298 - r13_1 - rsi_1",
    "if ((r12.b & 0xc) == 0)",
    "rcx_10.b = 0x20",
    "write_multi_char(rcx_10.b, rbp_4, rdi, &result_1)",
    "sub_1400caf08(&var_29c, rsi_1, rdi, &result_1)",
    "if ((r12.b & 8) != 0 && (r12.b & 4) == 0)",
    "write_multi_char(0x30, rbp_4, rdi, &result_1)",
    "if (var_288 == 0 || r13_1 s<= 0)",
    "sub_1400caf08(rbx_1, r13_1, rdi, &result_1)",
    "int16_t* rsi_3 = rbx_1",
    "uint32_t rdi_1 = r13_1",
    "while (true)",
    "wchar16 r9_7 = *rsi_3",
    "rdi_1 -= 1",
    "rsi_3 = &rsi_3[1]",
    "int32_t var_268",
    "void var_48",
    "if (sub_1400cb064(&var_268, &var_48, 6, r9_7) == 0)",
    "int32_t rdx_10 = var_268",
    "if (rdx_10 != 0)",
    "sub_1400caf08(&var_48, rdx_10, arg1, &result_1)",
    "if (rdi_1 == 0)",
    "break",
    "continue",
    "result_1 = 0xffffffff",
    "break",
    "rdi = arg1",
    "if (result_1 s>= 0 && (r12.b & 4) != 0)",
    "write_multi_char(0x20, rbp_4, rdi, &result_1)",
    "if (var_260_1 != 0)",
    "free(var_260_1)",
    "var_260_1 = nullptr",
    "rbp = arg1",
    "rdx = zx.q(var_2a4)",
    "r8_1 = var_27c_1",
    "r9 = var_2a8",
    "r10 = zx.q(var_298)",
    "r11 = var_284",
    "goto label_1400cb8ec",
    "rdx = 0xffffffff",
    "var_280 = 0",
    "var_278 = 0",
    "r10 = 0",
    "var_298 = 0",
    "r9 = 0",
    "var_2a8 = 0",
    "r12 = 0",
    "var_2a4 = 0xffffffff",
    "var_288 = 0",
    "label_1400cb8ec:",
    "rdi.b = *rsi",
    "if (rdi.b != 0)",
    "continue",
    "if (r8_1 == 0)",
    "break",
    "if (r8_1 == 7)",
    "break",
    "int64_t var_2b8_2 = 0",
    "*_errno() = 0x16",
    "label_1400cbb39:",
    "sub_1400c9168(0)",
    "result = 0xffffffff",
    "goto label_1400cbb52",
    "result = zx.q(result_1)",
    "int64_t var_2b8_1 = 0",
    "*_errno() = 0x16",
    "sub_1400c9168(0)",
    "result = 0xffffffff",
    "label_1400cbb52:",
    "sub_1400c9220(rax_1 ^ &var_2d8)",
    "return result"
  ]
}