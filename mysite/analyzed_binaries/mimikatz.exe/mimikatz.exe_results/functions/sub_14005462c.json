{
  "address": "0x14005462c",
  "rules": [
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "mov     qword [rsp+0x10], rbp",
    "mov     qword [rsp+0x18], rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x20",
    "mov     rdi, rcx",
    "mov     rcx, rdx",
    "mov     r13b, r9b",
    "mov     r14d, r8d",
    "mov     rbp, rdx",
    "xor     ebx, ebx",
    "xor     esi, esi",
    "call    sub_140019074",
    "lea     rcx, [rdi+0x1e8]",
    "xor     r8d, r8d",
    "movsxd  r15, eax",
    "call    sub_14001a410",
    "mov     r11, qword [rax+0x10]",
    "jmp     0x140054693",
    "test    r11, r11",
    "jne     0x140054678",
    "mov     r8b, r13b",
    "mov     edx, r14d",
    "mov     rcx, r11",
    "call    sub_1400544f8",
    "cmp     eax, esi",
    "jle     0x14005468f",
    "mov     r12b, byte [rsp+0x70]",
    "test    r12b, r12b",
    "jne     0x140054733",
    "mov     r11, qword [r11+0x10]",
    "mov     rbx, r11",
    "mov     esi, eax",
    "cmp     esi, 0x6",
    "jge     0x1400547e8",
    "test    rbx, rbx",
    "je      0x1400546b5",
    "test    rbx, rbx",
    "je      0x1400547c5",
    "lea     rdx, [r15+0x49]",
    "mov     rcx, rdi",
    "call    sub_140016ba8",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x1400547c5",
    "movzx   eax, byte [rbp]",
    "lea     r8, [rel __dos_header]",
    "xor     edi, edi",
    "movzx   ecx, byte [rax+r8+0xd6400]",
    "mov     eax, 0xb21642c9",
    "add     ecx, r15d",
    "imul    ecx",
    "add     edx, ecx",
    "sar     edx, 0x4",
    "mov     eax, edx",
    "shr     eax, 0x1f",
    "add     edx, eax",
    "imul    edx, edx, 0x17",
    "sub     ecx, edx",
    "movsxd  rax, ecx",
    "mov     r11, qword [r8+rax*8+0x1400a0]",
    "jmp     0x140054707",
    "test    byte [rdi+0x2c], 0x2",
    "je      0x1400547e8",
    "xor     eax, eax",
    "cmp     qword [rbx+0x18], 0x0",
    "jne     0x1400547f9",
    "movzx   edx, r13b",
    "lea     rcx, [rax+0x48]",
    "mov     byte [rax], r14b",
    "mov     dword [rax+0x4], edx",
    "lea     edx, [r15+0x1]",
    "mov     qword [rax+0x38], rcx",
    "movsxd  r8, edx",
    "mov     rdx, rbp",
    "call    memcpy",
    "mov     r11, qword [rbx+0x38]",
    "cmp     byte [r11], 0x0",
    "je      0x14005479a",
    "test    r11, r11",
    "jne     0x1400546f3",
    "mov     rax, rbx",
    "jmp     0x1400547c7",
    "test    r12b, r12b",
    "je      0x1400547c5",
    "mov     rdx, qword [rbx+0x38]",
    "lea     rcx, [rdi+0x1e8]",
    "mov     r8, rbx",
    "call    sub_14001a4ac",
    "cmp     rax, rbx",
    "jne     0x1400547e4",
    "lea     r8, [rel __dos_header]",
    "mov     rcx, qword [r11+0x38]",
    "mov     rdx, rbp",
    "call    sub_1400192b0",
    "test    eax, eax",
    "je      0x140054729",
    "jmp     0x140054729",
    "mov     rbx, qword [rsp+0x50]",
    "mov     rbp, qword [rsp+0x58]",
    "mov     rsi, qword [rsp+0x60]",
    "add     rsp, 0x20",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "retn    ",
    "mov     qword [rbx+0x10], rax",
    "mov     rdx, rbx",
    "mov     rcx, rdi",
    "call    sub_1400169a8",
    "mov     rcx, rdi",
    "call    sub_140016efc",
    "movzx   eax, byte [r11]",
    "mov     al, byte [rax+r8+0xd6400]",
    "mov     byte [r11], al",
    "inc     r11",
    "cmp     byte [r11], 0x0",
    "jne     0x140054782",
    "test    r11, r11",
    "jne     0x14005470e",
    "mov     r11, qword [r11+0x40]",
    "mov     r8b, r13b",
    "mov     edx, r14d",
    "mov     rcx, r11",
    "call    sub_1400544f8",
    "cmp     eax, edi",
    "jle     0x140054725",
    "jmp     0x1400547e8",
    "mov     r11, qword [r11+0x10]",
    "mov     rbx, r11",
    "mov     edi, eax"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}