{
  "address": "0x14002f584",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check Internet connectivity via WinINet/e5536f56688049548c83e5cf372d25ac",
    "check OS version/e331473c09f0419eb22f4786f6872060",
    "contain loop",
    "decompress data using LZO/368a268678dc46ccbe6ee697869692a3",
    "hash data with CRC32/dc8063c9cb1c41b9a5bafe66f5117ac4",
    "hash data using murmur3/aeb1a4346751469b809f4261bcfbbb07/dbb00f9448c04dc1b720ac16935c1891",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/5f4855375d6b45e9bd6b2a189e856211",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "decompress data using aPLib/88da69e00a6e49ce8c080be3a0beeb89",
    "check OS version/0dbc6332c9724004b686b44a39c40b94",
    "decompress data using aPLib/a5c76dae137d4aaa9aade786acafaa41",
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/dc118f3b61184df4a511ed4919cf656f",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "check OS version/fa26a21322994ec4bdbe5020e62bd777",
    "encrypt data using chaskey/7025f739e4b341df894563ee3ec22dfd",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/5f4c97f31ce341008ea23885a97305d8",
    "compute adler32 checksum/aded99c950db4d9b8d119cbfc64de8e4"
  ],
  "disassembly": [
    "mov     rax, rsp",
    "mov     qword [rax+0x20], r9",
    "mov     qword [rax+0x18], r8",
    "mov     dword [rax+0x10], edx",
    "mov     qword [rax+0x8], rcx",
    "push    rbx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "sub     rsp, 0xc8",
    "and     qword [rax-0x70], 0x0",
    "mov     rax, qword [rcx+0x28]",
    "mov     rbp, qword [rcx]",
    "or      dword [rsp+0x3c], 0xffffffff",
    "mov     qword [rsp+0xb8], rax",
    "mov     eax, dword [rcx+0x30]",
    "mov     dword [rsp+0x94], eax",
    "mov     eax, dword [rcx+0x34]",
    "xor     edi, edi",
    "mov     dword [rsp+0x80], eax",
    "mov     eax, dword [rbp+0x34]",
    "mov     ebx, edx",
    "mov     rsi, rcx",
    "mov     dword [rsp+0x44], 0x1",
    "mov     dword [rsp+0x38], 0x1",
    "mov     dword [rsp+0x34], eax",
    "mov     qword [rsp+0x88], rbp",
    "test    edx, edx",
    "jne     0x14002f5ff",
    "call    sub_14002f22c",
    "test    eax, eax",
    "jne     0x14002f5f8",
    "xor     eax, eax",
    "jmp     0x14002fcd8",
    "lea     rax, [rel data_1400f3d80]  {\"Page %d: \"}",
    "lea     r8, [rsp+0x78]",
    "xor     r9d, r9d",
    "mov     edx, ebx",
    "mov     rcx, rbp",
    "mov     dword [rsi+0x30], ebx",
    "mov     qword [rsi+0x28], rax",
    "call    sub_1400277d8",
    "mov     rbp, qword [rsp+0x78]",
    "test    eax, eax",
    "je      0x14002f648",
    "add     rsp, 0xc8",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "pop     rbx",
    "retn    ",
    "mov     al, byte [rbp]",
    "mov     rcx, rbp",
    "mov     byte [rbp], dil",
    "mov     byte [rsp+0x30], al",
    "call    sub_1400275e0",
    "test    eax, eax",
    "je      0x14002f668",
    "lea     rdx, [rel data_1400f3d90]  {\"unable to get the page. error co\u2026\"}",
    "mov     rcx, rbp",
    "call    sub_14002740c",
    "test    eax, eax",
    "je      0x14002f67d",
    "lea     rdx, [rel data_1400f3db8]  {\"btreeInitPage() returns error co\u2026\"}",
    "jmp     0x14002f638",
    "test    rbp, rbp",
    "je      0x14002fcb2",
    "mov     rdx, qword [rbp+0x50]",
    "movzx   r9d, byte [rbp+0x9]",
    "lea     rax, [rel data_1400f3df8]  {\"On tree page %d cell %d: \"}",
    "mov     qword [rsi+0x28], rax",
    "movzx   eax, byte [r9+rdx+0x6]",
    "movzx   ecx, byte [r9+rdx+0x5]",
    "movzx   r8d, byte [r9+rdx+0x3]",
    "shl     ecx, 0x8",
    "mov     qword [rsp+0x58], rdx",
    "or      ecx, eax",
    "movzx   eax, byte [r9+rdx+0x4]",
    "shl     r8d, 0x8",
    "or      r8d, eax",
    "dec     ecx",
    "mov     eax, 0x3",
    "movzx   r11d, cx",
    "movzx   ecx, byte [rbp+0x8]",
    "mov     qword [rsp+0x98], r9",
    "sub     eax, ecx",
    "inc     r11d",
    "mov     dword [rsp+0x40], r8d",
    "lea     eax, [r9+rax*4]",
    "mov     dword [rsp+0x48], r11d",
    "mov     dword [rsp+0x60], eax",
    "lea     eax, [rax+r8*2-0x2]",
    "movsxd  r10, eax",
    "add     r10, rdx",
    "mov     qword [rsp+0x68], r10",
    "test    cl, cl",
    "jne     0x14002f78e",
    "lea     rdx, [rel data_1400f3de0]  {\"free space corruption\"}",
    "jmp     0x14002f638",
    "mov     r8d, eax",
    "mov     rcx, rsi",
    "call    sub_14002f1a4",
    "jmp     0x14002fca4",
    "mov     rax, qword [rsp+0xb8]",
    "mov     qword [rsi+0x28], rax",
    "mov     eax, dword [rsp+0x94]",
    "mov     dword [rsi+0x30], eax",
    "mov     eax, dword [rsp+0x80]",
    "mov     dword [rsi+0x34], eax",
    "mov     eax, dword [rsp+0x3c]",
    "inc     eax",
    "mov     rcx, qword [rbp+0x70]",
    "call    sub_14002242c",
    "mov     rdi, qword [rsi+0x58]",
    "and     dword [rdi], 0x0",
    "lea     eax, [r9+0x8]",
    "movsxd  rcx, eax",
    "add     rcx, rdx",
    "movzx   eax, byte [rcx+0x2]",
    "movzx   ebx, byte [rcx+0x1]",
    "shl     ebx, 0x8",
    "or      ebx, eax",
    "movzx   eax, byte [rcx]",
    "shl     eax, 0x18",
    "shl     ebx, 0x8",
    "or      ebx, eax",
    "movzx   eax, byte [rcx+0x3]",
    "or      ebx, eax",
    "mov     rax, qword [rsp+0x88]",
    "cmp     byte [rax+0x21], dil",
    "je      0x14002f756",
    "mov     rdx, qword [rsp+0x100]",
    "mov     rax, qword [rsp+0x108]",
    "mov     qword [rdx], rax",
    "and     qword [rsi+0x28], 0x0",
    "cmp     dword [rsp+0x44], 0x0",
    "je      0x14002fc9d",
    "cmp     dword [rsi+0x1c], 0x0",
    "je      0x14002fa50",
    "mov     r9, qword [rsp+0x108]",
    "lea     r8, [rsp+0x108]",
    "mov     edx, ebx",
    "mov     rcx, rsi",
    "call    sub_14002f584",
    "and     dword [rsp+0x38], edi",
    "mov     rdx, qword [rsp+0x58]",
    "mov     r8d, dword [rsp+0x40]",
    "mov     r10, qword [rsp+0x68]",
    "mov     r11d, dword [rsp+0x48]",
    "mov     dword [rsp+0x3c], eax",
    "jmp     0x14002f795",
    "mov     r9d, dword [rsp+0xf8]",
    "lea     rax, [rel data_1400f3e18]  {\"On page %d at right child: \"}",
    "mov     r8b, 0x5",
    "mov     edx, ebx",
    "mov     rcx, rsi",
    "mov     qword [rsi+0x28], rax",
    "call    sub_14002f298",
    "mov     al, byte [rsp+0x30]",
    "mov     byte [rbp], al",
    "cmp     dword [rsi+0x1c], 0x0",
    "jle     0x14002fca4",
    "mov     ecx, dword [rsp+0x84]",
    "mov     dword [rsi+0x34], eax",
    "movzx   ebx, byte [r10]",
    "movzx   eax, byte [r10+0x1]",
    "shl     ebx, 0x8",
    "sub     r10, 0x2",
    "or      ebx, eax",
    "mov     qword [rsp+0x68], r10",
    "cmp     ebx, r11d",
    "jb      0x14002fa0b",
    "lea     ecx, [r8-0x1]",
    "mov     dword [rsp+0x84], ecx",
    "mov     eax, ecx",
    "mov     dword [rsp+0x40], ecx",
    "test    ecx, ecx",
    "js      0x14002fa57",
    "cmp     byte [rbp+0x8], 0x0",
    "jne     0x14002fb23",
    "mov     eax, dword [rsp+0x34]",
    "lea     rdx, [rel data_1400f3e38]  {\"Offset %d out of range %d..%d\"}",
    "mov     r9d, r11d",
    "add     eax, 0xfffffffc",
    "mov     r8d, ebx",
    "mov     rcx, rsi",
    "mov     dword [rsp+0x20], eax",
    "call    sub_14002f1a4",
    "mov     eax, dword [rsp+0x34]",
    "add     eax, 0xfffffffc",
    "cmp     ebx, eax",
    "ja      0x14002fa0b",
    "mov     r9, qword [rsp+0x58]",
    "mov     rax, qword [rsp+0x98]",
    "movzx   r8d, byte [rax+r9+0x1]",
    "movzx   eax, byte [rax+r9+0x2]",
    "shl     r8d, 0x8",
    "jmp     0x14002fb98",
    "mov     rdi, qword [rsi+0x58]",
    "movsxd  rax, ecx",
    "movsxd  rcx, dword [rsp+0x60]",
    "and     dword [rdi], 0x0",
    "mov     qword [rsp+0x50], rax",
    "test    rax, rax",
    "js      0x14002fb23",
    "mov     eax, ebx",
    "lea     r8, [rsp+0xa0]",
    "mov     rcx, rbp",
    "add     rax, rdx",
    "mov     rdx, rax",
    "mov     qword [rsp+0x50], rax",
    "call    qword [rbp+0x80]",
    "movzx   r11d, word [rsp+0xb6]",
    "mov     r8d, dword [rsp+0x34]",
    "lea     eax, [rbx+r11]",
    "cmp     eax, r8d",
    "jbe     0x14002f833",
    "or      r8d, eax",
    "jg      0x14002fb42",
    "lea     rsi, [rcx+rax*2]",
    "mov     rcx, qword [rsp+0x58]",
    "add     rsi, rcx",
    "cmp     byte [rbp+0x2], 0x0",
    "je      0x14002f89c",
    "lea     rdx, [rel data_1400f3e58]  {\"Extends off end of page\"}",
    "mov     rcx, rsi",
    "call    sub_14002f1a4",
    "jmp     0x14002fa2b",
    "movsxd  r10, r8d",
    "movzx   ecx, byte [r10+r9+0x2]",
    "movzx   eax, byte [r10+r9+0x3]",
    "shl     ecx, 0x8",
    "or      ecx, eax",
    "lea     edx, [rcx+r8-0x1]",
    "shl     r8d, 0x10",
    "or      edx, r8d",
    "inc     dword [rdi]",
    "mov     ecx, dword [rdi]",
    "mov     dword [rdi+rcx*4], edx",
    "mov     eax, ecx",
    "jmp     0x14002fb86",
    "mov     ebx, dword [rsp+0x48]",
    "xor     r10d, r10d",
    "dec     ebx",
    "shr     eax, 0x1",
    "jne     0x14002fae3",
    "movzx   ecx, word [rsp+0xb4]",
    "mov     eax, dword [rsp+0xb0]",
    "cmp     eax, ecx",
    "jbe     0x14002f948",
    "mov     rdx, qword [rsp+0xa0]",
    "xor     ecx, ecx",
    "cmp     rdx, qword [rsp+0x108]",
    "setg    cl",
    "xor     eax, eax",
    "cmp     rdx, qword [rsp+0x108]",
    "setge   al",
    "cmp     dword [rsp+0x38], 0x0",
    "cmovne  eax, ecx",
    "test    eax, eax",
    "je      0x14002f88f",
    "and     dword [rsp+0x44], 0x0",
    "shr     eax, 0x1",
    "jne     0x14002fb6d",
    "mov     ecx, dword [rsp+0x34]",
    "movzx   eax, bx",
    "sub     ecx, eax",
    "cmp     dword [rdi], 0x0",
    "lea     r8d, [r10+rcx-0x1]",
    "jne     0x14002fca4",
    "mov     ecx, dword [rdi]",
    "mov     r8d, dword [rdi+0x4]",
    "mov     qword [rsp+0x50], 0x1",
    "mov     eax, dword [rdi+rcx*4]",
    "mov     dword [rdi+0x4], eax",
    "or      dword [rdi+rcx*4], 0xffffffff",
    "dec     dword [rdi]",
    "mov     eax, 0x2",
    "mov     edx, eax",
    "mov     rcx, rax",
    "cmp     dword [rdi], eax",
    "jb      0x14002fc17",
    "mov     r9d, dword [rdi+rax*4]",
    "mov     r8d, edx",
    "mov     edx, dword [rdi+r8*4]",
    "cmp     r9d, edx",
    "jbe     0x14002fb00",
    "mov     rax, qword [rsp+0x50]",
    "mov     rcx, qword [rsp+0x58]",
    "sub     rsi, 0x2",
    "dec     rax",
    "mov     qword [rsp+0x50], rax",
    "test    rax, rax",
    "jns     0x14002fab3",
    "cmp     byte [rbp+0x8], 0x0",
    "jne     0x14002f9d4",
    "sub     eax, ecx",
    "xor     edx, edx",
    "lea     ecx, [r8-0x4]",
    "lea     eax, [rax+r8-0x5]",
    "div     ecx",
    "movzx   ecx, r11w",
    "sub     ecx, 0x4",
    "mov     dword [rsp+0x90], eax",
    "movsxd  rdx, ecx",
    "add     rdx, qword [rsp+0x50]",
    "movzx   ecx, byte [rdx+0x2]",
    "movzx   eax, byte [rdx+0x3]",
    "movzx   r10d, byte [rdx+0x1]",
    "shl     r10d, 0x8",
    "or      r10d, ecx",
    "movzx   ecx, byte [rdx]",
    "shl     r10d, 0x8",
    "shl     ecx, 0x18",
    "or      r10d, ecx",
    "or      r10d, eax",
    "mov     rax, qword [rsp+0x88]",
    "cmp     byte [rax+0x21], 0x0",
    "mov     dword [rsp+0x70], r10d",
    "je      0x14002f92a",
    "and     dword [rsp+0x38], 0x0",
    "mov     qword [rsp+0x108], rdx",
    "mov     r8, rdx",
    "lea     rdx, [rel data_1400f3e70]  {\"Rowid %lld out of order\"}",
    "mov     rcx, rsi",
    "call    sub_14002f1a4",
    "movzx   r11d, word [rsp+0xb6]",
    "mov     rdx, qword [rsp+0xa0]",
    "mov     r8d, dword [rsp+0x34]",
    "mov     r11d, dword [rdi+rax*4]",
    "mov     r8d, ecx",
    "mov     ecx, dword [rdi+r8*4]",
    "cmp     r11d, ecx",
    "jbe     0x14002fb8a",
    "movzx   eax, byte [r10+r9]",
    "movzx   r8d, byte [r10+r9+0x1]",
    "shl     eax, 0x8",
    "mov     rax, qword [rsp+0x98]",
    "movzx   r9d, byte [rax+r9+0x7]",
    "cmp     r8d, r9d",
    "je      0x14002fca4",
    "mov     eax, r8d",
    "movzx   ecx, bx",
    "shr     eax, 0x10",
    "cmp     ecx, eax",
    "jae     0x14002fc33",
    "mov     rbp, qword [rsp+0x50]",
    "mov     dword [rdi+rax*4], edx",
    "mov     dword [rdi+r8*4], r9d",
    "mov     edx, eax",
    "movzx   ebx, byte [rsi]",
    "movzx   eax, byte [rsi+0x1]",
    "shl     ebx, 0x8",
    "or      ebx, eax",
    "mov     edx, ebx",
    "add     rdx, rcx",
    "mov     rcx, rbp",
    "call    qword [rbp+0x78]",
    "movzx   r11d, ax",
    "lea     ecx, [r11+rbx-0x1]",
    "shl     ebx, 0x10",
    "or      ecx, ebx",
    "inc     dword [rdi]",
    "mov     edx, dword [rdi]",
    "mov     dword [rdi+rdx*4], ecx",
    "mov     eax, edx",
    "jmp     0x14002fafc",
    "mov     rsi, qword [rsp+0xf0]",
    "inc     dword [rdi]",
    "mov     edx, dword [rdi]",
    "movzx   eax, r11w",
    "lea     ecx, [rax+rbx-0x1]",
    "shl     ebx, 0x10",
    "mov     eax, edx",
    "or      ecx, ebx",
    "mov     dword [rdi+rdx*4], ecx",
    "jmp     0x14002fa05",
    "mov     rcx, qword [rsp+0x50]",
    "movzx   eax, byte [rcx+0x2]",
    "movzx   ebx, byte [rcx+0x1]",
    "shl     ebx, 0x8",
    "or      ebx, eax",
    "movzx   eax, byte [rcx]",
    "shl     eax, 0x18",
    "shl     ebx, 0x8",
    "or      ebx, eax",
    "movzx   eax, byte [rcx+0x3]",
    "or      ebx, eax",
    "mov     rax, qword [rsp+0x88]",
    "cmp     byte [rax+0x21], 0x0",
    "je      0x14002f998",
    "mov     r9d, dword [rsp+0x90]",
    "mov     r8d, r10d",
    "xor     edx, edx",
    "mov     rcx, rsi",
    "call    sub_14002f340",
    "mov     r11w, word [rsp+0xb6]",
    "mov     r9d, dword [rsp+0xf8]",
    "mov     r8b, 0x3",
    "mov     edx, r10d",
    "mov     rcx, rsi",
    "call    sub_14002f298",
    "mov     r10d, dword [rsp+0x70]",
    "mov     dword [rdi+rax*4], ecx",
    "mov     dword [rdi+r8*4], r11d",
    "mov     ecx, eax",
    "mov     eax, dword [rsp+0xf8]",
    "lea     rdx, [rel data_1400f3ed0]  {\"Fragmentation of %d bytes report\u2026\"}",
    "mov     rcx, rsi",
    "mov     dword [rsp+0x20], eax",
    "call    sub_14002f1a4",
    "jmp     0x14002fca4",
    "mov     r9d, dword [rsp+0xf8]",
    "lea     rdx, [rel data_1400f3ea8]  {\"Multiple uses for byte %u of pag\u2026\"}",
    "shr     r8d, 0x10",
    "mov     rcx, rsi",
    "call    sub_14002f1a4",
    "mov     r9, qword [rsp+0x58]",
    "mov     r10d, dword [rsp+0xf0]",
    "sub     eax, ecx",
    "mov     ebx, r8d",
    "lea     r10d, [r10+rax-0x1]",
    "jmp     0x14002fba6",
    "mov     r11d, dword [rdi+rbp*4]",
    "mov     eax, dword [rdi+rcx*4]",
    "cmp     r11d, eax",
    "jb      0x14002fc12",
    "inc     edx",
    "inc     rcx",
    "shr     eax, 0x1",
    "jne     0x14002f9ec",
    "mov     r9, qword [rsp+0x108]",
    "lea     r8, [rsp+0x108]",
    "mov     edx, ebx",
    "mov     rcx, rsi",
    "call    sub_14002f584",
    "and     dword [rsp+0x38], 0x0",
    "mov     ebx, eax",
    "cmp     eax, dword [rsp+0x3c]",
    "je      0x14002fa30",
    "mov     r9d, dword [rsp+0xf8]",
    "mov     r8b, 0x5",
    "mov     edx, ebx",
    "mov     rcx, rsi",
    "call    sub_14002f298",
    "cmp     dword [rdi], 0x0",
    "mov     dword [rsp+0xf0], r10d",
    "je      0x14002fc5b",
    "mov     rbp, qword [rsp+0x78]",
    "mov     dword [rdi+rbp*4], eax",
    "mov     dword [rdi+rcx*4], r11d",
    "add     edx, edx",
    "mov     rbp, rcx",
    "add     rcx, rcx",
    "cmp     edx, dword [rdi]",
    "jbe     0x14002fbe5",
    "mov     r9d, dword [rdi+rax*4]",
    "mov     r8d, edx",
    "mov     edx, dword [rdi+r8*4]",
    "cmp     r9d, edx",
    "jbe     0x14002fa30",
    "jmp     0x14002fa30",
    "mov     eax, dword [rsp+0x40]",
    "mov     rdx, qword [rsp+0x58]",
    "mov     r10, qword [rsp+0x68]",
    "mov     r11d, dword [rsp+0x48]",
    "sub     eax, 0x1",
    "mov     dword [rsp+0x40], eax",
    "jns     0x14002f7ae",
    "lea     rdx, [rel data_1400f3e88]  {\"Child page depth differs\"}",
    "mov     rcx, rsi",
    "call    sub_14002f1a4",
    "mov     dword [rsp+0x3c], ebx",
    "jmp     0x14002fa30",
    "mov     eax, dword [rdi+rcx*4+0x4]",
    "cmp     dword [rdi+rcx*4], eax",
    "jbe     0x14002fbf3",
    "mov     dword [rdi+rax*4], edx",
    "mov     dword [rdi+r8*4], r9d",
    "mov     edx, eax"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}