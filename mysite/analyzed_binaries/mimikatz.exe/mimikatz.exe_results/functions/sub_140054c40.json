{
  "address": "0x140054c40",
  "rules": [
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/dc118f3b61184df4a511ed4919cf656f",
    "check Internet connectivity via WinINet/e5536f56688049548c83e5cf372d25ac",
    "encrypt data using chaskey/4b6f9d91d05f46dd9aa3662f80cb6278",
    "check OS version/fa26a21322994ec4bdbe5020e62bd777",
    "contain loop",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/5f4c97f31ce341008ea23885a97305d8",
    "hash data using djb2/1485ed9954f84e3481d22b64bc4cfca7",
    "hash data using jshash/79354a2ef36a4036b42806ea4b41f8bd",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/1a6c04bed22346cdaee8fbdaa0f123d3",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "check OS version/0dbc6332c9724004b686b44a39c40b94",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "check OS version/e331473c09f0419eb22f4786f6872060",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/5f4855375d6b45e9bd6b2a189e856211"
  ],
  "disassembly": [
    "mov     rax, rsp",
    "mov     qword [rax+0x20], rbx",
    "mov     qword [rax+0x18], r8",
    "mov     qword [rax+0x10], rdx",
    "mov     qword [rax+0x8], rcx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x120",
    "and     dword [rax-0xc0], 0x0",
    "mov     r14, qword [rcx]",
    "and     dword [rsp+0x64], 0x0",
    "and     dword [rsp+0x94], 0x0",
    "xor     ebx, ebx",
    "xor     eax, eax",
    "and     dword [rsp+0x6c], ebx",
    "and     dword [rsp+0x88], ebx",
    "and     dword [rsp+0x78], ebx",
    "and     dword [rsp+0x9c], ebx",
    "and     dword [rsp+0x8c], ebx",
    "mov     qword [rsp+0xa0], r14",
    "mov     r13, r9",
    "mov     rdi, r8",
    "mov     rsi, rcx",
    "mov     qword [rsp+0x80], rbx",
    "mov     dword [rsp+0xa8], eax",
    "mov     qword [rsp+0x70], rax",
    "mov     qword [rsp+0xc8], rax",
    "cmp     dword [rcx+0x30], eax",
    "jne     0x140055692",
    "mov     rsi, qword [rsp+0xc8]",
    "test    rsi, rsi",
    "je      0x1400556a6",
    "cmp     byte [r14+0x61], al",
    "jne     0x140055692",
    "mov     rcx, r14",
    "call    sub_140053434",
    "test    rdi, rdi",
    "je      0x1400556be",
    "mov     qword [rsi+0x148], rax",
    "call    sub_1400549b0",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x140055687",
    "test    rbx, rbx",
    "je      0x1400556ce",
    "mov     rdx, rdi",
    "mov     rcx, r14",
    "call    sub_140043de4",
    "mov     rax, rbx",
    "and     qword [rsp+0x20], rbx",
    "lea     r8d, [rbx+0x7c]",
    "xor     r9d, r9d",
    "mov     rdx, rax",
    "mov     rcx, rsi",
    "call    sub_14006c2e8",
    "xor     ebp, ebp",
    "cmp     qword [r12+0x18], rbx",
    "setne   bpl",
    "mov     r15, rax",
    "mov     qword [rsp+0xd8], rax",
    "mov     dword [rsp+0xac], ebp",
    "lea     edi, [rbx+0x1]",
    "test    rax, rax",
    "jne     0x140054d41",
    "mov     rbx, qword [rsp+0x178]",
    "add     rsp, 0x120",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "retn    ",
    "mov     rdx, rbx",
    "mov     rcx, r14",
    "call    sub_1400169a8",
    "mov     rdx, r12",
    "mov     rcx, rsi",
    "call    sub_140050b50",
    "test    eax, eax",
    "jne     0x14005567f",
    "xor     r9d, r9d",
    "xor     r8d, r8d",
    "mov     rdx, r12",
    "mov     rcx, rsi",
    "call    sub_140059970",
    "test    eax, eax",
    "jne     0x140054d41",
    "mov     rdi, qword [rsp+0x170]",
    "xor     r8d, r8d",
    "test    r15, r15",
    "mov     rdx, r12",
    "setne   r8b",
    "mov     rcx, rsi",
    "call    sub_140054a34",
    "test    eax, eax",
    "jne     0x14005567f",
    "xor     edi, edi",
    "mov     rcx, qword [r12+0x70]",
    "mov     ebx, 0xfff0bdc0",
    "test    rcx, rcx",
    "je      0x140054d9d",
    "mov     rax, qword [r14+0x20]",
    "mov     r8, qword [r12]",
    "xor     r9d, r9d",
    "movsxd  rcx, ebx",
    "lea     edx, [r9+0x9]",
    "shl     rcx, 0x5",
    "mov     rcx, qword [rcx+rax]",
    "mov     qword [rsp+0x20], rcx",
    "mov     rcx, rsi",
    "call    sub_14004da74",
    "mov     r8d, 0x1",
    "cmp     eax, r8d",
    "je      0x140055677",
    "mov     rax, qword [r14+0x20]",
    "xor     ebx, ebx",
    "add     rax, 0x18",
    "cmp     qword [rax], rcx",
    "je      0x140054d9d",
    "mov     rbx, qword [rsp+0x80]",
    "mov     r15d, dword [rsi+0x34]",
    "mov     rax, qword [rsp+0x168]",
    "xor     edx, edx",
    "mov     dword [rax+0x4c], r15d",
    "add     dword [rsi+0x34], r8d",
    "mov     rax, qword [r12+0x10]",
    "mov     ecx, dword [rsi+0x34]",
    "mov     dword [rsp+0x60], r15d",
    "mov     dword [rsp+0x90], edx",
    "test    rax, rax",
    "je      0x140054e1b",
    "lea     edx, [rbx+0x1]",
    "test    ebp, ebp",
    "je      0x140054e3e",
    "add     ecx, r8d",
    "add     edx, r8d",
    "mov     dword [rsi+0x34], ecx",
    "mov     rax, qword [rax+0x28]",
    "test    rax, rax",
    "jne     0x140054e02",
    "add     rax, 0x20",
    "add     ebx, edx",
    "cmp     qword [rax], rcx",
    "jne     0x140054d92",
    "mov     rcx, rsi",
    "call    sub_140065300",
    "mov     rbp, rax",
    "test    rax, rax",
    "je      0x140055195",
    "mov     rax, qword [rsi+0x148]",
    "mov     qword [rsp+0xc8], rsi",
    "mov     qword [rsp+0x70], rax",
    "mov     rax, qword [r12]",
    "mov     qword [rsi+0x148], rax",
    "mov     dword [rsp+0x90], edx",
    "mov     rdi, qword [rsp+0x170]",
    "cmp     byte [rsi+0x1e], 0x0",
    "jne     0x140054e5f",
    "mov     rdx, qword [rsp+0x168]",
    "mov     r8d, ebx",
    "mov     edx, edi",
    "mov     rcx, rsi",
    "call    sub_14005398c",
    "cmp     dword [rsp+0xac], 0x0",
    "mov     rbx, qword [rsp+0x170]",
    "je      0x140054eae",
    "or      dword [rax+0xc8], 0x20",
    "xor     edx, edx",
    "lea     rcx, [rsp+0xe0]",
    "lea     r8d, [rdx+0x38]",
    "call    memset",
    "mov     rax, qword [rsp+0x168]",
    "mov     qword [rsp+0xe0], rsi",
    "mov     qword [rsp+0xe8], rax",
    "test    rbx, rbx",
    "je      0x140054ef6",
    "mov     rax, qword [rsp+0x180]",
    "mov     r9, r13",
    "mov     r8, rbx",
    "mov     rdx, r12",
    "mov     rcx, rsi",
    "mov     dword [rsp+0x28], r15d",
    "mov     qword [rsp+0x20], rax",
    "call    sub_140054af0",
    "mov     dword [rsp+0x98], r15d",
    "mov     dword [rsp+0x64], r15d",
    "test    byte [r14+0x30], 0x80",
    "je      0x140054f36",
    "lea     rcx, [rsp+0xe0]",
    "mov     rdx, rbx",
    "call    sub_140042da4",
    "test    eax, eax",
    "jne     0x140055195",
    "test    byte [rsp+0x108], 0x40",
    "mov     ecx, 0x1",
    "mov     eax, 0x414",
    "cmovne  edi, ecx",
    "lea     edx, [rcx+0x1]",
    "neg     edi",
    "sbb     bx, bx",
    "not     bx",
    "and     bx, 0x8",
    "or      bx, ax",
    "test    byte [r12+0x40], 0x20",
    "jne     0x140054f93",
    "cmp     byte [rsi+0x1e], 0x0",
    "jne     0x140054f36",
    "mov     r13, qword [r12+0x10]",
    "jmp     0x140054fa8",
    "add     dword [rsi+0x38], ecx",
    "mov     eax, dword [rsi+0x38]",
    "lea     edx, [rcx+0x48]",
    "xor     r13d, r13d",
    "movzx   r14d, cx",
    "mov     word [rsp+0x68], cx",
    "and     dword [rsp+0x20], r13d",
    "mov     r9d, eax",
    "xor     r8d, r8d",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x78], eax",
    "call    sub_140032364",
    "jmp     0x140055002",
    "cmp     qword [rsi+0x98], 0x0",
    "jne     0x140054f36",
    "test    r13, r13",
    "jne     0x140054f9a",
    "mov     rdi, qword [rsp+0x170]",
    "mov     rdx, qword [rsp+0x168]",
    "lea     eax, [r15+0x1]",
    "mov     dword [rsp+0x30], eax",
    "mov     r8, rdi",
    "xor     r9d, r9d",
    "mov     rcx, rsi",
    "mov     word [rsp+0x28], bx",
    "and     qword [rsp+0x20], 0x0",
    "call    sub_140078d90",
    "mov     qword [rsp+0xb8], rax",
    "test    rax, rax",
    "je      0x14005566a",
    "and     dword [rsp+0x20], 0x0",
    "mov     edx, 0x1",
    "xor     r8d, r8d",
    "add     dword [rsi+0x38], edx",
    "mov     eax, dword [rsi+0x38]",
    "lea     edx, [r8+0x46]",
    "mov     r9d, eax",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x94], eax",
    "call    sub_140032364",
    "mov     eax, dword [r13+0x64]",
    "and     al, 0x3",
    "cmp     al, dl",
    "je      0x140054fad",
    "movsx   r14d, word [r13+0x5e]",
    "mov     eax, dword [rsi+0x38]",
    "and     dword [rsp+0x20], 0x0",
    "lea     ecx, [rax+0x1]",
    "add     eax, r14d",
    "mov     r9d, r14d",
    "mov     dword [rsp+0x6c], ecx",
    "mov     ecx, dword [rsi+0x34]",
    "mov     dword [rsi+0x38], eax",
    "lea     eax, [rcx+0x1]",
    "mov     dword [rsp+0x88], ecx",
    "mov     r8d, ecx",
    "mov     edx, 0x70",
    "mov     rcx, rbp",
    "mov     word [rsp+0x68], r14w",
    "mov     dword [rsi+0x34], eax",
    "call    sub_140032364",
    "mov     rdx, r13",
    "mov     rcx, rsi",
    "mov     dword [rsp+0xa8], eax",
    "call    sub_140032d08",
    "mov     r14, qword [rsp+0xa0]",
    "jmp     0x14005519d",
    "movzx   r15d, byte [rax+0x45]",
    "mov     rbx, qword [rax+0x2c]",
    "mov     edx, 0x1",
    "mov     qword [rsp+0xd0], rbx",
    "mov     qword [rsp+0xc0], rbx",
    "mov     dword [rsp+0xb4], r15d",
    "cmp     r15d, edx",
    "je      0x140055083",
    "mov     r13, qword [r13+0x28]",
    "mov     rbx, qword [rsp+0x80]",
    "mov     rax, qword [rsp+0x70]",
    "jmp     0x14005568a",
    "mov     eax, dword [rsp+0x94]",
    "test    eax, eax",
    "je      0x1400550ab",
    "mov     rax, qword [rsi+0x90]",
    "mov     rcx, rsi",
    "test    rax, rax",
    "cmovne  rcx, rax",
    "mov     byte [rcx+0x20], dl",
    "test    r13, r13",
    "je      0x14005511a",
    "and     dword [rsp+0x20], 0x0",
    "mov     r9d, edx",
    "mov     r8d, eax",
    "mov     edx, 0x53",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "mov     edx, 0x1",
    "add     dword [rsi+0x38], edx",
    "mov     r14d, dword [rsi+0x38]",
    "mov     edi, dword [rsp+0x60]",
    "mov     r8d, edi",
    "or      r9d, 0xffffffff",
    "mov     rdx, r12",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], r14d",
    "call    sub_1400469b0",
    "mov     edx, 0x1",
    "movsx   eax, r14w",
    "xor     edi, edi",
    "test    eax, eax",
    "jle     0x14005510f",
    "test    r13, r13",
    "je      0x1400553be",
    "mov     ax, word [rsp+0x68]",
    "mov     rcx, qword [rsp+0xa0]",
    "mov     dword [rsp+0x160], eax",
    "mov     eax, dword [rsp+0x90]",
    "add     eax, 0x2",
    "movsxd  rdx, eax",
    "call    sub_140016c18",
    "mov     rcx, rax",
    "mov     qword [rsp+0x80], rax",
    "test    rax, rax",
    "jne     0x1400551af",
    "mov     r14d, dword [rsp+0x6c]",
    "mov     edi, dword [rsp+0x60]",
    "jmp     0x140055141",
    "mov     r15d, dword [rsp+0x60]",
    "mov     esi, dword [rsp+0x6c]",
    "xor     r14d, r14d",
    "mov     ebx, eax",
    "mov     edi, dword [rsp+0x78]",
    "and     dword [rsp+0x20], 0x0",
    "mov     word [rsp+0x160], dx",
    "mov     r8d, edi",
    "mov     r9d, r14d",
    "mov     edx, 0x93",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "jmp     0x14005521e",
    "add     dword [rsi+0x38], edx",
    "mov     rcx, qword [rsi]",
    "and     dword [rsp+0x160], 0x0",
    "mov     r14d, dword [rsi+0x38]",
    "mov     rdx, r13",
    "call    sub_14005a288",
    "movsx   edi, word [rsp+0x68]",
    "mov     r8d, dword [rsp+0x6c]",
    "mov     r9d, edi",
    "mov     edx, 0x5c",
    "mov     rcx, rbp",
    "mov     rbx, rax",
    "mov     dword [rsp+0x20], r14d",
    "call    sub_140032364",
    "mov     r9d, edi",
    "mov     r8, rbx",
    "mov     rcx, rbp",
    "mov     edx, eax",
    "call    sub_140032c40",
    "mov     eax, dword [rsp+0x6c]",
    "mov     r8d, dword [rsp+0x88]",
    "mov     r9d, r14d",
    "mov     edx, 0x84",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x28], edi",
    "mov     dword [rsp+0x20], eax",
    "call    sub_140032678",
    "mov     edi, dword [rsp+0x78]",
    "mov     eax, dword [rsp+0x90]",
    "mov     edx, 0x1",
    "inc     eax",
    "movsxd  r8, eax",
    "call    memset",
    "movsxd  r11, dword [rsp+0x90]",
    "mov     rdx, qword [rsp+0x80]",
    "mov     byte [r11+rdx+0x1], 0x0",
    "test    ebx, ebx",
    "js      0x1400551ec",
    "mov     rcx, qword [rsp+0xb8]",
    "call    sub_1400799ec",
    "test    r15d, r15d",
    "je      0x140055239",
    "mov     rax, qword [r13+0x8]",
    "lea     ecx, [rdi+rsi]",
    "mov     r8d, r15d",
    "movsx   r9d, word [r14+rax]",
    "mov     dword [rsp+0x20], ecx",
    "mov     rdx, r12",
    "mov     rcx, rbp",
    "call    sub_1400469b0",
    "mov     edx, 0x1",
    "lea     eax, [rdx+0x1]",
    "add     edi, edx",
    "add     r14, rax",
    "cmp     edi, ebx",
    "jl      0x1400550c8",
    "mov     rbx, qword [rsp+0xd0]",
    "mov     rsi, qword [rsp+0x160]",
    "mov     r15d, dword [rsp+0xb4]",
    "test    r15d, r15d",
    "je      0x1400552b6",
    "test    r15d, r15d",
    "je      0x1400553e7",
    "xor     ebx, ebx",
    "lea     eax, [rbx+0x2]",
    "cmp     r15d, eax",
    "jne     0x1400552f2",
    "movsxd  rax, dword [rsp+0xc4]",
    "test    eax, eax",
    "js      0x140055205",
    "movsxd  rcx, ebx",
    "movsxd  rax, edi",
    "sub     rcx, rax",
    "mov     byte [rcx+rdx], 0x0",
    "mov     rcx, qword [rsp+0xb8]",
    "call    sub_1400799ec",
    "dec     dword [rsi+0x44]",
    "mov     eax, dword [rsi+0x44]",
    "mov     dword [rsp+0x9c], eax",
    "jmp     0x1400552c3",
    "xor     r9d, r9d",
    "mov     rcx, rbp",
    "test    r13, r13",
    "je      0x14005551e",
    "cmp     dword [r12+0x54], 0x0",
    "mov     ebx, dword [rsp+0x160]",
    "jne     0x14005544a",
    "cmp     dword [r12+0x54], 0x0",
    "jne     0x14005533a",
    "and     dword [rsp+0x20], ebx",
    "lea     edx, [rbx+0x11]",
    "xor     r9d, r9d",
    "xor     r8d, r8d",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "mov     ebx, eax",
    "mov     eax, dword [rsp+0xa8]",
    "test    eax, eax",
    "je      0x14005521a",
    "mov     rcx, rax",
    "movsxd  rax, edi",
    "sub     rcx, rax",
    "mov     byte [rcx+rdx], 0x0",
    "cmp     dword [rsp+0xac], 0x0",
    "jne     0x140055357",
    "mov     r8d, edi",
    "mov     edx, 0x29",
    "mov     dword [rsp+0x20], r14d",
    "call    sub_140032364",
    "mov     dword [rsp+0x8c], eax",
    "jmp     0x140055443",
    "mov     ebx, dword [rsp+0x88]",
    "and     dword [rsp+0x20], r9d",
    "lea     edx, [r9+0x24]",
    "mov     r8d, ebx",
    "call    sub_140032364",
    "cmp     dword [r12+0x54], 0x0",
    "mov     r8d, ebx",
    "mov     dword [rsp+0x8c], eax",
    "mov     rcx, rbp",
    "je      0x140055431",
    "mov     edi, dword [rsp+0x60]",
    "movsxd  rdx, dword [rsp+0x64]",
    "movsxd  rdi, dword [rsp+0x60]",
    "mov     rax, qword [rsp+0x80]",
    "mov     rcx, rdx",
    "sub     rcx, rdi",
    "cmp     byte [rcx+rax], 0x0",
    "je      0x140055452",
    "mov     eax, 0x2",
    "cmp     r15d, eax",
    "jne     0x140055357",
    "lea     rax, [rsp+0x98]",
    "mov     r9b, 0x8",
    "mov     r8d, 0x62",
    "mov     qword [rsp+0x38], rax",
    "lea     rax, [rsp+0x64]",
    "mov     rdx, r12",
    "mov     qword [rsp+0x30], rax",
    "mov     rax, qword [rsp+0x80]",
    "mov     rcx, rsi",
    "mov     qword [rsp+0x28], rax",
    "mov     eax, dword [rsp+0x60]",
    "mov     dword [rsp+0x20], eax",
    "call    sub_14005cf58",
    "mov     edi, dword [rsp+0x78]",
    "mov     edx, eax",
    "mov     rcx, rbp",
    "call    sub_140032b38",
    "mov     ebx, dword [rsp+0x160]",
    "and     dword [rsp+0x20], 0x0",
    "mov     r9d, r14d",
    "mov     edx, 0x7f",
    "xor     r9d, r9d",
    "mov     dword [rsp+0x20], r14d",
    "lea     edx, [r9+0x5a]",
    "jmp     0x14005543e",
    "cmp     byte [rsi+0x1e], 0x0",
    "mov     ecx, dword [rsp+0xc4]",
    "mov     r8, qword [rsp+0xd8]",
    "mov     dword [rsp+0x50], ecx",
    "mov     byte [rsp+0x48], r15b",
    "mov     byte [rsp+0x40], 0xb",
    "sete    al",
    "mov     r9d, edx",
    "mov     rdx, r12",
    "mov     byte [rsp+0x38], al",
    "mov     eax, dword [rsp+0x98]",
    "mov     word [rsp+0x30], bx",
    "mov     rcx, rsi",
    "mov     dword [rsp+0x28], r14d",
    "mov     dword [rsp+0x20], eax",
    "call    sub_1400556ec",
    "xor     r12d, r12d",
    "lea     edi, [r12+0x1]",
    "mov     rbx, qword [r12+0x60]",
    "test    rbx, rbx",
    "je      0x14005547e",
    "cmp     dword [r12+0x54], 0x0",
    "je      0x14005553c",
    "mov     r9d, dword [rsp+0x9c]",
    "movsx   eax, bx",
    "mov     r8d, edx",
    "mov     dword [rsp+0x28], eax",
    "mov     edx, 0x1c",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], r14d",
    "call    sub_140032678",
    "jmp     0x14005544e",
    "mov     edx, ebx",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     dword [rax+0x8], ecx",
    "call    sub_140032364",
    "mov     ebx, dword [rsp+0x8c]",
    "mov     dword [rsp+0x20], r12d",
    "cmp     r13, r12",
    "je      0x1400555d6",
    "mov     edx, dword [rsp+0x9c]",
    "call    sub_14003278c",
    "mov     rcx, qword [rsp+0xb8]",
    "call    sub_1400799ec",
    "jmp     0x1400555f8",
    "mov     rdx, r12",
    "mov     rcx, rsi",
    "call    sub_1400709f0",
    "mov     rax, qword [rsi+0x90]",
    "xor     r12d, r12d",
    "cmp     rax, r12",
    "mov     rcx, rsi",
    "cmovne  rcx, rax",
    "lea     eax, [r12+0x1]",
    "mov     byte [rcx+0x21], al",
    "cmp     r15d, eax",
    "jne     0x1400554cd",
    "mov     rax, qword [rsp+0xa0]",
    "mov     edx, dword [rsp+0x64]",
    "xor     r8d, r8d",
    "mov     r9d, ebx",
    "lea     edx, [r8+0xb]",
    "mov     r8d, dword [rsp+0x88]",
    "lea     r9d, [rbx+0x1]",
    "mov     edx, 0x5",
    "jmp     0x1400555e0",
    "cmp     byte [rsi+0x1e], 0x0",
    "jne     0x14005561a",
    "mov     edi, 0x1",
    "xor     r8d, r8d",
    "mov     rcx, rbp",
    "lea     edx, [rdi+0x9]",
    "mov     r9d, edi",
    "mov     dword [rsp+0x20], r14d",
    "call    sub_140032364",
    "lea     r9d, [rdi-0xd]",
    "mov     r8, rbx",
    "mov     edx, eax",
    "mov     rcx, rbp",
    "call    sub_140032c40",
    "movsxd  r11, dword [rbp+0x90]",
    "cmp     r11d, r12d",
    "jle     0x14005558f",
    "lea     edx, [rax+0x74]",
    "xor     r9d, r9d",
    "mov     r8d, edi",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], r12d",
    "call    sub_140032364",
    "cmp     qword [rsi+0x90], r12",
    "jne     0x1400554cd",
    "mov     rbx, qword [rbx+0x28]",
    "test    rbx, rbx",
    "jne     0x140055470",
    "mov     eax, dword [rsp+0x94]",
    "test    eax, eax",
    "je      0x14005518d",
    "cmp     qword [rsi+0x98], 0x0",
    "jne     0x14005561a",
    "call    sub_140032364",
    "mov     edx, ebx",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     dword [rax+0x8], ecx",
    "mov     rcx, rbp",
    "cmp     r15d, r12d",
    "je      0x1400555b2",
    "mov     rax, qword [rbp+0x88]",
    "lea     rcx, [r11+r11*2]",
    "lea     edx, [rdi+0x1]",
    "mov     word [rax+rcx*8-0x16], dx",
    "jmp     0x14005558f",
    "mov     byte [rsi+0x20], r12b",
    "cmp     qword [rbx], rax",
    "je      0x14005547e",
    "mov     r14, qword [rsp+0xa0]",
    "and     dword [rsp+0x20], 0x0",
    "mov     r9d, edi",
    "mov     r8d, eax",
    "mov     edx, 0x51",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "mov     edx, edi",
    "mov     rcx, rbp",
    "call    sub_140033bb0",
    "and     qword [rsp+0x20], 0x0",
    "lea     r9, [rel data_1400f6180]  {\"rows deleted\"}",
    "xor     r8d, r8d",
    "xor     edx, edx",
    "mov     rcx, rbp",
    "call    sub_140033c58",
    "jmp     0x14005518d",
    "cmp     qword [rsi+0x88], 0x0",
    "je      0x14005561a",
    "mov     rcx, rsi",
    "call    sub_14005a74c"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}