{
  "address": "0x140061ea0",
  "rules": [
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/1a6c04bed22346cdaee8fbdaa0f123d3",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop"
  ],
  "disassembly": [
    "mov     r11, rsp {__return_addr}",
    "mov     qword [r11+0x10 {__saved_rbx}], rbx",
    "mov     qword [r11+0x18 {arg_18}], r8",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0xa0",
    "movsxd  r14, edx",
    "xor     edx, edx  {0x0}",
    "mov     rbx, r8",
    "lea     r8d, [rdx+0x1]",
    "mov     rsi, rcx",
    "lea     rax, [rel data_1400f4e2c]  {\"table\"}",
    "mov     qword [r11-0x70 {var_70}], rax  {data_1400f4e2c, \"table\"}",
    "mov     byte [rcx+0xb5], r8b  {0x1}",
    "cmp     r14d, r8d",
    "mov     qword [rsp+0x48 {var_90}], rsi",
    "mov     dword [r11-0x80 {var_80}], r14d",
    "mov     dword [rsp+0x5c {var_7c}], edx  {0x0}",
    "lea     rcx, [rel data_1400f43b8]",
    "mov     qword [rsp+0x50 {var_88}], rbx",
    "mov     dword [r11-0x78 {var_78}], r9d",
    "mov     r15d, edx  {0x0}",
    "mov     qword [r11-0x48 {var_48}], rdx  {0x0}",
    "mov     dword [rsp+0x64 {var_74}], edx  {0x0}",
    "lea     rax, [rel data_1400f5788]  {\"sqlite_temp_master\"}",
    "lea     r8, [r11-0x70 {var_70}]",
    "cmovne  rax, rcx  {data_1400f43b8, \"sqlite_master\"}",
    "xor     r9d, r9d",
    "lea     rcx, [rsp+0x48 {var_90}]",
    "mov     qword [rsp+0xe0 {arg_8}], rax",
    "mov     qword [r11-0x68 {var_68}], rax",
    "mov     qword [r11-0x60 {var_60}], rax",
    "lea     rax, [rel data_1400f4be0]",
    "lea     edx, [r9+0x5]",
    "mov     qword [r11-0x58 {var_58}], rax  {data_1400f4be0}",
    "lea     rax, [rel data_1400f66e0]  {\"CREATE TABLE x(type text,name te\u2026\"}",
    "mov     qword [r11-0x50 {var_50}], rax  {data_1400f66e0, \"CREATE TABLE x(type text,name te\u2026\"}",
    "call    sub_140061ca8",
    "mov     edi, dword [rsp+0x5c {var_7c}]",
    "test    edi, edi",
    "jne     0x14006225f",
    "cmp     edi, 0x7",
    "je      0x14006226c",
    "mov     r12, qword [rsi+0x20]",
    "mov     rbp, r14",
    "shl     rbp, 0x5",
    "mov     r13, qword [r12+rbp+0x8]",
    "test    r13, r13",
    "jne     0x140061f81",
    "mov     rcx, rsi",
    "call    sub_140016efc",
    "cmp     edi, 0xc0a",
    "jne     0x140062274",
    "cmp     byte [r13+0x10], r15b",
    "jne     0x140062079",
    "mov     rax, qword [r12+0x38]",
    "lea     edx, [rdi+0x1]",
    "or      word [rax+0x72], dx",
    "jmp     0x14006227f",
    "mov     edx, r14d",
    "mov     rcx, rsi",
    "call    sub_14004e2cc",
    "mov     r13d, 0x1",
    "mov     al, byte [r13+0x10]",
    "mov     rbx, qword [r13+0x8]",
    "xor     edi, edi  {0x0}",
    "cmp     al, 0x2",
    "je      0x14006203e",
    "mov     rbx, qword [rsp+0xe8 {__saved_rbx}]",
    "mov     byte [rsi+0xb5], 0x0",
    "mov     eax, edi",
    "add     rsp, 0xa0",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     rcx, qword [r12+rbp+0x8]",
    "inc     r10d",
    "mov     edx, r10d",
    "call    sub_14002efb0",
    "add     r8, rdi",
    "cmp     r10d, 0x5",
    "jl      0x14006208b",
    "mov     eax, dword [rsi+0x30]",
    "bt      rax, 0x19",
    "jae     0x1400620c0",
    "mov     r13d, 0x1",
    "jmp     0x140062049",
    "lea     r15d, [rdi+0x1]",
    "cmp     al, r15b",
    "je      0x140062046",
    "mov     edx, dword [rsp+0x40 {var_98}]",
    "xor     edx, edx  {0x0}",
    "mov     qword [rsp+0x30 {s}], rdx  {0x0}",
    "mov     qword [rsp+0x38 {var_a0}], rdx  {0x0}",
    "mov     dword [rsp+0x40 {var_98}], edx  {0x0}",
    "jmp     0x1400620c4",
    "test    edi, edi",
    "je      0x14006206c",
    "mov     r13d, r15d  {0x1}",
    "mov     rax, qword [r13]",
    "mov     ecx, dword [rax+0x30]",
    "bt      rcx, 0x19",
    "jae     0x140061fca",
    "mov     rax, qword [rsi+0x20]",
    "mov     rcx, qword [rax+rbp+0x18]",
    "or      word [rcx+0x72], di",
    "test    r14d, r14d",
    "jne     0x1400620ea",
    "mov     rcx, qword [r12+rbp+0x18]",
    "mov     eax, dword [rsp+0x30 {s}]",
    "mov     dword [rcx], eax",
    "test    edx, edx",
    "je      0x14006210c",
    "mov     rbx, qword [rsp+0xf0 {arg_18}]",
    "mov     r15d, r13d  {0x1}",
    "jmp     0x14006207f",
    "mov     ecx, edi",
    "call    sub_14008335c",
    "mov     rcx, qword [rsp+0xf0 {arg_18}]",
    "mov     rdx, rsi",
    "mov     r8, rax",
    "call    sub_140016eb4",
    "jmp     0x14006225b",
    "mov     eax, 0xffef",
    "and     word [rbx+0x26], ax",
    "movzx   eax, word [rbx+0x26]",
    "cmp     dword [rbx+0x3c], edi",
    "jne     0x140061fe4",
    "mov     rax, qword [rbx]",
    "cmp     byte [rax+0x12], dil",
    "jne     0x140061fca",
    "mov     al, byte [rsp+0x34 {s+0x4}]",
    "mov     rcx, qword [r12+rbp+0x18]",
    "mov     byte [rcx+0x70], al",
    "mov     rax, qword [r12+rbp+0x18]",
    "cmp     byte [rax+0x70], 0x0",
    "jne     0x140062163",
    "mov     dword [rax+0x74], 0xfffff830  {0xfffff830}",
    "mov     rax, qword [r12+rbp+0x18]",
    "mov     rcx, qword [r12+rbp+0x8]",
    "mov     edx, dword [rax+0x74]",
    "call    sub_140027e80",
    "movzx   eax, byte [rsi+0x5e]",
    "cmp     edx, eax",
    "je      0x140062119",
    "mov     al, byte [rsp+0x40 {var_98}]",
    "and     al, 0x3",
    "movzx   ecx, al",
    "cmove   ecx, r13d  {0x1}",
    "mov     byte [rsi+0x5e], cl",
    "jmp     0x140062119",
    "xor     r10d, r10d",
    "lea     r8, [rsp+0x30 {s}]",
    "lea     edi, [r10+0x4]",
    "test    edi, edi",
    "je      0x14006227f",
    "cmp     qword [rbx+0x18], 0x0",
    "jne     0x140061ff9",
    "or      ax, 0x10",
    "mov     word [rbx+0x26], ax",
    "mov     eax, 0xfffe",
    "and     word [rbx+0x26], ax",
    "mov     rax, qword [r12+rbp+0x18]",
    "cmp     byte [rax+0x70], dil",
    "jbe     0x140062177",
    "mov     byte [rax+0x70], r13b  {0x1}",
    "mov     al, byte [rsi+0x5e]",
    "mov     rcx, qword [r12+rbp+0x18]",
    "mov     byte [rcx+0x71], al",
    "mov     rax, qword [r12+rbp+0x18]",
    "cmp     dword [rax+0x74], 0x0",
    "jne     0x140062148",
    "lea     r8, [rel data_1400f5630]  {\"attached databases must use the \u2026\"}",
    "test    edi, edi",
    "je      0x140062005",
    "mov     rcx, rbx",
    "call    sub_1400280b8",
    "mov     edi, eax",
    "test    eax, eax",
    "je      0x140061fe4",
    "test    r14d, r14d",
    "jne     0x140062187",
    "lea     r8, [rel data_1400f6728]  {\"unsupported file format\"}",
    "jmp     0x1400620f9",
    "test    r15d, r15d",
    "je      0x14006225b",
    "cmp     dil, 0x5",
    "jne     0x14006201d",
    "mov     rcx, rbx",
    "call    sub_140028404",
    "mov     r8, qword [rsi+0x20]",
    "mov     r9, qword [rsp+0xe0 {arg_8}]",
    "lea     rdx, [rel data_1400f6740]  {\"SELECT*FROM\"%w\".%s ORDER BY rowi\u2026\"}",
    "mov     r8, qword [r8+rbp]",
    "mov     rcx, rsi",
    "call    _printf_p_l",
    "mov     rbx, qword [rsi+0x1a0]",
    "xor     edx, edx  {0x0}",
    "mov     qword [rsi+0x1a0], rdx  {0x0}",
    "mov     qword [rsp+0x20 {var_b8}], rdx  {0x0}",
    "lea     r9, [rsp+0x48 {var_90}]",
    "lea     r8, [rel sub_140061ca8]",
    "mov     rdx, rax",
    "mov     rcx, rsi",
    "mov     r13, rax",
    "call    sub_14005db80",
    "mov     qword [rsi+0x1a0], rbx",
    "test    eax, eax",
    "mov     edi, eax",
    "cmove   edi, dword [rsp+0x5c {var_7c}]",
    "test    r13, r13",
    "je      0x1400621f5",
    "cmp     dword [rsp+0x34 {s+0x4}], edi",
    "jl      0x140062187",
    "mov     rdx, rsi",
    "mov     rcx, rbx",
    "call    sub_140016eb4",
    "mov     edi, r13d  {0x1}",
    "jmp     0x140062239",
    "mov     rbx, qword [r12+rbp+0x8]",
    "xor     edx, edx  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140029190",
    "test    eax, eax",
    "jne     0x14006225b",
    "test    edi, edi",
    "jne     0x140062046",
    "cmp     byte [rbx+0x24], 0x0",
    "jne     0x14006201d",
    "test    edi, edi",
    "jne     0x140062204",
    "mov     rdx, r13",
    "mov     rcx, rsi",
    "call    sub_1400169a8",
    "and     qword [rsi+0x30], 0xfffffffffffffffd",
    "xor     edx, edx  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140029240",
    "cmp     byte [r13+0x10], dil",
    "jne     0x14006202b",
    "mov     rcx, rbx",
    "call    sub_140027a28",
    "test    eax, eax",
    "jne     0x140061fe4",
    "cmp     byte [rsi+0x61], 0x0",
    "je      0x140062217",
    "mov     edx, r14d",
    "mov     rcx, rsi",
    "call    sub_14004cd04",
    "mov     byte [r13+0x10], r15b  {0x1}",
    "mov     r13d, r15d  {0x1}",
    "cmp     byte [rbx+0x24], r13b",
    "jae     0x140062049",
    "add     dword [rbx+0x38], r15d",
    "test    edi, edi",
    "je      0x140062225",
    "mov     rcx, rsi",
    "mov     edi, 0x7",
    "call    sub_14004e348",
    "mov     byte [rbx+0x24], r13b  {0x1}",
    "jmp     0x140062049",
    "mov     rax, qword [rsi+0x20]",
    "mov     edx, 0x1",
    "mov     rcx, qword [rax+rbp+0x18]",
    "or      word [rcx+0x72], dx",
    "xor     edi, edi  {0x0}",
    "mov     eax, dword [rsi+0x30]",
    "bt      rax, 0x1b",
    "jae     0x140062239"
  ],
  "high_level_IL": [
    "int64_t r14 = sx.q(arg2)",
    "int64_t* rbx = arg3",
    "char const* const var_70 = \"table\"",
    "*(arg1 + 0xb5) = 1",
    "int64_t* var_90 = arg1",
    "int32_t var_80 = r14.d",
    "int32_t var_7c = 0",
    "int64_t* var_88 = rbx",
    "int32_t r9",
    "int32_t var_78 = r9",
    "int32_t r15 = 0",
    "int64_t var_48 = 0",
    "int32_t var_74 = 0",
    "char const* const rax = \"sqlite_temp_master\"",
    "if (r14.d != 1)",
    "rax = \"sqlite_master\"",
    "arg_8 = rax",
    "char const* const var_68 = rax",
    "char const* const var_60 = rax",
    "void* const var_58 = &data_1400f4be0",
    "char const* const var_50 = \"CREATE TABLE x(type text,name te\u2026\"",
    "int512_t zmm0 = sub_140061ca8(&var_90, 5, &var_70, arg4)",
    "int32_t rdi = var_7c",
    "if (rdi != 0)",
    "label_14006226a:",
    "if (rdi == 7 || rdi == 0xc0a)",
    "sub_140016efc(arg1)",
    "sub_14004e2cc(arg1, r14.d)",
    "void* r12_1 = arg1[4]",
    "int64_t rbp_2 = r14 << 5",
    "int64_t* r13_1 = *(r12_1 + rbp_2 + 8)",
    "if (r13_1 != 0)",
    "if (r13_1[2].b != 0)",
    "goto label_14006207f",
    "char rax_1 = r13_1[2].b",
    "int64_t* rbx_1 = r13_1[1]",
    "rdi = 0",
    "if (rax_1 != 2 && rax_1 != 1)",
    "if (test_bit(zx.q(*(*r13_1 + 0x30)), 0x19) && *(*rbx_1 + 0x12) == 0)",
    "*(rbx_1 + 0x26) &= 0xfffe",
    "*(rbx_1 + 0x26) &= 0xffef",
    "if (*(rbx_1 + 0x3c) == 0)",
    "*(rbx_1 + 0x26) |= 0x10",
    "while (true)",
    "if (rbx_1[3] == 0)",
    "int32_t rax_6",
    "rax_6, zmm0 = sub_1400280b8(rbx_1)",
    "rdi = rax_6",
    "if (rax_6 == 0)",
    "continue",
    "if (rdi != 0)",
    "zmm0 = sub_140028404(rbx_1)",
    "if (rdi.b != 5)",
    "break",
    "if (*(rbx_1 + 0x24) != 0)",
    "break",
    "if (sub_140027a28(rbx_1) == 0)",
    "break",
    "if (rdi == 0)",
    "if (r13_1[2].b == rdi.b)",
    "rbx_1[7].d += 1",
    "r13_1[2].b = 1",
    "if (*(rbx_1 + 0x24) u< 1)",
    "*(rbx_1 + 0x24) = 1",
    "if (rdi == 0)",
    "rbx = arg3",
    "r15 = 1",
    "label_14006207f:",
    "int32_t i = 0",
    "int64_t s",
    "int64_t* r8_2 = &s",
    "i += 1",
    "sub_14002efb0(*(r12_1 + rbp_2 + 8), zx.q(i), r8_2)",
    "r8_2 += 4",
    "do while (i s< 5)",
    "int32_t var_98",
    "int32_t rdx_3",
    "if (not(test_bit(zx.q(arg1[6].d), 0x19)))",
    "rdx_3 = var_98",
    "rdx_3 = 0",
    "__builtin_memset(&s, 0, 0x14)",
    "**(r12_1 + rbp_2 + 0x18) = s.d",
    "uint64_t rax_10",
    "if (rdx_3 == 0)",
    "void* rcx_11 = *(arg1[4] + rbp_2 + 0x18)",
    "*(rcx_11 + 0x72) |= 4",
    "label_140062119:",
    "rax_10.b = *(arg1 + 0x5e)",
    "*(*(r12_1 + rbp_2 + 0x18) + 0x71) = rax_10.b",
    "void* rax_11 = *(r12_1 + rbp_2 + 0x18)",
    "if (*(rax_11 + 0x74) == 0)",
    "*(rax_11 + 0x74) = 0xfffff830",
    "sub_140027e80(*(r12_1 + rbp_2 + 8), *(*(r12_1 + rbp_2 + 0x18) + 0x74))",
    "rax_11.b = s:4.b",
    "*(*(r12_1 + rbp_2 + 0x18) + 0x70) = rax_11.b",
    "void* rax_13 = *(r12_1 + rbp_2 + 0x18)",
    "if (*(rax_13 + 0x70) == 0)",
    "*(rax_13 + 0x70) = 1",
    "if (*(*(r12_1 + rbp_2 + 0x18) + 0x70) u<= 4)",
    "if (r14.d == 0 && s:4.d s>= 4)",
    "arg1[6] &= 0xfffffffffffffffd",
    "void* rax_15 = _printf_p_l(arg1, \"SELECT*FROM\"%w\".%s ORDER BY rowi\u2026\", *(arg1[4] + rbp_2), zmm0)",
    "int64_t rbx_2 = arg1[0x34]",
    "arg1[0x34] = 0",
    "int32_t rax_16",
    "int512_t zmm0_1",
    "rax_16, zmm0_1 = sub_14005db80(arg1, rax_15, sub_140061ca8, &var_90, nullptr)",
    "arg1[0x34] = rbx_2",
    "rdi = rax_16",
    "if (rax_16 == 0)",
    "rdi = var_7c",
    "if (rax_15 != 0)",
    "sub_1400169a8(arg1, rax_15)",
    "if (rdi == 0)",
    "sub_14004cd04(arg1, r14.d, zmm0_1)",
    "if (*(arg1 + 0x61) != 0)",
    "rdi = 7",
    "sub_14004e348(arg1)",
    "if (rdi == 0 || test_bit(zx.q(arg1[6].d), 0x1b))",
    "void* rcx_20 = *(arg1[4] + rbp_2 + 0x18)",
    "*(rcx_20 + 0x72) |= 1",
    "rdi = 0",
    "sub_140016eb4(rbx, arg1, \"unsupported file format\")",
    "rdi = 1",
    "if (r14.d == 0)",
    "rax_10.b = var_98.b",
    "rax_10.b &= 3",
    "char rcx_9 = rax_10.b",
    "if (rax_10.b == 0)",
    "rcx_9 = 1",
    "*(arg1 + 0x5e) = rcx_9",
    "goto label_140062119",
    "if (rdx_3 == zx.d(*(arg1 + 0x5e)))",
    "goto label_140062119",
    "sub_140016eb4(rbx, arg1, \"attached databases must use the \u2026\")",
    "rdi = 1",
    "if (r15 != 0)",
    "int64_t* rbx_3 = *(r12_1 + rbp_2 + 8)",
    "if (sub_140029190(rbx_3, nullptr) == 0)",
    "sub_140029240(rbx_3, 0)",
    "sub_140016eb4(arg3, arg1, sub_14008335c(rdi))",
    "if (rdi != 0)",
    "goto label_14006226a",
    "void* rax_2 = *(r12_1 + 0x38)",
    "*(rax_2 + 0x72) |= rdi.w + 1",
    "*(arg1 + 0xb5) = 0",
    "return zx.q(rdi)"
  ]
}