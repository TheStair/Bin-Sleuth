{
  "address": "0x14005e6e0",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "contain loop",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e"
  ],
  "disassembly": [
    "mov     rax, rsp {__return_addr}",
    "mov     qword [rax+0x8 {__saved_rbx}], rbx",
    "mov     qword [rax+0x10 {__saved_rbp}], rbp",
    "mov     qword [rax+0x18 {__saved_rsi}], rsi",
    "mov     qword [rax+0x20 {__saved_rdi}], rdi",
    "push    r12 {__saved_r12}",
    "sub     rsp, 0x20",
    "xor     ebp, ebp  {0x0}",
    "mov     rsi, rcx",
    "lea     r12, [rel data_1400d7eb0]",
    "lea     ebx, [rbp+0x3e]",
    "mov     r11d, ebp  {0x0}",
    "cmp     rdx, rbp",
    "je      0x14005e743",
    "neg     rdx",
    "sbb     eax, eax",
    "jmp     0x14005e738",
    "lea     r11d, [rdi+0x1]",
    "mov     rcx, rsi",
    "call    sub_1400192b0",
    "cmp     eax, ebp",
    "je      0x14005e74c",
    "lea     eax, [rbx+r11]",
    "cdq     ",
    "sub     eax, edx",
    "sar     eax, 0x1",
    "movsxd  rdi, eax",
    "lea     rcx, [rdi+rdi*2]",
    "mov     rdx, qword [r12+rcx*8]",
    "cmp     rsi, rbp",
    "jne     0x14005e72b",
    "mov     rsi, qword [rsp+0x40 {__saved_rsi}]",
    "lea     rcx, [rdi+rdi*2]",
    "mov     rdi, qword [rsp+0x48 {__saved_rdi}]",
    "cmp     r11d, ebx",
    "mov     rbx, qword [rsp+0x30 {__saved_rbx}]",
    "lea     rax, [r12+rcx*8]",
    "cmovg   rax, rbp  {0x0}",
    "mov     rbp, qword [rsp+0x38 {__saved_rbp}]",
    "add     rsp, 0x20",
    "pop     r12 {__saved_r12}",
    "retn     {__return_addr}",
    "jge     0x14005e743",
    "lea     ebx, [rdi-0x1]",
    "jmp     0x14005e747",
    "cmp     r11d, ebx",
    "jle     0x14005e70b"
  ],
  "high_level_IL": [
    "int32_t rbx = 0x3e",
    "int32_t r11 = 0",
    "int64_t rdi_1",
    "int32_t temp0_1",
    "int32_t temp1_1",
    "temp0_1:temp1_1 = sx.q(rbx + r11)",
    "int32_t rax_4 = (temp1_1 - temp0_1) s>> 1",
    "rdi_1 = sx.q(rax_4)",
    "int64_t rdx_2 = (&data_1400d7eb0)[rdi_1 * 3]",
    "int32_t rax_5",
    "if (arg1 != 0)",
    "if (rdx_2 != 0)",
    "rax_5 = sub_1400192b0(arg1, rdx_2)",
    "goto label_14005e738",
    "r11 = (rdi_1 + 1).d",
    "rax_5 = sbb.d(rax_4, rax_4, rdx_2 != 0)",
    "label_14005e738:",
    "if (rax_5 == 0)",
    "break",
    "if (rax_5 s>= 0)",
    "r11 = (rdi_1 + 1).d",
    "rbx = (rdi_1 - 1).d",
    "do while (r11 s<= rbx)",
    "if (r11 s> rbx)",
    "return nullptr",
    "return &(&data_1400d7eb0)[rdi_1 * 3]"
  ]
}