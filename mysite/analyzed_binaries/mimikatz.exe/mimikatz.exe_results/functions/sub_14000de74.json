{
  "address": "0x14000de74",
  "rules": [
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "encode data using XOR",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "delay execution",
    "contain loop"
  ],
  "disassembly": [
    "mov     rax, rsp",
    "mov     qword [rax+0x8], rbx",
    "mov     qword [rax+0x10], rbp",
    "mov     qword [rax+0x18], rsi",
    "mov     qword [rax+0x20], rdi",
    "push    r12",
    "sub     rsp, 0x130",
    "xor     r12d, r12d",
    "mov     rbx, rcx",
    "lea     rcx, [rsp+0x3c]",
    "lea     edi, [r12+0x1]",
    "xor     edx, edx",
    "mov     r8d, 0xf4",
    "mov     byte [rsp+0x31], r12b",
    "mov     byte [rsp+0x32], r12b",
    "mov     byte [rsp+0x33], r12b",
    "mov     byte [rsp+0x30], dil",
    "mov     byte [rsp+0x3a], dil",
    "mov     byte [rsp+0x34], r12b",
    "mov     byte [rsp+0x35], r12b",
    "mov     byte [rsp+0x36], 0x6",
    "mov     byte [rsp+0x37], r12b",
    "mov     byte [rsp+0x38], 0xaa",
    "mov     byte [rsp+0x39], r12b",
    "mov     byte [rsp+0x3b], 0x86",
    "call    memset",
    "xor     r11b, r11b",
    "xor     cl, cl",
    "movzx   eax, r11b",
    "add     r11b, dil",
    "xor     cl, byte [rsp+rax+0x3a]",
    "cmp     r11b, 0x2",
    "jb      0x14000deee",
    "mov     byte [rsp+0x3c], cl",
    "lea     rcx, [rel data_1400ec370]",
    "mov     byte [rsp+0x3d], 0xbb",
    "call    sub_14000c030",
    "lea     rcx, [rsp+0x30]",
    "mov     r8d, edi",
    "mov     edx, 0xe",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "mov     esi, 0xa",
    "mov     ecx, esi",
    "call    qword [rel Sleep]",
    "mov     ebp, 0x100",
    "lea     rdx, [rsp+0x30]",
    "mov     r8d, ebp",
    "mov     rcx, rbx",
    "call    HidD_SetFeature",
    "test    al, al",
    "je      0x14000e2bb",
    "call    qword [rel GetLastError]",
    "lea     rcx, [rel data_1400ecc70]  {u\"ERROR rdm_send_receive ; HidD_Se\u2026\"}",
    "mov     ecx, esi",
    "call    qword [rel Sleep]",
    "lea     rdx, [rsp+0x30]",
    "mov     r8d, ebp",
    "mov     rcx, rbx",
    "call    HidD_GetFeature",
    "test    al, al",
    "je      0x14000e2ac",
    "call    qword [rel GetLastError]",
    "lea     rcx, [rel data_1400ecc00]  {u\"ERROR rdm_send_receive ; HidD_Ge\u2026\"}",
    "jmp     0x14000e2c8",
    "mov     al, byte [rsp+0x30]",
    "cmp     al, 0x3",
    "jne     0x14000e2a0",
    "mov     edx, eax",
    "movzx   edx, al",
    "lea     rcx, [rel data_1400ecb90]  {u\"ERROR rdm_send_receive ; Bad HID\u2026\"}",
    "jmp     0x14000e2ca",
    "movzx   ebx, word [rsp+0x36]",
    "cmp     bx, 0x6",
    "jb      0x14000e294",
    "call    sub_14000c030",
    "movzx   edx, bx",
    "lea     rcx, [rel data_1400ecb30]  {u\"ERROR rdm_send_receive ; Bad HID\u2026\"}",
    "jmp     0x14000e2ca",
    "lea     eax, [rbp-0x8]",
    "cmp     bx, ax",
    "ja      0x14000e294",
    "lea     rcx, [rel data_1400ec378]",
    "call    sub_14000c030",
    "movzx   edx, bx",
    "lea     rcx, [rsp+0x30]",
    "add     edx, 0x8",
    "mov     r8d, edi",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "mov     al, byte [rsp+0x38]",
    "sub     bl, 0x6",
    "cmp     al, 0xaa",
    "jne     0x14000e288",
    "movzx   edx, al",
    "lea     rcx, [rel data_1400ecac0]  {u\"ERROR rdm_send_receive ; Bad Chi\u2026\"}",
    "jmp     0x14000e2ca",
    "movzx   r8d, byte [rsp+0x3a]",
    "movzx   edx, bl",
    "dec     r8d",
    "cmp     r8d, edx",
    "jne     0x14000e27a",
    "lea     rcx, [rel data_1400eca30]  {u\"ERROR rdm_send_receive ; Bad HID\u2026\"}",
    "lea     r9d, [rdx+0x2]",
    "xor     r8b, r8b",
    "xor     cl, cl",
    "test    r9d, r9d",
    "jle     0x14000e014",
    "lea     r11, [rsp+0x130]",
    "mov     eax, r12d",
    "mov     rbx, qword [r11+0x10]",
    "mov     rbp, qword [r11+0x18]",
    "mov     rsi, qword [r11+0x20]",
    "mov     rdi, qword [r11+0x28]",
    "mov     rsp, r11",
    "pop     r12",
    "retn    ",
    "movzx   ebp, bl",
    "cmp     cl, byte [rsp+rbp+0x3c]",
    "jne     0x14000e268",
    "movzx   eax, r8b",
    "add     r8b, dil",
    "xor     cl, byte [rsp+rax+0x3a]",
    "movzx   eax, r8b",
    "cmp     eax, r9d",
    "jl      0x14000e000",
    "movzx   r8d, byte [rsp+rbp+0x3c]",
    "movzx   edx, cl",
    "lea     rcx, [rel data_1400ec9c0]  {u\"ERROR rdm_send_receive ; Bad CRC\u2026\"}",
    "jmp     0x14000e281",
    "mov     byte [rsp+rbp+0x3d], 0xbb",
    "movzx   r9d, byte [rsp+0x3b]",
    "mov     ecx, r9d",
    "test    r9d, r9d",
    "je      0x14000e205",
    "call    sub_14000c030",
    "jmp     0x14000e2cf",
    "mov     rsi, qword [rsp+0x160]",
    "mov     r12d, edi",
    "test    rsi, rsi",
    "je      0x14000e2cf",
    "sub     ecx, edi",
    "je      0x14000e0b3",
    "mov     rdi, qword [rsp+0x168]",
    "test    rdi, rdi",
    "je      0x14000e2cf",
    "cmp     bl, dil",
    "jne     0x14000e1f9",
    "sub     ecx, edi",
    "je      0x14000e098",
    "and     qword [rsi], 0x0",
    "mov     byte [rdi], 0x0",
    "test    bl, bl",
    "je      0x14000e2cf",
    "lea     rcx, [rel data_1400ec7c0]  {u\"ERROR rdm_send_receive ; data si\u2026\"}",
    "jmp     0x14000e2ca",
    "movzx   edx, byte [rsp+0x3c]",
    "mov     eax, 0x8c",
    "cmp     edx, eax",
    "jg      0x14000e17a",
    "lea     r8, [rel data_1400ec870]  {u\"checksum\"}",
    "sub     ecx, edi",
    "je      0x14000e08f",
    "mov     rdx, rbp",
    "mov     ecx, 0x40",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rsi], rax",
    "test    rax, rax",
    "je      0x14000e263",
    "mov     ecx, edx",
    "sub     ecx, 0x8f",
    "je      0x14000e1e6",
    "je      0x14000e171",
    "lea     r8, [rel data_1400ec888]  {u\"not COM port selected\"}",
    "jmp     0x14000e09f",
    "sub     ecx, edi",
    "je      0x14000e086",
    "xor     r12d, r12d",
    "jmp     0x14000e2cf",
    "lea     rdx, [rsp+0x3c]",
    "mov     r8, rbp",
    "mov     rcx, rax",
    "call    memcpy",
    "mov     byte [rdi], bl",
    "jmp     0x14000e2cf",
    "lea     r8, [rel data_1400ec550]  {u\"reader received unknown command\"}",
    "sub     ecx, edi",
    "je      0x14000e1dd",
    "lea     r8, [rel data_1400ec518]  {u\"authentication failure\"}",
    "jmp     0x14000e1ed",
    "mov     ecx, edx",
    "sub     ecx, 0x80",
    "je      0x14000e168",
    "mov     edx, r9d",
    "lea     rcx, [rel data_1400ec950]  {u\"ERROR rdm_send_receive ; Status \u2026\"}",
    "lea     r8, [rel data_1400ec8b8]  {u\"timeout reply\"}",
    "jmp     0x14000e09f",
    "sub     ecx, edi",
    "je      0x14000e07d",
    "call    sub_14000c030",
    "jmp     0x14000e2cf",
    "lea     r8, [rel data_1400ec590]  {u\"card does not support this comma\u2026\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, edi",
    "je      0x14000e1d4",
    "lea     rcx, [rel data_1400ec750]  {u\"ERROR rdm_send_receive ; Command\u2026\"}",
    "jmp     0x14000e0a9",
    "lea     r8, [rel data_1400ec380]  {u\"set OK\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, edi",
    "je      0x14000e15c",
    "lea     r8, [rel data_1400ec8d8]  {u\"check sequence\"}",
    "jmp     0x14000e09f",
    "sub     ecx, 0x2",
    "je      0x14000e074",
    "lea     r8, [rel data_1400ec5d8]  {u\"format of the command\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, edi",
    "je      0x14000e1cb",
    "lea     r8, [rel data_1400ec390]  {u\"set failure\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, edi",
    "je      0x14000e150",
    "lea     r8, [rel data_1400ec8f8]  {u\"receive\"}",
    "jmp     0x14000e09f",
    "sub     ecx, 0x3",
    "je      0x14000e06b",
    "lea     r8, [rel data_1400ec608]  {u\"does not support option mode\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, edi",
    "je      0x14000e1c2",
    "lea     r8, [rel data_1400ec3a8]  {u\"reader reply timeout\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, edi",
    "je      0x14000e144",
    "lea     r8, [rel data_1400ec908]  {u\"parameter value out of range\"}",
    "jmp     0x14000e09f",
    "cmp     ecx, 0xf5",
    "je      0x14000e205",
    "lea     r8, [rel data_1400ec648]  {u\"block does not exist\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, edi",
    "je      0x14000e1b9",
    "lea     r8, [rel data_1400ec3d8]  {u\"card does not exist\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, edi",
    "je      0x14000e138",
    "lea     r8, [rel data_1400ec720]  {u\"unknow error code!\"}",
    "jmp     0x14000e09f",
    "lea     r8, [rel data_1400ec678]  {u\"object has been locked\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, edi",
    "je      0x14000e1b0",
    "lea     r8, [rel data_1400ec400]  {u\"data response from the card\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, edi",
    "je      0x14000e12c",
    "lea     r8, [rel data_1400ec6a8]  {u\"lock operation did not succeed\"}",
    "jmp     0x14000e1ed",
    "cmp     ecx, edi",
    "jne     0x14000e1a9",
    "lea     r8, [rel data_1400ec440]  {u\"format or parameter of the comma\u2026\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, 0x2",
    "je      0x14000e120",
    "mov     r8, qword [rsp+0x20]",
    "jmp     0x14000e1ed",
    "lea     r8, [rel data_1400ec6e8]  {u\"operation did not succeed\"}",
    "jmp     0x14000e1ed",
    "lea     r8, [rel data_1400ec488]  {u\"unknown internal error\"}",
    "jmp     0x14000e1ed",
    "sub     ecx, 0x3",
    "je      0x14000e114",
    "lea     r8, [rel data_1400ec4b8]  {u\"initVal process\"}",
    "jmp     0x14000e1ed",
    "cmp     ecx, edi",
    "jne     0x14000e1a9",
    "lea     r8, [rel data_1400ec4d8]  {u\"wrong SNR during anticollision\"}",
    "jmp     0x14000e1ed"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}