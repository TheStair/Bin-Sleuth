{
  "address": "0x1400bbf30",
  "rules": [
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/dc118f3b61184df4a511ed4919cf656f",
    "contain loop",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/5f4c97f31ce341008ea23885a97305d8",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/5f4855375d6b45e9bd6b2a189e856211"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "mov     qword [rsp+0x10], rbp",
    "mov     qword [rsp+0x18], rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x20",
    "mov     r12d, 0x40",
    "mov     rbx, rdx",
    "mov     rbp, rcx",
    "mov     rdx, r12",
    "mov     ecx, r12d",
    "mov     r14, r9",
    "mov     rdi, r8",
    "call    qword [rel LocalAlloc]",
    "xor     r15d, r15d",
    "mov     qword [rbx], rax",
    "cmp     rax, r15",
    "je      0x1400bc2ca",
    "xor     eax, eax",
    "mov     qword [rax], r15",
    "mov     rcx, qword [rdi]",
    "call    qword [rel lstrlenW]",
    "mov     ecx, r12d",
    "mov     esi, eax",
    "lea     rdx, [rsi+rsi+0x3c]",
    "call    qword [rel LocalAlloc]",
    "mov     rcx, qword [rbx]",
    "mov     qword [rcx+0x8], rax",
    "mov     rcx, qword [rbx]",
    "mov     rcx, qword [rcx+0x8]",
    "cmp     rcx, r15",
    "je      0x1400bc038",
    "mov     rax, qword [rbx]",
    "mov     r13d, 0x1",
    "mov     dword [rax+0x10], r13d",
    "test    byte [rdi+0x50], 0x2",
    "je      0x1400bc052",
    "lea     r8d, [r12-0x4]",
    "xor     edx, edx",
    "call    memset",
    "mov     rax, qword [rbx]",
    "lea     r11d, [rsi+rsi+0x3c]",
    "mov     rcx, qword [rax+0x8]",
    "lea     r8d, [rsi+0x1]",
    "mov     dword [rcx], r11d",
    "mov     rax, qword [rbx]",
    "add     r8, r8",
    "mov     rcx, qword [rax+0x8]",
    "mov     dword [rcx+0x34], esi",
    "mov     rax, qword [rbx]",
    "mov     rdx, qword [rdi]",
    "mov     rcx, qword [rax+0x8]",
    "add     rcx, 0x38",
    "call    memcpy",
    "lea     rcx, [rdi+0x8]",
    "call    qword [rel IsValidSid]",
    "cmp     eax, r15d",
    "je      0x1400bc027",
    "mov     rcx, qword [rbx]",
    "mov     eax, dword [rdi+0x44]",
    "mov     dword [rcx+0x18], eax",
    "mov     rdx, qword [rdi]",
    "mov     rcx, qword [rbp]",
    "call    qword [rel _wcsicmp]",
    "mov     ecx, r15d",
    "cmp     eax, r15d",
    "mov     rax, qword [rbx]",
    "sete    cl",
    "mov     dword [rax+0x28], ecx",
    "mov     rax, qword [rbx]",
    "mov     qword [rax+0x30], r15",
    "cmp     dword [rdi+0x34], r15d",
    "jne     0x1400bc09e",
    "mov     rax, qword [rbx]",
    "or      dword [rax+0x10], 0x2",
    "mov     rax, qword [rbx]",
    "movdqu  xmm0, xmmword [rdi+0x24]",
    "mov     rcx, qword [rax+0x8]",
    "movdqu  xmmword [rcx+0x8], xmm0",
    "lea     rcx, [rdi+0x8]",
    "call    qword [rel GetLengthSid]",
    "mov     rcx, qword [rbx]",
    "lea     rdx, [rdi+0x8]",
    "mov     r8, qword [rcx+0x8]",
    "mov     dword [r8+0x4], eax",
    "mov     rax, qword [rbx]",
    "mov     rcx, qword [rax+0x8]",
    "add     rcx, 0x18",
    "mov     r8d, dword [rcx-0x14]",
    "call    memcpy",
    "mov     edx, 0x10",
    "mov     ecx, r12d",
    "call    qword [rel LocalAlloc]",
    "mov     rcx, qword [rbx]",
    "mov     qword [rcx+0x30], rax",
    "mov     rax, qword [rbx]",
    "mov     rcx, qword [rax+0x30]",
    "cmp     rcx, r15",
    "je      0x1400bc0c8",
    "cmp     word [rdi+0x38], r15w",
    "jne     0x1400bc09e",
    "mov     rax, qword [rbx]",
    "mov     ecx, dword [rax+0x18]",
    "lea     rdx, [rcx+rcx*2]",
    "mov     ecx, r12d",
    "shl     rdx, 0x3",
    "call    qword [rel LocalAlloc]",
    "mov     rcx, qword [rbx]",
    "mov     qword [rcx+0x20], rax",
    "mov     rax, qword [rbx]",
    "cmp     qword [rax+0x20], r15",
    "je      0x1400bc2ca",
    "movdqu  xmm0, xmmword [rdi+0x34]",
    "movdqu  xmmword [rcx], xmm0",
    "cmp     word [rdi+0x3a], r15w",
    "jne     0x1400bc09e",
    "mov     r12d, r15d",
    "cmp     dword [rax+0x18], r15d",
    "jbe     0x1400bc17a",
    "cmp     dword [rdi+0x3c], r15d",
    "jne     0x1400bc09e",
    "mov     rax, qword [rbx]",
    "mov     ecx, 0x40",
    "mov     edx, dword [rax+0x18]",
    "sub     edx, r13d",
    "lea     rdx, [rdx+rdx*4]",
    "lea     rdx, [rdx*8+0x30]",
    "call    qword [rel LocalAlloc]",
    "mov     rcx, qword [rbx]",
    "mov     qword [rcx+0x38], rax",
    "mov     rax, qword [rbx]",
    "mov     rcx, qword [rax+0x38]",
    "cmp     rcx, r15",
    "je      0x1400bc2ca",
    "mov     r13, r15",
    "mov     rsi, r15",
    "cmp     dword [rdi+0x40], r15d",
    "je      0x1400bc0c8",
    "mov     eax, dword [rax+0x18]",
    "mov     r10d, r15d",
    "mov     dword [rcx], eax",
    "mov     rax, qword [rbx]",
    "mov     rcx, qword [rax+0x38]",
    "cmp     dword [rcx], r15d",
    "jbe     0x1400bc2c5",
    "mov     eax, r12d",
    "mov     r9d, 0x1",
    "lea     rdx, [rax+rax*2]",
    "mov     rax, qword [rbx]",
    "mov     rcx, qword [rax+0x20]",
    "mov     rax, qword [rdi+0x48]",
    "lea     r8, [rcx+rdx*8]",
    "mov     rdx, qword [rsi+rax]",
    "mov     rcx, r14",
    "mov     rdx, qword [rdx+0x8]",
    "call    sub_140011a94",
    "mov     rax, qword [rbx]",
    "mov     r11, qword [rdi+0x48]",
    "mov     rcx, qword [rax+0x20]",
    "mov     rax, qword [rsi+r11+0x40]",
    "inc     r12d",
    "mov     qword [rcx+r13+0x10], rax",
    "mov     rax, qword [rdi+0x48]",
    "add     rsi, 0x50",
    "mov     qword [rsi+rax-0x10], r15",
    "mov     rax, qword [rbx]",
    "mov     rdx, qword [rdi+0x48]",
    "mov     rcx, qword [rax+0x20]",
    "mov     eax, dword [rsi+rdx-0x18]",
    "add     r13, 0x18",
    "mov     dword [rcx+r13-0x10], eax",
    "mov     rax, qword [rbx]",
    "cmp     r12d, dword [rax+0x18]",
    "jb      0x1400bc102",
    "mov     r13d, 0x1",
    "mov     eax, r13d",
    "jmp     0x1400bc2cc",
    "mov     r12, qword [rsp+0x70]",
    "mov     r8, r15",
    "mov     r9, r15",
    "mov     r14, 0xd6bf94d5e57a42bd",
    "mov     rbx, qword [rsp+0x50]",
    "mov     rbp, qword [rsp+0x58]",
    "mov     rsi, qword [rsp+0x60]",
    "add     rsp, 0x20",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "retn    ",
    "movdqu  xmm0, xmmword [rbp+0x80]",
    "mov     rdx, rax",
    "movdqu  xmm0, xmmword [r9+rdx+0xc]",
    "jmp     0x1400bc212",
    "add     dword [rbp+0x58], r13d",
    "mov     edx, dword [rbp+0x58]",
    "mov     edx, dword [r9+rax+0x1c]",
    "jmp     0x1400bc23a",
    "mov     rax, qword [rbx]",
    "mov     rcx, qword [rax+0x38]",
    "movdqu  xmmword [rcx+r8+0x18], xmm0",
    "mov     rax, qword [rdi+0x48]",
    "test    byte [r9+rax+0x8], 0x2",
    "je      0x1400bc233",
    "mul     qword [r12]",
    "mul     qword [r9+rcx+0x20]",
    "jmp     0x1400bc260",
    "mov     rax, qword [rbx]",
    "mov     rcx, qword [rax+0x38]",
    "mov     rax, r14",
    "mov     qword [rcx+r8+0x28], rdx",
    "mov     rcx, qword [rdi+0x48]",
    "test    byte [r9+rcx+0x8], 0x4",
    "je      0x1400bc25c",
    "add     dword [r8+rsi+0x8], r13d",
    "mov     rax, qword [rdi+0x48]",
    "mov     rcx, qword [r9+rax+0x2c]",
    "mov     rax, r14",
    "imul    rcx",
    "add     rdx, rcx",
    "sar     rdx, 0x17",
    "mov     rax, rdx",
    "shr     rax, 0x3f",
    "add     rdx, rax",
    "cmp     qword [r8+rsi+0x10], rdx",
    "jg      0x1400bc2aa",
    "mov     rax, qword [rbx]",
    "shr     rdx, 0x17",
    "mov     rcx, qword [rax+0x38]",
    "mov     qword [rcx+r8+0x10], rdx",
    "mov     r11, qword [rbx]",
    "mov     rsi, qword [r11+0x38]",
    "cmp     dword [r8+rsi+0x8], r15d",
    "je      0x1400bc2a5",
    "mov     rax, qword [rbx]",
    "mov     rdx, qword [rdi+0x48]",
    "mov     rcx, qword [rax+0x38]",
    "mov     eax, dword [r9+rdx+0x28]",
    "mov     dword [rcx+r8+0x8], eax",
    "mov     rax, qword [rdi+0x48]",
    "test    byte [r9+rax+0x8], r13b",
    "je      0x1400bc20a",
    "mov     rcx, qword [rbx]",
    "add     r10d, r13d",
    "add     r9, 0x50",
    "mov     rdx, qword [rcx+0x38]",
    "add     r8, 0x28",
    "cmp     r10d, dword [rdx]",
    "jb      0x1400bc1de"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}