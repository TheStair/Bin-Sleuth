{
  "address": "0x14009f55c",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     r11, rsp {__return_addr}",
    "mov     qword [r11+0x8 {__saved_rbx}], rbx",
    "mov     qword [r11+0x10 {__saved_rbp}], rbp",
    "mov     qword [r11+0x18 {__saved_rsi}], rsi",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "sub     rsp, 0x70",
    "mov     rax, qword [rel data_14010da30]  {0x74006e006f0043}",
    "mov     rsi, rcx",
    "lea     rcx, [r11-0x38 {var_38}]",
    "mov     qword [rcx {var_38}], rax  {0x74006e006f0043}",
    "mov     rax, qword [rel data_14010da30[4]]  {0x53006c006f0072}",
    "mov     r13, r8",
    "mov     qword [rcx+0x8 {var_30}], rax  {0x53006c006f0072}",
    "mov     rax, qword [rel data_14010da30[8]]  {0x30003000740065}",
    "lea     r8, [rel data_14010da50]  {u\"Select\"}",
    "mov     qword [rcx+0x10 {var_28}], rax  {0x30003000740065}",
    "mov     eax, dword [rel data_14010da30[0xc]]  {0x30}",
    "xor     r9d, r9d  {0x0}",
    "mov     dword [rcx+0x18 {var_20}], eax  {0x30}",
    "lea     rax, [r11-0x40 {var_40}]",
    "mov     rcx, rsi",
    "mov     qword [r11-0x60 {var_60}], rax {var_40}",
    "mov     r12, rdx",
    "xor     ebx, ebx  {0x0}",
    "mov     dword [rsp+0x20 {var_68}], 0x20019",
    "call    sub_14000e7cc",
    "test    eax, eax",
    "je      0x14009f67f",
    "lea     r11, [rsp+0x70 {__saved_r13}]",
    "mov     eax, ebx",
    "mov     rbx, qword [r11+0x20 {__saved_rbx}]",
    "mov     rbp, qword [r11+0x28 {__saved_rbp}]",
    "mov     rsi, qword [r11+0x30 {__saved_rsi}]",
    "mov     rsp, r11",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "retn     {__return_addr}",
    "xor     edi, edi  {0x0}",
    "lea     rbp, [rel data_14013c010]",
    "test    ebx, ebx",
    "je      0x14009f672",
    "mov     r8, qword [rbp]",
    "mov     rdx, qword [rsp+0x48 {var_40}]",
    "lea     rax, [rsp+0xa8 {arg_20}]",
    "mov     qword [rsp+0x30 {var_58_1}], rax {arg_20}",
    "lea     rax, [rsp+0x40 {var_48}]",
    "xor     r9d, r9d  {0x0}",
    "mov     qword [rsp+0x28 {var_60_1}], rax {var_48}",
    "and     qword [rsp+0x20 {var_68}], 0x0",
    "mov     rcx, rsi",
    "mov     dword [rsp+0xa8 {arg_20}], 0x4",
    "call    sub_14000ed54",
    "inc     edi",
    "add     rbp, 0x8",
    "mov     ebx, eax",
    "test    eax, eax",
    "je      0x14009f5df",
    "mov     rdx, qword [rsp+0x48 {var_40}]",
    "mov     rcx, rsi",
    "call    sub_14000f310",
    "mov     r9d, dword [rsp+0x40 {var_48}]",
    "xor     ebx, ebx",
    "lea     r8, [rel data_14010da60]  {u\"%03u\"}",
    "lea     edx, [rbx+0x4]",
    "lea     rcx, [rsp+0x64 {var_28+0x4}]",
    "call    sub_1400c939c",
    "cmp     eax, 0xffffffff",
    "je      0x14009f672",
    "cmp     edi, 0x2",
    "jae     0x14009f62c",
    "lea     r8, [rsp+0x50 {var_38}]",
    "xor     r9d, r9d  {0x0}",
    "mov     rdx, r12",
    "mov     rcx, rsi",
    "mov     qword [rsp+0x28 {var_60_2}], r13",
    "mov     dword [rsp+0x20], 0x20019",
    "call    sub_14000e7cc",
    "mov     ebx, eax"
  ],
  "high_level_IL": [
    "int64_t var_38",
    "__builtin_memcpy(&var_38, u\"ControlSet000\", 0x1c)",
    "int32_t rbx = 0",
    "int32_t var_68 = 0x20019",
    "HKEY var_40",
    "if (sub_14000e7cc(arg1, arg2, u\"Select\", 0, KEY_READ, &var_40) != 0)",
    "int32_t i = 0",
    "wchar16 const (** rbp_1)[0x8] = &data_14013c010",
    "while (i u< 2)",
    "wchar16 const (* r8)[0x8] = *rbp_1",
    "HKEY rdx = var_40",
    "int32_t* var_58_1 = &arg_20",
    "var_68.q = 0",
    "arg_20 = 4",
    "int32_t var_48",
    "int32_t rax_1 = sub_14000ed54(arg1, rdx, r8, nullptr, nullptr, &var_48)",
    "i += 1",
    "rbp_1 = &rbp_1[1]",
    "rbx = rax_1",
    "if (rax_1 != 0)",
    "break",
    "if (rbx != 0)",
    "rbx = 0",
    "int64_t var_28",
    "if (sub_1400c939c(&var_28:4, 4, u\"%03u\") != 0xffffffff)",
    "rbx = sub_14000e7cc(arg1, arg2, &var_38, 0, KEY_READ, arg3)",
    "sub_14000f310(arg1, var_40)",
    "return zx.q(rbx)"
  ]
}