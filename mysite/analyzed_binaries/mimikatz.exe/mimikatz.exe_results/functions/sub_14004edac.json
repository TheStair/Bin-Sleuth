{
  "address": "0x14004edac",
  "rules": [
    "hash data using djb2/1485ed9954f84e3481d22b64bc4cfca7",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "hash data using jshash/79354a2ef36a4036b42806ea4b41f8bd",
    "encrypt data using chaskey/4b6f9d91d05f46dd9aa3662f80cb6278",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     rax, rsp",
    "mov     qword [rax+0x8], rbx",
    "mov     qword [rax+0x10], rbp",
    "mov     qword [rax+0x18], rsi",
    "mov     qword [rax+0x20], rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "sub     rsp, 0x20",
    "mov     rdi, qword [rcx+0x130]",
    "mov     rsi, qword [rcx]",
    "mov     r13, r8",
    "mov     r12, rdx",
    "mov     rbp, rcx",
    "test    rdi, rdi",
    "je      0x14004ef5a",
    "mov     rbx, qword [rsp+0x40]",
    "mov     rbp, qword [rsp+0x48]",
    "mov     rsi, qword [rsp+0x50]",
    "mov     rdi, qword [rsp+0x58]",
    "add     rsp, 0x20",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "retn    ",
    "movsx   eax, word [rdi+0x46]",
    "inc     eax",
    "cmp     eax, dword [rsi+0x84]",
    "jle     0x14004ee07",
    "mov     ecx, dword [r8+0x8]",
    "mov     eax, dword [rdx+0x8]",
    "lea     edx, [rcx+rax+0x2]",
    "mov     rcx, rsi",
    "call    sub_140016c18",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x14004ef5a",
    "mov     r8, qword [rdi]",
    "lea     rdx, [rel data_1400f58a0]  {\"too many columns on %s\"}",
    "call    sub_1400191b8",
    "jmp     0x14004ef5a",
    "cmp     byte [rbp+0x104], 0x2",
    "jb      0x14004ee3d",
    "mov     r8d, dword [r12+0x8]",
    "mov     rdx, qword [r12]",
    "mov     rcx, rbx",
    "call    memcpy",
    "mov     r11d, dword [r12+0x8]",
    "mov     rcx, rbx",
    "mov     byte [r11+rbx], 0x0",
    "call    sub_140019224",
    "movsx   r14d, word [rdi+0x46]",
    "xor     r12d, r12d",
    "test    r14d, r14d",
    "jle     0x14004ee95",
    "mov     r8, r12",
    "mov     rdx, rax",
    "mov     rcx, rbp",
    "call    sub_14004a2b8",
    "test    byte [rdi+0x46], 0x7",
    "jne     0x14004eebb",
    "mov     r11, qword [rdi+0x8]",
    "movsx   rsi, word [rdi+0x46]",
    "xor     edx, edx",
    "shl     rsi, 0x5",
    "lea     r8d, [rdx+0x20]",
    "add     rsi, qword [rdi+0x8]",
    "mov     rcx, rsi",
    "call    memset",
    "mov     qword [rsi], rbx",
    "cmp     dword [r13+0x8], 0x0",
    "jne     0x14004ef0d",
    "mov     rdx, qword [rdi+0x8]",
    "lea     eax, [r14+0x8]",
    "mov     rcx, rsi",
    "movsxd  r8, eax",
    "shl     r8, 0x5",
    "call    sub_140016c90",
    "test    rax, rax",
    "je      0x14004ef00",
    "movsx   eax, word [rdi+0x46]",
    "inc     r12d",
    "add     r11, 0x20",
    "cmp     r12d, eax",
    "jl      0x14004ee71",
    "mov     rcx, rbx",
    "call    sub_1400192b0",
    "test    eax, eax",
    "je      0x14004eeee",
    "mov     rcx, rbx",
    "call    sub_140019074",
    "mov     r8d, dword [r13+0x8]",
    "mov     rdx, qword [r13]",
    "movsxd  rcx, eax",
    "lea     rbx, [rcx+rbx+0x1]",
    "mov     rcx, rbx",
    "call    memcpy",
    "mov     r11d, dword [r13+0x8]",
    "mov     rcx, rbx",
    "mov     byte [r11+rbx], 0x0",
    "call    sub_140019224",
    "mov     rdx, rsi",
    "call    sub_14004ef7c",
    "or      byte [rsi+0x1b], 0x4",
    "mov     byte [rsi+0x19], al",
    "mov     eax, 0x1",
    "mov     eax, 0x1",
    "mov     byte [rsi+0x19], 0x41",
    "mov     byte [rsi+0x1a], al",
    "jmp     0x14004ef52",
    "mov     rdx, rbx",
    "mov     rcx, rsi",
    "call    sub_1400169a8",
    "jmp     0x14004ef5a",
    "mov     qword [rdi+0x8], rax",
    "mov     rdx, qword [r11]",
    "test    rdx, rdx",
    "je      0x14004ee85",
    "lea     rdx, [rel data_1400f58b8]  {\"duplicate column name: %s\"}",
    "mov     r8, rbx",
    "mov     rcx, rbp",
    "call    sub_1400191b8",
    "add     word [rdi+0x46], ax",
    "and     dword [rbp+0x68], 0x0"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}