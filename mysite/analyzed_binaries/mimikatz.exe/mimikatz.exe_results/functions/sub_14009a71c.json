{
  "address": "0x14009a71c",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/dec108a2f8464ac388ec29affb61c4d8",
    "encrypt data using Curve25519/4be2ead1b08a4c049dae9c8694881d76",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/88b7572ed916436d804701d7ca2c8848",
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/1d2aacee85cc43a0a1c1ba47e394ae52"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8 {__saved_rbx}], rbx",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x50",
    "and     qword [rsp+0x20], 0x0",
    "lea     r8, [rel data_140103d18]  {u\"export\"}",
    "xor     r9d, r9d  {0x0}",
    "mov     r14, rdx",
    "mov     r15d, ecx",
    "call    sub_140013220",
    "mov     dword [rsp+0xa0 {arg_18}], eax",
    "lea     rax, [rel data_1400e54b0]  {u\"MS_ENHANCED_PROV\"}",
    "lea     r9, [rsp+0xa8 {string1_1}]",
    "lea     r8, [rel data_140108088]  {u\"provider\"}",
    "mov     rdx, r14",
    "mov     ecx, r15d",
    "mov     qword [rsp+0x20], rax  {data_1400e54b0, u\"MS_ENHANCED_PROV\"}",
    "call    sub_140013220",
    "mov     r13, qword [rsp+0xa8 {string1_1}]",
    "test    r13, r13",
    "je      0x14009a7c8",
    "xor     esi, esi  {0x0}",
    "lea     rsi, [rel data_1400df9c0]",
    "xor     ebx, ebx  {0x0}",
    "mov     rdi, rsi  {data_1400df9c0}",
    "xor     edi, edi  {0x0}",
    "lea     r12, [rel data_1400dfa80]",
    "xor     ebx, ebx  {0x0}",
    "mov     rdi, r12  {data_1400dfa80}",
    "mov     eax, ebx",
    "add     rax, rax",
    "mov     rsi, qword [rsi+rax*8+0x8]",
    "jmp     0x14009a7ca",
    "mov     rdx, qword [rdi]",
    "mov     rcx, r13",
    "add     rdx, 0x6",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "je      0x14009a97e",
    "and     qword [rsp+0x20], 0x0",
    "lea     rbx, [rel data_1400fbfb8]",
    "xor     r9d, r9d  {0x0}",
    "mov     rdx, r14",
    "mov     ecx, r15d",
    "mov     r8, rbx  {data_1400fbfb8, u\"machine\"}",
    "call    sub_140013220",
    "xor     r12d, r12d",
    "lea     r8, [rel data_140107788]  {u\"silent\"}",
    "test    eax, eax",
    "lea     ecx, [r12+0x20]",
    "lea     rax, [rel data_140103338]  {u\"user\"}",
    "cmovne  r12d, ecx  {0x20}",
    "mov     rdx, r14",
    "mov     ecx, r15d",
    "test    r12d, r12d",
    "cmovne  rax, rbx  {data_1400fbfb8, u\"machine\"}",
    "and     qword [rsp+0x20], 0x0",
    "xor     r9d, r9d  {0x0}",
    "mov     qword [rsp+0x40 {var_48}], rax",
    "call    sub_140013220",
    "test    eax, eax",
    "je      0x14009a8bf",
    "xor     r8d, r8d  {0x0}",
    "xor     edx, edx  {0x0}",
    "mov     rcx, rbp",
    "call    qword [rel wcstoul]",
    "mov     edi, eax",
    "mov     eax, ebx",
    "add     rax, rax",
    "mov     edi, dword [r12+rax*8+0x8]",
    "jmp     0x14009a849",
    "mov     rdx, qword [rdi]",
    "mov     rcx, rbp",
    "add     rdx, 0xa",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "je      0x14009a98d",
    "lea     rax, [rel data_1400e4ea0]  {u\"PROV_RSA_FULL\"}",
    "lea     r9, [rsp+0xa8 {string1_1}]",
    "lea     r8, [rel data_1401080a0]  {u\"providertype\"}",
    "test    rsi, rsi",
    "mov     rdx, r14",
    "mov     ecx, r15d",
    "mov     qword [rsp+0x20], rax  {data_1400e4ea0, u\"PROV_RSA_FULL\"}",
    "cmove   rsi, r13",
    "call    sub_140013220",
    "mov     rbp, qword [rsp+0xa8 {string1_1}]",
    "test    rbp, rbp",
    "je      0x14009a847",
    "inc     ebx",
    "add     rdi, 0x10",
    "cmp     ebx, 0xc",
    "jb      0x14009a791",
    "lea     rax, [rel data_1400e6550]  {u\"Microsoft Software Key Storage P\u2026\"}",
    "lea     r9, [rsp+0xa8 {string1_1}]",
    "lea     r8, [rel data_1401080c0]  {u\"cngprovider\"}",
    "mov     rdx, r14",
    "mov     ecx, r15d",
    "mov     qword [rsp+0x20], rax  {data_1400e6550, u\"Microsoft Software Key Storage P\u2026\"}",
    "call    sub_140013220",
    "mov     rbx, qword [rsp+0xa8 {string1_1}]",
    "lea     rcx, [rel data_1401080e0]  {u\" * Store         : '%s'\\n * Prov\u2026\"}",
    "mov     qword [rsp+0x30 {string1_5}], rbx",
    "mov     dword [rsp+0x28 {var_60}], edi",
    "mov     qword [rsp+0x20 {var_68}], rbp",
    "mov     rbp, qword [rsp+0x40 {var_48}]",
    "mov     r9, rsi",
    "mov     r8, r13",
    "mov     rdx, rbp",
    "call    sub_14000c030",
    "lea     rcx, [rel data_1401081c0]  {u\"\\nCryptoAPI keys :\\n\"}",
    "call    sub_14000c030",
    "mov     r13d, dword [rsp+0xa0 {arg_18}]",
    "mov     r9d, r12d",
    "mov     r8d, edi",
    "mov     rdx, rsi",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rsp+0x28 {var_60}], rbp",
    "mov     dword [rsp+0x20 {var_68}], r13d",
    "call    sub_14009a284",
    "lea     rcx, [rel data_1401081e8]  {u\"\\nCNG keys :\\n\"}",
    "call    sub_14000c030",
    "mov     r9d, r13d",
    "mov     r8d, r12d",
    "mov     rdx, rbx",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rsp+0x20 {var_68_1}], rbp",
    "call    sub_14009a5b4",
    "mov     rbx, qword [rsp+0x90 {__saved_rbx}]",
    "xor     eax, eax  {0x0}",
    "add     rsp, 0x50",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "or      r12d, 0x40",
    "test    edi, edi",
    "jne     0x14009a85d",
    "inc     ebx",
    "add     rdi, 0x10",
    "cmp     ebx, 0x12",
    "jb      0x14009a810",
    "mov     rdx, qword [rdi]",
    "mov     rcx, r13",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "je      0x14009a97e",
    "mov     rdx, qword [rdi]",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "je      0x14009a98d"
  ],
  "high_level_IL": [
    "int32_t rax = sub_140013220(arg1, arg2, u\"export\", nullptr, nullptr)",
    "sub_140013220(arg1, arg2, u\"provider\", &string1_1, u\"MS_ENHANCED_PROV\")",
    "wchar16* string1 = string1_1",
    "wchar16* string1_2",
    "if (string1 == 0)",
    "label_14009a7c8:",
    "string1_2 = nullptr",
    "int32_t rbx_1 = 0",
    "wchar16 const (** const rdi_1)[0xc] = &data_1400df9c0",
    "while (true)",
    "if (_wcsicmp(string1, *rdi_1) != 0 && _wcsicmp(string1, &(**rdi_1)[3]) != 0)",
    "rbx_1 += 1",
    "rdi_1 = &rdi_1[2]",
    "if (rbx_1 u>= 0xc)",
    "goto label_14009a7c8",
    "continue",
    "string1_2 = (&data_1400df9c8)[zx.q(rbx_1) * 2]",
    "break",
    "if (string1_2 == 0)",
    "string1_2 = string1",
    "sub_140013220(arg1, arg2, u\"providertype\", &string1_1, u\"PROV_RSA_FULL\")",
    "PWSTR string1_4 = string1_1",
    "uint32_t rdi_3",
    "if (string1_4 == 0)",
    "label_14009a847:",
    "rdi_3 = 0",
    "int32_t rbx_2 = 0",
    "void** rdi_2 = &data_1400dfa80",
    "while (true)",
    "if (_wcsicmp(string1_4, *rdi_2) != 0 && _wcsicmp(string1_4, *rdi_2 + 0xa) != 0)",
    "rbx_2 += 1",
    "rdi_2 = &rdi_2[2]",
    "if (rbx_2 u>= 0x12)",
    "goto label_14009a847",
    "continue",
    "rdi_3 = *(zx.q(rbx_2) * 0x10 + &data_1400dfa88)",
    "break",
    "if (rdi_3 == 0)",
    "rdi_3 = wcstoul(string1_4, nullptr, 0)",
    "uint32_t r12 = 0",
    "wchar16 const* const rax_7 = u\"user\"",
    "if (sub_140013220(arg1, arg2, u\"machine\", nullptr, nullptr) != 0)",
    "r12 = 0x20",
    "if (r12 != 0)",
    "rax_7 = u\"machine\"",
    "if (sub_140013220(arg1, arg2, u\"silent\", nullptr, nullptr) != 0)",
    "r12 |= 0x40",
    "sub_140013220(arg1, arg2, u\"cngprovider\", &string1_1, u\"Microsoft Software Key Storage P\u2026\")",
    "PWSTR string1_3 = string1_1",
    "PWSTR string1_5 = string1_3",
    "uint32_t var_60 = rdi_3",
    "int32_t var_68 = string1_4.d",
    "sub_14000c030(u\"\\nCryptoAPI keys :\\n\", sub_14000c030(u\" * Store         : '%s'\\n * Prov\u2026\", rax_7))",
    "var_60.q = rax_7",
    "sub_14000c030(u\"\\nCNG keys :\\n\", sub_14009a284(nullptr, string1_2, rdi_3, r12, rax, var_60))",
    "sub_14009a5b4(nullptr, string1_3, r12, rax, rax_7)",
    "return 0"
  ]
}