{
  "address": "0x140013c24",
  "rules": [
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "contain loop"
  ],
  "disassembly": [
    "mov     r11, rsp {__return_addr}",
    "mov     qword [r11+0x8 {__saved_rbx}], rbx",
    "mov     qword [r11+0x10 {__saved_rbp}], rbp",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "sub     rsp, 0x60",
    "mov     rdi, qword [rsp+0xa0 {arg3.dwLowDateTime} {arg3.dwHighDateTime}]",
    "mov     esi, dword [rsp+0xa0 {arg3.dwLowDateTime}]",
    "xor     r14d, r14d  {0x0}",
    "xor     eax, eax  {0x0}",
    "mov     word [r11-0x48 {var_48}], r14w  {0x0}",
    "mov     r13, rdx",
    "mov     qword [r11-0x46 {var_46}], rax  {0x0}",
    "mov     r12, rcx",
    "mov     ebx, r14d  {0x0}",
    "mov     word [rsp+0x4a {var_3e}], ax  {0x0}",
    "movzx   ebp, r14w  {0x0}",
    "lea     rcx, [rsp+0xa0 {arg3}]",
    "mov     ebx, r14d  {0x0}",
    "call    qword [rel GetSystemTimeAsFileTime]",
    "lea     rdx, [rsp+0xa8 {arg_20}]",
    "lea     rcx, [rsp+0xa0 {arg3}]",
    "call    qword [rel FileTimeToLocalFileTime]",
    "cmp     eax, r14d",
    "je      0x140013f00",
    "movzx   eax, bp",
    "lea     r9, [rsp+0x42 {var_46}]",
    "lea     r8, [rsp+0x40 {var_48}]",
    "lea     rcx, [rax+rax*2]",
    "lea     rax, [rel data_1400dce40]",
    "lea     rdi, [rax+rcx*8]",
    "xor     eax, eax  {0x0}",
    "mov     rcx, r12",
    "mov     rdx, qword [rdi]",
    "mov     qword [rsp+0x40 {var_48}], rax  {0x0}",
    "mov     dword [rsp+0x48 {var_46+0x6}], eax  {0x0}",
    "lea     rax, [rsp+0x4a {var_3e}]",
    "mov     qword [rsp+0x38 {var_50}], rax {var_3e}",
    "lea     rax, [rsp+0x48 {var_46+0x6}]",
    "mov     qword [rsp+0x30 {var_58_1}], rax {var_46+0x6}",
    "lea     rax, [rsp+0x46 {var_46+0x4}]",
    "mov     qword [rsp+0x28 {var_60_1}], rax {var_46+0x4}",
    "lea     rax, [rsp+0x44 {var_46+0x2}]",
    "mov     qword [rsp+0x20 {var_68_1}], rax {var_46+0x2}",
    "call    sub_1400c93bc",
    "cmp     eax, dword [rdi+0x8]",
    "mov     esi, eax",
    "jl      0x140013db1",
    "lea     r11, [rsp+0x60 {__saved_r14}]",
    "mov     eax, ebx",
    "mov     rbx, qword [r11+0x30 {__saved_rbx}]",
    "mov     rbp, qword [r11+0x38 {__saved_rbp}]",
    "mov     rsp, r11",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "retn     {__return_addr}",
    "mov     rbp, qword [rsp+0xa8 {arg_20.dwLowDateTime} {arg_20.dwHighDateTime}]",
    "lea     rdx, [rsp+0x50 {lpSystemTime}]",
    "lea     rcx, [rsp+0xa8 {arg_20}]",
    "sub     rbp, qword [rsp+0xa0 {arg3}]",
    "call    qword [rel FileTimeToSystemTime]",
    "cmp     eax, r14d",
    "je      0x140013f00",
    "inc     bp",
    "cmp     bp, 0xc",
    "jb      0x140013c6a",
    "mov     cl, byte [rdi+0xc]",
    "cmp     cl, r14b",
    "je      0x140013d03",
    "mov     cl, byte [rdi+0xc]",
    "mov     word [rsp+0x54 {var_34_1}], r14w  {0x0}",
    "mov     word [rsp+0x5e {var_2a_1}], r14w  {0x0}",
    "cmp     cl, r14b",
    "je      0x140013e4b",
    "cmp     ebx, r14d",
    "jne     0x140013dc7",
    "cmp     ebx, r14d",
    "je      0x140013f00",
    "mov     cl, byte [rdi+0xd]",
    "cmp     cl, r14b",
    "je      0x140013d2a",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013d03",
    "mov     cl, byte [rdi+0xd]",
    "cmp     cl, r14b",
    "je      0x140013e67",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013e4b",
    "mov     cl, byte [rdi+0xe]",
    "cmp     cl, r14b",
    "je      0x140013d4d",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013d2a",
    "movzx   eax, cl",
    "mov     ebx, r14d  {0x0}",
    "mov     ecx, 0x76c",
    "cmp     word [rsp+rax*2+0x3e {var_50+0x6}], cx",
    "setae   bl",
    "cmp     ebx, r14d",
    "je      0x140013db1",
    "mov     cl, byte [rdi+0xe]",
    "cmp     cl, r14b",
    "je      0x140013e83",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013e67",
    "movzx   eax, cl",
    "movzx   ecx, word [rsp+rax*2+0x3e {var_50+0x6}]",
    "mov     word [rsp+0x50 {lpSystemTime}], cx",
    "mov     cl, byte [rdi+0xf]",
    "cmp     cl, r14b",
    "je      0x140013d70",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013d4d",
    "mov     ebx, r14d  {0x0}",
    "movzx   eax, cl",
    "cmp     word [rsp+rax*2+0x3e {var_50+0x6}], 0xc",
    "setbe   bl",
    "cmp     ebx, r14d",
    "je      0x140013db1",
    "mov     cl, byte [rdi+0xf]",
    "cmp     cl, r14b",
    "je      0x140013e9f",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013e83",
    "movzx   eax, cl",
    "movzx   ecx, word [rsp+rax*2+0x3e {var_50+0x6}]",
    "mov     word [rsp+0x52 {var_36_1}], cx",
    "mov     cl, byte [rdi+0x10]",
    "cmp     cl, r14b",
    "je      0x140013d93",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013d70",
    "mov     ebx, r14d  {0x0}",
    "movzx   eax, cl",
    "cmp     word [rsp+rax*2+0x3e {var_50+0x6}], 0x1f",
    "setbe   bl",
    "cmp     ebx, r14d",
    "je      0x140013db1",
    "mov     cl, byte [rdi+0x10]",
    "cmp     cl, r14b",
    "je      0x140013ebb",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013e9f",
    "movzx   eax, cl",
    "movzx   ecx, word [rsp+rax*2+0x3e {var_50+0x6}]",
    "mov     word [rsp+0x56 {var_32_1}], cx",
    "mov     cl, byte [rdi+0x11]",
    "cmp     cl, r14b",
    "je      0x140013db1",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013d93",
    "mov     ebx, r14d  {0x0}",
    "movzx   eax, cl",
    "cmp     word [rsp+rax*2+0x3e {var_50+0x6}], 0x17",
    "setbe   bl",
    "cmp     ebx, r14d",
    "je      0x140013db1",
    "mov     cl, byte [rdi+0x11]",
    "cmp     cl, r14b",
    "je      0x140013ed7",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013ebb",
    "movzx   eax, cl",
    "movzx   ecx, word [rsp+rax*2+0x3e {var_50+0x6}]",
    "mov     word [rsp+0x58 {var_30_1}], cx",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013db1",
    "mov     ebx, r14d  {0x0}",
    "movzx   eax, cl",
    "cmp     word [rsp+rax*2+0x3e {var_50+0x6}], 0x3b",
    "setbe   bl",
    "cmp     ebx, r14d",
    "je      0x140013db1",
    "lea     rdx, [rsp+0xa0 {arg3}]",
    "lea     rcx, [rsp+0x50 {lpSystemTime}]",
    "call    qword [rel SystemTimeToFileTime]",
    "mov     ebx, eax",
    "cmp     eax, r14d",
    "je      0x140013f00",
    "movzx   eax, cl",
    "cmp     eax, esi",
    "jg      0x140013ed7",
    "movzx   eax, cl",
    "movzx   ecx, word [rsp+rax*2+0x3e {var_50+0x6}]",
    "mov     word [rsp+0x5a {var_2e_1}], cx",
    "movzx   eax, cl",
    "mov     ebx, r14d  {0x0}",
    "cmp     word [rsp+rax*2+0x3e {var_50+0x6}], 0x3b",
    "setbe   bl",
    "mov     rcx, qword [rsp+0xa0 {arg3.dwLowDateTime} {arg3.dwHighDateTime}]",
    "sub     rcx, rbp",
    "mov     qword [r13], rcx",
    "movzx   eax, cl",
    "movzx   ecx, word [rsp+rax*2+0x3e {var_50+0x6}]",
    "mov     word [rsp+0x5c {var_2c_1}], cx"
  ],
  "high_level_IL": [
    "void* rdi",
    "rdi.d = arg3.dwLowDateTime",
    "rdi:4.d = arg3.dwHighDateTime",
    "uint32_t dwLowDateTime = arg3.dwLowDateTime",
    "int16_t var_48 = 0",
    "int64_t var_46 = 0",
    "BOOL rbx = 0",
    "int16_t var_3e = 0",
    "int16_t rbp = 0",
    "while (true)",
    "int16_t* var_50",
    "if (rbx == 0)",
    "rdi = &(&data_1400dce40)[zx.q(rbp) * 3]",
    "int16_t* rdx = *rdi",
    "var_48.q = 0",
    "var_46:6.d = 0",
    "var_50 = &var_3e",
    "void* var_58_1 = &var_46:6",
    "void* var_60_1 = &var_46:4",
    "void* var_68_1 = &var_46:2",
    "uint32_t dwLowDateTime_1 = sub_1400c93bc(arg1, rdx, &var_48)",
    "dwLowDateTime = dwLowDateTime_1",
    "if (dwLowDateTime_1 s>= *(rdi + 8))",
    "char rcx_2 = *(rdi + 0xc)",
    "if (rcx_2 != 0 && zx.d(rcx_2) s<= dwLowDateTime)",
    "rbx.b = *(&var_50:6 + (zx.q(rcx_2) << 1)) u>= 0x76c",
    "if (rcx_2 == 0 || zx.d(rcx_2) s> dwLowDateTime || rbx != 0)",
    "rcx_2 = *(rdi + 0xd)",
    "if (rcx_2 != 0 && zx.d(rcx_2) s<= dwLowDateTime)",
    "rbx.b = *(&var_50:6 + (zx.q(rcx_2) << 1)) u<= 0xc",
    "if (rcx_2 == 0 || zx.d(rcx_2) s> dwLowDateTime || rbx != 0)",
    "rcx_2 = *(rdi + 0xe)",
    "if (rcx_2 != 0 && zx.d(rcx_2) s<= dwLowDateTime)",
    "rbx.b = *(&var_50:6 + (zx.q(rcx_2) << 1)) u<= 0x1f",
    "if (rcx_2 == 0 || zx.d(rcx_2) s> dwLowDateTime || rbx != 0)",
    "rcx_2 = *(rdi + 0xf)",
    "if (rcx_2 != 0 && zx.d(rcx_2) s<= dwLowDateTime)",
    "rbx.b = *(&var_50:6 + (zx.q(rcx_2) << 1)) u<= 0x17",
    "if (rcx_2 == 0 || zx.d(rcx_2) s> dwLowDateTime || rbx != 0)",
    "rcx_2 = *(rdi + 0x10)",
    "if (rcx_2 != 0 && zx.d(rcx_2) s<= dwLowDateTime)",
    "rbx.b = *(&var_50:6 + (zx.q(rcx_2) << 1)) u<= 0x3b",
    "if (rcx_2 == 0 || zx.d(rcx_2) s> dwLowDateTime || rbx != 0)",
    "rcx_2 = *(rdi + 0x11)",
    "if (rcx_2 != 0 && zx.d(rcx_2) s<= dwLowDateTime)",
    "rbx.b = *(&var_50:6 + (zx.q(rcx_2) << 1)) u<= 0x3b",
    "rbp += 1",
    "if (rbp u< 0xc)",
    "continue",
    "if (rbx == 0)",
    "break",
    "rbx = 0",
    "GetSystemTimeAsFileTime(&arg3)",
    "if (FileTimeToLocalFileTime(&arg3, &arg_20) != 0)",
    "FILETIME rbp_1",
    "rbp_1.dwLowDateTime = arg_20.dwLowDateTime",
    "rbp_1.dwHighDateTime = arg_20.dwHighDateTime",
    "int64_t rbp_2 = rbp_1 - arg3",
    "int16_t lpSystemTime",
    "BOOL rax_15",
    "int16_t rcx_6",
    "rax_15, rcx_6 = FileTimeToSystemTime(&arg_20, &lpSystemTime)",
    "if (rax_15 != 0)",
    "rcx_6.b = *(rdi + 0xc)",
    "int16_t var_34_1 = 0",
    "int16_t var_2a_1 = 0",
    "if (rcx_6.b != 0 && zx.d(rcx_6.b) s<= dwLowDateTime)",
    "lpSystemTime = *(&var_50:6 + (zx.q(rcx_6.b) << 1))",
    "rcx_6.b = *(rdi + 0xd)",
    "if (rcx_6.b != 0 && zx.d(rcx_6.b) s<= dwLowDateTime)",
    "int16_t var_36_1 = *(&var_50:6 + (zx.q(rcx_6.b) << 1))",
    "rcx_6.b = *(rdi + 0xe)",
    "if (rcx_6.b != 0 && zx.d(rcx_6.b) s<= dwLowDateTime)",
    "int16_t var_32_1 = *(&var_50:6 + (zx.q(rcx_6.b) << 1))",
    "rcx_6.b = *(rdi + 0xf)",
    "if (rcx_6.b != 0 && zx.d(rcx_6.b) s<= dwLowDateTime)",
    "int16_t var_30_1 = *(&var_50:6 + (zx.q(rcx_6.b) << 1))",
    "rcx_6.b = *(rdi + 0x10)",
    "if (rcx_6.b != 0 && zx.d(rcx_6.b) s<= dwLowDateTime)",
    "int16_t var_2e_1 = *(&var_50:6 + (zx.q(rcx_6.b) << 1))",
    "rcx_6.b = *(rdi + 0x11)",
    "if (rcx_6.b != 0 && zx.d(rcx_6.b) s<= dwLowDateTime)",
    "int16_t var_2c_1 = *(&var_50:6 + (zx.q(rcx_6.b) << 1))",
    "BOOL rax_28 = SystemTimeToFileTime(&lpSystemTime, &arg3)",
    "rbx = rax_28",
    "if (rax_28 != 0)",
    "FILETIME rcx_9",
    "rcx_9.dwLowDateTime = arg3.dwLowDateTime",
    "rcx_9.dwHighDateTime = arg3.dwHighDateTime",
    "*arg2 = rcx_9 - rbp_2",
    "break",
    "return zx.q(rbx)"
  ]
}