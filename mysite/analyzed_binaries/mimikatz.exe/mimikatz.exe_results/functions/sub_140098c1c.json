{
  "address": "0x140098c1c",
  "rules": [
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "64-bit execution via heavens gate/d7fcc2def38746b09a33d0c7032e9b82",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8 {__saved_rbx}], rbx",
    "mov     qword [rsp+0x10 {__saved_rsi}], rsi",
    "push    rdi {__saved_rdi}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x150",
    "lea     rcx, [rel data_140140800]",
    "xor     edx, edx  {0x0}",
    "call    sub_14000c870",
    "xor     eax, eax  {0x0}",
    "lea     r8, [rsp+0x40 {var_128}]",
    "mov     qword [rsp+0x42 {var_126}], rax  {0x0}",
    "mov     dword [rsp+0x4a {var_11e}], eax  {0x0}",
    "mov     eax, 0xfb",
    "mov     word [rsp+0x180 {arg_18}], ax  {0xfb}",
    "lea     rax, [rsp+0x180 {arg_18}]",
    "lea     rcx, [rel data_140140800]",
    "mov     qword [rsp+0x28 {var_140}], rax {arg_18}",
    "lea     rax, [rsp+0x50 {var_118}]",
    "mov     r9d, 0x2",
    "mov     dl, 0x4a",
    "mov     byte [rsp+0x40 {var_128}], 0x2",
    "mov     byte [rsp+0x41 {var_127}], 0x0",
    "mov     qword [rsp+0x20 {var_148}], rax {var_118}",
    "call    sub_14000c66c",
    "test    eax, eax",
    "je      0x140098e90",
    "lea     rcx, [rel data_140140800]",
    "xor     edx, edx  {0x0}",
    "call    sub_14000c870",
    "lea     r11, [rsp+0x150 {__saved_r15}]",
    "xor     eax, eax  {0x0}",
    "mov     rbx, qword [r11+0x20 {__saved_rbx}]",
    "mov     rsi, qword [r11+0x28 {__saved_rsi}]",
    "mov     rsp, r11",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     rdi {__saved_rdi}",
    "retn     {__return_addr}",
    "mov     dil, byte [rsp+0x50 {var_118}]",
    "test    dil, dil",
    "je      0x140098e90",
    "movzx   eax, dil",
    "mov     ecx, 0x40",
    "lea     rbx, [rax+rax*4]",
    "movzx   eax, word [rsp+0x180 {arg_18}]",
    "lea     rdx, [rax+rbx*8-0x1]",
    "call    qword [rel LocalAlloc]",
    "mov     rsi, rax",
    "test    rax, rax",
    "je      0x140098e90",
    "movzx   ecx, word [rsp+0x180 {arg_18}]",
    "lea     rbx, [rax+rbx*8]",
    "lea     rdx, [rsp+0x51 {var_117}]",
    "dec     ecx",
    "movsxd  r8, ecx",
    "mov     rcx, rbx",
    "call    memcpy",
    "test    dil, dil",
    "je      0x140098e87",
    "mov     rcx, rsi",
    "call    qword [rel LocalFree]",
    "lea     rcx, [rsi+0x8]",
    "movzx   edx, dil",
    "test    byte [rcx+0x4], 0x20",
    "je      0x140098d52",
    "mov     qword [rcx+0x8], rbx",
    "movzx   eax, byte [rcx+0x5]",
    "add     rbx, rax",
    "add     rcx, 0x28",
    "sub     rdx, 0x1",
    "jne     0x140098d03",
    "mov     al, byte [rbx]",
    "inc     rbx",
    "mov     byte [rcx+0x10], al",
    "test    al, al",
    "je      0x140098d52",
    "mov     al, byte [rbx]",
    "mov     byte [rcx-0x7], 0x0",
    "add     rbx, 0x5",
    "mov     byte [rcx-0x8], al",
    "mov     byte [rcx], al",
    "movzx   eax, word [rbx-0x4]",
    "mov     word [rcx+0x2], ax",
    "mov     al, byte [rbx-0x2]",
    "mov     byte [rcx+0x4], al",
    "mov     al, byte [rbx-0x1]",
    "mov     byte [rcx+0x5], al",
    "test    al, al",
    "je      0x140098d35",
    "test    dil, dil",
    "je      0x140098e87",
    "mov     qword [rcx+0x18], rbx",
    "movzx   eax, byte [rcx+0x10]",
    "add     rbx, rax",
    "lea     rbx, [rsi+0xc]",
    "movzx   edi, dil",
    "lea     r14, [rel data_1400e17cc]",
    "lea     r15, [rel data_1401063d8]",
    "lea     r9, [rel data_1400e17c8]",
    "movzx   eax, byte [rbx-0xb]",
    "lea     r9, [rel data_1400d5da0]",
    "mov     r9, qword [r9+rax*8]",
    "jmp     0x140098d99",
    "movzx   r9d, byte [rbx]",
    "movzx   r8d, byte [rbx-0x1]",
    "movzx   edx, byte [rbx-0x2]",
    "test    r9b, 0x40",
    "mov     r10, r15  {data_1401063d8, u\"NOT \"}",
    "mov     rcx, r15  {data_1401063d8, u\"NOT \"}",
    "cmovne  r10, r14  {data_1400e17cc}",
    "test    r9b, 0x20",
    "mov     rax, r14  {data_1400e17cc}",
    "cmovne  rcx, r14  {data_1400e17cc}",
    "mov     qword [rsp+0x30 {var_138_1}], r10",
    "test    r9b, 0x4",
    "mov     qword [rsp+0x28 {var_140_1}], rcx",
    "cmovne  rax, r15  {data_1401063d8, u\"NOT \"}",
    "lea     rcx, [rel data_1401063f0]  {u\"  SENS_RES: %02x %02x\\n  SEL_RES\u2026\"}",
    "mov     qword [rsp+0x20 {var_148_1}], rax",
    "call    sub_14000c030",
    "cmp     byte [rbx+0x1], 0x0",
    "je      0x140098e41",
    "lea     rcx, [rel data_140106560]  {u\"ERROR kuhl_m_acr_info ; Only BrT\u2026\"}",
    "jmp     0x140098e74",
    "movzx   r8d, byte [rbx-0xb]",
    "movzx   edx, byte [rbx-0xc]",
    "lea     rcx, [rel data_140106398]  {u\"\\nTarget: %hhu (0x%02x - %s)\\n\"}",
    "call    sub_14000c030",
    "cmp     byte [rbx-0xb], 0x0",
    "je      0x140098dc0",
    "cmp     byte [rbx+0xc], 0x0",
    "je      0x140098e79",
    "cmp     qword [rbx+0x4], 0x0",
    "je      0x140098e41",
    "call    sub_14000c030",
    "add     rbx, 0x28",
    "sub     rdi, 0x1",
    "jne     0x140098d7b",
    "cmp     qword [rbx+0x14], 0x0",
    "je      0x140098e79",
    "lea     rcx, [rel data_140106518]  {u\"  NFCID1  : \"}",
    "call    sub_14000c030",
    "movzx   edx, byte [rbx+0x1]",
    "mov     rcx, qword [rbx+0x4]",
    "mov     r8d, 0x1",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "cmp     byte [rbx-0xb], 0x5",
    "jae     0x140098d92",
    "lea     rcx, [rel data_140106538]  {u\"  ATS     : \"}",
    "call    sub_14000c030",
    "movzx   edx, byte [rbx+0xc]",
    "mov     rcx, qword [rbx+0x14]",
    "mov     r8d, 0x1",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400d27a8]"
  ],
  "high_level_IL": [
    "sub_14000c870(&data_140140800, 0)",
    "int64_t var_126 = 0",
    "int32_t var_11e = 0",
    "arg_18 = 0xfb",
    "int64_t rdx",
    "rdx.b = 0x4a",
    "char var_128 = 2",
    "char var_127 = 0",
    "char var_118",
    "if (sub_14000c66c(&data_140140800, rdx, &var_128, 2, &var_118, &arg_18) != 0)",
    "int64_t rdi",
    "rdi.b = var_118",
    "if (rdi.b != 0)",
    "uint64_t rbx_1 = zx.q(rdi.b) * 5",
    "HLOCAL hMem = LocalAlloc(LMEM_ZEROINIT, zx.q(arg_18) + (rbx_1 << 3) - 1)",
    "if (hMem != 0)",
    "void* rbx_2 = hMem + (rbx_1 << 3)",
    "void var_117",
    "memcpy(rbx_2, &var_117, sx.q(zx.d(arg_18) - 1))",
    "if (rdi.b != 0)",
    "void* rcx_4 = hMem + 8",
    "uint64_t i_2 = zx.q(rdi.b)",
    "uint64_t i",
    "uint64_t rax_3",
    "rax_3.b = *rbx_2",
    "*(rcx_4 - 7) = 0",
    "rbx_2 += 5",
    "*(rcx_4 - 8) = rax_3.b",
    "*rcx_4 = rax_3.b",
    "*(rcx_4 + 2) = *(rbx_2 - 4)",
    "rax_3.b = *(rbx_2 - 2)",
    "*(rcx_4 + 4) = rax_3.b",
    "rax_3.b = *(rbx_2 - 1)",
    "*(rcx_4 + 5) = rax_3.b",
    "if (rax_3.b != 0)",
    "*(rcx_4 + 8) = rbx_2",
    "rbx_2 += zx.q(*(rcx_4 + 5))",
    "if ((*(rcx_4 + 4) & 0x20) != 0)",
    "rax_3.b = *rbx_2",
    "rbx_2 += 1",
    "*(rcx_4 + 0x10) = rax_3.b",
    "if (rax_3.b != 0)",
    "*(rcx_4 + 0x18) = rbx_2",
    "rbx_2 += zx.q(*(rcx_4 + 0x10))",
    "rcx_4 += 0x28",
    "i = i_2",
    "i_2 -= 1",
    "do while (i != 1)",
    "if (rdi.b != 0)",
    "void* rbx_3 = hMem + 0xc",
    "uint64_t i_3 = zx.q(rdi.b)",
    "uint64_t i_1",
    "if (*(rbx_3 - 0xb) u< 5)",
    "(&data_1400d5da0)[zx.q(*(rbx_3 - 0xb))]",
    "*(rbx_3 - 0xb)",
    "int64_t rdx_4 = sub_14000c030(u\"\\nTarget: %hhu (0x%02x - %s)\\n\", zx.q(*(rbx_3 - 0xc)))",
    "if (*(rbx_3 - 0xb) == 0)",
    "char r9_3 = *rbx_3",
    "*(rbx_3 - 1)",
    "wchar16 const* const r10_1 = u\"NOT \"",
    "wchar16 const* const rcx_6 = u\"NOT \"",
    "if ((r9_3 & 0x40) != 0)",
    "r10_1 = &data_1400e17cc",
    "void* const rax_5 = &data_1400e17cc",
    "if ((r9_3 & 0x20) != 0)",
    "rcx_6 = &data_1400e17cc",
    "wchar16 const* const var_138_1 = r10_1",
    "wchar16 const* const var_140_1 = rcx_6",
    "if ((r9_3 & 4) != 0)",
    "rax_5 = u\"NOT \"",
    "void* const var_148_1 = rax_5",
    "int64_t rdx_6 = sub_14000c030(u\"  SENS_RES: %02x %02x\\n  SEL_RES\u2026\", zx.q(*(rbx_3 - 2)))",
    "if (*(rbx_3 + 1) != 0 && *(rbx_3 + 4) != 0)",
    "sub_14000c030(u\"  NFCID1  : \", rdx_6)",
    "rdx_6 = sub_14000c030(U\"\\n\", sub_140012f68(*(rbx_3 + 4), zx.q(*(rbx_3 + 1)), 1))",
    "if (*(rbx_3 + 0xc) != 0 && *(rbx_3 + 0x14) != 0)",
    "sub_14000c030(u\"  ATS     : \", rdx_6)",
    "sub_14000c030(u\"\\n\", sub_140012f68(*(rbx_3 + 0x14), zx.q(*(rbx_3 + 0xc)), 1))",
    "sub_14000c030(u\"ERROR kuhl_m_acr_info ; Only BrT\u2026\", rdx_4)",
    "rbx_3 += 0x28",
    "i_1 = i_3",
    "i_3 -= 1",
    "do while (i_1 != 1)",
    "LocalFree(hMem)",
    "sub_14000c870(&data_140140800, 0)",
    "return 0"
  ]
}