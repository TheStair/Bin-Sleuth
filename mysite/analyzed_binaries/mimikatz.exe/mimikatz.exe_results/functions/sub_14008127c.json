{
  "address": "0x14008127c",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "mov     qword [rsp+0x10], rbp",
    "mov     qword [rsp+0x18], rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x50",
    "mov     rax, qword [rcx]",
    "mov     rbp, qword [rcx+0x8]",
    "mov     rdi, r8",
    "movzx   eax, word [rax]",
    "mov     esi, edx",
    "mov     rbx, rcx",
    "mov     r13d, 0x21e",
    "lea     r12, [rel __dos_header]",
    "mov     r15d, 0x62",
    "mov     r14d, 0x496",
    "cmp     ax, r14w",
    "jb      0x140081387",
    "movzx   r10d, ax",
    "movzx   ecx, si",
    "movzx   r9d, word [r12+r10*2+0xda7e0]",
    "add     ecx, r9d",
    "movsxd  rax, ecx",
    "cmp     word [r12+rax*2+0xd9760], si",
    "je      0x140081318",
    "mov     ecx, 0x492",
    "cmp     ax, cx",
    "ja      0x1400813d5",
    "movdqu  xmm0, xmmword [rdi]",
    "movzx   edx, ax",
    "lea     r9, [rsp+0x30]",
    "mov     r8d, esi",
    "mov     rcx, rbx",
    "sub     edx, r14d",
    "mov     qword [rsp+0x20], rbp",
    "movdqu  xmmword [rsp+0x30], xmm0",
    "call    sub_14007e1dc",
    "lea     rcx, [rbx+0x10]",
    "cmp     qword [rbx], rcx",
    "ja      0x1400812c3",
    "movsxd  rax, ecx",
    "movzx   eax, dx",
    "movzx   r8d, word [r12+rax*2+0xdb370]",
    "test    r8w, r8w",
    "je      0x140081361",
    "mov     ecx, 0x494",
    "cmp     ax, cx",
    "jne     0x1400813e5",
    "add     qword [rbx], 0x18",
    "mov     rcx, qword [rbx]",
    "cmp     rcx, qword [rbx+0x970]",
    "jbe     0x1400813b5",
    "movzx   edx, si",
    "cmp     ax, r13w",
    "ja      0x140081324",
    "jmp     0x14008143d",
    "movzx   eax, dx",
    "sub     ecx, eax",
    "lea     eax, [r15+rcx]",
    "cdqe    ",
    "cmp     word [r12+rax*2+0xd9760], r15w",
    "jne     0x14008137c",
    "movzx   ecx, r8w",
    "mov     dx, r8w",
    "add     ecx, r9d",
    "movsxd  rax, ecx",
    "cmp     word [r12+rax*2+0xd9760], r8w",
    "jne     0x1400812ed",
    "movdqu  xmm0, xmmword [rdi]",
    "mov     rdi, qword [rbx+0x8]",
    "mov     rcx, rdi",
    "movdqu  xmm1, xmm0",
    "movdqu  xmmword [rsp+0x40], xmm0",
    "movdqu  xmmword [rsp+0x30], xmm1",
    "mov     rax, qword [rsp+0x30]",
    "cmp     byte [rax], 0x0",
    "je      0x14008141d",
    "add     qword [rbx], 0xffffffffffffffe8",
    "jmp     0x14008143d",
    "cmp     ax, r13w",
    "jbe     0x1400813c3",
    "lea     rax, [rcx-0x18]",
    "mov     rcx, rbx",
    "mov     qword [rbx], rax",
    "call    sub_14007e178",
    "jmp     0x14008143d",
    "lea     r11, [rsp+0x50]",
    "mov     rbx, qword [r11+0x30]",
    "mov     rbp, qword [r11+0x38]",
    "mov     rsi, qword [r11+0x40]",
    "mov     rsp, r11",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "retn    ",
    "mov     ax, word [r12+r10*2+0xdaf30]",
    "jmp     0x140081324",
    "test    dx, dx",
    "jne     0x14008131b",
    "lea     rdx, [rel data_1400f79b8]  {\"incomplete input\"}",
    "call    sub_1400191b8",
    "lea     r8, [rsp+0x30]",
    "lea     rdx, [rel data_1400f7888]  {\"near \"%T\": syntax error\"}",
    "call    sub_1400191b8",
    "jmp     0x140081429",
    "movdqu  xmm0, xmmword [rdi]",
    "mov     word [rcx], ax",
    "mov     word [rcx+0x2], si",
    "movdqu  xmmword [rcx+0x8], xmm0",
    "jmp     0x14008143d",
    "mov     edx, 0x180",
    "add     ax, dx",
    "mov     ax, word [r12+rax*2+0xd8860]",
    "lea     r8, [rsp+0x40]",
    "movzx   edx, si",
    "mov     rcx, rbx",
    "mov     qword [rbx+0x8], rdi",
    "call    sub_14007dfdc"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}