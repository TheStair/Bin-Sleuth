{
  "address": "0x14003e868",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/2b55bffaca6540fe805283ae15561184",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/ef08a8f7c1c64992b1a0b647e1999c0e",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/9dc0064ea6fd4874bc7d54bf7517d572",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop"
  ],
  "disassembly": [
    "mov     qword [rsp+0x10], rbx",
    "mov     qword [rsp+0x18], r8",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "sub     rsp, 0x20",
    "mov     rdi, rcx",
    "mov     rcx, qword [rcx+0x40]",
    "mov     r10, r8",
    "mov     rax, qword [rdi]",
    "movsxd  rsi, edx",
    "test    rcx, rcx",
    "je      0x14003e897",
    "movsxd  r8, dword [rdi+0x38]",
    "cqo     ",
    "idiv    r8",
    "mov     rbx, rdx",
    "mov     qword [rsp+0x40], rdx",
    "test    edx, edx",
    "jne     0x14003e8dd",
    "lea     r9, [rcx+rax]",
    "mov     qword [r8], r9",
    "jmp     0x14003e8f0",
    "mov     ebp, dword [rdi+0x38]",
    "sub     ebp, ebx",
    "cmp     esi, ebp",
    "jg      0x14003e8f8",
    "mov     rax, qword [rdi+0x8]",
    "sub     rax, qword [rdi]",
    "cmp     rax, r8",
    "jg      0x14003e8bf",
    "add     qword [rdi], rsi",
    "jmp     0x14003e9a4",
    "cmp     dword [rdi+0x10], esi",
    "jge     0x14003e93f",
    "movsxd  rax, ebx",
    "add     rax, qword [rdi+0x30]",
    "mov     qword [r10], rax",
    "mov     rcx, qword [rdi+0x18]",
    "mov     r9, qword [rdi]",
    "mov     rdx, qword [rdi+0x30]",
    "mov     rax, qword [rcx]",
    "call    qword [rax+0x10]",
    "test    eax, eax",
    "jne     0x14003e9a6",
    "mov     r8d, dword [rdi+0x8]",
    "sub     r8d, dword [rdi]",
    "xor     eax, eax",
    "movsxd  rdx, dword [rsp+0x40]",
    "mov     rcx, qword [rdi+0x20]",
    "movsxd  rbx, ebp",
    "add     rdx, qword [rdi+0x30]",
    "mov     r8, rbx",
    "call    memcpy",
    "add     qword [rdi], rbx",
    "mov     ebx, esi",
    "jmp     0x14003e992",
    "movsxd  rbx, dword [rdi+0x10]",
    "mov     eax, 0x80",
    "add     rbx, rbx",
    "cmp     rbx, rax",
    "cmovl   rbx, rax",
    "mov     rax, rsi",
    "cmp     rsi, rbx",
    "jle     0x14003e920",
    "mov     rbx, qword [rsp+0x48]",
    "add     rsp, 0x20",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "retn    ",
    "mov     r10, qword [rsp+0x50]",
    "sub     ebx, ebp",
    "test    ebx, ebx",
    "jg      0x14003e95e",
    "mov     rcx, qword [rdi+0x20]",
    "mov     rdx, rbx",
    "call    sub_1400169f4",
    "test    rax, rax",
    "jne     0x14003e938",
    "add     rbx, rbx",
    "cmp     rax, rbx",
    "jg      0x14003e918",
    "cmp     ebx, dword [rdi+0x38]",
    "mov     ebp, ebx",
    "lea     r8, [rsp+0x40]",
    "cmovg   ebp, dword [rdi+0x38]",
    "mov     rcx, rdi",
    "mov     edx, ebp",
    "call    sub_14003e868",
    "test    eax, eax",
    "jne     0x14003e9a6",
    "mov     rcx, qword [rsp+0x50]",
    "mov     rax, qword [rdi+0x20]",
    "mov     qword [rcx], rax",
    "mov     dword [rdi+0x10], ebx",
    "mov     qword [rdi+0x20], rax",
    "mov     eax, 0x7",
    "jmp     0x14003e9a6",
    "mov     rdx, qword [rsp+0x40]",
    "mov     eax, esi",
    "movsxd  r8, ebp",
    "sub     eax, ebx",
    "movsxd  rcx, eax",
    "add     rcx, qword [rdi+0x20]",
    "call    memcpy"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}