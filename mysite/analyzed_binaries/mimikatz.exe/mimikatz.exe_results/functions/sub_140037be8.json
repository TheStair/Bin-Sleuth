{
  "address": "0x140037be8",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "allocate or change RWX memory/e5d60c23edee4683a25ac882b99be25c/be08ffa5ddd942e8ab0706a663121e4b",
    "hash data with CRC32/7620b456d97a4aaeb63e1213270df3d4",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/0d7bc900a8ea48098fc469578ae14b88",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/dec108a2f8464ac388ec29affb61c4d8",
    "contain loop",
    "decompress data using LZO/368a268678dc46ccbe6ee697869692a3",
    "hash data with CRC32/dc8063c9cb1c41b9a5bafe66f5117ac4",
    "empty recycle bin quietly/a401764de4c44240956dc7f3c78baebd",
    "encrypt data using chaskey/4b6f9d91d05f46dd9aa3662f80cb6278",
    "encrypt data using TEA/a99f0fb4fab7434084917883a6622883/6cf0dbdc06cf4e518b05ed91d6a55995",
    "resolve function by parsing PE exports",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/88b7572ed916436d804701d7ca2c8848",
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/1d2aacee85cc43a0a1c1ba47e394ae52",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/5f4855375d6b45e9bd6b2a189e856211",
    "decrypt data using TEA/b1609112b4574d7d84a6736fb833fd96/bfe99336573d4b5189dbca2cbd3ed1f2",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "encrypt data using HC-128/86aaff13b46c4951b9ca4e0a9171c391",
    "check for kernel debugger via shared user data structure/f02b2044f10f450f9f5b2b0d5d96cef0",
    "hash data using djb2/1485ed9954f84e3481d22b64bc4cfca7",
    "decompress data using aPLib/88da69e00a6e49ce8c080be3a0beeb89",
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/ef08a8f7c1c64992b1a0b647e1999c0e",
    "hash data using jshash/79354a2ef36a4036b42806ea4b41f8bd",
    "PEB access/e2c35c8722ff407f92bb1a8869064106",
    "hash data using aphash/53c84e7b18b64c82aa36e25c45372fcd",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/b698edc3bfd142ebb8f43c55408819b5",
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/2b55bffaca6540fe805283ae15561184",
    "reference SQL statements",
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/dc118f3b61184df4a511ed4919cf656f",
    "encrypt data using HC-128/9c50649e7db346e5b98b1de875012b97",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/9dc0064ea6fd4874bc7d54bf7517d572",
    "hash data using aphash/c01783ca846f48c3a4751b50c0c12749",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/a3c4a1cc0982489686093c2de66a39c8",
    "encrypt data using Curve25519/bf3cf3909d844745bc0e01f23d66c6a9",
    "encrypt data using speck/a26b6340298f4b1a866e403df60a29dd",
    "check if file exists/4d83966993d04127850572b75c95648d/7fda8288a77741bfa31be8be31ac2a25",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/1a6c04bed22346cdaee8fbdaa0f123d3",
    "hash data using fnv/628d667c74574c3a8ee33aa4d0133bda",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/5f4c97f31ce341008ea23885a97305d8"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8 {arg_8}], rcx",
    "push    rbx {__saved_rbx}",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x2f8",
    "mov     r13, qword [rcx]",
    "mov     r12, qword [rcx+0x88]",
    "mov     r14, qword [rcx+0x68]",
    "mov     dl, byte [r13+0x5e]",
    "xor     r10d, r10d  {0x0}",
    "mov     r11, rcx",
    "lea     eax, [r10+0x7]",
    "mov     qword [rsp+0x38 {var_300}], r12",
    "mov     rsi, r12",
    "mov     byte [rsp+0x348 {i_33}], dl",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     qword [rsp+0x40 {var_2f8}], r13",
    "mov     byte [rsp+0x350 {arg_18}], r10b  {0x0}",
    "mov     r9d, r10d  {0x0}",
    "mov     dword [rsp+0x358 {arg_20}], r10d  {0x0}",
    "mov     r8d, r10d  {0x0}",
    "mov     dword [rsp+0x88 {var_2b0}], r10d  {0x0}",
    "mov     qword [rsp+0x48 {i_30}], r14",
    "lea     r15d, [r10+0x1]",
    "cmp     dword [rcx+0x38], eax",
    "je      0x14003969b",
    "mov     r14d, 0x7",
    "mov     qword [rcx+0x48], r10  {0x0}",
    "mov     qword [rcx+0xa0], r10  {0x0}",
    "mov     eax, dword [r13+0x160]",
    "mov     dword [r13+0x228], r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x14003c351",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     ebx, 0x1",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x140038954",
    "mov     al, byte [r13+0x61]",
    "neg     al",
    "sbb     edi, edi",
    "and     edi, 0xfffffffe",
    "add     edi, 0x9",
    "mov     ecx, edi",
    "mov     dword [r11+0x38], edi",
    "call    sub_14008335c",
    "lea     rdx, [rel data_1400f38e8]",
    "mov     rcx, r11",
    "mov     r8, rax",
    "jmp     0x14003da74",
    "movsxd  rax, dword [rcx+0x34]",
    "lea     ebx, [r10+0x4]",
    "lea     rcx, [rax+rax*2]",
    "lea     rsi, [r12+rcx*8]",
    "lea     rcx, [rel __dos_header]",
    "mov     rbp, qword [rsp+0x40 {var_2f8}]",
    "mov     r13d, 0xc0a",
    "cmp     byte [rbp+0x61], r10b",
    "cmovne  edi, r14d  {0x7}",
    "cmp     qword [r12+0xa8], r10",
    "jne     0x14003899c",
    "call    sub_140032200",
    "jmp     0x14003d8d9",
    "mov     r8d, dword [rsp+0x88 {var_2b0}]",
    "add     rsi, 0x18",
    "mov     r15d, 0x1",
    "jmp     0x140037ca1",
    "mov     ecx, dword [rcx+rbp*4+0x3dce0]",
    "lea     rax, [rel __dos_header]",
    "add     rcx, rax",
    "jmp     rcx",
    "mov     edx, edi",
    "mov     rcx, rbp",
    "mov     dword [r12+0x38], edi",
    "call    sub_1400190d4",
    "mov     rcx, qword [rsp+0x340 {arg_8}]",
    "sub     rsi, qword [rsp+0x38 {var_300}]",
    "mov     r9, qword [rcx+0xf0]",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "imul    rsi",
    "mov     rax, qword [rcx+0xa8]",
    "mov     ecx, edi",
    "sar     rdx, 0x2",
    "mov     qword [rsp+0x20 {var_318_1}], rax",
    "mov     r8, rdx",
    "shr     r8, 0x3f",
    "add     r8, rdx",
    "lea     rdx, [rel data_1400f4470]  {\"statement aborts at %d: [%s] %s\"}",
    "call    sub_1400187fc",
    "mov     rcx, qword [rsp+0x340 {arg_8}]",
    "call    sub_1400342d4",
    "cmp     edi, r13d",
    "jne     0x140038a0e",
    "cmp     edi, r13d",
    "je      0x14003899c",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "movzx   ebp, byte [rsi]",
    "add     r8d, r15d",
    "mov     qword [rsp+0x80 {var_2b8}], rsi",
    "mov     dword [rsp+0x88 {var_2b0}], r8d",
    "cmp     ebp, 0xa8",
    "ja      0x140038072",
    "{Case 0xc}",
    "movsxd  r8, dword [rsi+0x4]",
    "mov     rcx, rsi",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "sub     rcx, r12",
    "imul    r8, r8, 0x38",
    "imul    rcx",
    "mov     word [r8+r14+0x8], bx  {0x4}",
    "sar     rdx, 0x2",
    "mov     rax, rdx",
    "shr     rax, 0x3f",
    "add     rdx, rax",
    "movsxd  rax, edx",
    "mov     qword [r8+r14], rax",
    "jmp     0x14003d79a",
    "{Case 0x42}",
    "movsxd  rdx, dword [rsi+0x4]",
    "imul    rdx, rdx, 0x38",
    "add     rdx, r14",
    "mov     rax, qword [rdx]",
    "{Case 0xd}",
    "mov     eax, dword [rsi+0xc]",
    "movsxd  rcx, dword [rsi+0x4]",
    "sub     eax, r15d",
    "cdqe    ",
    "imul    rcx, rcx, 0x38",
    "mov     qword [rcx+r14], rax",
    "mov     word [rcx+r14+0x8], bx  {0x4}",
    "cmp     dword [rsi+0x8], r10d",
    "{Case 0x43}",
    "movsxd  rdx, dword [rsi+0x4]",
    "imul    rdx, rdx, 0x38",
    "add     rdx, r14",
    "mov     rax, qword [rdx]",
    "lea     rcx, [rax+rax*2]",
    "mov     eax, dword [r12+rcx*8+0x8]",
    "sub     eax, r15d",
    "cdqe    ",
    "jmp     0x140037d1f",
    "{Case 0xe}",
    "movsxd  r8, dword [rsi+0x4]",
    "sub     rsi, r12",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "imul    rsi",
    "sar     rdx, 0x2",
    "mov     rax, rdx",
    "shr     rax, 0x3f",
    "imul    r8, r8, 0x38",
    "movsxd  rcx, dword [r8+r14]",
    "add     rdx, rax",
    "mov     word [r8+r14+0x8], bx  {0x4}",
    "movsxd  rax, edx",
    "lea     rcx, [rcx+rcx*2]",
    "mov     qword [r8+r14], rax",
    "jmp     0x140037d2c",
    "{Case 0x44}",
    "movsxd  rax, dword [rsi+0xc]",
    "imul    rax, rax, 0x38",
    "test    byte [rax+r14+0x8], r15b",
    "je      0x14003806b",
    "{Case 0x45}",
    "mov     rcx, rsi",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "sub     rcx, r12",
    "imul    rcx",
    "mov     rbx, rdx",
    "sar     rbx, 0x2",
    "mov     rax, rbx",
    "shr     rax, 0x3f",
    "add     rbx, rax",
    "cmp     dword [rsi+0x4], r10d",
    "jne     0x14003d7cf",
    "{Case 0x46}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     r11, rax",
    "movsxd  rax, dword [rsi+0x4]",
    "mov     qword [r11], rax",
    "{Case 0x47}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     r11, rax",
    "{Case 0x94}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     r11, rax",
    "mov     eax, 0x8",
    "mov     word [r11+0x8], ax",
    "jmp     0x140037ec0",
    "{Case 0x71}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     rdx, qword [rsi+0x10]",
    "mov     rcx, rdx",
    "mov     rbx, rax",
    "call    sub_140019074",
    "mov     bpl, byte [rsp+0x348 {i_33}]",
    "mov     dword [rsi+0x4], eax",
    "cmp     bpl, r15b",
    "je      0x140037f9f",
    "{Case 0x48}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r11, rax",
    "mov     eax, 0xa02",
    "mov     word [r11+0x8], ax  {0xa02}",
    "mov     rax, qword [rsi+0x10]",
    "mov     qword [r11+0x10], rax",
    "mov     eax, dword [rsi+0x4]",
    "mov     byte [r11+0xa], dl",
    "mov     dword [r11+0xc], eax",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "jmp     0x140037e83",
    "{Case 0x49}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     ebp, dword [rsi+0xc]",
    "sub     ebp, dword [rsi+0x8]",
    "mov     rbx, rax",
    "mov     eax, dword [rsi+0x4]",
    "neg     eax",
    "mov     eax, 0x100",
    "sbb     r12w, r12w",
    "and     r12w, ax",
    "add     r12w, r15w",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003803c",
    "{Case 0x56, 0x59, 0x76, 0x9f}",
    "lea     rcx, [rel __dos_header]",
    "{Case 0x4a}",
    "movsxd  rax, dword [rsi+0x4]",
    "mov     ecx, 0xff41",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "and     word [rax+0x8], cx",
    "or      word [rax+0x8], r15w",
    "jmp     0x14003806b",
    "{Case 0x4b}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     r8d, dword [rsi+0x4]",
    "mov     rdx, qword [rsi+0x10]",
    "mov     rbx, rax",
    "xor     eax, eax  {0x0}",
    "xor     r9d, r9d  {0x0}",
    "mov     rcx, rbx",
    "mov     qword [rsp+0x20 {var_318}], rax  {0x0}",
    "call    sub_140031820",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     byte [rbx+0xa], dl",
    "{Case 0x4c}",
    "mov     eax, dword [rsi+0x4]",
    "sub     eax, r15d",
    "movsxd  rbp, eax",
    "imul    rbp, rbp, 0x38",
    "add     rbp, qword [r11+0x80]",
    "test    byte [rbp+0x8], 0x12",
    "je      0x140038128",
    "{Case 0x4d}",
    "movsxd  rbp, dword [rsi+0x4]",
    "movsxd  rbx, dword [rsi+0x8]",
    "mov     r12d, dword [rsi+0xc]",
    "imul    rbp, rbp, 0x38",
    "imul    rbx, rbx, 0x38",
    "add     rbp, r14",
    "add     rbx, r14",
    "{Case 0x4e}",
    "movsxd  rbp, dword [rsi+0x4]",
    "movsxd  rbx, dword [rsi+0x8]",
    "mov     r12d, dword [rsi+0xc]",
    "imul    rbp, rbp, 0x38",
    "imul    rbx, rbx, 0x38",
    "add     rbp, r14",
    "add     rbx, r14",
    "{Case 0x4f}",
    "movsxd  rdx, dword [rsi+0x4]",
    "movsxd  rcx, dword [rsi+0x8]",
    "mov     r8d, 0x1000",
    "imul    rdx, rdx, 0x38",
    "imul    rcx, rcx, 0x38",
    "add     rdx, r14",
    "add     rcx, r14",
    "call    sub_1400316f8",
    "jmp     0x140037ea8",
    "{Case 0x50}",
    "movsxd  rax, dword [rsi+0x4]",
    "movsxd  rcx, dword [rsi+0x8]",
    "imul    rax, rax, 0x38",
    "imul    rcx, rcx, 0x38",
    "add     rcx, r14",
    "mov     rdx, qword [rax+r14]",
    "mov     eax, 0x2400",
    "test    word [rcx+0x8], ax",
    "je      0x1400382b5",
    "{Case 0x6c}",
    "movsxd  r13, dword [rsi+0x4]",
    "movsxd  rbx, dword [rsi+0x8]",
    "movsxd  rbp, dword [rsi+0xc]",
    "imul    r13, r13, 0x38",
    "imul    rbx, rbx, 0x38",
    "imul    rbp, rbp, 0x38",
    "add     rbx, r14",
    "add     r13, r14",
    "add     rbp, r14",
    "movzx   r14d, word [r13+0x8]",
    "mov     al, byte [rbx+0x8]",
    "or      al, r14b",
    "test    r15b, al",
    "je      0x140038310",
    "{Case 0x67-0x6b}",
    "movsxd  r13, dword [rsi+0x4]",
    "imul    r13, r13, 0x38",
    "add     r13, r14",
    "mov     bx, word [r13+0x8]",
    "and     bx, 0x2c",
    "jne     0x1400384a4",
    "{Case 0x52}",
    "cmp     dword [rsi+0x4], r10d",
    "je      0x14003806b",
    "{Case 0x63-0x66}",
    "movsxd  rcx, dword [rsi+0x8]",
    "movsxd  rbp, dword [rsi+0x4]",
    "movsxd  r12, dword [rsi+0xc]",
    "imul    rcx, rcx, 0x38",
    "imul    rbp, rbp, 0x38",
    "imul    r12, r12, 0x38",
    "add     rcx, r14",
    "add     rbp, r14",
    "add     r12, r14",
    "mov     al, byte [rcx+0x8]",
    "or      al, byte [rbp+0x8]",
    "test    r15b, al",
    "je      0x1400387d1",
    "{Case 0x53}",
    "movsxd  rbx, dword [rsi+0x4]",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "mov     rcx, rbx",
    "call    sub_140031230",
    "mov     r11, rax",
    "mov     qword [rbx], rax",
    "mov     eax, 0x3e40",
    "and     word [rbx+0x8], ax",
    "mov     eax, 0x4",
    "or      word [rbx+0x8], ax",
    "movsxd  rax, dword [rsi+0x8]",
    "add     rax, r11",
    "{Case 0xf}",
    "movsxd  rbx, dword [rsi+0x4]",
    "mov     ebp, 0x4",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "movzx   eax, word [rbx+0x8]",
    "test    bpl, al",
    "jne     0x140038a57",
    "{Case 0x54}",
    "movsxd  rbx, dword [rsi+0x4]",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "test    byte [rbx+0x8], 0x24",
    "je      0x140038066",
    "{Case 0x55}",
    "movsxd  rbx, dword [rsi+0x4]",
    "mov     eax, 0x4000",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "test    word [rbx+0x8], ax",
    "je      0x140038ad3",
    "{Case 0x34-0x39}",
    "movsxd  rbp, dword [rsi+0xc]",
    "movsxd  r12, dword [rsi+0x4]",
    "imul    rbp, rbp, 0x38",
    "imul    r12, r12, 0x38",
    "add     rbp, r14",
    "add     r12, r14",
    "movzx   ebx, word [rbp+0x8]",
    "movzx   r13d, word [r12+0x8]",
    "movzx   ecx, bx",
    "or      cx, r13w",
    "test    r15b, cl",
    "je      0x140038bb9",
    "{Case 0x3a}",
    "cmp     r9d, r10d",
    "jmp     0x140037d5a",
    "{Case 0x57}",
    "test    byte [rsi+0x2], r15b",
    "jne     0x140038daf",
    "{Case 0x10}",
    "cmp     r9d, r10d",
    "jge     0x140038f12",
    "{Case 0x2b-0x2c}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     ebp, 0x2",
    "mov     edx, ebp  {0x2}",
    "imul    rcx, rcx, 0x38",
    "add     rcx, r14",
    "call    sub_1400312cc",
    "movsxd  rcx, dword [rsi+0x8]",
    "mov     edx, ebp  {0x2}",
    "movsxd  rbx, eax",
    "imul    rcx, rcx, 0x38",
    "add     rcx, r14",
    "call    sub_1400312cc",
    "cmp     byte [rsi], 0x2c",
    "movsxd  r11, eax",
    "lea     rax, [rel __dos_header]",
    "jne     0x140038f6a",
    "{Case 0x58}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     edx, dword [rsi+0xc]",
    "imul    rcx, rcx, 0x38",
    "add     rcx, r14",
    "call    sub_1400312cc",
    "mov     edx, 0x2400",
    "movsxd  rcx, eax",
    "movsxd  rax, dword [rsi+0x10]",
    "xor     rcx, rax",
    "movsxd  rax, dword [rsi+0x8]",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "test    word [rax+0x8], dx",
    "je      0x140039009",
    "{Case 0x13}",
    "movsxd  rcx, dword [rsi+0x4]",
    "movsxd  rbx, dword [rsi+0x8]",
    "imul    rcx, rcx, 0x38",
    "imul    rbx, rbx, 0x38",
    "add     rcx, r14",
    "add     rbx, r14",
    "test    byte [rcx+0x8], r15b",
    "jne     0x14003908a",
    "{Case 0x6e}",
    "movsxd  rbx, dword [rsi+0x8]",
    "movsxd  rbp, dword [rsi+0x4]",
    "imul    rbx, rbx, 0x38",
    "imul    rbp, rbp, 0x38",
    "add     rbx, r14",
    "add     rbp, r14",
    "mov     rcx, rbx",
    "call    sub_140031524",
    "test    byte [rbp+0x8], r15b",
    "jne     0x14003d673",
    "{Case 0x11}",
    "mov     r10, qword [r11+0x100]",
    "xor     eax, eax  {0x0}",
    "cmp     r10, rax",
    "je      0x14003914f",
    "{Case 0x12}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     edx, dword [rsi+0xc]",
    "imul    rcx, rcx, 0x38",
    "add     rcx, r14",
    "call    sub_1400312cc",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "{Case 0x14}",
    "cmp     dword [rsi+0xc], r10d",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     edx, r10d  {0x0}",
    "sete    dl",
    "imul    rcx, rcx, 0x38",
    "add     rcx, r14",
    "call    sub_1400312cc",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "je      0x14003d79a",
    "{Case 0x32}",
    "movsxd  rax, dword [rsi+0x4]",
    "imul    rax, rax, 0x38",
    "test    byte [rax+r14+0x8], r15b",
    "jmp     0x140037d5a",
    "{Case 0x33}",
    "movsxd  rax, dword [rsi+0x4]",
    "imul    rax, rax, 0x38",
    "test    byte [rax+r14+0x8], r15b",
    "{Case 0x15}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rcx, qword [rax+rcx*8]",
    "cmp     byte [rcx+0x2], r10b",
    "je      0x14003806b",
    "{Case 0x5a}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "movsxd  r13, dword [rsi+0x8]",
    "mov     rbx, qword [rax+rcx*8]",
    "mov     dword [rsp+0x50 {var_2e8}], r13d",
    "cmp     byte [rbx+0x3], r10b",
    "je      0x140039278",
    "{Case 0x5b}",
    "movsxd  rbx, dword [rsi+0x4]",
    "mov     rbp, qword [rsi+0x10]",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "{Case 0x5c}",
    "mov     eax, dword [rsi+0x8]",
    "mov     rcx, qword [rsp+0x48 {i_30}]",
    "movsxd  r11, dword [rsi+0x4]",
    "imul    r11, r11, 0x38",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rbp, qword [rsi+0x10]",
    "add     r11, rcx",
    "movzx   r12d, byte [r12+0xc3]",
    "mov     r14, r10  {0x0}",
    "mov     r15d, r10d  {0x0}",
    "mov     qword [rsp+0x78 {var_2c0}], r10  {0x0}",
    "mov     r10d, 0x1",
    "xor     r8d, r8d  {0x0}",
    "sub     eax, r10d",
    "mov     qword [rsp+0x60 {var_2d8}], r11",
    "mov     dword [rsp+0x68 {i_46}], r12d",
    "movsxd  r13, eax",
    "movsxd  rax, dword [rsi+0xc]",
    "imul    r13, r13, 0x38",
    "imul    rax, rax, 0x38",
    "add     r13, r11",
    "mov     qword [rsp+0xb0 {var_288}], r13",
    "add     rax, rcx",
    "mov     qword [rsp+0x90 {var_2a8}], rax",
    "cmp     rbp, r8",
    "je      0x140039953",
    "{Case 0x5d}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "lea     rdx, [rsp+0xb8 {var_280}]",
    "mov     rcx, qword [rax+rcx*8]",
    "mov     qword [rsp+0xb8 {var_280}], r10  {0x0}",
    "mov     rcx, qword [rcx+0x38]",
    "call    sub_14002f07c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "{Case 0x0}",
    "mov     r15d, dword [rsi+0x4]",
    "mov     rbp, qword [rsi+0x10]",
    "cmp     r15d, r10d",
    "jne     0x140039e29",
    "{Case 0x2}",
    "mov     edx, dword [rsi+0x8]",
    "mov     ebx, r10d  {0x0}",
    "mov     dword [rsp+0x6c {i_31}], ebx  {0x0}",
    "cmp     edx, r10d",
    "je      0x14003a0d6",
    "{Case 0x5e}",
    "movsxd  rax, dword [rsi+0x4]",
    "mov     rcx, qword [r13+0x20]",
    "mov     edx, dword [rsi+0xc]",
    "shl     rax, 0x5",
    "lea     r8, [rsp+0xd0 {var_268}]",
    "mov     rcx, qword [rax+rcx+0x8]",
    "call    sub_14002efb0",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "movsxd  rcx, dword [rsp+0xd0 {var_268}]",
    "mov     qword [rax], rcx",
    "jmp     0x140037ea8",
    "{Case 0x5f}",
    "movsxd  rbx, dword [rsi+0x4]",
    "mov     r8d, dword [rsi+0xc]",
    "mov     edx, dword [rsi+0x8]",
    "shl     rbx, 0x5",
    "add     rbx, qword [r13+0x20]",
    "mov     rcx, qword [rbx+0x8]",
    "call    sub_14002f000",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     dword [rsi+0x8], r15d",
    "jne     0x14003a304",
    "{Case 0x60}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rbx, qword [rax+rcx*8]",
    "cmp     rbx, r10",
    "je      0x14003a37d",
    "{Case 0x61-0x62}",
    "mov     eax, dword [r11+0xc8]",
    "and     al, 0x3",
    "cmp     al, r15b",
    "je      0x14003d9c4",
    "{Case 0x6d}",
    "movsxd  rcx, dword [rsi+0x8]",
    "mov     rax, qword [r11+0x78]",
    "mov     edx, dword [rsi+0x4]",
    "mov     rbx, qword [rax+rcx*8]",
    "or      r9d, 0xffffffff  {0xffffffff}",
    "mov     rcx, r11",
    "movsx   r8d, word [rbx+0x50]",
    "mov     byte [rsp+0x20 {var_318}], r10b  {0x0}",
    "call    sub_14003789c",
    "xor     r10d, r10d  {0x0}",
    "mov     r11, rax",
    "cmp     rax, r10",
    "je      0x14003969b",
    "{Case 0x6f-0x70}",
    "movsxd  rdx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rbx, qword [rax+rdx*8]",
    "cmp     rbx, r10",
    "je      0x14003a67f",
    "{Case 0x72}",
    "mov     r8d, dword [rsi+0x8]",
    "mov     edx, dword [rsi+0x4]",
    "or      r9d, 0xffffffff  {0xffffffff}",
    "mov     rcx, r11",
    "mov     byte [rsp+0x20 {var_318}], r15b  {0x1}",
    "call    sub_14003789c",
    "xor     r11d, r11d  {0x0}",
    "cmp     rax, r11",
    "je      0x14003969b",
    "{Case 0x73}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rdx, qword [rax+rcx*8]",
    "mov     rcx, qword [rdx+0x18]",
    "lea     rax, [rcx+0x1]",
    "mov     qword [rdx+0x18], rax",
    "cmp     rcx, r10",
    "je      0x14003d79a",
    "{Case 0x74}",
    "mov     r8d, dword [rsi+0xc]",
    "mov     edx, dword [rsi+0x4]",
    "mov     eax, 0x3",
    "or      r9d, 0xffffffff  {0xffffffff}",
    "mov     rcx, r11",
    "mov     byte [rsp+0x20 {var_318}], al  {0x3}",
    "call    sub_14003789c",
    "xor     r10d, r10d  {0x0}",
    "cmp     rax, r10",
    "je      0x14003969b",
    "{Case 0x75}",
    "movsxd  rax, dword [rsi+0x4]",
    "mov     rdx, qword [r11+0x78]",
    "mov     rcx, r11",
    "mov     rdx, qword [rdx+rax*8]",
    "call    sub_1400338fc",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "movsxd  r11, dword [rsi+0x4]",
    "mov     rax, qword [r12+0x78]",
    "xor     r10d, r10d  {0x0}",
    "mov     qword [rax+r11*8], r10  {0x0}",
    "jmp     0x140038664",
    "{Case 0x16-0x19}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     r15d, r10d  {0x0}",
    "mov     r12, qword [rax+rcx*8]",
    "mov     ecx, 0x2",
    "mov     byte [r12+0x2], r10b  {0x0}",
    "mov     byte [r12+0x3], r10b  {0x0}",
    "mov     dword [r12+0x28], r10d  {0x0}",
    "cmp     byte [r12+0x4], r10b",
    "je      0x14003ab30",
    "{Case 0x77}",
    "mov     rax, qword [r11+0x78]",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rdx, qword [rax+rcx*8]",
    "mov     eax, dword [rsi+0x8]",
    "shl     eax, 0x3",
    "xor     eax, dword [rdx+0x8]",
    "and     eax, 0x8",
    "xor     dword [rdx+0x8], eax",
    "jmp     0x140037d30",
    "{Case 0x1a}",
    "mov     rax, qword [r11+0x78]",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rcx, qword [rax+rcx*8]",
    "mov     eax, 0x8",
    "test    byte [rcx+0x8], al",
    "jne     0x14003806b",
    "{Case 0x1b-0x1d}",
    "movsxd  rbx, dword [rsi+0xc]",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "imul    rbx, rbx, 0x38",
    "mov     rbp, qword [rax+rcx*8]",
    "add     rbx, r14",
    "cmp     dword [rsi+0x10], r10d",
    "jle     0x14003ad51",
    "{Case 0x1e}",
    "movsxd  rdx, dword [rsi+0xc]",
    "imul    rdx, rdx, 0x38",
    "add     rdx, r14",
    "test    byte [rdx+0x8], 0x24",
    "jne     0x14003af03",
    "{Case 0x1f}",
    "movsxd  rax, dword [rsi+0xc]",
    "imul    rax, rax, 0x38",
    "mov     rbp, qword [rax+r14]",
    "{Case 0x78}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "movsxd  rdx, dword [rsi+0x4]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     rcx, qword [r11+0x78]",
    "mov     rdx, qword [rcx+rdx*8]",
    "mov     rcx, qword [rdx+0x18]",
    "mov     qword [rax], rcx",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rdx, qword [rax+rcx*8]",
    "add     qword [rdx+0x18], r15",
    "jmp     0x140037e7c",
    "{Case 0x79}",
    "mov     rbx, r10  {0x0}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "mov     qword [rsp+0x60 {var_2d8}], rbx  {0x0}",
    "mov     dword [rsp+0x50 {var_2e8}], r10d  {0x0}",
    "call    sub_140037bb4",
    "movsxd  rdx, dword [rsi+0x4]",
    "mov     r13, rax",
    "mov     rax, qword [rsp+0x340 {arg_8}]",
    "mov     rcx, qword [rax+0x78]",
    "mov     ebp, 0x2",
    "mov     r12, qword [rcx+rdx*8]",
    "test    byte [r12+0x8], bpl",
    "jne     0x14003b07b",
    "{Case 0x7a}",
    "mov     rax, qword [r11+0x78]",
    "movsxd  rcx, dword [rsi+0x4]",
    "movsxd  rdx, dword [rsi+0x8]",
    "imul    rdx, rdx, 0x38",
    "mov     rbx, qword [rax+rcx*8]",
    "movsxd  rax, dword [rsi+0xc]",
    "add     rdx, r14",
    "imul    rax, rax, 0x38",
    "cmp     byte [rsi+0x1], 0xfa",
    "mov     r8, qword [rax+r14]",
    "mov     qword [rsp+0x180 {var_1b8_1}], r8",
    "jne     0x14003b1f7",
    "{Case 0x7b}",
    "cmp     byte [rsi+0x1], 0xfa",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rbp, qword [rax+rcx*8]",
    "mov     r14d, dword [rsi+0x8]",
    "jne     0x14003b33a",
    "{Case 0x7c}",
    "mov     eax, dword [r11+0x3c]",
    "add     dword [r13+0x78], eax",
    "mov     dword [r13+0x74], eax",
    "mov     dword [r11+0x3c], r10d  {0x0}",
    "jmp     0x14003806b",
    "{Case 0x7d}",
    "movsxd  rdx, dword [rsi+0xc]",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "imul    rdx, rdx, 0x38",
    "mov     r8d, dword [rsi+0x10]",
    "mov     rcx, qword [rax+rcx*8]",
    "lea     r9, [rsp+0x98 {var_2a0}]",
    "add     rdx, r14",
    "mov     dword [rsp+0x98 {var_2a0}], r10d  {0x0}",
    "call    sub_1400403e4",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "{Case 0x7e}",
    "mov     rax, qword [r11+0x78]",
    "movsxd  rcx, dword [rsi+0x4]",
    "movsxd  rbx, dword [rsi+0x8]",
    "imul    rbx, rbx, 0x38",
    "mov     rcx, qword [rax+rcx*8]",
    "add     rbx, r14",
    "mov     rax, qword [rcx+0x38]",
    "cmp     byte [rax+0x58], r10b",
    "je      0x14003b476",
    "{Case 0x7f}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "movsxd  rdx, dword [rsi+0x4]",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rcx, qword [r12+0x78]",
    "mov     rbx, rax",
    "mov     rdx, qword [rcx+rdx*8]",
    "mov     rdi, qword [rdx+0x38]",
    "mov     rcx, rdi",
    "call    sub_1400296c8",
    "mov     r8d, dword [rdi+0x40]",
    "cmp     r8d, dword [r13+0x7c]",
    "ja      0x14003d1e1",
    "{Case 0x80}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "movsxd  rdx, dword [rsi+0x4]",
    "mov     rcx, qword [r11+0x78]",
    "xor     r10d, r10d  {0x0}",
    "mov     rbp, rax",
    "mov     rbx, qword [rcx+rdx*8]",
    "cmp     byte [rbx+0x2], r10b",
    "je      0x14003b5bf",
    "{Case 0x81}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rbx, qword [rax+rcx*8]",
    "mov     byte [rbx+0x2], r15b  {0x1}",
    "mov     dword [rbx+0x28], r10d  {0x0}",
    "cmp     byte [rbx], r10b",
    "jne     0x140038066",
    "{Case 0x20, 0x82}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     dword [rsp+0xa4 {var_294}], r10d  {0x0}",
    "mov     rbx, qword [rax+rcx*8]",
    "mov     rcx, qword [rbx+0x38]",
    "cmp     bpl, 0x82",
    "jne     0x14003b6f8",
    "{Case 0x21}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rcx, qword [rax+rcx*8]",
    "mov     rbx, qword [rcx+0x38]",
    "mov     rcx, rbx",
    "call    sub_140029cbc",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003b77f",
    "{Case 0x22-0x23}",
    "add     dword [r11+0xdc], r15d",
    "{Case 0x24}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     ebp, r15d  {0x1}",
    "mov     r12, qword [rax+rcx*8]",
    "mov     rbx, qword [r12+0x38]",
    "cmp     byte [r12], r15b",
    "jne     0x14003b8a7",
    "{Case 0x3}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rbp, qword [rax+rcx*8]",
    "mov     rdi, qword [rbp+0x38]",
    "cmp     byte [rdi+0x58], r10b",
    "je      0x14003b951",
    "{Case 0x4-0x5}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     edx, dword [rsi+0xc]",
    "mov     rbp, qword [rax+rcx*8]",
    "mov     rcx, qword [rbp+0x38]",
    "call    qword [rsi+0x10]",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "{Case 0x83-0x84}",
    "movsxd  rbx, dword [rsi+0x8]",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "imul    rbx, rbx, 0x38",
    "mov     rbp, qword [rax+rcx*8]",
    "add     rbx, r14",
    "test    byte [rsi+0x2], r15b",
    "je      0x14003ba16",
    "{Case 0x85}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "lea     rdx, [rsp+0x148 {var_1f0}]",
    "mov     rbx, qword [rax+rcx*8]",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "mov     rax, qword [rbx+0x40]",
    "mov     rbp, qword [rbx+0x38]",
    "mov     byte [rsp+0x15a {var_1de_1}], r10b  {0x0}",
    "mov     qword [rsp+0x148 {var_1f0}], rax",
    "movzx   eax, word [rsi+0xc]",
    "mov     rcx, rbp",
    "mov     word [rsp+0x158 {var_1e0_1}], ax",
    "movsxd  rax, dword [rsi+0x8]",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "mov     qword [rsp+0x150 {var_1e8_1}], rax",
    "lea     rax, [rsp+0xe8 {var_250}]",
    "mov     qword [rsp+0x20 {var_318}], rax {var_250}",
    "call    sub_140029f9c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "{Case 0x86-0x87}",
    "mov     rax, qword [r11+0x78]",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rbx, qword [rax+rcx*8]",
    "mov     rax, qword [rbx+0x38]",
    "cmp     byte [rax], r10b",
    "je      0x14003bb94",
    "{Case 0x25-0x28}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "cmp     bpl, 0x27",
    "mov     rdx, qword [rax+rcx*8]",
    "lea     r9, [rsp+0x58 {var_2e0}]",
    "lea     r8, [rsp+0x130 {var_208}]",
    "mov     rax, qword [rdx+0x40]",
    "mov     rcx, r13",
    "mov     dword [rsp+0x58 {var_2e0}], r10d  {0x0}",
    "mov     qword [rsp+0x130 {var_208}], rax",
    "movzx   eax, word [rsi+0x10]",
    "mov     word [rsp+0x140 {var_1f8_1}], ax",
    "sbb     al, al",
    "mov     byte [rsp+0x142 {var_1f6_1}], al",
    "movsxd  rax, dword [rsi+0xc]",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "mov     qword [rsp+0x138 {var_200_1}], rax",
    "call    sub_140035a9c",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     eax, dword [rsp+0x58 {var_2e0}]",
    "test    byte [rsi], r15b",
    "je      0x14003bcbc",
    "{Case 0x88}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     rbx, rax",
    "mov     word [rax+0x8], r15w  {0x1}",
    "mov     ecx, dword [r13+0xd8]",
    "add     ecx, r15d",
    "cmp     dword [r13+0xcc], ecx",
    "jg      0x14003d9f2",
    "{Case 0x89}",
    "mov     eax, dword [rsi+0xc]",
    "mov     rcx, qword [r13+0x20]",
    "mov     edx, dword [rsi+0x4]",
    "neg     eax",
    "lea     rax, [rsp+0xb0 {var_288}]",
    "mov     dword [rsp+0xb0 {var_288}], r10d  {0x0}",
    "sbb     r8, r8",
    "and     r8, rax {var_288}",
    "movsxd  rax, dword [rsi+0x8]",
    "shl     rax, 0x5",
    "mov     rcx, qword [rax+rcx+0x8]",
    "call    sub_14002ed34",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     dword [rsi+0xc], r10d",
    "je      0x14003be23",
    "{Case 0x8a}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rcx, qword [rax+rcx*8]",
    "cmp     byte [rcx], r15b",
    "jne     0x14003be53",
    "{Case 0x8b}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "movsxd  rdx, dword [rsi+0x4]",
    "mov     rcx, qword [r13+0x20]",
    "mov     r8d, dword [rsi+0xc]",
    "shl     rdx, 0x5",
    "mov     rbx, rax",
    "mov     rcx, qword [rdx+rcx+0x8]",
    "xor     eax, eax  {0x0}",
    "lea     rdx, [rsp+0x68 {i_46}]",
    "mov     dword [rsp+0x68 {i_46}], eax  {0x0}",
    "call    sub_14002e86c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "{Case 0x8c}",
    "add     byte [r13+0x6a], r15b",
    "mov     rdx, qword [rsi+0x10]",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, r13",
    "mov     qword [rsp+0x20 {var_318}], r10  {0x0}",
    "call    sub_14005db80",
    "dec     byte [r13+0x6a]",
    "jmp     0x14003a959",
    "{Case 0x8d}",
    "mov     rcx, qword [rsi+0x10]",
    "movsxd  rbx, dword [rsi+0x4]",
    "cmp     rcx, r10",
    "jne     0x14003bf4b",
    "{Case 0x8e}",
    "mov     edx, dword [rsi+0x4]",
    "mov     rcx, r13",
    "call    sub_14004cd04",
    "jmp     0x14003a959",
    "{Case 0x8f}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rdx, qword [rsi+0x10]",
    "xor     r8d, r8d  {0x0}",
    "shl     rcx, 0x5",
    "add     rcx, qword [r13+0x20]",
    "mov     rcx, qword [rcx+0x18]",
    "add     rcx, 0x8",
    "call    sub_14001a4ac",
    "xor     r10d, r10d  {0x0}",
    "cmp     rax, r10",
    "je      0x14003c08f",
    "{Case 0x90}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r13+0x20]",
    "mov     rdx, qword [rsi+0x10]",
    "shl     rcx, 0x5",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, qword [rcx+rax+0x18]",
    "add     rcx, 0x20",
    "call    sub_14001a4ac",
    "xor     r10d, r10d  {0x0}",
    "mov     rdx, rax",
    "cmp     rax, r10",
    "je      0x14003c08f",
    "{Case 0x91}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r13+0x20]",
    "mov     rdx, qword [rsi+0x10]",
    "shl     rcx, 0x5",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, qword [rcx+rax+0x18]",
    "add     rcx, 0x38",
    "call    sub_14001a4ac",
    "xor     r10d, r10d  {0x0}",
    "mov     rbx, rax",
    "cmp     rax, r10",
    "je      0x140038af5",
    "{Case 0x92}",
    "movsxd  rbp, dword [rsi+0xc]",
    "movzx   eax, word [rsi+0x2]",
    "movsxd  rbx, dword [rsi+0x4]",
    "imul    rbp, rbp, 0x38",
    "imul    rbx, rbx, 0x38",
    "mov     rcx, qword [r13+0x20]",
    "mov     rdx, qword [rsi+0x10]",
    "mov     r9d, dword [rbp+r14]",
    "lea     r8, [rsp+0xd8 {var_260}]",
    "shl     rax, 0x5",
    "add     r9d, r15d",
    "mov     rcx, qword [rax+rcx+0x8]",
    "mov     qword [rsp+0x20 {var_318}], r8 {var_260}",
    "mov     r8d, dword [rsi+0x8]",
    "add     rdx, 0x4",
    "add     rbx, r14",
    "call    sub_14002fce4",
    "mov     rcx, rbx",
    "mov     r12, rax",
    "call    sub_140031524",
    "mov     ecx, dword [rsp+0xd8 {var_260}]",
    "xor     r10d, r10d  {0x0}",
    "cmp     ecx, r10d",
    "je      0x14003c22b",
    "{Case 0x93}",
    "movsxd  rbx, dword [rsi+0x4]",
    "movsxd  rbp, dword [rsi+0x8]",
    "mov     eax, 0x10",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "imul    rbp, rbp, 0x38",
    "test    byte [rbx+0x8], al",
    "jne     0x14003c28f",
    "{Case 0x29}",
    "movsxd  rbp, dword [rsi+0x4]",
    "mov     eax, 0x10",
    "imul    rbp, rbp, 0x38",
    "add     rbp, r14",
    "test    byte [rbp+0x8], al",
    "je      0x14003c38a",
    "{Case 0x2a}",
    "movsxd  rbx, dword [rsi+0x4]",
    "movsxd  rbp, dword [rsi+0xc]",
    "mov     r12d, dword [rsi+0x10]",
    "imul    rbx, rbx, 0x38",
    "imul    rbp, rbp, 0x38",
    "add     rbx, r14",
    "mov     eax, 0x10",
    "test    byte [rbx+0x8], al",
    "jne     0x14003c3cf",
    "{Case 0x2d}",
    "movsxd  rbx, dword [rsi+0xc]",
    "mov     r14, qword [rsi+0x10]",
    "imul    rbx, rbx, 0x38",
    "add     rbx, qword [rsp+0x48 {i_30}]",
    "cmp     word [rsi+0x2], r10w",
    "je      0x14003c44d",
    "{Case 0x95}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     r9, qword [r12+0x100]",
    "movsxd  rcx, dword [r9+0x54]",
    "lea     rdx, [rcx+rcx*2]",
    "mov     rcx, qword [r9+0x10]",
    "mov     r8d, dword [rcx+rdx*8+0x4]",
    "mov     rcx, rax",
    "add     r8d, dword [rsi+0x4]",
    "movsxd  rdx, r8d",
    "mov     r8d, 0x1000",
    "imul    rdx, rdx, 0x38",
    "add     rdx, qword [r9+0x20]",
    "call    sub_1400316f8",
    "jmp     0x1400387bf",
    "{Case 0x96}",
    "mov     eax, dword [r13+0x30]",
    "bt      rax, 0x13",
    "movsxd  rax, dword [rsi+0x8]",
    "jae     0x14003c700",
    "{Case 0x2e}",
    "cmp     dword [rsi+0x4], r10d",
    "je      0x14003c741",
    "{Case 0x97}",
    "mov     rax, qword [r11+0x100]",
    "cmp     rax, r10",
    "je      0x14003c773",
    "{Case 0x2f}",
    "movsxd  rcx, dword [rsi+0x4]",
    "imul    rcx, rcx, 0x38",
    "mov     rdx, qword [rcx+r14]",
    "cmp     rdx, r10",
    "jle     0x140037d30",
    "{Case 0x98}",
    "movsxd  rbx, dword [rsi+0x4]",
    "movsxd  rbp, dword [rsi+0xc]",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "imul    rbx, rbx, 0x38",
    "imul    rbp, rbp, 0x38",
    "call    sub_140037bb4",
    "mov     rcx, qword [rbx+r14]",
    "xor     r10d, r10d  {0x0}",
    "mov     r11, rax",
    "cmp     rcx, r10",
    "mov     qword [rsp+0x70 {i_32}], rcx",
    "jle     0x14003c86b",
    "{Case 0x30}",
    "movsxd  rcx, dword [rsi+0x4]",
    "imul    rcx, rcx, 0x38",
    "mov     rax, qword [rcx+r14]",
    "cmp     rax, r10",
    "je      0x14003806b",
    "{Case 0x31}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     r8, 0x8000000000000000",
    "imul    rcx, rcx, 0x38",
    "mov     rax, qword [rcx+r14]",
    "cmp     rax, r8",
    "jle     0x14003c8bd",
    "{Case 0x99-0x9a}",
    "movzx   ebx, word [rsi+0x2]",
    "mov     rcx, r13",
    "lea     rdx, [rbx*8+0x68]",
    "call    sub_140016c18",
    "xor     r10d, r10d  {0x0}",
    "mov     r11, rax",
    "cmp     rax, r10",
    "je      0x14003969b",
    "{Case 0x9b}",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "{Case 0x9c-0x9d}",
    "movsxd  rbp, dword [rsi+0x4]",
    "imul    rbp, rbp, 0x38",
    "add     rbp, r14",
    "cmp     dword [rsi+0xc], r10d",
    "je      0x14003cb04",
    "{Case 0x6}",
    "mov     r8d, dword [rsi+0x8]",
    "mov     edx, dword [rsi+0x4]",
    "or      dword [rsp+0xc8 {var_270}], 0xffffffff  {0xffffffff}",
    "or      dword [rsp+0xc4 {var_274}], 0xffffffff  {0xffffffff}",
    "lea     rax, [rsp+0xc8 {var_270}]",
    "lea     r9, [rsp+0xc4 {var_274}]",
    "mov     rcx, r13",
    "mov     qword [rsp+0x20 {var_318}], rax {var_270}",
    "mov     dword [rsp+0xc0 {var_278}], r10d  {0x0}",
    "call    sub_140083d94",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "je      0x14003cbed",
    "{Case 0x7}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     r8, qword [rsp+0x40 {var_2f8}]",
    "mov     ebx, dword [rsi+0xc]",
    "mov     rcx, qword [r8+0x20]",
    "movsxd  rdx, dword [rsi+0x4]",
    "mov     r13, rax",
    "shl     rdx, 0x5",
    "cmp     ebx, 0xffffffff",
    "mov     eax, 0x3",
    "mov     r14, qword [rdx+rcx+0x8]",
    "mov     rcx, qword [r14+0x8]",
    "mov     rbp, qword [rcx]",
    "movzx   r12d, byte [rbp+0x9]",
    "cmove   ebx, r12d",
    "xor     edx, edx  {0x0}",
    "cmp     byte [rbp+0x14], al",
    "jae     0x14003cc99",
    "{Case 0x8}",
    "cmp     dword [rsi+0x8], r10d",
    "je      0x14003cdf2",
    "{Case 0x3b}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r13+0x20]",
    "shl     rcx, 0x5",
    "mov     rcx, qword [rcx+rax+0x8]",
    "call    sub_140028efc",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "je      0x140038af5",
    "{Case 0x9e}",
    "cmp     dword [rsi+0x4], r10d",
    "jne     0x14003ce61",
    "{Case 0xa0}",
    "mov     rbx, qword [rsi+0x10]",
    "mov     rcx, r13",
    "mov     rdx, rbx",
    "call    sub_140070734",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     rbx, r10",
    "je      0x14003ca7b",
    "{Case 0xa1}",
    "xor     edx, edx  {0x0}",
    "lea     rcx, [rsp+0x1e0 {var_158}]",
    "lea     r8d, [rdx+0x38]",
    "call    memset",
    "movsxd  rdx, dword [rsi+0x8]",
    "lea     rcx, [rsp+0x1e0 {var_158}]",
    "imul    rdx, rdx, 0x38",
    "add     rdx, r14",
    "mov     qword [rsp+0x208 {var_130_1}], r13",
    "call    sub_140031744",
    "lea     rcx, [rsp+0x1e0 {var_158}]",
    "mov     dl, r15b  {0x1}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "call    sub_140031c84",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "cmp     rax, r10",
    "je      0x14003cf32",
    "{Case 0xa2}",
    "add     dword [r13+0xd8], r15d",
    "mov     r8, qword [rsi+0x10]",
    "mov     edx, dword [rsi+0x4]",
    "mov     rcx, r13",
    "call    sub_1400705bc",
    "dec     dword [r13+0xd8]",
    "jmp     0x14003a959",
    "{Case 0xa3}",
    "mov     rax, qword [rsi+0x10]",
    "mov     qword [rsp+0x78 {var_2c0}], r10  {0x0}",
    "mov     rbx, qword [rax+0x10]",
    "cmp     rbx, r10",
    "je      0x14003daaa",
    "{Case 0x9}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "movsxd  rdx, dword [rsi+0xc]",
    "imul    rdx, rdx, 0x38",
    "mov     r13, qword [rax+rcx*8]",
    "mov     edi, dword [rdx+r14]",
    "lea     r10, [rdx+r14+0x38]",
    "mov     rbx, qword [r13+0x38]",
    "movsxd  r9, dword [r10]",
    "mov     rdx, qword [r11+0x70]",
    "mov     r12, qword [rbx]",
    "xor     eax, eax  {0x0}",
    "cmp     r9d, eax",
    "mov     rbp, qword [r12]",
    "mov     rcx, rax  {0x0}",
    "jle     0x14003d072",
    "{Case 0xa4}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "movsxd  rbx, dword [rsi+0xc]",
    "imul    rbx, rbx, 0x38",
    "mov     rbp, qword [rax+rcx*8]",
    "add     rbx, r14",
    "cmp     byte [rbp+0x2], r10b",
    "jne     0x14003908a",
    "{Case 0x3c}",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "mov     rbp, qword [rax+rcx*8]",
    "cmp     byte [rbp+0x2], r10b",
    "jne     0x14003806b",
    "{Case 0xb}",
    "mov     eax, dword [rsi+0x8]",
    "sub     eax, r15d",
    "cdqe    ",
    "lea     rcx, [rax+rax*2]",
    "lea     rsi, [r12+rcx*8]",
    "jmp     0x14003c68d",
    "{Case 0xa5}",
    "mov     ebp, dword [r13+0x30]",
    "bts     qword [r13+0x30], 0x1a",
    "mov     rax, qword [rsi+0x10]",
    "movsxd  rbx, dword [rsi+0x4]",
    "mov     r12, qword [rax+0x10]",
    "mov     eax, 0x2",
    "and     ebp, 0x4000000",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "test    byte [rbx+0x8], al",
    "je      0x14003d2c5",
    "{Case 0xa}",
    "cmp     byte [r13+0x61], r10b",
    "jne     0x14003969b",
    "{Case 0xa6}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     rcx, qword [r13+0x20]",
    "movsxd  rdx, dword [rsi+0x4]",
    "shl     rdx, 0x5",
    "mov     rdx, qword [rdx+rcx+0x8]",
    "mov     rcx, qword [rdx+0x8]",
    "mov     edx, dword [rcx+0x3c]",
    "mov     qword [rax], rdx",
    "jmp     0x140037ea8",
    "{Case 0xa7}",
    "mov     rdx, rsi",
    "mov     rcx, r11",
    "call    sub_140037bb4",
    "mov     rcx, qword [r13+0x20]",
    "movsxd  rdx, dword [rsi+0x4]",
    "shl     rdx, 0x5",
    "xor     r10d, r10d  {0x0}",
    "mov     r11, rax",
    "mov     rax, qword [rdx+rcx+0x8]",
    "mov     edx, dword [rsi+0xc]",
    "mov     ecx, r10d  {0x0}",
    "cmp     edx, r10d",
    "je      0x14003d49d",
    "{Case 0x3e-0x3f}",
    "movzx   ebx, word [rsi+0x2]",
    "mov     rcx, r13",
    "lea     eax, [rbx-0x1]",
    "movsxd  rdx, eax",
    "lea     rdx, [rdx*8+0x38]",
    "call    sub_140016c18",
    "xor     r10d, r10d  {0x0}",
    "mov     r11, rax",
    "cmp     rax, r10",
    "je      0x14003969b",
    "{Case 0x40-0x41}",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "{Case 0x3d, 0xa8}",
    "test    byte [r13+0x68], r15b",
    "je      0x14003d744",
    "{Case 0x51}",
    "cmp     qword [r11+0x50], r10",
    "jle     0x14003dae5",
    "{Case 0x1}",
    "mov     ebx, dword [rsi+0x4]",
    "movzx   eax, byte [r13+0x5f]",
    "mov     ecx, dword [rsi+0x8]",
    "cmp     ebx, eax",
    "je      0x14003dcb6",
    "mov     al, byte [rsp+0x350 {arg_18}]",
    "xor     ecx, ecx  {0x0}",
    "mov     edi, ebx  {0x1}",
    "cmp     al, cl",
    "jbe     0x140038a2a",
    "mov     rcx, rbp",
    "call    sub_140016efc",
    "mov     ecx, edi",
    "call    sub_14008335c",
    "mov     rcx, qword [rsp+0x340 {arg_8}]",
    "lea     rdx, [rel data_1400f38e8]",
    "mov     r8, rax",
    "call    sub_140032200",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     ebx, 0x1",
    "mov     eax, dword [rsi+0x8]",
    "sub     eax, r15d",
    "cdqe    ",
    "lea     rcx, [rax+rax*2]",
    "lea     rsi, [r12+rcx*8]",
    "jmp     0x1400382ff",
    "jmp     0x14003806b",
    "lea     rcx, [rax+rax*2]",
    "mov     eax, 0x80",
    "mov     word [rdx+0x8], ax  {0x80}",
    "lea     rsi, [r12+rcx*8]",
    "mov     ecx, dword [rsi+0x4]",
    "mov     dword [r11+0x38], ecx",
    "mov     al, byte [rsi+0x8]",
    "mov     dword [r11+0x34], ebx",
    "mov     byte [r11+0xc2], al",
    "cmp     ecx, r10d",
    "je      0x14003d88e",
    "mov     rcx, qword [r11+0x100]",
    "cmp     rcx, r10",
    "je      0x14003d7cf",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "jmp     0x140037e7c",
    "mov     rax, qword [rsi+0x10]",
    "mov     rcx, qword [rax]",
    "mov     qword [r11], rcx",
    "jmp     0x140037ea8",
    "mov     eax, dword [r13+0x7c]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "cmp     dword [rsi+0x4], eax",
    "jg      0x14003d1e9",
    "xor     eax, eax  {0x0}",
    "mov     r9b, r15b  {0x1}",
    "or      r8d, 0xffffffff  {0xffffffff}",
    "mov     rcx, rbx",
    "mov     qword [rsp+0x20 {var_318}], rax  {0x0}",
    "call    sub_140031820",
    "xor     r15d, r15d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r15d",
    "jne     0x14003d1e1",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "cmp     ebp, r10d",
    "mov     dword [rbx+0xc], r10d  {0x0}",
    "mov     word [rbx+0x8], r12w",
    "jg      0x14003802a",
    "mov     ebx, 0x4",
    "mov     edx, r10d  {0x0}",
    "mov     ecx, dword [rbp+0xc]",
    "mov     eax, 0x4000",
    "test    word [rbp+0x8], ax",
    "je      0x140038119",
    "xor     r10d, r10d  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140030eb4",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x14003969b",
    "xor     r10d, r10d  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140030eb4",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x14003969b",
    "mov     qword [rcx], rdx",
    "mov     word [rcx+0x8], bx  {0x4}",
    "jmp     0x140037d30",
    "call    sub_1400315a0",
    "jmp     0x140037ea8",
    "test    r14b, 0x12",
    "jne     0x140038349",
    "mov     rcx, rbp",
    "call    sub_140031524",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "movsxd  rbp, dword [rsi+0x8]",
    "imul    rbp, rbp, 0x38",
    "add     rbp, r14",
    "mov     ax, word [rbp+0x8]",
    "and     ax, 0x2c",
    "jne     0x1400384cc",
    "test    byte [r13+0x8], 0x12",
    "je      0x1400384a1",
    "movsxd  rax, dword [rsi+0x4]",
    "mov     ecx, 0x2400",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "test    word [rax+0x8], cx",
    "je      0x14003877f",
    "call    sub_140031230",
    "mov     rcx, rbp",
    "mov     rbx, rax",
    "call    sub_140031230",
    "mov     dl, byte [rsi]",
    "mov     r11, rax",
    "cmp     dl, 0x63",
    "jne     0x1400387f0",
    "mov     rcx, r12",
    "call    sub_140031524",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "jmp     0x1400380d6",
    "mov     ecx, 0x3e40",
    "and     ax, cx",
    "or      ax, bp",
    "mov     word [rbx+0x8], ax",
    "mov     rbx, rbp  {0x4}",
    "jmp     0x14003806b",
    "lea     ecx, [rbp+0x4]  {0x8}",
    "test    cl, al",
    "jne     0x140038916",
    "mov     rcx, rbx",
    "call    sub_140031294",
    "mov     eax, 0x3e40",
    "and     word [rbx+0x8], ax",
    "mov     eax, 0x8",
    "or      word [rbx+0x8], ax",
    "movsd   qword [rbx], xmm0",
    "jmp     0x140038304",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140030f10",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "jmp     0x140038adb",
    "mov     al, byte [rsi+0x2]",
    "and     al, 0x47",
    "cmp     al, 0x43",
    "jl      0x140038cc1",
    "mov     eax, 0x80",
    "test    byte [rsi+0x2], al",
    "je      0x140038b6c",
    "jne     0x14003d79a",
    "mov     rbp, qword [rsi-0x8]",
    "add     rbp, rbx",
    "mov     rbp, r10  {0x0}",
    "jmp     0x140038db6",
    "jne     0x140038f19",
    "mov     eax, dword [rsi+0x4]",
    "lea     rcx, [rbx+rbx*2]",
    "add     rcx, r11",
    "movzx   eax, byte [rcx+rax+0xd7250]",
    "lea     rdx, [rbx+rbx*2]",
    "add     rdx, r11",
    "movzx   eax, byte [rdx+rax+0xd7240]",
    "jmp     0x140038f79",
    "mov     qword [rax], rcx",
    "mov     word [rax+0x8], bx  {0x4}",
    "jmp     0x140037ea8",
    "mov     rdx, rcx",
    "jmp     0x140038777",
    "mov     rcx, rbx",
    "xor     edx, edx  {0x0}",
    "call    sub_1400312cc",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "mov     eax, 0x2400",
    "mov     rcx, r10  {0x0}",
    "sete    cl",
    "test    word [rbx+0x8], ax",
    "je      0x14003905f",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x140038057",
    "mov     eax, 0x4",
    "mov     rcx, rbp",
    "mov     word [rbx+0x8], ax  {0x4}",
    "call    sub_140031230",
    "not     rax",
    "jmp     0x1400388c3",
    "mov     rcx, qword [r11+0x88]",
    "mov     eax, dword [rsi+0x4]",
    "cmp     dword [rcx+0x4], eax",
    "je      0x14003d79a",
    "mov     rcx, rsi",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "sub     rcx, qword [r11+0x88]",
    "imul    rcx",
    "mov     r8, rdx",
    "sar     r8, 0x2",
    "mov     rax, r8",
    "shr     rax, 0x3f",
    "add     r8, rax",
    "mov     rax, qword [r10+0x30]",
    "mov     r9d, r8d",
    "and     r8d, 0x7",
    "shr     r9, 0x3",
    "mov     ecx, r8d",
    "mov     dl, byte [r9+rax]",
    "mov     eax, r15d  {0x1}",
    "shl     eax, cl",
    "test    al, dl",
    "jne     0x14003d79a",
    "jmp     0x140038669",
    "jmp     0x140038669",
    "jmp     0x14003806b",
    "movsxd  rcx, dword [rsi+0xc]",
    "imul    rcx, rcx, 0x38",
    "add     rcx, r14",
    "call    sub_140031524",
    "jmp     0x14003d79a",
    "mov     rax, qword [rbx+0x38]",
    "cmp     byte [rax], r10b",
    "je      0x14003928b",
    "mov     rcx, qword [rbx+0x20]",
    "cmp     rcx, r10",
    "je      0x14003925d",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "add     rbp, r15",
    "xor     r10d, r10d  {0x0}",
    "cmp     byte [rbp], r10b",
    "je      0x14003d666",
    "movzx   eax, word [rbx+0x8]",
    "mov     ecx, 0x4",
    "test    cl, al",
    "je      0x14003984f",
    "movsxd  r9, r12d",
    "lea     rbx, [r13+0x24]",
    "mov     qword [rsp+0x70 {i_32}], r9",
    "lea     rbx, [r11+0x8]",
    "xor     r13d, r13d  {0x0}",
    "lea     esi, [r10+0x1f]  {0x20}",
    "mov     edi, 0xfffb",
    "lea     r12d, [r10+0x3]  {0x4}",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rcx, qword [rsp+0x340 {arg_8}]",
    "mov     rdx, rsi",
    "call    sub_140037bb4",
    "mov     rcx, qword [rsp+0xb8 {var_280}]",
    "mov     qword [rax], rcx",
    "jmp     0x1400387bf",
    "mov     r12, qword [rsp+0x40 {var_2f8}]",
    "mov     r13d, r10d  {0x0}",
    "mov     ebx, 0x1",
    "mov     r14, qword [r12+0x270]",
    "cmp     r14, r10",
    "je      0x14003d961",
    "cmp     dword [r13+0xd0], r10d",
    "jg      0x14003d8e9",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r13+0x20]",
    "shl     rcx, 0x5",
    "mov     rbp, qword [rcx+rax+0x8]",
    "cmp     rbp, r10",
    "je      0x14003a1e5",
    "mov     eax, dword [r13+0x30]",
    "bt      rax, 0x14",
    "jb      0x14003d977",
    "mov     eax, 0x2",
    "cmp     dword [rsi+0x8], eax",
    "jne     0x14003a318",
    "mov     rcx, qword [rbx+0x18]",
    "mov     eax, dword [rsi+0xc]",
    "mov     dword [rcx], eax",
    "or      dword [r13+0x2c], r15d",
    "jmp     0x14003a318",
    "mov     ebx, 0x4",
    "mov     eax, dword [rsi+0x8]",
    "cmp     dword [rbx+0x4c], eax",
    "je      0x14003a4e7",
    "mov     edi, 0x204",
    "jmp     0x140038941",
    "movsxd  r15, dword [rsi+0xc]",
    "mov     r8, qword [rsp+0x40 {var_2f8}]",
    "movsxd  r13, dword [rsi+0x8]",
    "mov     rax, r15",
    "mov     r12d, r10d  {0x0}",
    "mov     r14, r10  {0x0}",
    "shl     rax, 0x5",
    "add     rax, qword [r8+0x20]",
    "mov     rcx, qword [rax+0x8]",
    "mov     qword [rsp+0x70 {i_32}], rcx",
    "cmp     bpl, 0x62",
    "jne     0x14003a3e7",
    "or      dword [rax+0x8], r15d",
    "mov     rdi, qword [r11+0x38]",
    "mov     byte [rax+0x2], r15b  {0x1}",
    "mov     r13, qword [rbx+0x40]",
    "mov     qword [rax+0x40], r13",
    "mov     cl, byte [rbx+0x4]",
    "mov     byte [rax+0x4], cl",
    "mov     ecx, dword [rbx+0x4c]",
    "mov     dword [rax+0x4c], ecx",
    "mov     eax, dword [rbx+0x8]",
    "mov     ebp, ecx",
    "xor     eax, dword [r11+0x8]",
    "and     eax, 0x4",
    "xor     eax, dword [r11+0x8]",
    "cmp     ecx, r15d",
    "mov     dword [r11+0x8], eax",
    "mov     r12, qword [rbx+0x10]",
    "jge     0x14003a58b",
    "mov     r8d, dword [rsi+0x8]",
    "or      r9d, 0xffffffff  {0xffffffff}",
    "mov     rcx, r11",
    "mov     byte [rsp+0x20 {var_318}], r10b  {0x0}",
    "call    sub_14003789c",
    "mov     rbx, rax",
    "xor     eax, eax  {0x0}",
    "cmp     rbx, rax",
    "je      0x14003969b",
    "mov     rcx, qword [rbx+0x10]",
    "mov     qword [rbx+0x18], r10  {0x0}",
    "mov     dword [rbx+0x28], r10d  {0x0}",
    "cmp     rcx, r10",
    "je      0x14003a90d",
    "mov     rcx, qword [rsi+0x10]",
    "mov     r8, rax",
    "mov     qword [rax+0x40], rcx",
    "mov     edx, dword [rsi+0xc]",
    "mov     rcx, r13",
    "call    sub_14003efa8",
    "jmp     0x140037d30",
    "mov     byte [rax+0x2], r15b  {0x1}",
    "mov     ecx, dword [rsi+0x8]",
    "mov     byte [rax+0x4], r15b  {0x1}",
    "mov     dword [rax+0x2c], ecx",
    "lea     rcx, [rel data_140140364]",
    "mov     qword [rax+0x38], rcx  {data_140140364}",
    "jmp     0x140038669",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     rax, qword [r12+0x38]",
    "mov     ebx, 0x1",
    "lea     rdx, [rsp+0xf0 {var_248}]",
    "test    byte [rax+0x3], cl",
    "mov     rax, qword [r12+0x40]",
    "mov     byte [rsp+0x106 {var_232_1}], r10b  {0x0}",
    "mov     qword [rsp+0xf0 {var_248}], rax",
    "movzx   eax, word [rsi+0x10]",
    "cmovne  r15d, ebx  {0x1}",
    "mov     word [rsp+0x100 {var_238_1}], ax",
    "mov     eax, ebp",
    "and     al, bl",
    "neg     al",
    "movsxd  rax, dword [rsi+0xc]",
    "sbb     cl, cl",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "and     cl, 0xfe",
    "add     cl, bl",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "mov     byte [rsp+0x102 {var_236_1}], cl",
    "mov     qword [rsp+0xf8 {var_240_1}], rax",
    "mov     rcx, qword [r12+0x38]",
    "lea     rax, [rsp+0x54 {var_2e4}]",
    "mov     qword [rsp+0x20 {var_318}], rax {var_2e4}",
    "call    sub_140029f9c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003aab5",
    "movsxd  rbx, dword [rsi+0xc]",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "movzx   r13d, word [rbx+0x8]",
    "mov     al, r13b",
    "and     al, 0x2e",
    "cmp     al, cl",
    "jne     0x14003aa5e",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "jmp     0x14003806b",
    "mov     eax, 0x4000",
    "test    word [rbx+0x8], ax",
    "je      0x14003ad69",
    "mov     rax, qword [rbp+0x40]",
    "lea     rdi, [rsp+0x160 {var_1d8}]",
    "mov     r12, r10  {0x0}",
    "mov     qword [rsp+0x160 {var_1d8}], rax",
    "movzx   eax, word [rsi+0x10]",
    "mov     qword [rsp+0x168 {var_1d0_1}], rbx",
    "mov     word [rsp+0x170 {var_1c8_1}], ax",
    "jmp     0x14003ada5",
    "lea     rcx, [rsp+0x218 {var_120}]",
    "mov     r8d, 0x38",
    "call    memcpy",
    "movzx   r11d, word [rsp+0x220 {var_118}]",
    "test    bl, r11b",
    "jne     0x14003aeee",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "cmp     dword [rsi+0x8], r10d",
    "jne     0x14003d79a",
    "xor     r10d, r10d  {0x0}",
    "mov     rcx, qword [r12+0x38]",
    "lea     rdx, [rsp+0x50 {var_2e8}]",
    "call    sub_140029f40",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "mov     rbp, r10  {0x0}",
    "mov     r12, r10  {0x0}",
    "cmp     qword [r13+0x120], r10",
    "je      0x14003b1f7",
    "mov     r13, r10  {0x0}",
    "mov     r12, r10  {0x0}",
    "cmp     qword [r13+0x120], r10",
    "je      0x14003b33a",
    "cmp     dword [rsp+0x98 {var_2a0}], r10d",
    "jmp     0x14003918d",
    "mov     rax, qword [rax+0x38]",
    "mov     edi, dword [rax]",
    "lea     rbp, [rax+0x10]",
    "mov     rdx, qword [rax+0x18]",
    "mov     rax, qword [rdx+0x10]",
    "movsxd  rcx, dword [rax+0x4]",
    "lea     rax, [rcx+rcx*4]",
    "shl     rax, 0x4",
    "add     rax, qword [rdx+0x18]",
    "mov     edi, dword [rax+0x14]",
    "mov     rbp, qword [rax+0x28]",
    "jmp     0x14003b480",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r9, rbx",
    "xor     edx, edx  {0x0}",
    "mov     rcx, rdi",
    "call    sub_140031b74",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038949",
    "cmp     byte [rbx+0x3], r10b",
    "je      0x14003b5ce",
    "mov     word [rax+0x8], r15w  {0x1}",
    "jmp     0x140038057",
    "mov     rbx, qword [rbx+0x38]",
    "mov     rcx, qword [rbx+0x18]",
    "call    sub_140016950",
    "xor     r10d, r10d  {0x0}",
    "mov     byte [rbx], r15b  {0x1}",
    "mov     qword [rbx+0x18], r10  {0x0}",
    "jmp     0x140038af5",
    "lea     rdx, [rsp+0xa4 {var_294}]",
    "call    sub_140029f40",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     eax, dword [rsp+0xa4 {var_294}]",
    "mov     byte [rbx+0x3], r10b  {0x0}",
    "mov     dword [rbx+0x28], r10d  {0x0}",
    "mov     byte [rbx+0x2], al",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "or      dword [rbx+0x2c], 0xffffffff  {0xffffffff}",
    "cmp     byte [rcx], r10b",
    "je      0x140038066",
    "mov     eax, 0x10",
    "cmp     edi, eax",
    "jne     0x14003b79d",
    "mov     rcx, rbx",
    "mov     ebp, r10d  {0x0}",
    "mov     dword [rsp+0x8c {var_2ac}], r10d  {0x0}",
    "call    sub_140029e50",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "jmp     0x14003b7a4",
    "mov     rcx, rbx",
    "call    sub_140029cbc",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003b8d3",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "cmp     byte [rbx+0x58], r10b",
    "jne     0x14003b87b",
    "mov     rdx, qword [rdi+0x38]",
    "mov     rax, qword [rdx+0x8]",
    "mov     qword [rdi+0x38], rax",
    "mov     qword [rdx+0x8], r10  {0x0}",
    "cmp     qword [rdi+0x40], r10",
    "jne     0x14003b982",
    "mov     rcx, qword [rdi+0x18]",
    "lea     rdx, [rsp+0xa0 {var_298}]",
    "mov     dword [rsp+0xa0 {var_298}], r10d  {0x0}",
    "call    sub_14003f7cc",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003b9b5",
    "cmp     edi, 0x65",
    "jne     0x140038941",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     byte [rbp+0x2], r10b  {0x0}",
    "movzx   eax, word [rsi+0x2]",
    "add     dword [r11+rax*4+0xd4], r15d",
    "jmp     0x14003d26b",
    "mov     eax, 0x4000",
    "test    word [rbx+0x8], ax",
    "je      0x14003ba30",
    "add     dword [r11+0x3c], r15d",
    "cmp     dword [rsp+0xe8 {var_250}], r10d",
    "jne     0x14003bb5f",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140034960",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "jmp     0x14003bb9c",
    "add     eax, r15d",
    "neg     eax",
    "jmp     0x14003bcbf",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     edi, 0x6",
    "lea     eax, [rdi-0x4]  {0x2}",
    "mov     byte [r12+0xc2], al  {0x2}",
    "jmp     0x14003d8e1",
    "movsxd  r12, dword [rsi+0xc]",
    "mov     edx, dword [rsi+0x4]",
    "xor     eax, eax  {0x0}",
    "mov     dword [rsp+0xac {var_28c}], eax  {0x0}",
    "mov     rax, qword [r13+0x20]",
    "mov     rbp, r12",
    "shl     rbp, 0x5",
    "lea     r8, [rsp+0xac {var_28c}]",
    "mov     rcx, qword [rax+rbp+0x8]",
    "call    sub_14002edb8",
    "movsxd  r8, dword [rsp+0xac {var_28c}]",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     eax, 0x4",
    "mov     word [rbx+0x8], ax  {0x4}",
    "mov     qword [rbx], r8",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "movsxd  rax, dword [rsp+0xb0 {var_288}]",
    "add     dword [r11+0x3c], eax",
    "cmp     dword [rsi+0xc], r10d",
    "jle     0x14003be23",
    "mov     rcx, qword [rcx+0x38]",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, dword [rcx+0x50]",
    "mov     rcx, qword [rcx+0x8]",
    "call    sub_14002ed34",
    "jmp     0x14003a959",
    "mov     rdx, qword [rcx+0x38]",
    "mov     rcx, r13",
    "call    sub_14003f1b4",
    "jmp     0x140037ea8",
    "movsxd  rax, dword [rsp+0x68 {i_46}]",
    "mov     qword [rbx], rax",
    "jmp     0x140038af5",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "mov     r8, qword [r13+0x20]",
    "lea     rax, [r11+0xa8]",
    "mov     qword [rsp+0x108 {var_230}], r13",
    "mov     qword [rsp+0x110 {var_228_1}], rax",
    "mov     dword [rsp+0x118 {var_220_1}], ebx",
    "mov     dword [rsp+0x120 {var_218_1}], r10d  {0x0}",
    "mov     qword [rsp+0x20 {var_318_2}], rcx",
    "mov     rax, rbx",
    "lea     r9, [rel data_1400f43b8]  {\"sqlite_master\"}",
    "shl     rax, 0x5",
    "lea     rdx, [rel data_1400f43c8]  {\"SELECT*FROM\"%w\".%s WHERE %s ORDE\u2026\"}",
    "mov     rcx, r13",
    "mov     r8, qword [rax+r8]",
    "call    _printf_p_l",
    "xor     ebp, ebp  {0x0}",
    "mov     rbx, rax",
    "cmp     rax, rbp",
    "je      0x14003da0f",
    "mov     rcx, qword [r13+0x20]",
    "mov     rax, rbx",
    "shl     rax, 0x5",
    "mov     rcx, qword [rax+rcx+0x18]",
    "call    sub_140054800",
    "mov     r8, qword [rsp+0x340 {arg_8}]",
    "and     dword [r13+0x2c], 0xffffffef",
    "add     r8, 0xa8",
    "mov     r9d, r15d  {0x1}",
    "mov     edx, ebx",
    "mov     rcx, r13",
    "call    sub_140061ea0",
    "or      dword [r13+0x2c], r15d",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "and     dword [r11+0xc8], 0xfffffffc",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     edi, eax",
    "xor     r10d, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "jmp     0x14003c02c",
    "or      dword [r13+0x2c], r15d",
    "jmp     0x140038669",
    "cmp     qword [r13+0x298], r10",
    "jne     0x14003c081",
    "mov     rax, qword [rax+0x18]",
    "mov     rcx, qword [rax+0x10]",
    "cmp     rcx, rdx",
    "jne     0x14003c0db",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "jmp     0x140038057",
    "mov     rcx, qword [rax+0x30]",
    "cmp     qword [rax+0x28], rcx",
    "jne     0x14003c17f",
    "movzx   edx, byte [rsp+0x348 {i_33}]",
    "mov     eax, 0x2",
    "mov     ecx, edx",
    "test    byte [rbx+0x8], al",
    "je      0x140038462",
    "cmp     r12, r10",
    "je      0x14003969b",
    "mov     rdx, qword [rbp+r14]",
    "mov     rcx, qword [rbx+0x10]",
    "call    sub_14001ebb0",
    "jmp     0x140038304",
    "mov     rcx, rbx",
    "call    sub_1400315cc",
    "xor     r11d, r11d  {0x0}",
    "cmp     eax, r11d",
    "jne     0x14003969b",
    "mov     rcx, rbp",
    "call    sub_140031524",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003d263",
    "mov     rbx, qword [rbp+0x10]",
    "mov     eax, 0x2",
    "test    byte [rbx+0x32], al",
    "jne     0x14003c2e8",
    "cmp     r12d, r10d",
    "je      0x14003c3fa",
    "mov     rcx, rbx",
    "call    sub_1400315cc",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x14003969b",
    "mov     eax, dword [r13+0xa4]",
    "cmp     dword [r11+0x110], eax",
    "jge     0x14003da40",
    "mov     rax, qword [r11+0x100]",
    "mov     rcx, qword [r14+0x20]",
    "cmp     rax, r10",
    "je      0x14003c44d",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "jmp     0x140037e7c",
    "lea     rcx, [rel __dos_header]",
    "cmp     dword [rsi+0x4], r10d",
    "je      0x14003c719",
    "add     qword [r13+0x290], rax",
    "jmp     0x14003806b",
    "cmp     qword [r11+0x50], r10",
    "jmp     0x14003c72f",
    "cmp     qword [r13+0x288], r10",
    "movsxd  rbp, dword [rsi+0x4]",
    "imul    rbp, rbp, 0x38",
    "add     rbp, r14",
    "mov     rcx, qword [rax+0x8]",
    "jmp     0x14003c760",
    "movsxd  rax, dword [rsi+0xc]",
    "sub     rdx, rax",
    "mov     qword [rcx+r14], rdx",
    "jmp     0x14003d79a",
    "or      qword [r11], 0xffffffffffffffff",
    "jmp     0x140038af5",
    "cmp     qword [rbp+r14], r10",
    "mov     rdx, r10  {0x0}",
    "lea     rcx, [rsp+0x70 {i_32}]",
    "cmovg   rdx, qword [rbp+r14]",
    "call    sub_140019ffc",
    "cmp     eax, r10d",
    "jne     0x14003c86b",
    "jle     0x14003d79a",
    "cmp     qword [rcx+r14], r10",
    "jmp     0x1400391e2",
    "dec     rax",
    "mov     qword [rcx+r14], rax",
    "mov     qword [rax+0x10], r10  {0x0}",
    "lea     rcx, [rax+rbx*8+0x30]",
    "mov     qword [rax], rcx",
    "mov     word [rcx+0x8], r15w  {0x1}",
    "mov     qword [rcx+0x28], r13",
    "mov     dword [rcx+0x20], r10d  {0x0}",
    "mov     rcx, qword [rsi+0x10]",
    "mov     byte [r11+0x28], r10b  {0x0}",
    "mov     qword [rax+0x8], rcx",
    "mov     dword [r11+0x24], r10d  {0x0}",
    "mov     byte [r11+0x29], bl",
    "mov     rcx, rsi",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "sub     rcx, r12",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     qword [r11+0x18], r12",
    "imul    rcx",
    "sar     rdx, 0x2",
    "mov     rax, rdx",
    "shr     rax, 0x3f",
    "add     rdx, rax",
    "mov     dword [r11+0x20], edx",
    "mov     byte [rsi+0x1], 0xf0",
    "mov     qword [rsi+0x10], r11",
    "mov     byte [rsi], 0x9b",
    "jmp     0x14003c95c",
    "xor     r11d, r11d  {0x0}",
    "movzx   r8d, byte [rbx+0x29]",
    "mov     qword [rbx+0x10], rdx",
    "sub     r8d, r15d",
    "movsxd  r9, r8d",
    "js      0x14003c9b5",
    "mov     rdx, qword [rsi+0x10]",
    "mov     rcx, rbp",
    "call    sub_1400310a0",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "movsxd  rbx, dword [rsi+0xc]",
    "mov     rdi, qword [rsi+0x10]",
    "xor     edx, edx  {0x0}",
    "lea     r8d, [rdx+0x38]",
    "lea     rcx, [rsp+0x250 {var_e8}]",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "call    memset",
    "mov     rcx, rbx",
    "call    sub_140031524",
    "lea     rcx, [rsp+0x250 {var_e8}]",
    "mov     qword [rsp+0x250 {var_e8}], rbx",
    "mov     qword [rsp+0x260 {var_d8_1}], rbp",
    "mov     qword [rsp+0x258 {var_e0_1}], rdi",
    "call    qword [rdi+0x28]",
    "movsxd  rbp, dword [rsi+0xc]",
    "mov     edi, dword [rsp+0x274 {var_c4}]",
    "mov     ebx, 0x4",
    "mov     dword [rsp+0x30 {var_308}], edi",
    "imul    rbp, rbp, 0x38",
    "add     rbp, r14",
    "jmp     0x14003cb16",
    "movsxd  rbx, dword [rsi+0xc]",
    "mov     r12d, 0x4",
    "mov     rbp, r10  {0x0}",
    "mov     ecx, 0x2400",
    "lea     r13d, [r12-0x1]  {0x3}",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "lea     eax, [r10+0x5]",
    "cmp     edi, eax",
    "jne     0x140038941",
    "mov     ebx, r12d",
    "mov     rax, qword [rbp+0x50]",
    "cmp     qword [rax], rdx",
    "je      0x14003cc9c",
    "mov     r9, r10  {0x0}",
    "movsxd  r9, dword [rsi+0x8]",
    "imul    r9, r9, 0x38",
    "add     r9, r14",
    "jmp     0x14003cdf5",
    "cmp     eax, 0x65",
    "jne     0x140038941",
    "mov     eax, dword [rsi+0x8]",
    "add     eax, r15d",
    "xor     eax, dword [r11+0xc8]",
    "and     eax, 0x3",
    "xor     dword [r11+0xc8], eax",
    "jmp     0x14003806b",
    "mov     edx, dword [rsi+0x8]",
    "mov     rcx, r13",
    "call    sub_140035b60",
    "jmp     0x140037d30",
    "cmp     edi, r10d",
    "jne     0x140038949",
    "mov     rdx, qword [rbx+0x10]",
    "mov     rcx, r12",
    "call    sub_140035b88",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003ca7b",
    "mov     eax, 0x2400",
    "test    word [rsp+0x1e8 {var_150}], ax",
    "jne     0x14003cf4b",
    "mov     edx, dword [rsi+0x4]",
    "lea     r9, [r12+0xa8]",
    "mov     r8, rax",
    "mov     rcx, r13",
    "call    sub_140070298",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     edi, 0x6",
    "jmp     0x140038941",
    "mov     rbp, qword [rbx]",
    "cmp     rbp, r10",
    "je      0x14003daaa",
    "mov     r8, qword [rsi+0x10]",
    "mov     qword [rsp+0x20 {var_318}], rdx",
    "mov     rcx, rbx",
    "mov     edx, edi",
    "call    qword [rbp+0x40]",
    "mov     rdx, r12",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rcx, r12",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "call    sub_140035b88",
    "xor     r10d, r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x140038949",
    "mov     r8d, r15d  {0x1}",
    "mov     rax, qword [rbp+0x38]",
    "xor     edx, edx  {0x0}",
    "lea     rcx, [rsp+0x2b8 {var_80}]",
    "mov     r12, qword [rax]",
    "lea     r8d, [rdx+0x38]",
    "mov     rdi, qword [r12]",
    "call    memset",
    "mov     qword [rsp+0x2b8 {var_80}], rbx",
    "test    byte [rsi+0x2], r15b",
    "je      0x14003d13c",
    "mov     rcx, qword [rbp+0x38]",
    "mov     rbx, qword [rcx]",
    "mov     r12, qword [rbx]",
    "call    qword [r12+0x48]",
    "mov     rcx, qword [rsp+0x340 {arg_8}]",
    "mov     rdx, rbx",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "call    sub_140035b88",
    "xor     r10d, r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "mov     ebx, 0x4",
    "jmp     0x14003c341",
    "mov     edi, r10d  {0x0}",
    "cmp     byte [rbx+0xa], r15b",
    "je      0x14003d2c5",
    "mov     rax, qword [rsi+0x10]",
    "mov     rbx, qword [rax+0x10]",
    "cmp     rbx, r10",
    "je      0x14003daaa",
    "cmp     ecx, r10d",
    "mov     rax, qword [rax+0x8]",
    "mov     rdx, qword [rax]",
    "jle     0x14003d4af",
    "mov     rcx, qword [rax+0x8]",
    "mov     ecx, dword [rcx+0x3c]",
    "cmp     ecx, edx",
    "cmovb   ecx, edx",
    "mov     qword [rax], r10  {0x0}",
    "mov     rcx, qword [rsi+0x10]",
    "mov     dword [r11+0x24], r10d  {0x0}",
    "mov     qword [rax+0x8], rcx",
    "mov     byte [r11+0x29], bl",
    "mov     rcx, rsi",
    "sub     rcx, r12",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "mov     qword [r11+0x18], r12",
    "imul    rcx",
    "sar     rdx, 0x2",
    "mov     rax, rdx",
    "shr     rax, 0x3f",
    "add     rdx, rax",
    "lea     eax, [r10+0x2]",
    "mov     dword [r11+0x20], edx",
    "add     byte [rsi], al",
    "mov     byte [rsi+0x1], 0xf0",
    "mov     qword [rsi+0x10], r11",
    "jmp     0x14003d543",
    "mov     eax, 0x3e40",
    "lea     r8, [rbp+0x30]",
    "mov     rcx, rbp",
    "and     word [rbx+0x8], ax",
    "or      word [rbx+0x8], r15w",
    "mov     rax, qword [rbp+0x8]",
    "movzx   edx, byte [rbp+0x29]",
    "call    qword [rax+0x18]",
    "mov     eax, dword [rbp+0x24]",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "je      0x14003d617",
    "movzx   edx, byte [rbp+0x29]",
    "mov     qword [rbp], rbx",
    "sub     edx, r15d",
    "movsxd  r8, edx",
    "js      0x14003d597",
    "mov     eax, dword [rel data_14013d1e0]",
    "cmp     dword [rsi+0x4], eax",
    "jl      0x14003d78f",
    "mov     eax, 0x10",
    "test    byte [r11+0xc8], al",
    "jne     0x14003d744",
    "mov     rax, qword [r11]",
    "cmp     dword [rax+0x280], r10d",
    "je      0x14003db0d",
    "mov     eax, 0x2",
    "mov     dword [r11+0x38], 0x313",
    "lea     rdx, [rel data_1400f40e0]  {\"FOREIGN KEY constraint failed\"}",
    "mov     byte [r11+0xc2], al  {0x2}",
    "lea     rax, [rel data_1400f4338]",
    "cmp     ecx, r10d",
    "lea     rdx, [rel data_1400f4368]  {\"cannot commit - no transaction i\u2026\"}",
    "cmovne  rdx, rax  {data_1400f4338, \"cannot rollback - no transaction\u2026\"}",
    "lea     rax, [rel data_1400f4308]",
    "cmp     ebx, r10d",
    "cmove   rdx, rax  {data_1400f4308, \"cannot start a transaction withi\u2026\"}",
    "jmp     0x14003dad5",
    "cmp     ecx, r10d",
    "je      0x14003dc1f",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "movzx   edx, al",
    "mov     rcx, rbp",
    "sub     edx, ebx",
    "call    sub_14004e2cc",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     rcx, r11",
    "call    sub_1400342d4",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     edi, eax",
    "mov     eax, 0x5",
    "cmp     edi, eax",
    "jne     0x14003d8b3",
    "mov     rcx, r11",
    "cmp     word [rsi+0x2], r10w",
    "je      0x14003d849",
    "mov     rax, qword [rcx+0x8]",
    "dec     dword [r11+0x110]",
    "mov     qword [r11+0x100], rax",
    "mov     eax, dword [r11+0x3c]",
    "add     dword [r13+0x78], eax",
    "mov     dword [r13+0x74], eax",
    "call    sub_1400339f8",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     ebx, 0x4",
    "cmp     dword [rsi+0x8], ebx",
    "jne     0x140037e5d",
    "lea     rdx, [rel data_1400f41a0]  {\"string or blob too big\"}",
    "mov     rcx, r11",
    "call    sub_140032200",
    "mov     edi, 0x12",
    "jmp     0x14003d8d9",
    "mov     byte [rsi], 0x48",
    "mov     ebx, 0x4",
    "lea     eax, [r15+0x2]",
    "movzx   ecx, bpl",
    "test    byte [rbx+0x8], al",
    "je      0x140037f5d",
    "add     rbx, 0x38",
    "mov     rcx, rbx",
    "call    sub_140031524",
    "xor     r10d, r10d  {0x0}",
    "sub     ebp, r15d",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "movsxd  rbx, dword [rsi+0x8]",
    "mov     eax, 0x2400",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "test    word [rbx+0x8], ax",
    "je      0x140038165",
    "mov     rax, qword [rbp+0x28]",
    "mov     edx, r10d  {0x0}",
    "cmp     ecx, dword [rax+0x7c]",
    "setg    dl",
    "jmp     0x14003812b",
    "add     ecx, dword [rbp]",
    "mov     rdx, rbp",
    "mov     rcx, rbx",
    "call    sub_1400317cc",
    "mov     eax, 0x1000",
    "test    word [rbx+0x8], ax",
    "je      0x1400381e6",
    "jmp     0x14003804a",
    "jmp     0x1400381e9",
    "add     rbx, 0x38",
    "add     rbp, 0x38",
    "jmp     0x140038215",
    "jmp     0x14003824a",
    "mov     eax, 0x4000",
    "test    ax, r14w",
    "je      0x14003835e",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, r13",
    "call    sub_140030f6c",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "movsxd  r12, dword [rsi+0xc]",
    "movzx   ecx, word [rbp+0x8]",
    "and     al, bl",
    "or      cx, word [r13+0x8]",
    "mov     ebx, 0x4",
    "imul    r12, r12, 0x38",
    "add     r12, r14",
    "test    bl, al",
    "je      0x140038685",
    "test    byte [rbp+0x8], 0x12",
    "je      0x1400384c9",
    "mov     ebx, r10d  {0x0}",
    "mov     rcx, r13",
    "call    sub_140037b08",
    "xor     r10d, r10d  {0x0}",
    "mov     bx, ax",
    "jmp     0x1400384a4",
    "mov     qword [rax], r10  {0x0}",
    "mov     word [rax+0x8], bx  {0x4}",
    "jmp     0x14003806b",
    "xor     edx, edx  {0x0}",
    "cmp     dl, 0x64",
    "jne     0x1400387fd",
    "and     rbx, rax",
    "jmp     0x1400387f8",
    "mov     rcx, rbx",
    "call    sub_14003130c",
    "lea     ecx, [rbp-0x2]  {0x2}",
    "test    cl, al",
    "je      0x140038925",
    "mov     r8b, dl",
    "mov     dl, byte [rsi+0x8]",
    "mov     rcx, rbx",
    "call    sub_14003143c",
    "xor     r10d, r10d  {0x0}",
    "cmp     al, 0x42",
    "jne     0x140038d2d",
    "mov     edx, 0x2",
    "test    dl, cl",
    "je      0x140038bfd",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     eax, 0x20",
    "test    byte [rsi+0x2], al",
    "je      0x140038ba9",
    "mov     al, bl",
    "and     al, r13b",
    "test    r15b, al",
    "je      0x140038b58",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "jmp     0x140038194",
    "movsxd  rax, dword [rsi+0xc]",
    "lea     r14, [r15+0x20]",
    "mov     qword [rsp+0x70 {i_32}], rax",
    "cmp     dword [rsi+0xc], r10d",
    "mov     ecx, dword [rsi+0x4]",
    "mov     edx, dword [rsi+0x8]",
    "mov     r15, qword [rsi+0x10]",
    "mov     dword [rsp+0x58 {var_2e0}], ecx",
    "mov     dword [rsp+0x6c {i_31}], edx",
    "mov     r13d, r10d  {0x0}",
    "mov     rbx, r10  {0x0}",
    "jle     0x14003d7af",
    "mov     eax, dword [rsi+0xc]",
    "jmp     0x140038f00",
    "mov     eax, dword [rsi+0x8]",
    "jmp     0x140038f00",
    "cdqe    ",
    "mov     qword [rcx], rax",
    "mov     eax, 0x3e40",
    "and     word [rcx+0x8], ax",
    "or      word [rcx+0x8], bx",
    "jmp     0x140037e8b",
    "mov     eax, 0x3e40",
    "and     word [rcx+0x8], ax",
    "or      word [rcx+0x8], r15w",
    "jmp     0x140037e8b",
    "movsxd  rcx, dword [rsi+0xc]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "imul    rcx, rcx, 0x38",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "add     rcx, r14",
    "mov     ebx, 0x4",
    "cmp     eax, ebp",
    "jne     0x140038fb7",
    "mov     rcx, rax",
    "jmp     0x1400382ab",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "mov     eax, 0x4",
    "mov     qword [rbx], rcx",
    "mov     word [rbx+0x8], ax  {0x4}",
    "mov     rbx, rax  {0x4}",
    "jmp     0x14003806b",
    "mov     rdx, rcx",
    "mov     rcx, rbx",
    "call    sub_1400315a0",
    "jmp     0x140038304",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     qword [rbx], rax",
    "jmp     0x140038304",
    "mov     rax, qword [r11+0x88]",
    "mov     ecx, dword [rax+0x4]",
    "mov     dword [rsi+0x4], ecx",
    "jmp     0x140037e8b",
    "mov     rdx, qword [r10+0x30]",
    "mov     eax, r15d  {0x1}",
    "shl     al, cl",
    "or      byte [r9+rdx], al",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "jmp     0x140039162",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140034960",
    "jmp     0x140039265",
    "mov     rcx, rbx",
    "call    sub_140034914",
    "mov     edx, dword [rcx+r13*4+0x4]",
    "cmp     edx, r10d",
    "jle     0x14003925d",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "jmp     0x14003805e",
    "add     rbx, 0x38",
    "jmp     0x1400397e5",
    "mov     rcx, 0x7fffffffffff",
    "cmp     qword [rbx], rcx",
    "jg      0x140039832",
    "test    cl, 0x24",
    "je      0x140039a5a",
    "mov     eax, 0x4000",
    "and     cx, ax",
    "neg     cx",
    "sbb     eax, eax",
    "and     eax, 0xa",
    "add     r15d, r10d",
    "jmp     0x140039a6c",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r10d, 0x1",
    "add     rbx, 0x38",
    "add     rbp, r10",
    "cmp     byte [rbp], r13b",
    "jne     0x1400398f6",
    "movzx   eax, word [rbx]",
    "test    r12b, al",
    "je      0x14003991c",
    "lea     rdx, [rel data_1400f4280]  {\"no such savepoint: %s\"}",
    "mov     r8, rbp",
    "mov     rcx, r11",
    "call    sub_140032200",
    "mov     edi, ebx  {0x1}",
    "jmp     0x14003d913",
    "mov     rcx, qword [r14]",
    "mov     rdx, rbp",
    "call    sub_1400192b0",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "je      0x140039e66",
    "lea     rdx, [rel data_1400f4248]  {\"cannot open savepoint - SQL stat\u2026\"}",
    "mov     rcx, rbp",
    "call    sub_140019074",
    "mov     r8d, dword [r13+0x280]",
    "xor     edx, edx  {0x0}",
    "add     r8d, dword [r13+0x27c]",
    "mov     rcx, r13",
    "movsxd  r12, eax",
    "call    sub_140070818",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "cmp     word [rsi+0x2], r10w",
    "je      0x14003a283",
    "lea     r8, [rsp+0x6c {i_31}]",
    "mov     rcx, rbp",
    "call    sub_140028524",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003d981",
    "mov     edi, 0x8",
    "jmp     0x140038941",
    "xor     r10d, r10d  {0x0}",
    "cmp     dword [rsi+0x4], r15d",
    "jne     0x14003a353",
    "mov     rcx, qword [rbx+0x18]",
    "mov     al, byte [rsi+0xc]",
    "mov     byte [rcx+0x70], al",
    "mov     cl, byte [rsi+0x2]",
    "mov     rax, qword [rbx+0x38]",
    "and     cl, 0x3",
    "mov     byte [rax+0x3], cl",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "mov     edi, r10d  {0x0}",
    "movzx   edi, word [rsi+0x2]",
    "mov     rax, qword [rax+0x18]",
    "mov     ecx, 0x8",
    "and     edi, ecx",
    "mov     cl, byte [rax+0x70]",
    "or      edi, ebx",
    "cmp     cl, byte [r11+0xc3]",
    "jae     0x14003a3ea",
    "mov     rbx, qword [r12+0x8]",
    "cmp     qword [rbx+0x60], r10",
    "jne     0x14003a5c9",
    "mov     ecx, 0x108ea",
    "call    sub_140084e38",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax  {0xb}",
    "mov     dword [rsp+0x30 {var_308}], eax  {0xb}",
    "jmp     0x14003a636",
    "or      dword [rbx+0x8], r15d",
    "movzx   ecx, word [rsi+0x2]",
    "mov     dword [rsp+0x28 {var_310}], 0x41e",
    "or      ecx, 0x5",
    "lea     r9, [rbx+0x10]",
    "mov     r8, r13",
    "mov     dword [rsp+0x20 {var_318}], ecx",
    "mov     rcx, qword [r13]",
    "xor     edx, edx  {0x0}",
    "call    sub_140027a84",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003a8dd",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "mov     edx, dword [rbx+0x4c]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_14002ed34",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "jmp     0x14003a8fd",
    "jmp     0x140038669",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "jmp     0x14003894e",
    "cmp     r15d, r10d",
    "je      0x14003abd0",
    "mov     rcx, rbx",
    "call    sub_140031230",
    "movzx   edx, word [rbx+0x8]",
    "mov     word [rbx+0x8], r13w",
    "mov     r14, rax",
    "test    dl, 0x24",
    "jne     0x14003aaf2",
    "xor     edx, edx  {0x0}",
    "mov     rcx, rbx",
    "call    sub_1400379cc",
    "mov     eax, r10d  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140030f10",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003ad6c",
    "mov     byte [rdi+0x12], r10b  {0x0}",
    "cmp     byte [rsi], 0x1b",
    "mov     ebx, r10d  {0x0}",
    "jne     0x14003addc",
    "mov     rbp, qword [rsp+0x218 {var_120}]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003af0f",
    "mov     eax, 0x8",
    "test    al, r11b",
    "jne     0x14003aecf",
    "mov     ecx, 0x159cf",
    "call    sub_140084e38",
    "test    byte [r12+0x8], bpl",
    "je      0x14003b193",
    "mov     rax, qword [rax+0x100]",
    "cmp     rax, r10",
    "je      0x14003b0b6",
    "cmp     dword [rsp+0x50 {var_2e8}], r10d",
    "je      0x14003b03f",
    "mov     eax, 0x20",
    "test    byte [rsi+0x2], al",
    "je      0x14003b215",
    "add     dword [r11+0x3c], r15d",
    "movsx   rcx, byte [rbx+0x1]",
    "mov     rax, qword [r13+0x20]",
    "mov     rbp, qword [rsi+0x10]",
    "shl     rcx, 0x5",
    "mov     r12, qword [rcx+rax]",
    "jmp     0x14003b1fd",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "test    r15b, r14b",
    "je      0x140039cf5",
    "mov     rax, qword [r13+0x20]",
    "movsx   rcx, byte [rbp+0x1]",
    "mov     r12, qword [rsi+0x10]",
    "shl     rcx, 0x5",
    "mov     r13, qword [rcx+rax]",
    "mov     eax, 0x2",
    "test    byte [rsi+0x2], al",
    "je      0x14003b340",
    "jne     0x14003d79a",
    "mov     rax, qword [rbx+0x18]",
    "and     word [rbx+0x8], 0x2d",
    "mov     qword [rbx+0x10], rax",
    "mov     eax, r10d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, edi",
    "mov     rcx, rbx",
    "call    sub_140030d38",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003b4a7",
    "cmp     dword [rbx+0x20], edi",
    "jge     0x14003b497",
    "cmp     dword [rsi+0xc], r10d",
    "jne     0x14003804a",
    "mov     eax, 0x2",
    "cmp     byte [rbx], al",
    "jne     0x14003b623",
    "mov     rax, qword [rbx+0x58]",
    "jmp     0x14003b683",
    "cmp     dword [rsi+0x8], r10d",
    "jle     0x140038af5",
    "mov     ebp, dword [rsp+0x8c {var_2ac}]",
    "mov     ebp, r15d  {0x1}",
    "mov     dword [rsp+0x8c {var_2ac}], r15d  {0x1}",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "jmp     0x14003b7a4",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "mov     eax, 0x10",
    "cmp     edi, eax",
    "jne     0x14003b8e4",
    "mov     rcx, rbx",
    "mov     ebp, r10d  {0x0}",
    "call    sub_140029e50",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "jmp     0x14003b8e4",
    "mov     rcx, rbx",
    "call    sub_14003f984",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003b8ee",
    "lea     rdx, [rbx+0x38]",
    "cmp     qword [rdx], r10",
    "je      0x14003b8ee",
    "mov     rax, qword [rdi+0x38]",
    "neg     rax",
    "sbb     edi, edi",
    "not     edi",
    "and     edi, 0x65",
    "mov     rbx, qword [rdx+0x8]",
    "mov     rcx, r13",
    "call    sub_1400169a8",
    "xor     r10d, r10d  {0x0}",
    "mov     rdx, rbx",
    "cmp     rbx, r10",
    "jne     0x14003b967",
    "mov     dword [rbp+0x28], r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x14003b9db",
    "cmp     dword [rsp+0xa0 {var_298}], r10d",
    "je      0x14003b9b5",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     byte [rbp+0x2], r15b  {0x1}",
    "jmp     0x14003c339",
    "mov     edi, r10d  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140030f10",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "jmp     0x14003ba33",
    "mov     dword [rbx+0x28], r10d  {0x0}",
    "mov     dword [rbx+0x2c], r10d  {0x0}",
    "jmp     0x140038af5",
    "mov     dl, 0x4",
    "mov     rcx, rbp",
    "call    sub_14002e468",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "cmp     byte [rbx+0x2], r10b",
    "jne     0x14003bc3b",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "cmp     eax, r10d",
    "jg      0x14003d79a",
    "xor     r10d, r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x140038949",
    "cmp     r8d, r10d",
    "je      0x14003804a",
    "jmp     0x140038671",
    "movsxd  rcx, dword [rsi+0xc]",
    "imul    rcx, rcx, 0x38",
    "add     qword [rcx+r14], rax",
    "mov     edi, 0x7",
    "lea     r9, [rsp+0x108 {var_230}]",
    "lea     r8, [rel sub_140061ca8]",
    "mov     rdx, rax",
    "mov     rcx, r13",
    "mov     byte [r13+0xb5], r15b  {0x1}",
    "mov     dword [rsp+0x11c {var_21c_1}], ebp  {0x0}",
    "mov     dword [rsp+0x124 {var_214_1}], ebp  {0x0}",
    "mov     qword [rsp+0x20 {var_318}], rbp  {0x0}",
    "call    sub_14005db80",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, ebp",
    "jne     0x14003c00f",
    "cmp     edi, r10d",
    "jne     0x14003da14",
    "mov     rdx, rax",
    "mov     rcx, r13",
    "call    sub_14004e45c",
    "add     dword [rax+0x3c], 0xffffffff",
    "jne     0x14003c08f",
    "cmp     rcx, r10",
    "je      0x14003c104",
    "mov     rcx, qword [rdx+0x28]",
    "mov     qword [rax+0x10], rcx",
    "jmp     0x14003c104",
    "mov     rdx, rbx",
    "mov     rcx, r13",
    "call    sub_14006bfac",
    "or      dword [r13+0x2c], r15d",
    "jmp     0x140038304",
    "mov     rdx, qword [rax+0x8]",
    "add     rcx, 0x8",
    "xor     r8d, r8d  {0x0}",
    "call    sub_14001a410",
    "mov     rdx, qword [rax+0x10]",
    "xor     eax, eax  {0x0}",
    "cmp     rdx, rax",
    "je      0x14003c17f",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "jmp     0x14003805e",
    "movzx   eax, byte [rbx+0xa]",
    "cmp     eax, edx",
    "je      0x140038462",
    "dec     ecx",
    "lea     rax, [rel sub_140016950]",
    "mov     r9b, r15b  {0x1}",
    "movsxd  rdx, ecx",
    "or      r8d, 0xffffffff  {0xffffffff}",
    "mov     rcx, rbx",
    "sub     qword [rbp+r14], rdx",
    "mov     rdx, r12",
    "mov     qword [rsp+0x20 {var_318}], rax  {sub_140016950}",
    "call    sub_140031820",
    "xor     r10d, r10d  {0x0}",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     rax, qword [rbx+0x10]",
    "cmp     rax, r10",
    "je      0x14003c38a",
    "test    byte [rbx+0x32], r15b",
    "jne     0x14003c2df",
    "mov     rdx, qword [rbp+r14]",
    "mov     rcx, qword [rbx+0x10]",
    "call    sub_14001ebb0",
    "jmp     0x14003874b",
    "mov     r8, qword [rbp+r14]",
    "mov     rcx, qword [rbx+0x10]",
    "mov     edx, r12d",
    "call    sub_14001ee18",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x14003ac2c",
    "lea     rdx, [rel data_1400f43f8]  {\"too many levels of trigger recur\u2026\"}",
    "mov     rcx, r11",
    "mov     edi, r15d  {0x1}",
    "call    sub_140032200",
    "jmp     0x14003d8d9",
    "mov     eax, 0x10",
    "test    byte [rbx+0x8], al",
    "jne     0x14003c5b3",
    "cmp     qword [rax+0x38], rcx",
    "je      0x14003c444",
    "add     qword [r11+0x50], rax",
    "jmp     0x140038072",
    "add     qword [r13+0x288], rax",
    "jmp     0x140038072",
    "jne     0x14003806b",
    "cmp     qword [r13+0x290], r10",
    "jmp     0x1400391e2",
    "mov     qword [rbp], rax",
    "mov     rbx, rcx  {0x4}",
    "jmp     0x14003806b",
    "cmp     rcx, r10",
    "jne     0x14003c759",
    "mov     rax, qword [rsp+0x70 {i_32}]",
    "mov     qword [r11], rax",
    "jmp     0x140038af5",
    "dec     rax",
    "mov     qword [rcx+r14], rax",
    "jmp     0x14003d79a",
    "je      0x14003d79a",
    "movsxd  rdx, dword [rsi+0xc]",
    "mov     rbx, qword [rsi+0x10]",
    "imul    rdx, rdx, 0x38",
    "add     rdx, r14",
    "cmp     qword [rbx+0x10], rdx",
    "je      0x14003c9b5",
    "call    qword [rax+0x18]",
    "call    qword [rax+0x30]",
    "jmp     0x14003c9d9",
    "xor     r11d, r11d  {0x0}",
    "lea     r10, [rbx+r9*8+0x30]",
    "lea     r13d, [r11+0x8]",
    "mov     dl, r15b  {0x1}",
    "mov     rcx, rbp",
    "call    sub_140031c84",
    "lea     rdx, [rel data_1400f38e8]",
    "mov     r8, rax",
    "movzx   ecx, byte [rsp+0x348 {i_33}]",
    "lea     eax, [r10+0x2]",
    "test    byte [rbp+0x8], al",
    "je      0x14003cb48",
    "xor     r10d, r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x14003da57",
    "mov     qword [rbx], rax",
    "mov     word [rbx+0x8], r12w  {0x4}",
    "mov     rdx, rax",
    "mov     rcx, rbx",
    "call    sub_1400315a0",
    "mov     ecx, 0x2400",
    "jmp     0x14003cc33",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     dword [rsp+0xc0 {var_278}], r15d  {0x1}",
    "mov     r9d, 0x5",
    "cmp     ebx, r9d",
    "jne     0x14003cce5",
    "mov     rcx, qword [rbp+0xd0]",
    "lea     rcx, [rel data_1400f386c]",
    "cmp     byte [rbp+0x13], dl",
    "jne     0x14003ccaf",
    "cmp     qword [rbp+0x60], rdx",
    "jle     0x14003cc9c",
    "mov     r8d, dword [rsi+0x4]",
    "lea     rcx, [r11+0xa8]",
    "mov     rdx, r13",
    "call    sub_14006f2cc",
    "jmp     0x14003a959",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "jmp     0x14003d79a",
    "jmp     0x14003804a",
    "lea     rcx, [rsp+0x1e0 {var_158}]",
    "call    sub_14003118c",
    "xor     r10d, r10d  {0x0}",
    "cmp     dword [rsp+0x200 {var_138}], r10d",
    "je      0x14003cf5b",
    "lea     rdx, [rsp+0x78 {var_2c0}]",
    "mov     rcx, rbx",
    "call    qword [rbp+0x30]",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rdx, rbx",
    "mov     rcx, r12",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "call    sub_140035b88",
    "xor     r10d, r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x140038949",
    "mov     rcx, rbx",
    "call    qword [rbp+0x50]",
    "xor     r10d, r10d  {0x0}",
    "mov     byte [r13+0x2], r10b  {0x0}",
    "cmp     eax, r10d",
    "je      0x14003a636",
    "movsxd  rax, r8d",
    "add     r8d, r15d",
    "imul    rax, rax, 0x38",
    "add     rax, r10",
    "mov     qword [rdx+rcx*8], rax",
    "add     rcx, r15",
    "cmp     rcx, r9",
    "jl      0x14003d059",
    "mov     eax, 0x3e40",
    "and     word [rbx+0x8], ax",
    "or      word [rbx+0x8], r15w",
    "mov     rcx, rbx",
    "call    sub_140031524",
    "mov     eax, 0x4001",
    "mov     word [rbx+0x8], ax  {0x4001}",
    "xor     eax, eax  {0x0}",
    "mov     dword [rbx], eax  {0x0}",
    "jmp     0x14003d14a",
    "mov     rcx, qword [rbp+0x38]",
    "call    qword [r12+0x50]",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x14003c334",
    "mov     eax, dword [r13+0x160]",
    "cmp     eax, r10d",
    "je      0x140038671",
    "mov     rax, qword [r12]",
    "mov     rdx, qword [rbx+0x10]",
    "mov     rcx, r12",
    "call    qword [rax+0x98]",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "xor     eax, eax  {0x0}",
    "cmp     ebp, eax",
    "jne     0x14003d2f4",
    "mov     dl, r15b  {0x1}",
    "mov     rcx, rbx",
    "call    sub_140018a98",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "jmp     0x14003d2c8",
    "mov     r10, qword [rbx]",
    "xor     ecx, ecx  {0x0}",
    "cmp     r10, rcx",
    "je      0x14003daa7",
    "movsxd  rax, dword [rdx+0xc0]",
    "mov     qword [r11], rax",
    "jmp     0x140038669",
    "mov     dword [rdx+0xc0], ecx",
    "movsxd  rbx, dword [rsi+0xc]",
    "mov     rbp, qword [rsi+0x10]",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "cmp     qword [rbp], rbx",
    "je      0x14003d597",
    "test    byte [rbx+0x8], 0x12",
    "je      0x14003804a",
    "jle     0x14003d5e8",
    "lea     r9, [rbp+r8*8+0x30]",
    "mov     r13d, 0x8",
    "add     dword [rsi+0x4], r15d",
    "add     dword [r11+0xec], r15d",
    "cmp     byte [rsi], 0xa8",
    "je      0x14003806b",
    "mov     r9, qword [rsi+0x10]",
    "cmp     r9, r10",
    "jne     0x14003d6bf",
    "mov     eax, dword [r11+0x30]",
    "mov     edi, r10d  {0x0}",
    "add     eax, 0x2",
    "or      eax, r15d",
    "mov     dword [r11+0x30], eax",
    "movsxd  rbp, dword [rsi+0x4]",
    "imul    rbp, rbp, 0x38",
    "add     rbp, r14",
    "mov     qword [r11+0xa0], rbp",
    "cmp     dword [rsi+0x8], r10d",
    "jle     0x14003db96",
    "cmp     dword [r11+0x40], r10d",
    "je      0x14003db0d",
    "mov     rcx, r11",
    "call    sub_140032200",
    "mov     edi, r15d  {0x1}",
    "jmp     0x14003d8d9",
    "cmp     ebx, r10d",
    "je      0x14003dc39",
    "mov     edx, 0x204",
    "mov     rcx, r13",
    "call    sub_140083254",
    "mov     byte [r13+0x5f], r15b  {0x1}",
    "jmp     0x14003dc54",
    "mov     rax, qword [rsp+0x340 {arg_8}]",
    "mov     eax, dword [rax+0x38]",
    "neg     eax",
    "sbb     edi, edi",
    "and     edi, 0xffffff9c",
    "add     edi, 0x65",
    "jmp     0x140038a32",
    "mov     dword [r12+0x38], eax  {0x5}",
    "jmp     0x140038a32",
    "mov     r8, qword [rsi+0x10]",
    "lea     rdx, [rel data_1400f38e8]",
    "call    sub_140032200",
    "mov     rdi, qword [rsp+0x340 {arg_8}]",
    "movzx   r8d, word [rsi+0x2]",
    "lea     rax, [rel __dos_header]",
    "lea     rdx, [rel data_1400f4210]  {\"%s constraint failed\"}",
    "mov     r8, qword [rax+r8*8+0xd7200]",
    "call    sub_140032200",
    "mov     r9, qword [rsi+0x10]",
    "mov     rdi, qword [rsp+0x340 {arg_8}]",
    "xor     eax, eax  {0x0}",
    "cmp     r9, rax",
    "je      0x14003d861",
    "mov     r12, qword [r11+0x88]",
    "mov     r14, qword [r11+0x68]",
    "cdqe    ",
    "lea     rcx, [rax+rax*2]",
    "mov     qword [rsp+0x38 {var_300}], r12",
    "mov     qword [rsp+0x48 {i_30}], r14",
    "lea     rsi, [r12+rcx*8]",
    "cdqe    ",
    "lea     rcx, [rax+rax*2]",
    "mov     rax, qword [r11+0x88]",
    "mov     eax, dword [rax+rcx*8+0x8]",
    "sub     eax, r15d",
    "mov     eax, r15d  {0x0}",
    "movzx   eax, byte [rbx+0xa]",
    "cmp     eax, ecx",
    "je      0x140037f5d",
    "mov     rax, qword [rbp]",
    "mov     ecx, 0xebff",
    "mov     qword [rbx], rax",
    "mov     rax, qword [rbp+0x8]",
    "mov     qword [rbx+0x8], rax",
    "mov     rax, qword [rbp+0x10]",
    "mov     qword [rbx+0x10], rax",
    "movzx   eax, word [rbx+0x8]",
    "and     ax, cx",
    "mov     ecx, 0x840",
    "or      ax, cx",
    "mov     word [rbx+0x8], ax",
    "mov     rcx, rbx",
    "call    sub_140031524",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "xor     r10d, r10d  {0x0}",
    "cmp     edx, r10d",
    "jne     0x14003d1e9",
    "add     rbp, 0x38",
    "add     rbx, 0x38",
    "sub     r12d, r15d",
    "jne     0x1400381ba",
    "mov     r8d, 0x1000",
    "mov     rdx, rbp",
    "mov     rcx, rbx",
    "call    sub_1400316f8",
    "mov     eax, 0x1000",
    "test    word [rbx+0x8], ax",
    "je      0x140038247",
    "mov     eax, r12d",
    "sub     r12d, r15d",
    "cmp     eax, r10d",
    "je      0x14003804a",
    "xor     r15d, r15d  {0x0}",
    "mov     rcx, r13",
    "call    sub_140030f10",
    "jmp     0x140038321",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     r14w, word [r13+0x8]",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     eax, 0xfffd",
    "and     r14w, ax",
    "mov     eax, 0x4000",
    "jmp     0x140038361",
    "test    r15b, cl",
    "jne     0x14003873e",
    "movzx   ecx, byte [rsi]",
    "mov     r9, qword [rbp]",
    "mov     r8, qword [r13]",
    "sub     ecx, 0x67",
    "mov     qword [rsp+0x80 {var_2b8}], r9",
    "je      0x14003862a",
    "mov     eax, r10d  {0x0}",
    "mov     rcx, rbp",
    "call    sub_140037b08",
    "jmp     0x1400384cc",
    "xor     r10d, r10d  {0x0}",
    "cmp     rax, r10",
    "je      0x140038872",
    "or      rbx, rax",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x140038872",
    "cmp     dword [rsi+0x8], r10d",
    "jne     0x14003d79a",
    "mov     ax, word [rbx+0x8]",
    "test    bpl, al",
    "jne     0x140038a57",
    "mov     edx, r15d  {0x1}",
    "mov     rcx, rbx",
    "call    sub_1400379cc",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003891e",
    "mov     r8, qword [rsi+0x10]",
    "mov     rdx, r12",
    "mov     rcx, rbp",
    "call    sub_140034f80",
    "xor     r10d, r10d  {0x0}",
    "mov     ecx, eax",
    "mov     eax, 0x2",
    "test    al, r13b",
    "jne     0x140038d03",
    "mov     al, byte [r12+0x8]",
    "and     al, byte [rbp+0x8]",
    "test    al, 0x4",
    "je      0x140038d2d",
    "mov     al, r13b",
    "and     al, 0x2e",
    "cmp     al, dl",
    "jne     0x140038beb",
    "mov     eax, 0x10",
    "test    byte [rsi+0x2], al",
    "jne     0x14003d79a",
    "movsxd  rax, dword [rsi+0x8]",
    "mov     ecx, 0x3e40",
    "mov     r9d, r15d  {0x1}",
    "mov     dword [rsp+0x358 {arg_20}], r15d  {0x1}",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "and     word [rax+0x8], cx",
    "or      word [rax+0x8], r15w",
    "mov     al, bl",
    "and     al, r15b",
    "neg     al",
    "sbb     ecx, ecx",
    "and     ecx, 0xfffffffe",
    "add     ecx, r15d",
    "jmp     0x140038d41",
    "mov     eax, 0x100",
    "test    ax, bx",
    "jne     0x140038b58",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "jmp     0x140038066",
    "mov     r12d, r13d",
    "mov     r12d, dword [rbp+rbx*4]",
    "jmp     0x140038df4",
    "sub     eax, r15d",
    "cdqe    ",
    "lea     rcx, [rax+rax*2]",
    "lea     rsi, [r12+rcx*8]",
    "jmp     0x14003806b",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003806b",
    "movsxd  r14, dword [rsi+0xc]",
    "mov     rdx, qword [rsp+0x48 {i_30}]",
    "mov     eax, dword [r11+0x30]",
    "imul    r14, r14, 0x38",
    "mov     r12, qword [rbx+0x60]",
    "add     r14, rdx",
    "mov     qword [rsp+0xb8 {var_280}], r14",
    "mov     qword [rsp+0x60 {var_2d8}], r12",
    "cmp     dword [rbx+0x28], eax",
    "je      0x1400393c6",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x140039293",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "mov     rbx, qword [rbx+0x30]",
    "lea     r13d, [rdx-0x1]",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x50 {var_2e8}], r13d",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "jmp     0x14003929c",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "mov     r8b, dl",
    "mov     dl, byte [rbp]",
    "mov     rcx, rbx",
    "call    sub_140037a64",
    "cmp     byte [rbp], 0x45",
    "jne     0x14003984f",
    "pxor    xmm0, xmm0",
    "mov     ecx, 0xfffb",
    "cvtsi2sd xmm0, qword [rbx]",
    "and     ax, cx",
    "or      ax, 0x8",
    "movsd   qword [rbx], xmm0",
    "mov     rcx, 0xffff800000000000",
    "cmp     qword [rbx], rcx",
    "jl      0x140039832",
    "mov     edx, 0x8",
    "test    dl, cl",
    "je      0x140039a73",
    "mov     r8, qword [rbx-0x24]",
    "xor     r12d, r12d  {0x0}",
    "cmp     r8, r12",
    "mov     rdx, r8",
    "jge     0x14003999b",
    "mov     dword [rbx], eax",
    "xor     r12d, r12d  {0x0}",
    "jmp     0x140039af0",
    "mov     r8b, dl",
    "mov     dl, byte [rbp]",
    "lea     rcx, [rbx-0x8]",
    "call    sub_140037a64",
    "cmp     byte [rbp], 0x45",
    "jne     0x14003991c",
    "mov     rsi, qword [rsp+0x80 {var_2b8}]",
    "mov     r12d, dword [rsp+0x68 {i_46}]",
    "mov     r11, qword [rsp+0x60 {var_2d8}]",
    "mov     r13, qword [rsp+0xb0 {var_288}]",
    "xor     r8d, r8d  {0x0}",
    "and     ax, di",
    "or      ax, si",
    "mov     word [rbx], ax",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003894e",
    "cmp     r14, r10",
    "je      0x14003d961",
    "mov     r14, qword [r14+0x18]",
    "add     r13d, ebx",
    "cmp     r14, r10",
    "jne     0x140039e47",
    "lea     rdx, [r12+0x21]",
    "mov     rcx, r13",
    "call    sub_140016c18",
    "xor     r10d, r10d  {0x0}",
    "mov     rbx, rax",
    "cmp     rax, r10",
    "je      0x14003a0aa",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "cmp     ebx, dword [rsi+0xc]",
    "jne     0x14003a20e",
    "mov     eax, 0x5",
    "cmp     dil, al",
    "jne     0x140038941",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "cmp     dword [rsi+0x8], r10d",
    "je      0x14003a1e1",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "jmp     0x14003a283",
    "mov     rax, qword [r13+0x8]",
    "jmp     0x14003a339",
    "jmp     0x140038066",
    "mov     ebp, 0x4",
    "mov     rbx, r13",
    "imul    rbx, rbx, 0x38",
    "add     rbx, qword [rsp+0x48 {i_30}]",
    "mov     rcx, rbx",
    "call    sub_140031230",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     ebp, 0x4",
    "mov     qword [rbx], rax",
    "mov     r13d, dword [rbx]",
    "mov     eax, 0x3e40",
    "and     word [rbx+0x8], ax",
    "or      word [rbx+0x8], bp",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003a432",
    "mov     eax, 0x10",
    "test    byte [rsi+0x2], al",
    "je      0x14003a42d",
    "mov     byte [r11+0xc3], cl",
    "jmp     0x14003a3ea",
    "cmp     ebp, r15d",
    "jne     0x14003a5d7",
    "mov     ecx, dword [rbx+0x30]",
    "call    sub_14001e150",
    "xor     r10d, r10d  {0x0}",
    "mov     qword [rbx+0x60], rax",
    "cmp     rax, r10",
    "je      0x14003a5b6  {\"L9S`u\"}",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "jmp     0x14003804a",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     eax, r10d  {0x0}",
    "mov     ecx, 0x8",
    "cmp     word [rsi+0x2], cx",
    "setne   al",
    "shl     eax, 0x2",
    "xor     eax, dword [rbx+0x8]",
    "and     eax, 0x4",
    "xor     dword [rbx+0x8], eax",
    "mov     rcx, qword [rbx+0x10]",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, r15d  {0x1}",
    "call    sub_140028524",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003a8dd",
    "mov     byte [rbx+0x2], r15b  {0x1}",
    "jmp     0x140038194",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r14d, 0x7",
    "cmp     ebp, 0x18",
    "mov     eax, dword [rsp+0x54 {var_2e4}]",
    "jl      0x14003ac36",
    "cmp     byte [rsp+0x106 {var_232_1}], r10b",
    "je      0x14003ac8a",
    "mov     ebx, 0x1",
    "mov     eax, 0x8",
    "test    al, dl",
    "jne     0x14003aac2",
    "mov     rcx, qword [rbp+0x40]",
    "call    sub_140034bdc",
    "mov     r12, rax",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "cmp     r12, rax",
    "je      0x14003969b",
    "cmp     eax, r10d",
    "jne     0x14003969b",
    "mov     rcx, qword [rbp+0x38]",
    "lea     rax, [rsp+0xd4 {var_264}]",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "mov     rdx, rdi",
    "mov     qword [rsp+0x20 {var_318}], rax {var_264}",
    "call    sub_140029f9c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     r12, r10",
    "je      0x14003ae17",
    "mov     edx, r10d  {0x0}",
    "cmp     r10w, word [rdi+0x10]",
    "jae     0x14003addc",
    "movsxd  rcx, dword [rsi+0x4]",
    "mov     rax, qword [r11+0x78]",
    "xor     r9d, r9d  {0x0}",
    "mov     rbx, qword [rax+rcx*8]",
    "lea     rax, [rsp+0xa8 {var_290}]",
    "mov     r8, rbp",
    "mov     rcx, qword [rbx+0x38]",
    "xor     edx, edx  {0x0}",
    "mov     dword [rsp+0xa8 {var_290}], r10d  {0x0}",
    "mov     qword [rsp+0x20 {var_318}], rax {var_290}",
    "call    sub_140029f9c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     eax, dword [rsp+0xa8 {var_290}]",
    "mov     qword [rbx+0x58], rbp",
    "mov     byte [rbx+0x2], r10b  {0x0}",
    "mov     dword [rbx+0x28], r10d  {0x0}",
    "mov     byte [rbx+0x3], r10b  {0x0}",
    "mov     dword [rbx+0x2c], eax",
    "cmp     eax, r10d",
    "je      0x140038aec",
    "lea     rcx, [rsp+0x218 {var_120}]",
    "call    sub_14003130c",
    "mov     eax, 0x2",
    "test    al, r11b",
    "je      0x14003aee5",
    "mov     byte [r12+0x3], r10b  {0x0}",
    "mov     dword [r12+0x28], r10d  {0x0}",
    "mov     qword [r13], rbx",
    "jmp     0x14003a636",
    "mov     ebp, r10d  {0x0}",
    "mov     rbp, rdx",
    "imul    rbp, rbp, 0x38",
    "add     rbp, r14",
    "mov     rcx, qword [rax+0x8]",
    "jmp     0x14003b0a4",
    "mov     rbx, qword [r12+0x38]",
    "mov     rcx, rbx",
    "call    sub_1400296c8",
    "mov     rbx, qword [rbx+0x30]",
    "mov     rax, 0x7fffffffffffffff",
    "cmp     rbx, rax",
    "mov     rax, qword [rsp+0x340 {arg_8}]",
    "mov     qword [rsp+0x60 {var_2d8}], rbx",
    "jl      0x14003b073",
    "mov     rax, qword [rsp+0x340 {arg_8}]",
    "mov     rbx, r15  {0x1}",
    "mov     qword [rsp+0x60 {var_2d8}], rbx  {0x1}",
    "jmp     0x14003b07e",
    "mov     rax, qword [rdx+0x10]",
    "mov     r8w, word [rsi+0x2]",
    "mov     qword [rsp+0x188 {var_1b0_1}], rax",
    "mov     eax, dword [rdx+0xc]",
    "mov     dword [rsp+0x19c {var_19c_1}], eax",
    "mov     eax, 0x10",
    "test    al, r8b",
    "je      0x14003b240",
    "mov     qword [r13+0x38], r8",
    "test    byte [rsi+0x2], r15b",
    "je      0x14003b207",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "add     dword [r11+0x3c], r15d",
    "mov     r8, qword [rsp+0x40 {var_2f8}]",
    "xor     eax, eax  {0x0}",
    "mov     r10, qword [r8+0x120]",
    "cmp     r10, rax",
    "je      0x14003d683",
    "mov     dl, byte [rsi+0x2]",
    "mov     rcx, qword [rbp+0x38]",
    "call    sub_14002e468",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     dword [rbp+0x28], r10d  {0x0}",
    "mov     dword [rbp+0x2c], r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "cmp     byte [rbp+0x4], r10b",
    "je      0x14003b340",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     r14d, 0x7",
    "lea     ebx, [r14-0x6]  {0x1}",
    "mov     edi, r14d  {0x7}",
    "jmp     0x140038954",
    "mov     rcx, qword [rbx+0x10]",
    "mov     eax, 0x3e40",
    "movsxd  r8, edi",
    "and     word [rbx+0x8], ax",
    "mov     eax, 0x10",
    "mov     rdx, rbp",
    "or      word [rbx+0x8], ax",
    "mov     dword [rbx+0xc], edi",
    "call    memcpy",
    "movsxd  rcx, dword [rsi+0xc]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "mov     rax, qword [r11+0x78]",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     rcx, qword [rax+rcx*8]",
    "mov     dword [rcx+0x28], r10d  {0x0}",
    "jmp     0x140038057",
    "cmp     eax, r10d",
    "jne     0x14003d9d8",
    "mov     eax, 0x1000",
    "test    word [rbx+0x8], ax",
    "je      0x14003804a",
    "mov     rax, qword [rbx+0x38]",
    "cmp     byte [rax], r10b",
    "je      0x14003b647",
    "mov     rcx, qword [rbx+0x38]",
    "lea     rdx, [rsp+0xe0 {var_258}]",
    "mov     rbx, qword [rcx]",
    "mov     rax, qword [rbx]",
    "call    qword [rax+0x60]",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rdx, rbx",
    "mov     rcx, r12",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "call    sub_140035b88",
    "xor     r10d, r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x140038949",
    "mov     qword [rsp+0xe0 {var_258}], rax",
    "cmp     eax, r10d",
    "jmp     0x14003ae50",
    "cmp     ebp, r10d",
    "jne     0x14003d79a",
    "mov     byte [r12+0x3], r10b  {0x0}",
    "mov     dword [r12+0x28], r10d  {0x0}",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "mov     rcx, rbx",
    "call    sub_140040270",
    "xor     r10d, r10d",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     ebp, r10d  {0x0}",
    "jmp     0x14003b8ee",
    "lea     rcx, [rbx+0x60]",
    "mov     ebp, r10d  {0x0}",
    "call    sub_14003f48c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "jmp     0x14003b8ee",
    "lea     ebx, [r10+0x4]",
    "lea     edi, [r10+0x65]",
    "jmp     0x14003b990",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "cmp     byte [rsi], 0x83",
    "jne     0x14003ba51",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "movsxd  rcx, dword [rsi+0x8]",
    "imul    rcx, rcx, 0x38",
    "add     rcx, r14",
    "jmp     0x14003908d",
    "mov     rdx, qword [rbx+0x38]",
    "lea     r8, [rsp+0x90 {var_2a8}]",
    "mov     rcx, r13",
    "mov     qword [rsp+0x90 {var_2a8}], r10  {0x0}",
    "call    sub_14003594c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "jmp     0x140038669",
    "mov     rdx, qword [r13+0x20]",
    "mov     r9d, dword [rsi+0x4]",
    "mov     rax, qword [rdx+rbp+0x18]",
    "mov     rcx, qword [rax+0x10]",
    "jmp     0x14003bd83",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "jmp     0x14003806b",
    "mov     rcx, r13",
    "call    sub_140016efc",
    "mov     rcx, qword [rsp+0x340 {arg_8}]",
    "lea     rdx, [rel data_1400f4490]  {\"out of memory\"}",
    "call    sub_140032200",
    "mov     edi, r14d  {0x7}",
    "jmp     0x14003da2b",
    "mov     rdx, rbx",
    "mov     rcx, r13",
    "call    sub_1400169a8",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "mov     byte [r13+0xb5], r10b  {0x0}",
    "mov     edi, dword [rsp+0x11c {var_21c_1}]",
    "mov     dword [rsp+0x30 {var_308}], edi",
    "cmp     edi, ebp",
    "jne     0x14003c00f",
    "mov     rcx, r13",
    "call    sub_14004e348",
    "mov     r14d, 0x7",
    "cmp     edi, r14d",
    "je      0x1400396a1",
    "jmp     0x140038057",
    "mov     rcx, r13",
    "call    sub_14004e174",
    "jmp     0x14003c08c",
    "mov     rax, qword [rcx+0x28]",
    "cmp     rax, rdx",
    "je      0x14003c0f1",
    "add     rdx, 0x68",
    "jmp     0x14003c170",
    "mov     dl, cl",
    "mov     rcx, rbx",
    "call    sub_140018a98",
    "jmp     0x14003874b",
    "mov     rbp, qword [rax]",
    "mov     rax, qword [rax+0x8]",
    "mov     qword [rbx+0x10], rax",
    "cmp     rax, r10",
    "jne     0x14003c310",
    "mov     eax, 0x3",
    "or      word [rbx+0x32], ax",
    "mov     rcx, qword [rbx+0x10]",
    "call    sub_14001ec4c",
    "xor     r10d, r10d  {0x0}",
    "mov     qword [rbx+0x10], rax",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "jmp     0x140038304",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "jmp     0x14003d79a",
    "cmp     r12d, r10d",
    "jl      0x14003804a",
    "mov     r12, qword [rbx+0x10]",
    "mov     ecx, dword [r14+0x10]",
    "mov     eax, dword [r14+0xc]",
    "lea     ebp, [rcx+rax]",
    "cmp     ecx, r10d",
    "jne     0x14003c482",
    "cmp     rax, r10",
    "jne     0x14003d7b9",
    "mov     rax, qword [rax+0x8]",
    "cmp     rax, r10",
    "jne     0x14003c435",
    "mov     rax, rcx",
    "mov     rcx, qword [rcx+0x8]",
    "movsxd  rbp, dword [rsi+0x4]",
    "imul    rbp, rbp, 0x38",
    "add     rbp, qword [rax+0x20]",
    "jmp     0x14003c77e",
    "jle     0x14003ca11",
    "mov     eax, dword [rbx+0x24]",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "je      0x14003804a",
    "mov     eax, dword [rsi+0x8]",
    "sub     r9, r15",
    "add     eax, r8d",
    "sub     r8d, r15d",
    "cdqe    ",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "mov     qword [r10], rax",
    "sub     r10, r13",
    "cmp     r9, r11",
    "jge     0x14003c98e",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "jmp     0x14003c9b8",
    "test    byte [rbp+0x8], 0x12",
    "je      0x14003cb6e",
    "movzx   eax, byte [rbp+0xa]",
    "cmp     eax, ecx",
    "je      0x14003cb48",
    "movsxd  rax, dword [rsp+rbp*4+0xc0 {var_278}]",
    "test    word [rbx+0x8], cx",
    "je      0x14003cc2b",
    "jmp     0x140038746",
    "add     rbp, r15",
    "add     rbx, 0x38",
    "cmp     rbp, r13",
    "jl      0x14003cc0b",
    "cmp     ebx, r12d",
    "je      0x14003cd65",
    "call    sub_140019074",
    "cmp     eax, edx",
    "je      0x14003cce2",
    "jmp     0x140038664",
    "cmp     edi, r10d",
    "jne     0x140038949",
    "mov     rax, qword [rsp+0x78 {var_2c0}]",
    "or      r9d, 0xffffffff  {0xffffffff}",
    "xor     r8d, r8d  {0x0}",
    "mov     qword [rax], rbx",
    "mov     edx, dword [rsi+0x4]",
    "lea     eax, [r10+0x2]",
    "mov     rcx, r12",
    "mov     byte [rsp+0x20 {var_318}], al  {0x2}",
    "call    sub_14003789c",
    "mov     rcx, qword [rsp+0x78 {var_2c0}]",
    "xor     r10d, r10d  {0x0}",
    "cmp     rax, r10",
    "je      0x14003da9f",
    "jmp     0x14003ac2c",
    "movzx   ecx, byte [rsp+0x348 {i_33}]",
    "mov     eax, 0x2",
    "test    byte [rbx+0x8], al",
    "je      0x14003d1cd",
    "mov     dl, r15b  {0x1}",
    "mov     rcx, rbx",
    "call    sub_140031c84",
    "lea     rdx, [rel data_1400f38e8]",
    "mov     rcx, r12",
    "mov     r8, rax",
    "call    sub_140032200",
    "mov     edi, dword [rsp+0x2dc {var_5c}]",
    "mov     dword [rsp+0x30 {var_308}], edi",
    "mov     r8d, dword [rsi+0x8]",
    "mov     rcx, qword [rbp+0x38]",
    "lea     rdx, [rsp+0x2b8 {var_80}]",
    "call    qword [rdi+0x58]",
    "mov     rdx, r12",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rcx, r12",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "call    sub_140035b88",
    "xor     eax, eax  {0x0}",
    "cmp     dword [rsp+0x2dc {var_5c}], eax",
    "jle     0x14003d1a9",
    "mov     ebx, 0x4",
    "mov     rcx, qword [rsp+0x340 {arg_8}]",
    "mov     rdx, r12",
    "call    sub_140035b88",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "and     dword [r11+0xc8], 0xfffffffc",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "btr     qword [r13+0x30], 0x1a",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "xor     r10d, r10d  {0x0}",
    "movsxd  rdx, dword [rsi+0x8]",
    "cmp     qword [r10+0x68], rcx",
    "je      0x14003d7c3",
    "movzx   ecx, byte [rsp+0x348 {i_33}]",
    "mov     eax, 0x2",
    "test    byte [rbx+0x8], al",
    "je      0x14003d648",
    "mov     rdx, qword [rsp+0x340 {arg_8}]",
    "mov     r9d, dword [rsi+0x4]",
    "mov     r8d, dword [rbp+0x20]",
    "add     rdx, 0x120",
    "mov     rcx, r13",
    "call    sub_14003472c",
    "xor     r10d, r10d  {0x0}",
    "mov     dword [rbp+0x24], r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "mov     dl, r15b  {0x1}",
    "mov     rcx, rbx",
    "call    sub_140031c84",
    "lea     rdx, [rel data_1400f38e8]",
    "mov     rcx, r12",
    "mov     r8, rax",
    "call    sub_140032200",
    "mov     edi, dword [rbp+0x24]",
    "mov     dword [rsp+0x30 {var_308}], edi",
    "mov     eax, dword [rsi+0x8]",
    "sub     r8, r15",
    "add     eax, edx",
    "sub     edx, r15d",
    "cdqe    ",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "mov     qword [r9], rax",
    "sub     r9, r13",
    "cmp     r8, r10",
    "jge     0x14003d573",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "cmp     dword [r11+0x90], r15d",
    "mov     edx, r15d  {0x1}",
    "jle     0x14003d78b",
    "cmp     dword [r13+0xd4], r15d",
    "jle     0x14003d716",
    "mov     r9, qword [r11+0xf0]",
    "cmp     r9, r10",
    "je      0x14003d73c",
    "cmp     byte [r13+0x61], r10b",
    "jne     0x14003969b",
    "lea     rbx, [rbp+0x8]",
    "mov     edx, r15d  {0x1}",
    "mov     rcx, r11",
    "call    sub_140034190",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "mov     edx, r15d  {0x1}",
    "mov     rcx, r11",
    "call    sub_140034284",
    "mov     edi, eax",
    "xor     eax, eax  {0x0}",
    "cmp     edi, eax",
    "jne     0x140038a2a",
    "cmp     dword [r13+0xd0], r10d",
    "jle     0x14003dc39",
    "mov     rdi, qword [rsp+0x340 {arg_8}]",
    "mov     rcx, rdi",
    "call    sub_1400342d4",
    "mov     ecx, 0x5",
    "cmp     eax, ecx",
    "jne     0x14003dc9a",
    "mov     eax, dword [rsp+0x88 {var_2b0}]",
    "add     dword [r12+0xe4], eax",
    "mov     eax, edi",
    "add     rsp, 0x2f8",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "pop     rbx {__saved_rbx}",
    "retn     {__return_addr}",
    "mov     rax, qword [rdi+0xa8]",
    "mov     r9, qword [rdi+0xf0]",
    "mov     ecx, dword [rsi+0x4]",
    "lea     rdx, [rel data_1400f4230]  {\"abort at %d in [%s]: %s\"}",
    "mov     r8d, ebx",
    "mov     qword [rsp+0x20 {var_318_3}], rax",
    "call    sub_1400187fc",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r8, qword [rdi+0xa8]",
    "lea     rdx, [rel data_1400f4228]  {\"%z: %s\"}",
    "mov     rcx, r13",
    "call    _printf_p_l",
    "mov     qword [rdi+0xa8], rax",
    "jmp     0x14003d861",
    "mov     eax, 0x800",
    "mov     dword [rbx+0x20], r15d  {0x0}",
    "or      word [rbx+0x8], ax",
    "cmp     byte [rsi+0x1], 0xf9",
    "jne     0x140037f8d",
    "mov     dl, cl",
    "mov     rcx, rbx",
    "call    sub_140018a98",
    "jmp     0x140037f60",
    "test    ax, r12w",
    "je      0x14003839e",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140030f6c",
    "jmp     0x140038387",
    "xor     r15d, r15d  {0x0}",
    "cmp     eax, r15d",
    "jne     0x140039696",
    "movzx   r12d, word [rbx+0x8]",
    "test    r12b, 0x12",
    "jne     0x140038379",
    "mov     rcx, r12",
    "call    sub_140031524",
    "mov     rcx, r13",
    "call    sub_140031294",
    "mov     rcx, rbp",
    "movapd  xmm2, xmm0",
    "call    sub_140031294",
    "movzx   edx, byte [rsi]",
    "sub     edx, 0x67",
    "je      0x14003870c",
    "lea     rcx, [rsp+0x80 {var_2b8}]",
    "mov     rdx, r8",
    "call    sub_140019ffc",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x14003868e",
    "sub     ecx, r15d",
    "je      0x14003860b",
    "mov     qword [r12], rbx",
    "mov     eax, 0x3e40",
    "mov     ebx, 0x4",
    "and     word [r12+0x8], ax",
    "or      word [r12+0x8], bx",
    "jmp     0x140038664",
    "jge     0x140038825",
    "mov     edi, 0x14",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "jne     0x140038c21",
    "movzx   eax, byte [rsi]",
    "lea     rdx, [rel __dos_header]",
    "movzx   r8d, byte [rax+rdx+0xd71f4]",
    "jmp     0x140038c34",
    "test    al, bl",
    "jne     0x140038d2d",
    "test    r13b, 0x2c",
    "je      0x140038d03",
    "mov     rax, qword [r12]",
    "cmp     qword [rbp], rax",
    "jle     0x140038cac",
    "mov     al, bl",
    "and     al, 0x2e",
    "cmp     al, dl",
    "jne     0x140038bfd",
    "xor     edx, edx  {0x0}",
    "mov     rcx, r12",
    "call    sub_1400379cc",
    "mov     bx, word [rbp+0x8]",
    "mov     edx, 0x2",
    "jmp     0x140038b9f",
    "cmp     ecx, r10d",
    "jge     0x140038d5e",
    "mov     ecx, r10d  {0x0}",
    "jmp     0x140038d64",
    "mov     rax, qword [r15+0x18]",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "mov     ecx, 0x2",
    "test    byte [rbx+rax], cl",
    "je      0x140038ec4",
    "mov     ecx, dword [rsp+0x58 {var_2e0}]",
    "mov     edx, dword [rsp+0x6c {i_31}]",
    "lea     eax, [r10+0x1]",
    "add     rbx, rax",
    "add     r13d, eax",
    "add     r14, 0x8",
    "cmp     rbx, qword [rsp+0x70 {i_32}]",
    "jl      0x140038de5",
    "mov     rax, qword [r15+0x18]",
    "mov     r8, qword [rsp+0x48 {i_30}]",
    "movzx   eax, byte [rbx+rax]",
    "and     eax, 0x1",
    "mov     dword [rsp+0x68 {i_46}], eax",
    "lea     eax, [r12+rdx]",
    "movsxd  rdx, eax",
    "lea     eax, [r12+rcx]",
    "movsxd  rcx, eax",
    "imul    rdx, rdx, 0x38",
    "add     rdx, r8",
    "imul    rcx, rcx, 0x38",
    "add     rcx, r8",
    "mov     r8, qword [r14]",
    "call    sub_140034f80",
    "xor     r10d, r10d  {0x0}",
    "mov     r9d, eax",
    "mov     dword [rsp+0x358 {arg_20}], eax",
    "cmp     eax, r10d",
    "jne     0x140038e77",
    "movzx   eax, word [rbx+0x52]",
    "cmp     eax, r13d",
    "jg      0x140039616",
    "cmp     byte [rbx+0x2], r10b",
    "je      0x140039308",
    "mov     ecx, 0xfffb",
    "and     ax, cx",
    "or      ax, 0x20",
    "jmp     0x14003984b",
    "mov     r12d, dword [rbx-0x18]",
    "mov     eax, ecx",
    "shr     eax, 0x1",
    "and     eax, r10d",
    "lea     r13d, [rax+r12*2+0xc]",
    "mov     eax, 0x4000",
    "test    ax, cx",
    "je      0x140039ac4",
    "add     r15d, r10d",
    "lea     eax, [rdx-0x1]  {0x7}",
    "add     r14, rdx",
    "add     r15d, r10d",
    "cmp     rdx, 0x7f",
    "ja      0x1400399cc",
    "not     rdx",
    "lea     rax, [rbx-0x24]",
    "cmp     rax, r11",
    "je      0x140039b05",
    "cmp     dword [r12+0xd0], r10d",
    "jle     0x140039e82",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "lea     edx, [r12+0x1]",
    "lea     rcx, [rax+0x20]",
    "movsxd  r8, edx",
    "mov     rdx, rbp",
    "mov     qword [rax], rcx",
    "call    memcpy",
    "xor     r10d, r10d  {0x0}",
    "cmp     byte [r13+0x5f], r10b",
    "je      0x140039df5",
    "jmp     0x140038057",
    "mov     rdx, qword [r11+0xa8]",
    "cmp     rdx, r10",
    "je      0x14003a222",
    "mov     rax, qword [r13+0x20]",
    "movsxd  rcx, dword [rsi+0x4]",
    "shl     rcx, 0x5",
    "mov     rcx, qword [rcx+rax+0x18]",
    "mov     eax, dword [rsi+0x10]",
    "cmp     dword [rcx+0x4], eax",
    "je      0x14003a283",
    "sub     rsi, r12",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "mov     dword [r12+0x38], edi",
    "imul    rsi",
    "sar     rdx, 0x2",
    "mov     rax, rdx",
    "shr     rax, 0x3f",
    "add     rdx, rax",
    "mov     dword [r12+0x34], edx",
    "jmp     0x140038a32",
    "mov     ebx, dword [rsp+0x6c {i_31}]",
    "mov     eax, 0x80",
    "test    byte [r11+0xc8], al",
    "je      0x14003a1e1",
    "cmp     rax, r10",
    "jne     0x14003a327",
    "cmp     al, 0xfd",
    "jne     0x14003a44c",
    "mov     r14, qword [rsi+0x10]",
    "movzx   r12d, word [r14+0x8]",
    "jmp     0x14003a44c",
    "mov     al, byte [rsi+0x1]",
    "cmp     al, 0xf7",
    "jne     0x14003a444",
    "mov     dword [rdi+0x50], ebp",
    "mov     byte [rdi+0x54], 0xff",
    "mov     qword [rdi+0x80], r13",
    "mov     qword [rdi+0x8], r12",
    "mov     qword [rdi+0x20], rbx",
    "mov     byte [rdi+0x1], r15b",
    "mov     byte [rdi+0x2], r10b  {0x0}",
    "mov     rax, qword [rbx+0x10]",
    "cmp     rax, r10",
    "je      0x14003a61f",
    "mov     eax, dword [rbx+0x3c]",
    "neg     eax",
    "sbb     ecx, ecx",
    "and     ebp, ecx",
    "cmp     qword [rbx+0x60], r10",
    "jne     0x14003a5c9",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rax], rcx  {0x0}",
    "lea     eax, [rcx+0x4]",
    "add     qword [rbx+0x60], rax",
    "mov     r14, qword [rsi+0x10]",
    "mov     qword [rbx+0x40], r14",
    "cmp     r14, r10",
    "je      0x14003a821",
    "cmp     eax, r10d",
    "jg      0x14003ac56",
    "cmp     eax, r10d",
    "jl      0x14003abef",
    "cmp     dword [rsp+0x54 {var_2e4}], r10d",
    "jne     0x14003d0d0",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "jmp     0x14003abd0",
    "movsd   xmm1, qword [rbx]",
    "pxor    xmm0, xmm0",
    "mov     ebx, 0x1",
    "cvtsi2sd xmm0, r14",
    "comisd  xmm1, xmm0",
    "jae     0x14003aae3",
    "lea     ebx, [rax-0x7]  {0x1}",
    "test    bl, dl",
    "jne     0x14003d0c3",
    "mov     r8, qword [rbx+0x10]",
    "mov     edx, dword [rbx+0xc]",
    "mov     rcx, qword [rbp+0x40]",
    "mov     r9, r12",
    "call    sub_140034c34",
    "xor     r10d, r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "mov     rdx, r12",
    "mov     rcx, r13",
    "call    sub_1400169a8",
    "xor     r10d, r10d  {0x0}",
    "mov     rcx, qword [rdi+0x8]",
    "add     rcx, 0x8",
    "test    bl, r11b",
    "je      0x14003d79a",
    "lea     rcx, [rsp+0x218 {var_120}]",
    "mov     edx, r15d  {0x1}",
    "call    sub_1400379cc",
    "jmp     0x14003aedc",
    "cmp     dword [rsp+0x50 {var_2e8}], r10d",
    "jne     0x14003b193",
    "mov     edi, 0xd",
    "jmp     0x14003d8d9",
    "mov     ecx, 0x2",
    "test    byte [r12+0x8], cl",
    "jne     0x14003d9ce",
    "cmp     rcx, r10",
    "jne     0x14003b09d",
    "add     rbx, r15",
    "mov     qword [rsp+0x60 {var_2d8}], rbx",
    "or      dword [r12+0x8], ebp",
    "jmp     0x14003b07b",
    "movsxd  rdx, dword [rsi+0xc]",
    "cmp     edx, r10d",
    "je      0x14003b11a",
    "mov     r9d, r10d  {0x0}",
    "mov     r9d, dword [rbx+0x2c]",
    "jmp     0x14003b243",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "xor     r10d, r10d  {0x0}",
    "mov     r13, r8",
    "jmp     0x140039cfa",
    "mov     eax, 0x20",
    "test    byte [r12+0x40], al",
    "jne     0x14003d683",
    "mov     rbx, qword [rbp+0x38]",
    "mov     rcx, rbx",
    "call    sub_1400296c8",
    "mov     r11, qword [rbx+0x30]",
    "mov     ebx, 0x4",
    "mov     qword [rbp+0x58], r11",
    "jmp     0x14003b340",
    "mov     rcx, rbx",
    "call    sub_140030eb4",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x14003969b",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     rcx, rbx",
    "call    sub_140034960",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "jmp     0x14003b64f",
    "mov     rax, qword [rsp+0xe0 {var_258}]",
    "mov     r11, r12",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "jmp     0x14003b68b",
    "jne     0x14003d79a",
    "cmp     byte [rbx], r10b",
    "jne     0x140038af5",
    "mov     byte [r12+0x2], bpl",
    "cmp     ebp, r10d",
    "jmp     0x14003ae4b",
    "mov     dword [rsp+0x30 {var_308}], edi",
    "jmp     0x14003b9b5",
    "movsxd  rax, dword [rbx+0xc]",
    "mov     r8w, word [rsi+0x2]",
    "mov     qword [rsp+0x290 {var_a8_1}], rax",
    "mov     rax, qword [rbx+0x10]",
    "mov     qword [rsp+0x288 {var_b0}], rax",
    "movsxd  rax, dword [rsi+0xc]",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "mov     qword [rsp+0x2a0 {var_98_1}], rax",
    "movzx   eax, word [rsi+0x10]",
    "mov     word [rsp+0x2a8 {var_90_1}], ax",
    "mov     eax, 0x10",
    "test    al, r8b",
    "je      0x14003ba9d",
    "mov     rdx, rbx",
    "mov     rcx, rbp",
    "call    sub_14003faf0",
    "jmp     0x14003af81",
    "call    sub_140031524",
    "jmp     0x140038304",
    "cmp     byte [rsi], 0x86",
    "jne     0x14003bc1b",
    "cmp     rcx, r10",
    "jne     0x14003bd72",
    "cmp     dword [rsp+0x124 {var_214_1}], ebp",
    "jne     0x14003c00f",
    "xor     r10d, r10d  {0x0}",
    "cmp     rcx, r10",
    "je      0x14003c104",
    "mov     rcx, rax",
    "cmp     rax, r10",
    "jne     0x14003c0e0",
    "mov     rax, qword [rdx]",
    "cmp     rax, rbx",
    "jne     0x14003c16c",
    "movsxd  rax, dword [rsi+0xc]",
    "mov     ecx, 0x2400",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "test    word [rax+0x8], cx",
    "je      0x14003c37c",
    "mov     rcx, rbx",
    "call    sub_14001eac0",
    "xor     r10d, r10d  {0x0}",
    "mov     eax, dword [r14+0x8]",
    "mov     r8d, 0x7",
    "lea     ecx, [rbp+0x2]",
    "add     eax, r8d",
    "cdq     ",
    "imul    ecx, ecx, 0x7",
    "add     ecx, dword [r14+0x10]",
    "and     edx, r8d",
    "add     eax, edx",
    "sar     eax, 0x3",
    "lea     r13d, [rax+rcx*8]",
    "mov     rcx, qword [rsp+0x40 {var_2f8}]",
    "movsxd  rdx, r13d",
    "call    sub_140016ba8",
    "xor     r10d, r10d  {0x0}",
    "mov     r12, rax",
    "cmp     rax, r10",
    "je      0x140039696",
    "add     ebp, r15d",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "jmp     0x140038066",
    "mov     rcx, rbp",
    "call    sub_140031230",
    "mov     r15d, 0x3e40",
    "and     word [rbp+0x8], r15w",
    "or      word [rbp+0x8], bx",
    "mov     qword [rbp], rax",
    "movsxd  rbx, dword [rsi+0x8]",
    "imul    rbx, rbx, 0x38",
    "add     rbx, r14",
    "mov     rcx, rbx",
    "call    sub_140031230",
    "and     word [rbx+0x8], r15w",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "mov     ecx, 0x4",
    "or      word [rbx+0x8], cx",
    "mov     qword [rbx], rax",
    "xor     r10d, r10d  {0x0}",
    "cmp     qword [rbp], rax",
    "jge     0x140038066",
    "cmp     byte [rbx+0x28], r10b",
    "je      0x14003ca53",
    "mov     rcx, qword [rbx]",
    "mov     dl, r15b  {0x1}",
    "call    sub_140031c84",
    "lea     rdx, [rel data_1400f38e8]",
    "mov     rcx, r12",
    "mov     r8, rax",
    "call    sub_140032200",
    "mov     edi, dword [rbx+0x24]",
    "xor     r10d, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], edi",
    "add     dword [rdx+0xc], r15d",
    "mov     rax, qword [rbx+0x8]",
    "movzx   edx, byte [rbx+0x29]",
    "lea     r8, [rbx+0x30]",
    "mov     rcx, rbx",
    "cmp     dword [rsi+0x4], r11d",
    "je      0x14003c9d6",
    "mov     ecx, r10d  {0x0}",
    "mov     edx, dword [rbp+0xc]",
    "mov     eax, 0x4000",
    "test    word [rbp+0x8], ax",
    "je      0x14003cb5f",
    "mov     dl, cl",
    "mov     rcx, rbp",
    "call    sub_140018a98",
    "xor     r10d, r10d  {0x0}",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "cmp     edi, edx",
    "je      0x14003cd6c",
    "cmp     r12d, r9d",
    "je      0x14003ccf4",
    "mov     ebx, r12d",
    "mov     rax, qword [rbp+0x48]",
    "mov     rcx, qword [rax]",
    "cmp     byte [rbp+0x11], dl",
    "jne     0x14003cce2",
    "call    qword [rbp+0x38]",
    "jmp     0x14003969b",
    "mov     qword [rax+0x38], rcx",
    "add     dword [rbx+0x8], r15d",
    "jmp     0x14003804a",
    "mov     rcx, rbx",
    "call    sub_140031694",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "je      0x14003ca7b",
    "movzx   eax, byte [rbx+0xa]",
    "cmp     eax, ecx",
    "je      0x14003d1cd",
    "jmp     0x140038052",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "jmp     0x1400380e6",
    "movsxd  rax, dword [rsi+0xc]",
    "mov     r8, qword [r11+0x70]",
    "mov     bpl, byte [r13+0x66]",
    "imul    rax, rax, 0x38",
    "xor     r11d, r11d  {0x0}",
    "add     rax, r14",
    "cmp     edx, r11d",
    "jle     0x14003d387",
    "mov     rcx, rbx",
    "call    sub_140031694",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "cmp     eax, r10d",
    "jne     0x14003d1e9",
    "movzx   eax, byte [rbx+0xa]",
    "cmp     eax, ecx",
    "je      0x14003d648",
    "mov     dword [rsi+0x4], r10d  {0x0}",
    "mov     eax, 0x18",
    "mov     rdx, qword [r13+0xf0]",
    "mov     r8, r11",
    "mov     ecx, r15d  {0x1}",
    "call    qword [r13+0xe8]",
    "xor     r10d, r10d  {0x0}",
    "lea     rdx, [rel data_1400f4464]  {\"-- %s\"}",
    "mov     r8, r9",
    "mov     rcx, r13",
    "call    _printf_p_l",
    "mov     r8, qword [rsp+0x340 {arg_8}]",
    "mov     rdx, qword [r13+0xf0]",
    "mov     r9, rax",
    "mov     ecx, r15d  {0x1}",
    "mov     rbx, rax",
    "call    qword [r13+0xe8]",
    "xor     r10d, r10d  {0x0}",
    "cmp     rbx, r10",
    "je      0x14003d70f",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "test    byte [r13+0x68], bl",
    "je      0x14003dbbc",
    "movzx   eax, word [rbx]",
    "mov     ecx, 0x202",
    "and     ax, cx",
    "mov     ecx, 0x2",
    "cmp     ax, cx",
    "jne     0x14003db7b",
    "movsxd  rcx, edi",
    "imul    rcx, rcx, 0x38",
    "add     rcx, rbp",
    "call    sub_140030eb4",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x14003969b",
    "mov     byte [r13+0x5f], bl",
    "lea     rdx, [rel data_1400f42d0]  {\"cannot commit transaction - SQL \u2026\"}",
    "jmp     0x14003d8f0",
    "mov     rcx, r13",
    "call    sub_140082dd4",
    "mov     r11d, dword [rdi+0x38]",
    "neg     r11d",
    "sbb     edi, edi",
    "and     edi, 0xffffff9c",
    "add     edi, 0x65",
    "jmp     0x140038a2a",
    "sub     rsi, r12",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "imul    rsi",
    "sar     rdx, 0x2",
    "mov     rax, rdx",
    "shr     rax, 0x3f",
    "add     rdx, rax",
    "sub     r15b, bl",
    "mov     dword [rdi+0x34], edx",
    "mov     byte [r13+0x5f], r15b",
    "jmp     0x14003d94d",
    "mov     byte [rsi+0x1], 0xf9",
    "mov     rax, qword [rbx+0x10]",
    "mov     qword [rsi+0x10], rax",
    "mov     eax, dword [rbx+0xc]",
    "mov     dword [rsi+0x4], eax",
    "mov     rdx, qword [rsi+0x10]",
    "cmp     rdx, r15",
    "je      0x140037f8d",
    "cmp     eax, r15d",
    "jne     0x14003969b",
    "mov     eax, dword [r13+0xc]",
    "mov     r8, qword [rsp+0x40 {var_2f8}]",
    "add     eax, dword [rbx+0xc]",
    "movsxd  r15, eax",
    "movsxd  rax, dword [r8+0x7c]",
    "cmp     r15, rax",
    "jg      0x14003d1e1",
    "mov     rcx, rbx",
    "call    sub_140030f10",
    "cmp     eax, r15d",
    "jne     0x140039696",
    "addsd   xmm0, xmm2",
    "sub     edx, r15d",
    "je      0x140038706",
    "mov     r9, qword [rsp+0x80 {var_2b8}]",
    "mov     rax, 0x8000000000000000",
    "cmp     r8, rax",
    "jne     0x140038627",
    "xor     r10d, r10d  {0x0}",
    "sub     ecx, r15d",
    "je      0x140038574",
    "cmp     r11, 0x40",
    "jl      0x140038842",
    "mov     rcx, r11",
    "mov     eax, 0xcb",
    "sub     al, dl",
    "neg     rcx",
    "mov     dl, al",
    "mov     rax, r11",
    "lea     r11d, [r10+0x40]",
    "cmp     rax, 0xffffffffffffffc0",
    "cmovg   r11, rcx",
    "movzx   eax, byte [rsi]",
    "lea     rdx, [rel __dos_header]",
    "movzx   r8d, byte [rax+rdx+0xd7204]",
    "movzx   eax, byte [rsi]",
    "lea     rdx, [rel __dos_header]",
    "movzx   r8d, byte [rax+rdx+0xd71fc]",
    "jmp     0x140038c34",
    "mov     word [r12+0x8], r13w",
    "mov     eax, 0x20",
    "mov     word [rbp+0x8], bx",
    "test    byte [rsi+0x2], al",
    "je      0x140038d7c",
    "test    bl, 0x2c",
    "je      0x140038d2d",
    "mov     r8b, r15b  {0x1}",
    "mov     rcx, r12",
    "call    sub_140030f6c",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "movzx   r11d, r13w",
    "xor     r11w, word [r12+0x8]",
    "mov     eax, 0x3e40",
    "and     r11w, ax",
    "mov     eax, 0x2",
    "xor     r13w, r11w",
    "jge     0x140038cb9",
    "mov     ecx, r15d  {0x1}",
    "xor     r10d, r10d  {0x0}",
    "xor     edx, edx  {0x0}",
    "mov     rcx, rbp",
    "call    sub_1400379cc",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "jmp     0x140038066",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "cmp     dword [rsp+0x68 {i_46}], r10d",
    "je      0x140038066",
    "movsxd  rax, dword [rsp+0x58 {var_2e0}]",
    "movsxd  rcx, r12d",
    "mov     r15d, 0x1",
    "add     rax, rcx",
    "imul    rax, rax, 0x38",
    "test    byte [rax+r14+0x8], r15b",
    "jne     0x140038eb9",
    "cmp     rbp, r10",
    "je      0x140038df1",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "movsxd  rax, r13d",
    "mov     ebp, dword [rbx+rax*4+0x78]",
    "mov     eax, dword [r12]",
    "cmp     dword [rbx+0x48], eax",
    "jae     0x140039611",
    "mov     rbp, qword [rbx+0x38]",
    "mov     rcx, rbp",
    "call    sub_1400296c8",
    "mov     eax, dword [rbp+0x40]",
    "xor     r10d, r10d  {0x0}",
    "mov     dword [rbx+0x70], eax",
    "mov     rax, qword [rbp+0x88]",
    "movzx   ecx, word [rbp+0x44]",
    "mov     edx, dword [rax+0x58]",
    "sub     edx, dword [rbp+0x38]",
    "cmp     ecx, edx",
    "jle     0x14003933b",
    "mov     eax, 0x3",
    "cmp     byte [rbx], al",
    "jne     0x1400392f6",
    "mov     word [rbx+0x8], ax",
    "mov     eax, r12d",
    "mov     ecx, r10d  {0x1}",
    "add     r14, rax",
    "mov     eax, r13d",
    "shr     rax, 0x7",
    "xor     r12d, r12d  {0x0}",
    "jmp     0x140039ae0",
    "movsxd  rax, dword [rbx-0x24]",
    "lea     r13d, [r13+rax*2]",
    "cmp     r14, r8",
    "je      0x140039abf",
    "cmp     rdx, 0x7fff",
    "ja      0x1400399dc",
    "mov     rax, r8",
    "and     rax, r10",
    "cmp     rax, r8",
    "jne     0x1400399c1",
    "cmp     r15d, 0x7e",
    "jle     0x140039b3a",
    "sub     rbx, 0x38",
    "xor     r8d, r8d  {0x0}",
    "jmp     0x14003995f",
    "cmp     qword [r14+0x18], r10",
    "jne     0x140039ee6",
    "cmp     r15d, ebx",
    "je      0x14003d8ff",
    "jmp     0x14003804a",
    "inc     dword [r13+0x27c]",
    "mov     byte [r13+0x5f], r10b  {0x0}",
    "mov     byte [r13+0x67], 0x1",
    "jmp     0x140039dfc",
    "lea     rdx, [rel data_1400f4398]  {\"database schema has changed\"}",
    "mov     rcx, r13",
    "call    sub_140016dac",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     qword [r11+0xa8], rax",
    "movsxd  rdx, dword [rsi+0x4]",
    "mov     rax, qword [r13+0x20]",
    "mov     rcx, rdx",
    "shl     rcx, 0x5",
    "mov     rcx, qword [rcx+rax+0x18]",
    "cmp     dword [rcx], ebx",
    "je      0x14003a268",
    "mov     rcx, r13",
    "call    sub_1400169a8",
    "cmp     byte [r13+0x5f], r10b",
    "je      0x14003a146",
    "and     dword [rax+0xc8], 0xfffffffd",
    "or      dword [rax+0xc8], r15d",
    "mov     rax, qword [rax+0x10]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "and     dword [r11+0xc8], 0xfffffffc",
    "jmp     0x14003a283",
    "mov     edx, dword [rsi+0x4]",
    "mov     r9d, r15d",
    "mov     r8d, r12d",
    "mov     rcx, r11",
    "mov     byte [rsp+0x20 {var_318}], r10b  {0x0}",
    "call    sub_14003789c",
    "mov     rbx, rax",
    "xor     eax, eax  {0x0}",
    "cmp     rbx, rax",
    "je      0x140039696",
    "mov     r12d, dword [rsi+0x10]",
    "mov     rax, qword [rbx+0x10]",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     qword [rdi+0x28], rax",
    "mov     qword [rbx+0x10], rdi",
    "mov     byte [rdi], r15b  {0x1}",
    "mov     edi, r10d  {0x0}",
    "mov     r14d, 0x20",
    "mov     eax, 0x7",
    "mov     edi, eax  {0x7}",
    "mov     dword [rsp+0x30 {var_308}], eax  {0x7}",
    "jmp     0x14003a636",
    "mov     r12, qword [rbx+0x10]",
    "mov     rdi, qword [rbx+0x38]",
    "mov     dword [rbx+0x4c], r15d  {0x1}",
    "mov     rbp, qword [r12+0x8]",
    "cmp     qword [rbp+0x60], r10",
    "jne     0x14003a86b",
    "movzx   r8d, word [rsi+0x2]",
    "mov     rcx, qword [rbx+0x10]",
    "lea     rdx, [rbx+0x4c]",
    "or      r8d, 0x2",
    "call    sub_14002e86c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003a813",
    "mov     rcx, qword [r12+0x38]",
    "xor     edx, edx  {0x0}",
    "mov     dword [rsp+0x54 {var_2e4}], r10d  {0x0}",
    "call    sub_14002a6d8",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "je      0x14003ac95",
    "jne     0x14003ac42",
    "mov     rcx, qword [r12+0x38]",
    "xor     edx, edx  {0x0}",
    "mov     dword [rsp+0x54 {var_2e4}], r10d  {0x0}",
    "call    sub_14002a57c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "je      0x14003ac95",
    "jne     0x14003abe5",
    "mov     r15d, 0x1",
    "jmp     0x14003d0c6",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "cmp     r15d, r10d",
    "je      0x140038066",
    "comisd  xmm1, xmm0",
    "jbe     0x14003aaf7",
    "test    bl, bpl",
    "je      0x14003aaf7",
    "mov     r15, rbx  {0x1}",
    "cmp     ebp, 0x18",
    "jge     0x14003d0c3",
    "mov     eax, dword [rsp+0xd4 {var_264}]",
    "mov     ecx, r10d  {0x0}",
    "mov     byte [rbp+0x3], r10b  {0x0}",
    "cmp     eax, r10d",
    "mov     dword [rbp+0x2c], eax",
    "mov     eax, r15d  {0x1}",
    "sete    cl",
    "mov     dword [rbp+0x28], r10d  {0x0}",
    "sub     al, cl",
    "mov     byte [rbp+0x2], al",
    "cmp     byte [rsi], 0x1d",
    "jne     0x14003ae5b",
    "mov     ebx, r15d  {0x1}",
    "movzx   eax, word [rdi+0x10]",
    "add     edx, r15d",
    "add     rcx, 0x38",
    "cmp     edx, eax",
    "jl      0x14003adc3",
    "mov     r11w, word [rsp+0x220 {var_118}]",
    "add     ebp, r15d",
    "cmp     ebp, 0x64",
    "jl      0x14003b124",
    "inc     rax",
    "cmp     rbx, rax",
    "cmovl   rbx, rax",
    "xor     r10d, r10d  {0x0}",
    "mov     qword [rbp], rbx",
    "mov     rbp, rcx  {0x2}",
    "mov     qword [rsp+0x60 {var_2d8}], rbx",
    "mov     rax, rcx",
    "mov     rcx, qword [rcx+0x8]",
    "mov     rbp, rdx",
    "imul    rbp, rbp, 0x38",
    "add     rbp, qword [rax+0x20]",
    "jmp     0x14003b0c0",
    "mov     dword [rsp+0x1a0 {var_198_2}], r10d  {0x0}",
    "mov     eax, dword [rdx]",
    "mov     dword [rsp+0x1a0 {var_198_1}], eax",
    "jmp     0x14003b261",
    "mov     eax, 0x4000",
    "test    word [rdx+0x8], ax",
    "je      0x14003b259",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "jmp     0x140038052",
    "mov     rax, qword [rbp+0x58]",
    "mov     r9, qword [r12]",
    "mov     r8, r13",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     edx, 0x9",
    "mov     qword [rsp+0x20 {var_318}], rax",
    "mov     rcx, qword [r13+0x118]",
    "call    r10",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "jmp     0x1400387bf",
    "jmp     0x14003804a",
    "cmp     byte [rbx+0x2], r10b",
    "je      0x14003b668",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "mov     qword [rbp], rax",
    "jmp     0x140038057",
    "jmp     0x140038af5",
    "mov     rax, qword [rbx+0x88]",
    "cmp     byte [rax+0x8], r10b",
    "je      0x140038af5",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     r9d, r10d  {0x0}",
    "mov     r9d, dword [rbp+0x2c]",
    "jmp     0x14003baa0",
    "xor     r10d, r10d  {0x0}",
    "mov     rcx, qword [rsp+0x340 {arg_8}]",
    "mov     rdx, rsi",
    "call    sub_140037bb4",
    "mov     rcx, qword [rsp+0x90 {var_2a8}]",
    "mov     qword [rax], rcx",
    "jmp     0x14003874b",
    "movsxd  rcx, dword [rsi+0xc]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     rax, qword [r11+0x78]",
    "mov     rdx, qword [rax+rcx*8]",
    "mov     rax, qword [rsp+0x90 {var_2a8}]",
    "mov     byte [rdx+0x2], r10b  {0x0}",
    "mov     qword [rdx+0x58], rax",
    "mov     byte [rdx+0x3], r15b  {0x1}",
    "mov     rax, qword [rsi+0x10]",
    "mov     qword [rdx+0x30], rbx",
    "mov     qword [rdx+0x20], rax",
    "jmp     0x140038057",
    "mov     rax, qword [rcx+0x10]",
    "cmp     dword [rax+0x38], r8d",
    "jne     0x14003bd80",
    "mov     rax, qword [rdx+rbp+0x18]",
    "mov     rcx, qword [rax+0x28]",
    "jmp     0x14003bda4",
    "mov     ecx, 0x15f51",
    "call    sub_140084e38",
    "mov     edi, eax  {0xb}",
    "mov     dword [rsp+0x30 {var_308}], eax  {0xb}",
    "cmp     qword [rcx+0x28], rdx",
    "jne     0x14003c104",
    "lea     rdx, [rax+0x40]",
    "mov     rcx, qword [rax+0x40]",
    "mov     qword [rdx], rcx",
    "mov     ebx, 0x4",
    "mov     qword [rax], rbp",
    "mov     word [rax+0x8], bx  {0x4}",
    "jmp     0x14003c339",
    "mov     rdx, rbp",
    "mov     rcx, rax",
    "call    sub_1400315a0",
    "xor     r10d, r10d  {0x0}",
    "mov     eax, 0x2400",
    "test    word [rbx+0x8], ax",
    "jne     0x14003c4d3",
    "mov     rcx, qword [rbx]",
    "mov     eax, 0x2400",
    "test    word [rcx+0x8], ax",
    "jne     0x14003ca67",
    "cmp     dword [rsi-0x14], r10d",
    "je      0x14003ca4f",
    "jmp     0x140038671",
    "mov     rax, qword [rbp+0x28]",
    "mov     ecx, r10d  {0x0}",
    "cmp     edx, dword [rax+0x7c]",
    "setg    cl",
    "jmp     0x14003cb71",
    "add     edx, dword [rbp]",
    "mov     edx, ebx",
    "mov     rcx, rbp",
    "call    sub_140023170",
    "mov     ecx, 0xa02",
    "mov     word [r13+0x8], cx  {0xa02}",
    "cmp     eax, 0x6",
    "jne     0x14003cd8c",
    "mov     ebx, r12d",
    "cmp     byte [r8+0x5f], dl",
    "je      0x14003da7e",
    "cmp     ebx, r9d",
    "jne     0x14003cd65",
    "cmp     byte [rbp+0x8], dl",
    "jne     0x14003cce5",
    "mov     dl, cl",
    "mov     rcx, rbx",
    "call    sub_140018a98",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x140038066",
    "mov     al, byte [rsi+0x2]",
    "lea     r9, [rsp+0x128 {var_210}]",
    "mov     rcx, rbx",
    "mov     byte [r13+0x66], al",
    "call    qword [r10+0x68]",
    "mov     rcx, qword [rsp+0x340 {arg_8}]",
    "mov     rdx, rbx",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     byte [r13+0x66], bpl",
    "call    sub_140035b88",
    "xor     r10d, r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x14003d3d1",
    "mov     qword [r8+rcx*8], rax",
    "add     rcx, r15",
    "add     rax, 0x38",
    "cmp     rcx, rdx",
    "jl      0x14003d377",
    "jmp     0x140038052",
    "mov     dl, cl",
    "mov     rcx, rbx",
    "call    sub_140018a98",
    "xor     r10d, r10d  {0x0}",
    "add     edx, r15d",
    "add     rax, 0x18",
    "cmp     edx, dword [r11+0x90]",
    "jl      0x14003d769",
    "mov     dword [rax+rcx+0x4], r10d  {0x0}",
    "mov     ebx, 0x4",
    "jmp     0x14003d72d",
    "mov     rdx, rbx",
    "mov     rcx, r13",
    "call    sub_1400169a8",
    "xor     r10d, r10d  {0x0}",
    "sub     rsi, r12",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "mov     edi, 0x64",
    "imul    rsi",
    "sar     rdx, 0x2",
    "mov     rax, rdx",
    "shr     rax, 0x3f",
    "add     rdx, rax",
    "add     edx, r15d",
    "mov     dword [r12+0x34], edx",
    "jmp     0x140038a32",
    "mov     rdx, qword [r13+0xf0]",
    "xor     r9d, r9d  {0x0}",
    "mov     r8, r11",
    "mov     ecx, ebx  {0x4}",
    "call    qword [r13+0xe8]",
    "add     edi, r15d",
    "add     rbx, 0x38",
    "cmp     edi, dword [rsi+0x8]",
    "jl      0x14003db3a",
    "lea     rcx, [rbx-0x8]",
    "call    sub_140030e58",
    "mov     rcx, r11",
    "call    sub_140032200",
    "mov     edi, 0x5",
    "jmp     0x14003d8d9",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     edi, ecx  {0x5}",
    "mov     dword [r12+0x38], ecx  {0x5}",
    "jmp     0x140038a32",
    "mov     rcx, r13",
    "call    sub_1400169a8",
    "xor     eax, eax",
    "cmp     rbp, rbx",
    "lea     edx, [r15+0x3]",
    "mov     r8d, eax  {0x0}",
    "sete    r8b",
    "mov     rcx, rbp",
    "call    sub_140030d38",
    "xor     r11d, r11d  {0x0}",
    "cmp     eax, r11d",
    "jne     0x140039696",
    "mov     r12w, word [rbx+0x8]",
    "mov     eax, 0xfffd",
    "and     r12w, ax",
    "mov     eax, 0x3e40",
    "movsd   qword [r12], xmm0",
    "and     word [r12+0x8], ax",
    "mov     eax, 0x8",
    "or      word [r12+0x8], ax",
    "jmp     0x14003865f",
    "subsd   xmm0, xmm2",
    "jmp     0x140038710",
    "sub     edx, r15d",
    "je      0x140038700",
    "neg     r8",
    "xor     r10d, r10d  {0x0}",
    "cmp     r9, r10",
    "jge     0x14003868e",
    "cmp     r8, r10",
    "jle     0x1400385a5",
    "cmp     ecx, r15d",
    "je      0x140038542",
    "mov     rcx, r11",
    "cmp     dl, 0x65",
    "jne     0x140038852",
    "cmp     rbx, r10",
    "jge     0x14003883a",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "cmp     r8d, r10d",
    "jne     0x14003d79a",
    "movsxd  rdx, dword [rsi+0x8]",
    "mov     eax, 0x8",
    "mov     r9d, ecx",
    "mov     dword [rsp+0x358 {arg_20}], ecx",
    "imul    rdx, rdx, 0x38",
    "add     rdx, r14",
    "test    byte [rsi+0x2], al",
    "je      0x140038c7d",
    "mov     r8b, r15b  {0x1}",
    "mov     rcx, rbp",
    "call    sub_140030f6c",
    "movzx   r11d, bx",
    "mov     eax, 0x3e40",
    "xor     r11w, word [rbp+0x8]",
    "and     r11w, ax",
    "xor     bx, r11w",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x140038b50",
    "or      ecx, 0xffffffff  {0xffffffff}",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x140038d46",
    "neg     r9d",
    "mov     dword [rsp+0x358 {arg_20}], r9d",
    "jmp     0x140038066",
    "neg     r9d",
    "mov     dword [rsp+0x358 {arg_20}], r9d",
    "movsxd  rax, dword [rsp+0x6c {i_31}]",
    "add     rax, rcx",
    "imul    rax, rax, 0x38",
    "test    byte [rax+r14+0x8], r15b",
    "je      0x140038ec4",
    "movsxd  rcx, r13d",
    "mov     eax, dword [r12+rcx*4+0x4]",
    "cmp     dword [rbx+0x74], eax",
    "jb      0x140039738",
    "mov     rcx, r14",
    "call    sub_140031524",
    "mov     ebp, r10d  {0x0}",
    "jmp     0x1400395e7",
    "mov     rax, qword [rbx+0x68]",
    "mov     qword [rsp+0x78 {var_2c0}], rax",
    "cmp     rax, r10",
    "jne     0x140039437",
    "mov     r8, qword [rsp+0x40 {var_2f8}]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     dword [rbx+0x74], ecx",
    "mov     rax, qword [rbp+0x38]",
    "mov     qword [rbx+0x68], rax",
    "mov     eax, dword [r8+0x7c]",
    "cmp     dword [rbx+0x70], eax",
    "ja      0x14003d1e9",
    "mov     ecx, edx",
    "cmp     edx, r10d",
    "cmovl   ecx, r10d  {0x0}",
    "mov     rcx, r14",
    "movsxd  rcx, dword [rbx+0x2c]",
    "imul    rcx, rcx, 0x38",
    "mov     eax, dword [rcx+rdx+0xc]",
    "mov     dword [rbx+0x74], eax",
    "mov     dword [rbx+0x70], eax",
    "mov     rax, qword [rcx+rdx+0x10]",
    "mov     qword [rbx+0x68], rax",
    "jmp     0x140039360",
    "cmp     rax, r12",
    "jne     0x140039ad9",
    "add     qword [rsp+0x78 {var_2c0}], rax",
    "lea     rcx, [rbx-0x24]",
    "call    sub_140030f10",
    "xor     r11d, r11d  {0x0}",
    "cmp     eax, r11d",
    "jne     0x140039696",
    "cmp     rdx, 0x7fffff",
    "ja      0x1400399ec",
    "mov     eax, 0x2",
    "jmp     0x1400399fa",
    "add     r14, r10",
    "mov     dword [rbx], r10d  {0x1}",
    "jmp     0x140039af0",
    "mov     eax, 0x4",
    "cmp     r9, rax",
    "jl      0x1400399c1",
    "add     r15d, r10d",
    "mov     edx, r10d  {0x1}",
    "movsxd  rax, r15d",
    "jmp     0x140039b16",
    "mov     cx, word [rbx-0x1c]",
    "test    r10b, cl",
    "je      0x140039980",
    "mov     dword [rsp+0x50 {var_2e8}], r10d  {0x0}",
    "mov     rbp, rbx  {0x1}",
    "cmp     byte [r12+0x67], r10b",
    "je      0x140039ee6",
    "lea     rdx, [rel data_1400f4298]  {\"cannot release savepoint - SQL s\u2026\"}",
    "mov     rcx, r11",
    "call    sub_140032200",
    "mov     edi, 0x5",
    "mov     rax, qword [r13+0x270]",
    "mov     qword [rbx+0x18], rax",
    "mov     rax, qword [r13+0x288]",
    "mov     qword [r13+0x270], rbx",
    "mov     qword [rbx+0x8], rax",
    "mov     rax, qword [r13+0x290]",
    "mov     qword [rbx+0x10], rax",
    "jmp     0x14003a0aa",
    "and     dword [r11+0xc8], 0xfffffffd",
    "or      dword [r11+0xc8], r15d",
    "mov     edi, 0x11",
    "mov     dword [rsp+0x30 {var_308}], edi  {0x11}",
    "xor     r10d, r10d  {0x0}",
    "mov     rcx, r13",
    "call    sub_14004e2cc",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "cmp     dword [r11+0x40], r10d",
    "jne     0x14003a165",
    "cmp     dword [r13+0xcc], r15d",
    "jle     0x14003a1e1",
    "or      dword [rbx+0x8], ebp",
    "lea     ecx, [rax+0x1]",
    "mov     rax, qword [rbx+0x38]",
    "cmp     r13d, ecx",
    "mov     byte [rbx+0x2], cl  {0x1}",
    "mov     dword [rbx+0x4c], r13d",
    "jge     0x14003a492",
    "mov     rax, qword [rax+0x28]",
    "cmp     rax, r10",
    "jne     0x14003a604",
    "or      byte [rax+0x1], r14b",
    "or      byte [rdi+0x1], r14b",
    "mov     eax, dword [rbp+0x3c]",
    "mov     byte [rdi+0x54], 0xff",
    "mov     qword [rdi+0x80], r10  {0x0}",
    "neg     eax",
    "mov     qword [rdi+0x8], r12",
    "mov     qword [rdi+0x20], rbp",
    "sbb     ecx, ecx",
    "mov     byte [rdi+0x1], r15b",
    "mov     byte [rdi+0x2], r10b  {0x0}",
    "and     ecx, r15d",
    "mov     dword [rdi+0x50], ecx",
    "mov     rax, qword [rbp+0x10]",
    "cmp     rax, r10",
    "je      0x14003a8bd",
    "mov     ecx, dword [rbp+0x30]",
    "call    sub_14001e150",
    "xor     r10d, r10d  {0x0}",
    "mov     qword [rbp+0x60], rax",
    "cmp     rax, r10",
    "je      0x14003a858  {\"L9U`u\"}",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     byte [rbx+0x4], r10b  {0x0}",
    "jmp     0x14003a8d8",
    "mov     r13d, dword [rbx+0x4c]",
    "mov     rbp, qword [rbx+0x38]",
    "mov     r12, qword [rbx+0x10]",
    "cmp     r13d, r15d",
    "jge     0x14003a760",
    "cmp     eax, 0x65",
    "jne     0x14003aab5",
    "mov     rax, qword [r12+0x38]",
    "mov     ecx, r10d  {0x0}",
    "cmp     byte [rax], r10b",
    "setne   cl",
    "mov     dword [rsp+0x54 {var_2e4}], ecx",
    "jmp     0x14003ac8a",
    "cmp     ebp, 0x16",
    "je      0x14003ac56",
    "cmp     eax, 0x65",
    "jne     0x14003aab5",
    "mov     dword [rsp+0x54 {var_2e4}], r10d  {0x0}",
    "jmp     0x14003ac95",
    "cmp     ebp, 0x19",
    "je      0x14003abef",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "jmp     0x14003ac2c",
    "add     rsi, 0x18",
    "jmp     0x140038066",
    "mov     rcx, qword [r12+0x38]",
    "lea     rax, [rsp+0x54 {var_2e4}]",
    "xor     r9d, r9d  {0x0}",
    "mov     r8, r14",
    "xor     edx, edx  {0x0}",
    "mov     qword [rsp+0x20 {var_318}], rax {var_2e4}",
    "call    sub_140029f9c",
    "xor     r10d, r10d  {0x0}",
    "mov     qword [r12+0x58], r14",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003aab5",
    "test    bl, bpl",
    "jne     0x14003aaf7",
    "sub     ebp, ebx",
    "jmp     0x14003aaf7",
    "mov     rcx, qword [r12+0x38]",
    "lea     rdx, [rsp+0x54 {var_2e4}]",
    "call    sub_140029f40",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "je      0x14003ac8a",
    "cmp     ebx, r10d",
    "jne     0x14003ac2c",
    "cmp     ecx, r10d",
    "test    byte [rcx], r15b",
    "jne     0x14003add9",
    "jmp     0x14003addc",
    "lea     rdx, [rsp+0x60 {var_2d8}]",
    "mov     ecx, 0x8",
    "call    sub_1400188ac",
    "mov     rbx, qword [rsp+0x60 {var_2d8}]",
    "mov     rcx, qword [r12+0x38]",
    "mov     rax, 0x3fffffffffffffff",
    "xor     r9d, r9d  {0x0}",
    "xor     edx, edx  {0x0}",
    "and     rbx, rax",
    "lea     rax, [rsp+0x50 {var_2e8}]",
    "add     rbx, r15",
    "mov     qword [rsp+0x20 {var_318}], rax {var_2e8}",
    "mov     r8, rbx",
    "mov     qword [rsp+0x60 {var_2d8}], rbx",
    "call    sub_140029f9c",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "lea     edi, [r10+0xd]",
    "jmp     0x140038941",
    "mov     rcx, rbp",
    "call    sub_140031230",
    "mov     ecx, 0x3e40",
    "and     word [rbp+0x8], cx",
    "mov     ecx, 0x4",
    "mov     qword [rbp], rax",
    "or      word [rbp+0x8], cx",
    "mov     rcx, 0x7fffffffffffffff",
    "cmp     rax, rcx",
    "je      0x14003d9ce",
    "cmp     rbp, r10",
    "je      0x14003804a",
    "mov     qword [rsp+0x178 {var_1c0}], r10  {0x0}",
    "mov     rcx, qword [rbx+0x38]",
    "lea     rdx, [rsp+0x178 {var_1c0}]",
    "and     r8d, 0xa",
    "call    sub_14002dfd8",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     byte [rbx+0x3], r10b  {0x0}",
    "mov     dword [rbx+0x28], r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "mov     rbx, qword [rbx+0x38]",
    "mov     rcx, rbx",
    "call    sub_1400296c8",
    "mov     rax, qword [rbx+0x30]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d  {0x0}",
    "mov     word [rbp+0x8], r15w  {0x1}",
    "jmp     0x140038057",
    "movsx   r9d, byte [rbx+0x54]",
    "movzx   ecx, word [rax+0x18]",
    "mov     r8b, r10b  {0x0}",
    "cmp     r9d, r10d",
    "jle     0x14003b801",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     edi, eax",
    "jmp     0x140038aec",
    "mov     rcx, qword [rbp+0x38]",
    "lea     rdx, [rsp+0x288 {var_b0}]",
    "and     r8d, 0xa",
    "call    sub_14002dfd8",
    "xor     r10d, r10d  {0x0}",
    "mov     dword [rbp+0x28], r10d  {0x0}",
    "jmp     0x14003af84",
    "mov     rcx, qword [rcx]",
    "mov     dword [rax+0x38], r9d",
    "cmp     rcx, r10",
    "jne     0x14003bd93",
    "mov     rax, qword [rdx+0x28]",
    "mov     qword [rcx+0x28], rax",
    "mov     rcx, rbx",
    "call    sub_14003118c",
    "xor     r10d, r10d  {0x0}",
    "cmp     dword [rbx+0x20], r10d",
    "je      0x14003c4de",
    "call    sub_14003118c",
    "xor     r10d, r10d  {0x0}",
    "cmp     dword [rcx+0x20], r10d",
    "je      0x14003ca6f",
    "mov     byte [rbx+0x28], r10b  {0x0}",
    "movsxd  rax, dword [rsi-0x14]",
    "mov     ecx, 0x2400",
    "imul    rax, rax, 0x38",
    "add     rax, r14",
    "test    word [rax+0x8], cx",
    "je      0x14003ca43",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "cmp     ecx, r10d",
    "jne     0x14003d1e9",
    "lea     rcx, [rel __dos_header]",
    "cdqe    ",
    "mov     rcx, qword [rcx+rax*8+0xd84c8]",
    "xor     eax, eax",
    "mov     rcx, rax  {0x0}",
    "jmp     0x14003cd9d",
    "lea     rax, [rel data_1400f4420]",
    "lea     r8, [rel data_1400f4428]  {\"out of\"}",
    "cmp     ebx, r9d",
    "mov     edi, r15d  {0x1}",
    "lea     rdx, [rel data_1400f4430]  {\"cannot change %s wal mode from w\u2026\"}",
    "cmove   r8, rax  {data_1400f4420, \"into\"}",
    "jmp     0x14003da6c",
    "cmp     dword [r8+0xcc], r15d",
    "jg      0x14003da7e",
    "lea     eax, [r9-0x3]  {0x2}",
    "cmp     dword [rcx], eax",
    "jl      0x14003cce2",
    "cmp     dil, 0x13",
    "jne     0x14003d423",
    "cmp     dword [rsi+0x4], r10d",
    "je      0x14003d3d1",
    "mov     rcx, qword [r11+0x88]",
    "cmp     byte [rax+rcx], 0x11",
    "jne     0x14003d77b",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     eax, 0x1000",
    "test    word [rbx], ax",
    "je      0x14003db5d",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "xor     r10d, r10d",
    "lea     ebx, [r10+0x4]",
    "mov     eax, 0x3e40",
    "and     word [rbp+0x8], ax",
    "lea     eax, [r11+0x2]",
    "or      word [rbp+0x8], ax",
    "cmp     rbp, rbx",
    "je      0x14003840a",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "xor     r10d, r10d  {0x0}",
    "mulsd   xmm0, xmm2",
    "jmp     0x140038710",
    "sub     edx, r15d",
    "je      0x1400386f0",
    "sub     r9, rax",
    "jmp     0x14003864a",
    "jge     0x140038605",
    "mov     rax, 0x7fffffffffffffff",
    "cqo     ",
    "idiv    r8",
    "cmp     r9, rax",
    "jg      0x14003868e",
    "cmp     r8, r10",
    "je      0x14003873e",
    "cmp     r8, r10",
    "je      0x14003873e",
    "mov     r8, rbx",
    "shr     r8, cl",
    "cmp     rbx, r10",
    "jge     0x14003886f",
    "shl     rbx, cl",
    "mov     r8, rbx",
    "jmp     0x14003886f",
    "mov     eax, r10d  {0x0}",
    "cmp     dl, 0x65",
    "je      0x14003883a",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "jmp     0x140038057",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     eax, 0x3e40",
    "mov     ebx, 0x4",
    "and     word [rdx+0x8], ax",
    "or      word [rdx+0x8], bx",
    "movsxd  rax, r8d",
    "mov     qword [rdx], rax",
    "jmp     0x140037d30",
    "cmp     byte [rsi], 0x35",
    "mov     eax, r10d  {0x0}",
    "sete    al",
    "cmp     eax, r8d",
    "je      0x140038e60",
    "mov     al, byte [rsp+0x348 {i_33}]",
    "mov     byte [r14+0xa], al",
    "test    byte [rsi+0x2], 0xc0",
    "je      0x14003975f",
    "mov     r12d, dword [r12+rcx*4]",
    "add     r12, qword [rbx+0x68]",
    "cmp     ebp, 0xc",
    "jae     0x140039661",
    "movzx   eax, word [rbx+0x52]",
    "cmp     eax, r13d",
    "jg      0x14003961d",
    "movzx   ecx, word [rbx+0x52]",
    "mov     r8, qword [rsp+0x60 {var_2d8}]",
    "mov     r14d, 0x1",
    "mov     r15d, dword [r12+rcx*4]",
    "mov     r12d, dword [rbx+0x48]",
    "mov     edx, dword [r8]",
    "add     r12, rax",
    "add     rdx, rax",
    "mov     dword [rsp+0x58 {var_2e0}], ecx",
    "mov     r13, rcx",
    "lea     rdi, [rel __dos_header]",
    "lea     esi, [r14+0x7f]  {0x80}",
    "mov     qword [rsp+0x70 {i_32}], rdx",
    "xor     edx, edx  {0x0}",
    "lea     rcx, [rsp+0x1a8 {var_190}]",
    "lea     r8d, [rdx+0x38]",
    "call    memset",
    "mov     r8d, dword [r12]",
    "mov     rcx, qword [rbx+0x38]",
    "lea     r9, [rsp+0x1a8 {var_190}]",
    "xor     edx, edx  {0x0}",
    "call    sub_140031b74",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "mov     eax, dword [r11+0x30]",
    "mov     rcx, qword [rbx+0x68]",
    "mov     dword [rbx+0x28], eax",
    "mov     eax, 0x80",
    "cmp     byte [rcx], al",
    "jae     0x140039380",
    "add     ecx, r10d",
    "shr     rax, 0x7",
    "mov     r11, qword [rsp+0x60 {var_2d8}]",
    "add     r15d, ecx",
    "mov     dword [rbx], r13d",
    "add     r12d, dword [rbx-0x24]",
    "mov     r9, qword [rsp+0x70 {i_32}]",
    "lea     r10d, [r11+0x1]",
    "jmp     0x140039ac4",
    "cmp     rdx, 0x7fffffff",
    "ja      0x1400399ff",
    "mov     eax, 0x3",
    "jmp     0x1400399fa",
    "add     r14, rax",
    "jmp     0x140039a48",
    "lea     eax, [rdx+0x8]",
    "jmp     0x140039a48",
    "mov     r8, qword [rsp+0x40 {var_2f8}]",
    "movsxd  rax, dword [r8+0x7c]",
    "cmp     rcx, rax",
    "jg      0x14003d1e1",
    "mov     rax, qword [r9+0x18]",
    "mov     qword [r9+0x10], rax",
    "jmp     0x140039bbd",
    "shr     rax, 0x7",
    "cmp     rax, r12",
    "jne     0x140039b13",
    "mov     r12d, r10d  {0x0}",
    "mov     r12d, dword [r12+0x2c]",
    "and     r12d, ebp",
    "cmp     dword [rax+0x28], r10d",
    "mov     ebp, r10d  {0x0}",
    "jle     0x140039f73",
    "mov     rbp, rbx  {0x1}",
    "mov     dword [rsp+0x50 {var_2e8}], ebx  {0x1}",
    "cmp     r15d, ebp",
    "jne     0x140039eee",
    "mov     r8d, dword [r11+0x40]",
    "xor     edx, edx  {0x0}",
    "mov     rcx, r13",
    "sub     r8d, r15d",
    "call    sub_140070818",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x14003a1c3",
    "add     dword [r13+0x280], r15d",
    "mov     ecx, dword [r13+0x280]",
    "add     ecx, dword [r13+0x27c]",
    "mov     dword [r11+0x40], ecx",
    "mov     rcx, qword [rsp+0x70 {i_32}]",
    "mov     r9, r14",
    "mov     r8d, edi",
    "mov     edx, r13d",
    "mov     qword [rsp+0x20 {var_318}], rax",
    "call    sub_140029568",
    "mov     ecx, 0x108ea",
    "call    sub_140084e38",
    "jmp     0x14003a4aa",
    "cmp     dword [rax+0x50], ebp",
    "jne     0x14003a611",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "mov     rax, qword [rbp+0x10]",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     qword [rdi+0x28], rax",
    "mov     qword [rbp+0x10], rdi",
    "mov     byte [rdi], r15b  {0x1}",
    "mov     edi, r10d  {0x0}",
    "mov     r13d, 0x20",
    "cmp     qword [rbp+0x60], r10",
    "jne     0x14003a86b",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rax], rcx  {0x0}",
    "lea     eax, [rcx+0x4]",
    "add     qword [rbp+0x60], rax",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "mov     rdi, qword [r12+0x8]",
    "mov     qword [rsp+0x70 {i_32}], rdi",
    "cmp     qword [rdi+0x60], r10",
    "jne     0x14003a7a3",
    "mov     ecx, 0x108ea",
    "call    sub_140084e38",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax  {0xb}",
    "mov     dword [rsp+0x30 {var_308}], eax  {0xb}",
    "jmp     0x14003a813",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     dword [rsp+0x54 {var_2e4}], ebx  {0x1}",
    "lea     r15d, [rax-0x64]",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     dword [rsp+0x54 {var_2e4}], r15d",
    "add     ebp, ebx",
    "jmp     0x14003aaf7",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "cmp     ecx, r10d",
    "je      0x14003d79a",
    "mov     al, byte [rsi+0x2]",
    "mov     r9, qword [rbp]",
    "mov     rcx, qword [r13+0x118]",
    "lea     ebx, [r10+0x4]",
    "mov     r8, r12",
    "and     al, bl",
    "neg     al",
    "mov     rax, qword [rsp+0x180 {var_1b8_1}]",
    "sbb     edx, edx",
    "mov     qword [rsp+0x20 {var_318}], rax",
    "and     edx, 0x5",
    "add     edx, 0x12",
    "call    qword [r13+0x120]",
    "jmp     0x1400387bf",
    "cmp     rcx, r10",
    "jl      0x140038af5",
    "movzx   eax, r8b",
    "add     r8b, r15b",
    "mov     rdx, qword [rbx+rax*8+0x90]",
    "movzx   eax, word [rdx+0x18]",
    "imul    rcx, rax",
    "movzx   eax, r8b",
    "cmp     eax, r9d",
    "jl      0x14003b7e1",
    "mov     rax, qword [rcx+0x10]",
    "cmp     dword [rax+0x58], r8d",
    "jne     0x14003bda1",
    "lea     r8d, [r15+r12]",
    "mov     byte [rsp+0x350 {arg_18}], r8b",
    "jmp     0x14003804a",
    "add     dword [r11+0x110], r15d",
    "mov     rax, qword [r11+0x100]",
    "lea     rdx, [r12+0x70]",
    "mov     qword [r12+0x8], rax",
    "mov     rax, qword [r13+0x38]",
    "mov     qword [rsp+0x48 {i_30}], rdx",
    "mov     qword [r12+0x40], rax",
    "mov     eax, dword [r11+0x3c]",
    "mov     r8d, 0x7",
    "mov     dword [r12+0x68], eax",
    "mov     rax, qword [r11]",
    "mov     ecx, dword [rax+0x74]",
    "mov     dword [r12+0x6c], ecx",
    "mov     rax, qword [r11+0x120]",
    "mov     qword [r12+0x48], rax",
    "mov     qword [r11+0x68], rdx",
    "mov     qword [r11+0x120], r10  {0x0}",
    "mov     dword [r11+0x3c], r10d  {0x0}",
    "mov     qword [r11+0x100], r12",
    "movsxd  rcx, dword [r12+0x60]",
    "mov     dword [r11+0x28], ecx",
    "movzx   eax, word [r12+0x64]",
    "mov     dword [r11+0x2c], eax",
    "imul    rcx, rcx, 0x38",
    "add     rcx, rdx",
    "mov     qword [r11+0x78], rcx",
    "movsxd  rax, dword [r14+0x10]",
    "lea     rcx, [rcx+rax*8]",
    "mov     qword [r12+0x30], rcx",
    "mov     eax, dword [r14+0x8]",
    "add     eax, r8d",
    "cdq     ",
    "and     edx, r8d",
    "add     eax, edx",
    "xor     edx, edx  {0x0}",
    "sar     eax, 0x3",
    "movsxd  r8, eax",
    "call    memset",
    "mov     r12, qword [r14]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     qword [r11+0x88], r12",
    "mov     eax, dword [r14+0x8]",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "mov     dword [r11+0x90], eax",
    "mov     qword [rsp+0x38 {var_300}], r12",
    "lea     rsi, [r12-0x18]",
    "xor     r10d, r10d  {0x0}",
    "mov     edx, 0x80",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "sub     rsi, qword [rsp+0x38 {var_300}]",
    "mov     dword [rbx+0xc], r13d",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     qword [rbx+0x10], r12",
    "mov     eax, 0x410",
    "mov     word [rbx+0x8], ax  {0x410}",
    "lea     rax, [rel sub_140033118]",
    "movsxd  rcx, ebp",
    "mov     qword [rbx+0x30], rax  {sub_140033118}",
    "mov     qword [r12], r11",
    "mov     dword [r12+0x60], ebp",
    "mov     eax, dword [r14+0x10]",
    "add     rcx, 0x2",
    "mov     dword [r12+0x64], eax",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "imul    rcx, rcx, 0x38",
    "add     rcx, r12",
    "imul    rsi",
    "sar     rdx, 0x2",
    "mov     rax, rdx",
    "shr     rax, 0x3f",
    "add     rdx, rax",
    "mov     dword [r12+0x54], edx",
    "mov     rax, qword [r11+0x68]",
    "mov     qword [r12+0x20], rax",
    "mov     eax, dword [r11+0x28]",
    "mov     dword [r12+0x5c], eax",
    "mov     rax, qword [r11+0x78]",
    "mov     qword [r12+0x28], rax",
    "mov     eax, dword [r11+0x2c]",
    "mov     dword [r12+0x50], eax",
    "mov     rax, qword [r11+0x88]",
    "mov     qword [r12+0x10], rax",
    "mov     eax, dword [r11+0x90]",
    "mov     dword [r12+0x58], eax",
    "mov     rax, qword [r14+0x20]",
    "mov     qword [r12+0x38], rax",
    "lea     rax, [r12+0x70]",
    "cmp     rax, rcx",
    "je      0x14003c5b7",
    "mov     rax, qword [rbx]",
    "mov     word [rax+0x8], r15w  {0x1}",
    "mov     dword [rbx+0x24], r10d  {0x0}",
    "mov     ecx, 0x4",
    "mov     qword [rax], r15  {0x1}",
    "mov     word [rax+0x8], cx  {0x4}",
    "mov     rdx, r15  {0x1}",
    "mov     rcx, rax",
    "call    sub_1400315a0",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x14003ca4f",
    "xor     r10d, r10d  {0x0}",
    "cmp     edi, r10d",
    "jne     0x140038941",
    "mov     dl, al",
    "mov     rcx, r13",
    "call    sub_140018a98",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     qword [r13+0x10], rcx",
    "call    sub_140019074",
    "movzx   edx, byte [rsp+0x348 {i_33}]",
    "mov     dword [r13+0xc], eax",
    "mov     byte [r13+0xa], r15b  {0x1}",
    "mov     eax, edx",
    "cmp     edx, r15d",
    "je      0x14003cdce",
    "mov     rcx, qword [rsp+0x340 {arg_8}]",
    "cmp     r12d, r9d",
    "jne     0x14003cd2b",
    "cmp     qword [rcx+0x68], rdx",
    "jne     0x14003cce5",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     ebx, 0x4",
    "add     dword [r11+0x3c], r15d",
    "jmp     0x14003be23",
    "mov     rax, qword [rsi+0x10]",
    "cmp     byte [rax+0x1c], r10b",
    "je      0x14003d423",
    "mov     rax, qword [rsp+0x128 {var_210}]",
    "mov     qword [r13+0x38], rax",
    "movsxd  rcx, dword [rbx+0xc]",
    "movsxd  r8, dword [r13+0xc]",
    "mov     rdx, qword [r13+0x10]",
    "add     rcx, qword [rbp+0x10]",
    "call    memcpy",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     word [r13+0x8], r14w",
    "mov     rax, qword [rbp+0x10]",
    "xor     r10d, r10d  {0x0}",
    "mov     byte [r15+rax], r10b  {0x0}",
    "mov     rax, qword [rbp+0x10]",
    "mov     byte [rax+r15+0x1], r10b  {0x0}",
    "mov     rax, qword [rbp+0x10]",
    "mov     byte [rax+r15+0x2], r10b  {0x0}",
    "mov     eax, 0x200",
    "mov     dword [rbp+0xc], r15d",
    "or      word [rbp+0x8], ax",
    "mov     byte [rbp+0xa], dl",
    "movsxd  r8, dword [rbx+0xc]",
    "mov     rdx, qword [rbx+0x10]",
    "mov     rcx, qword [rbp+0x10]",
    "call    memcpy",
    "mov     word [rbx+0x8], r12w",
    "ucomisd xmm2, qword [rel data_1401300f0]",
    "je      0x14003873e  {data_1401300f0}",
    "mov     rcx, r13",
    "call    sub_140031230",
    "mov     rcx, rbp",
    "mov     rbx, rax",
    "call    sub_140031230",
    "xor     r10d, r10d  {0x0}",
    "cmp     rbx, r10",
    "je      0x14003873e",
    "mov     eax, 0x3e40",
    "mov     qword [r12], r9",
    "and     word [r12+0x8], ax",
    "or      word [r12+0x8], bx",
    "imul    r9, r8",
    "jmp     0x14003864a",
    "cmp     r9, r10",
    "jle     0x1400385c6",
    "mov     rax, 0x8000000000000000",
    "cqo     ",
    "idiv    r8",
    "cmp     r9, rax",
    "jmp     0x1400385be",
    "cmp     r8, 0xffffffffffffffff",
    "jne     0x140038564",
    "cmp     r8, 0xffffffffffffffff",
    "mov     rax, r9",
    "cmove   r8, r15  {0x1}",
    "cqo     ",
    "idiv    r8",
    "mov     r9, rdx",
    "jmp     0x14003864a",
    "mov     rbx, r8",
    "or      rdx, 0xffffffffffffffff",
    "mov     ecx, 0x40",
    "sub     cl, r11b",
    "shl     rdx, cl",
    "or      r8, rdx",
    "or      eax, 0xffffffff  {0xffffffff}",
    "jmp     0x14003883d",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "jmp     0x140038194",
    "mov     eax, 0x80",
    "cmp     ebp, 0xc",
    "jb      0x140039753",
    "mov     al, byte [rsp+0x348 {i_33}]",
    "lea     ebx, [rbp-0xc]",
    "shr     ebx, 0x1",
    "mov     byte [r14+0xa], al",
    "lea     edx, [rbx+0x2]",
    "mov     dword [r14+0xc], ebx",
    "cmp     dword [r14+0x20], edx",
    "jge     0x1400396c5",
    "mov     rcx, r12",
    "mov     eax, 0x2400",
    "test    word [r14+0x8], ax",
    "je      0x140039631",
    "cmp     byte [rsi+0x1], 0xf5",
    "mov     rcx, r14",
    "jne     0x1400392f9",
    "lea     rdx, [rsp+0x9c {var_29c}]",
    "mov     rcx, r12",
    "call    sub_140019e28",
    "mov     ebp, dword [rsp+0x9c {var_29c}]",
    "movzx   r11d, al",
    "mov     dword [rbx+r13*4+0x78], ebp",
    "add     r12, r11",
    "cmp     ebp, esi",
    "jb      0x1400394c4",
    "movzx   eax, byte [rbp+rdi+0xd7110]",
    "add     r12, r14",
    "jmp     0x1400394da",
    "mov     rax, qword [rsp+0x1b8 {var_180}]",
    "mov     rdx, r12",
    "call    sub_140019e28",
    "xor     r10d, r10d  {0x0}",
    "movzx   eax, al",
    "movzx   eax, byte [rcx]",
    "mov     dword [r12], eax",
    "mov     eax, r15d  {0x1}",
    "jmp     0x14003938e",
    "mov     rax, 0x7fffffffffff",
    "cmp     rdx, rax",
    "ja      0x140039a19",
    "mov     eax, 0x4",
    "mov     dword [rbx], eax",
    "jmp     0x140039af0",
    "cmp     dword [r9+0x20], ebp",
    "jge     0x140039ba3",
    "mov     eax, 0x10",
    "mov     dword [r9+0xc], ebp",
    "mov     word [r9+0x8], ax  {0x10}",
    "cmp     r13, r12",
    "je      0x140039bdd",
    "add     edx, r10d",
    "add     r15d, edx",
    "mov     ecx, r10d  {0x1}",
    "movsxd  rax, r15d",
    "jmp     0x140039b2d",
    "cmp     r12d, r10d",
    "mov     r12, qword [rsp+0x40 {var_2f8}]",
    "mov     ebp, 0x1",
    "je      0x140039fee",
    "mov     rbx, r10  {0x0}",
    "cmp     dword [rax+0x28], r10d",
    "mov     ebp, r10d  {0x0}",
    "jle     0x140039fb5",
    "cmp     r12d, r10d",
    "mov     r13d, r10d  {0x0}",
    "mov     rbx, r10  {0x0}",
    "sete    r13b",
    "mov     eax, dword [r12+0x27c]",
    "sub     eax, r13d",
    "mov     r13d, eax",
    "mov     eax, 0x2",
    "sub     r13d, ebp",
    "cmp     r15d, eax",
    "mov     rax, qword [rsp+0x40 {var_2f8}]",
    "mov     dword [rsp+0x68 {i_46}], r13d",
    "jne     0x140039f70",
    "mov     edx, ebp  {0x1}",
    "mov     rcx, r11",
    "call    sub_140034284",
    "mov     edi, eax",
    "xor     eax, eax  {0x0}",
    "cmp     edi, eax",
    "jne     0x140038a2a",
    "mov     rax, qword [r13+0x288]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     qword [r11+0x58], rax",
    "mov     rax, qword [r13+0x290]",
    "mov     qword [r11+0x60], rax",
    "mov     rax, qword [rbp+0x8]",
    "mov     r12, qword [rsp+0x340 {arg_8}]",
    "mov     rcx, qword [rax]",
    "mov     edx, dword [r12+0x40]",
    "cmp     edx, dword [rcx+0x80]",
    "jle     0x14003a1b6",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "mov     qword [rbx+0x40], r14",
    "cmp     byte [rsi+0x1], 0xf7",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     edi, eax",
    "setne   al",
    "xor     r10d, r10d  {0x0}",
    "mov     byte [rbx+0x4], al",
    "mov     rax, qword [rax+0x28]",
    "cmp     rax, r10",
    "jne     0x14003a8a2",
    "or      byte [rax+0x1], r13b",
    "or      byte [rdi+0x1], r13b",
    "mov     eax, 0x7",
    "mov     edi, eax  {0x7}",
    "mov     dword [rsp+0x30 {var_308}], eax  {0x7}",
    "jmp     0x14003a8d4",
    "cmp     r13d, r15d",
    "jne     0x14003a7b2",
    "mov     ecx, dword [rdi+0x30]",
    "call    sub_14001e150",
    "xor     r10d, r10d  {0x0}",
    "mov     qword [rdi+0x60], rax",
    "cmp     rax, r10",
    "je      0x14003a790  {\"L9W`u\"}",
    "jmp     0x140038af5",
    "call    sub_14001a0b8",
    "movsx   ecx, ax",
    "cmp     ecx, dword [rsi+0xc]",
    "jge     0x140038af5",
    "mov     rcx, qword [rcx]",
    "mov     dword [rax+0x58], r9d",
    "mov     word [rax+0x8], dx  {0x80}",
    "mov     qword [rax+0x28], r13",
    "add     rax, 0x38",
    "cmp     rax, rcx",
    "jne     0x14003c5a0",
    "jmp     0x14003c5b7",
    "jmp     0x140038458",
    "mov     eax, 0x4",
    "cmp     r12d, eax",
    "jne     0x14003cd48",
    "mov     rdx, r8",
    "mov     rcx, rbp",
    "call    sub_140023370",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "xor     eax, eax  {0x0}",
    "cmp     edi, eax",
    "jne     0x14003cd69",
    "mov     ebx, 0x4",
    "cmp     word [rsi+0x2], bx",
    "jne     0x14003d3f9",
    "divsd   xmm0, xmm2",
    "jmp     0x140038710",
    "cmp     rbx, 0xffffffffffffffff",
    "cqo     ",
    "pxor    xmm0, xmm0",
    "cmove   rbx, r15  {0x1}",
    "idiv    rbx",
    "lea     ebx, [r10+0x4]",
    "cvtsi2sd xmm0, rdx",
    "jmp     0x140038713",
    "jge     0x140038605",
    "mov     rax, 0x8000000000000000",
    "cqo     ",
    "idiv    r9",
    "cmp     r8, rax",
    "jl      0x14003868e",
    "mov     rax, r9",
    "cqo     ",
    "idiv    r8",
    "mov     r9, rax",
    "jmp     0x14003864a",
    "mov     rax, 0x8000000000000000",
    "cmp     r9, rax",
    "je      0x14003868e",
    "movsxd  rbx, eax",
    "jmp     0x140038872",
    "lea     rdx, [rel __dos_header]",
    "mov     eax, ebp",
    "movzx   r8d, byte [rax+rdx+0xd7110]",
    "lea     r8d, [rbp-0xc]",
    "shr     r8d, 0x1",
    "jmp     0x140039783",
    "mov     eax, 0x80",
    "test    byte [rsi+0x2], al",
    "jne     0x14003978a",
    "test    r15b, bpl",
    "je      0x14003978a",
    "mov     rax, qword [r14+0x18]",
    "mov     qword [r14+0x10], rax",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, r14",
    "mov     word [r14+0x8], r15w  {0x1}",
    "call    sub_140030d38",
    "xor     r11d, r11d  {0x0}",
    "cmp     eax, r11d",
    "je      0x1400396cd",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "jmp     0x140038746",
    "call    sub_140031524",
    "mov     rdx, qword [rsi+0x10]",
    "mov     r8d, 0x800",
    "call    sub_1400316f8",
    "jmp     0x1400392fe",
    "movzx   eax, byte [rbp+rdi+0xd7110]",
    "lea     eax, [rbp-0xc]",
    "shr     eax, 0x1",
    "jmp     0x1400394cc",
    "add     ecx, r14d",
    "add     r15, rax",
    "cmp     ecx, dword [rsp+0x50 {var_2e8}]",
    "movsxd  r13, ecx",
    "mov     dword [rsp+0x58 {var_2e0}], ecx",
    "mov     dword [r8+r13*4], r15d",
    "jg      0x1400394fa",
    "mov     rax, qword [rbx+0x68]",
    "jmp     0x140039432",
    "mov     qword [rbx+0x68], r10  {0x0}",
    "mov     dword [rbx+0x74], r10d  {0x0}",
    "mov     eax, dword [r12]",
    "cmp     eax, 0x18003",
    "ja      0x140039564",
    "movzx   eax, al",
    "mov     word [rbx+0x52], r10w  {0x0}",
    "mov     dword [rbx+0x48], eax",
    "mov     eax, dword [r12]",
    "cmp     dword [rbx+0x74], eax",
    "jae     0x140039490",
    "mov     edx, 0x8",
    "add     r14, rdx",
    "lea     eax, [rdx+0x18]  {0x20}",
    "test    al, cl",
    "je      0x140039a4f",
    "add     r14, 0x6",
    "mov     eax, 0x5",
    "jmp     0x140039a48",
    "mov     rax, qword [r9+0x18]",
    "and     word [r9+0x8], 0x2d",
    "mov     qword [r9+0x10], rax",
    "mov     eax, r12d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, ebp",
    "mov     rcx, r9",
    "call    sub_140030d38",
    "mov     r9, qword [rsp+0x90 {var_2a8}]",
    "mov     r11, qword [rsp+0x60 {var_2d8}]",
    "mov     r10d, 0x1",
    "jmp     0x140039bb4",
    "mov     rbp, qword [r9+0x10]",
    "mov     ecx, 0x80",
    "lea     r12, [rbx+rbp]",
    "cmp     r15d, ecx",
    "jae     0x140039bf5",
    "mov     eax, 0x4010",
    "mov     dword [r9], r13d",
    "mov     word [r9+0x8], ax  {0x4010}",
    "shr     rax, 0x7",
    "cmp     rax, r12",
    "jne     0x140039b2a",
    "mov     ebx, dword [rsp+0x50 {var_2e8}]",
    "jmp     0x14003a018",
    "mov     rax, qword [r12+0x8]",
    "mov     rax, qword [rsp+0x40 {var_2f8}]",
    "inc     ebp",
    "add     rbx, 0x20",
    "cmp     ebp, dword [rax+0x28]",
    "jl      0x140039f7f",
    "mov     rax, qword [rsp+0x40 {var_2f8}]",
    "inc     ebp",
    "add     rbx, 0x20",
    "cmp     ebp, dword [rax+0x28]",
    "jl      0x140039f31",
    "mov     rdi, qword [rsp+0x340 {arg_8}]",
    "mov     byte [r12+0x5f], bpl  {0x1}",
    "mov     rcx, rdi",
    "call    sub_1400342d4",
    "mov     ecx, 0x5",
    "cmp     eax, ecx",
    "je      0x14003d923",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "cmp     byte [rcx+0xa], r10b",
    "je      0x14003a1b6",
    "cmp     dword [rax+0x50], ecx",
    "jne     0x14003a8af",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     byte [rbx+0x4], r15b  {0x1}",
    "mov     dword [rbp+0x50], r13d",
    "mov     byte [rbp+0x54], 0xff",
    "mov     qword [rbp+0x80], r14",
    "mov     qword [rbp+0x8], r12",
    "mov     qword [rbp+0x20], rdi",
    "mov     byte [rbp+0x1], r15b",
    "mov     byte [rbp+0x2], r10b  {0x0}",
    "mov     rax, qword [rdi+0x10]",
    "cmp     rax, r10",
    "je      0x14003a7fb",
    "mov     eax, dword [rdi+0x3c]",
    "neg     eax",
    "sbb     ecx, ecx",
    "and     r13d, ecx",
    "cmp     qword [rdi+0x60], r10",
    "jne     0x14003a7a3",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rax], rcx  {0x0}",
    "lea     eax, [rcx+0x4]",
    "add     qword [rdi+0x60], rax",
    "mov     dword [rsp+0x8c {var_2ac}], r15d  {0x1}",
    "jmp     0x14003d79a",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "cmp     edi, edx",
    "jne     0x14003cd69",
    "lea     edx, [rax-0x2]  {0x2}",
    "mov     edx, ebx",
    "jmp     0x14003cd38",
    "mov     eax, 0x5",
    "cmp     word [rsi+0x2], ax",
    "jne     0x14003d40b",
    "mov     edi, r10d  {0x0}",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "jmp     0x140038669",
    "call    sub_14001903c",
    "cmp     eax, r10d",
    "jne     0x14003873e",
    "mov     rax, 0x8000000000000000",
    "cmp     r8, rax",
    "je      0x14003868e",
    "jmp     0x140038605",
    "mov     edx, dword [r12+rcx*4]",
    "mov     rcx, qword [rbx+0x38]",
    "mov     r9, r14",
    "call    sub_140031b74",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "lea     rcx, [rel data_14013ff78]",
    "jmp     0x140039652",
    "xor     eax, eax  {0x0}",
    "cmp     r8d, eax",
    "jne     0x140039796",
    "jmp     0x140039764",
    "mov     rcx, qword [r14+0x10]",
    "mov     r8, rbx",
    "mov     rdx, r12",
    "call    memcpy",
    "mov     r11, qword [r14+0x10]",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     dl, byte [rsp+0x348 {i_33}]",
    "mov     r9d, dword [rsp+0x358 {arg_20}]",
    "xor     r10d, r10d  {0x0}",
    "lea     rcx, [rel __dos_header]",
    "mov     byte [rbx+r11], r10b  {0x0}",
    "mov     rax, qword [r14+0x10]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     byte [rax+rbx+0x1], r10b  {0x0}",
    "mov     eax, ebp",
    "lea     ebx, [r10+0x4]",
    "and     rax, r15",
    "movzx   eax, word [rcx+rax*2+0xd413c]",
    "mov     word [r14+0x8], ax",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "jmp     0x140038072",
    "mov     rsi, qword [rsp+0x80 {var_2b8}]",
    "mov     edi, dword [rsp+0x30 {var_308}]",
    "mov     r14, qword [rsp+0xb8 {var_280}]",
    "cmp     r12, rdx",
    "jb      0x14003951d",
    "cmp     r12, rdx",
    "jb      0x14003946e",
    "mov     ecx, dword [rsp+0x58 {var_2e0}]",
    "mov     rdx, qword [rsp+0x70 {i_32}]",
    "mov     r8, qword [rsp+0x60 {var_2d8}]",
    "mov     qword [rsp+0x78 {var_2c0}], rax",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     eax, dword [r12+0xc]",
    "cmp     eax, r10d",
    "jle     0x14003d8cd",
    "cmp     eax, dword [rbx+0x70]",
    "ja      0x140039564",
    "mov     dword [rbx], 0x6",
    "jmp     0x140039af0",
    "mov     eax, 0xffdf",
    "pxor    xmm0, xmm0",
    "and     cx, ax",
    "cvtsi2sd xmm0, r8",
    "lea     eax, [rdx-0x1]  {0x7}",
    "or      cx, dx",
    "mov     word [rbx-0x1c], cx",
    "movsd   qword [rbx-0x24], xmm0",
    "cmp     eax, r12d",
    "jne     0x140039696",
    "cmp     rbx, 0x7f",
    "ja      0x140039c06",
    "mov     byte [rbp], r15b",
    "jmp     0x140039c01",
    "add     ecx, r10d",
    "cmp     edx, ecx",
    "jge     0x140039b3d",
    "cmp     qword [r12+0x270], r14",
    "jne     0x140039ff4",
    "mov     rcx, r12",
    "call    sub_14004e348",
    "or      dword [r12+0x2c], ebp",
    "and     dword [rax+0xc8], 0xfffffffd",
    "or      dword [rax+0xc8], ebp",
    "mov     rax, qword [rax+0x10]",
    "jmp     0x140039fc9",
    "mov     rcx, qword [rax+0x20]",
    "mov     r8d, r13d",
    "mov     edx, r15d",
    "mov     rcx, qword [rcx+rbx+0x8]",
    "call    sub_1400294b4",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "mov     rcx, qword [rax+0x20]",
    "mov     r8d, r13d",
    "mov     edx, 0x204",
    "mov     rcx, qword [rcx+rbx+0x8]",
    "call    sub_140029308",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "mov     r13d, dword [rsp+0x68 {i_46}]",
    "jmp     0x140039f73",
    "sub     rsi, qword [rsp+0x38 {var_300}]",
    "mov     rax, 0x2aaaaaaaaaaaaaab",
    "imul    rsi",
    "sar     rdx, 0x2",
    "mov     rax, rdx",
    "shr     rax, 0x3f",
    "add     rdx, rax",
    "xor     eax, eax  {0x0}",
    "mov     dword [rdi+0x34], edx",
    "mov     byte [r12+0x5f], al  {0x0}",
    "xor     eax, eax  {0x0}",
    "mov     byte [r12+0x67], al  {0x0}",
    "mov     edi, dword [rdi+0x38]",
    "mov     dword [rsp+0x30 {var_308}], edi",
    "jmp     0x14003a018",
    "call    sub_140022dc0",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "jmp     0x14003a1be",
    "mov     rax, qword [rdi+0x10]",
    "mov     dword [rsp+0x30 {var_308}], r10d  {0x0}",
    "mov     qword [rbp+0x28], rax",
    "mov     qword [rdi+0x10], rbp",
    "mov     byte [rbp], r15b  {0x1}",
    "mov     edi, r10d  {0x0}",
    "mov     edi, 0x20",
    "mov     eax, 0x7",
    "mov     edi, eax  {0x7}",
    "mov     dword [rsp+0x30 {var_308}], eax  {0x7}",
    "jmp     0x14003a813",
    "cmp     ebx, r9d",
    "mov     rcx, r14",
    "sete    dl",
    "add     edx, r15d",
    "call    sub_140030114",
    "xor     edx, edx  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "mov     rcx, rbp",
    "call    sub_140023170",
    "mov     r9d, 0x5",
    "xor     edx, edx  {0x0}",
    "movzx   eax, word [rsi+0x2]",
    "mov     eax, 0x2",
    "jmp     0x14003d40f",
    "cmp     r9, rax",
    "je      0x14003868e",
    "mov     rcx, qword [r14+0x10]",
    "mov     r8, r14",
    "mov     edx, ebp",
    "call    sub_1400349b0",
    "mov     r8d, 0xefff",
    "and     word [r14+0x8], r8w",
    "jmp     0x1400392fe",
    "mov     edx, ebp",
    "mov     r8, r14",
    "call    sub_1400349b0",
    "jmp     0x1400392fe",
    "cmp     ebp, eax",
    "jb      0x140039771",
    "mov     eax, dword [rbx+0x70]",
    "cmp     r15, rax",
    "jbe     0x14003959b",
    "ja      0x140039525",
    "movzx   ebp, byte [r12]",
    "mov     dword [rsp+0x9c {var_29c}], ebp",
    "mov     dword [rbx+r13*4+0x78], ebp",
    "cmp     ebp, esi",
    "jae     0x140039496",
    "mov     ecx, 0x152d5",
    "call    sub_140084e38",
    "mov     edi, eax  {0xb}",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "dec     eax",
    "movsxd  rcx, eax",
    "lea     rax, [rcx+rcx*2]",
    "lea     rsi, [r12+rax*8]",
    "jmp     0x140038057",
    "mov     rdx, rbx",
    "mov     rcx, rbp",
    "call    sub_140019c64",
    "mov     ecx, 0x80",
    "and     bl, 0x7f",
    "mov     byte [rbp], bl",
    "mov     eax, r10d  {0x1}",
    "jmp     0x140039c16",
    "mov     r9, qword [rsp+0x90 {var_2a8}]",
    "mov     r13, qword [rsp+0x78 {var_2c0}]",
    "movsxd  rbx, r15d",
    "movsxd  rax, dword [r9+0x20]",
    "lea     rbp, [r14+rbx]",
    "lea     rcx, [r13+rbp]",
    "cmp     rcx, rax",
    "jg      0x140039b69",
    "mov     rdx, qword [r12+0x270]",
    "mov     rcx, r12",
    "mov     rax, qword [rdx+0x18]",
    "mov     qword [r12+0x270], rax",
    "call    sub_1400169a8",
    "dec     dword [r12+0x27c]",
    "cmp     r15d, ebp",
    "jne     0x14003a050",
    "cmp     rax, r10",
    "je      0x140039fe1",
    "mov     r12, qword [rsp+0x38 {var_300}]",
    "mov     rax, qword [rax+0x28]",
    "cmp     rax, r10",
    "jne     0x14003a7df",
    "or      byte [rax+0x1], dil",
    "or      byte [rbp+0x1], dil",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "mov     byte [r11+0xc2], al",
    "jmp     0x14003be23",
    "mov     rax, 0x8000000000000001",
    "cqo     ",
    "idiv    r8",
    "mov     rcx, rax",
    "mov     rax, r9",
    "neg     rax",
    "cmp     rax, rcx",
    "jg      0x14003868e",
    "xor     r10d, r10d  {0x0}",
    "xor     r10d, r10d  {0x0}",
    "cmp     dword [r8], r10d",
    "jne     0x140039535  {\"L9Sh\"}",
    "mov     eax, dword [rbx+0x70]",
    "cmp     r15, rax",
    "jne     0x140039525",
    "mov     rdx, r10",
    "cmp     r10, 0x7f",
    "ja      0x140039c55",
    "mov     byte [rbp], r10b",
    "jmp     0x140039c4e",
    "mov     r13, qword [rsp+0xb0 {var_288}]",
    "movzx   eax, al",
    "mov     esi, 0x7",
    "add     rbp, rax",
    "lea     rdi, [rel __dos_header]",
    "mov     rax, qword [r14+0x8]",
    "xor     r10d, r10d  {0x0}",
    "mov     qword [r12+0x288], rax",
    "mov     rax, qword [r14+0x10]",
    "mov     qword [r12+0x290], rax",
    "cmp     ebx, r10d",
    "je      0x14003a079",
    "mov     rax, qword [r14+0x18]",
    "mov     rdx, r14",
    "mov     rcx, r12",
    "mov     qword [r12+0x270], rax",
    "call    sub_1400169a8",
    "xor     r10d, r10d  {0x0}",
    "cmp     ebx, r10d",
    "jne     0x14003a0a0",
    "cmp     dword [rax+0x50], r13d",
    "jne     0x14003a7ed",
    "mov     rdi, qword [rsp+0x70 {i_32}]",
    "mov     r12, qword [rsp+0x60 {var_2d8}]",
    "mov     r13d, dword [rsp+0x50 {var_2e8}]",
    "mov     r15d, 0x1",
    "mov     eax, 0x2400",
    "test    word [rsp+0x1b0 {var_188}], ax",
    "jne     0x1400395ca",
    "cmp     qword [rbx+0x68], r10",
    "jne     0x140039564",
    "mov     ecx, r10d  {0x0}",
    "mov     r12, rdx",
    "jmp     0x14003959e",
    "mov     rcx, rbp",
    "call    sub_140019c64",
    "and     dl, 0x7f",
    "mov     byte [rbp], dl",
    "mov     eax, 0x1",
    "jmp     0x140039c5d",
    "mov     r8d, r13d",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "mov     edx, r15d",
    "mov     rcx, r13",
    "call    sub_140070818",
    "xor     r10d, r10d  {0x0}",
    "mov     edi, eax",
    "mov     dword [rsp+0x30 {var_308}], eax",
    "cmp     eax, r10d",
    "jne     0x140038941",
    "lea     eax, [r10+0x2]",
    "cmp     r15d, eax",
    "jne     0x14003a0a0",
    "mov     r13, qword [rsp+0x40 {var_2f8}]",
    "dec     dword [r12+0x27c]",
    "jmp     0x14003a079",
    "lea     rcx, [rsp+0x1a8 {var_190}]",
    "call    sub_14003118c",
    "cmp     dword [rsp+0x1c8 {var_170}], r10d",
    "je      0x1400395d7",
    "mov     eax, 0x2400",
    "test    word [rsp+0x1b0 {var_188}], ax",
    "jne     0x140039554",
    "sub     r12d, dword [rsp+0x78 {var_2c0}]",
    "mov     word [rbx+0x52], cx",
    "mov     dword [rbx+0x48], r12d",
    "cmp     qword [rbx+0x68], r10",
    "jne     0x1400395d7",
    "cmp     r10d, 0xc",
    "jb      0x140039cbf",
    "movzx   ecx, byte [r10+rdi+0xd7110]",
    "mov     rdx, qword [r11]",
    "xor     r10d, r10d  {0x0}",
    "lea     r8, [r12+rcx]",
    "mov     ebx, ecx",
    "movzx   eax, al",
    "add     rbp, rax",
    "lea     eax, [r10-0x1]",
    "cmp     eax, 0x6",
    "ja      0x140039c94",
    "jmp     0x14003a0a5",
    "lea     rcx, [rsp+0x1a8 {var_190}]",
    "call    sub_14003118c",
    "xor     r10d, r10d  {0x0}",
    "cmp     dword [rsp+0x1c8 {var_170}], r10d",
    "je      0x140039564",
    "xor     r10d, r10d",
    "mov     ebx, r10d  {0x0}",
    "mov     ebx, dword [r11+0xc]",
    "xor     r10d, r10d  {0x0}",
    "cmp     ebx, r10d",
    "jbe     0x140039cc5",
    "dec     r8",
    "dec     ecx",
    "mov     byte [r8], dl",
    "shr     rdx, 0x8",
    "cmp     ecx, r10d",
    "jne     0x140039c81",
    "jmp     0x140039cc5",
    "mov     r14, qword [rsp+0x48 {i_30}]",
    "mov     r10d, dword [r11+0x24]",
    "cmp     r10d, ecx",
    "jae     0x140039c3f",
    "mov     rsi, qword [rsp+0x80 {var_2b8}]",
    "mov     edi, dword [rsp+0x30 {var_308}]",
    "mov     r11, qword [rsp+0x340 {arg_8}]",
    "add     r11, 0x38",
    "mov     eax, ebx",
    "mov     ecx, 0x80",
    "add     r12, rax",
    "mov     qword [rsp+0x60 {var_2d8}], r11",
    "cmp     r11, r13",
    "jbe     0x140039c30",
    "mov     rdx, qword [r11+0x10]",
    "mov     r8, rbx",
    "mov     rcx, r12",
    "call    memcpy",
    "mov     r11, qword [rsp+0x60 {var_2d8}]",
    "xor     r10d, r10d  {0x0}",
    "jmp     0x140039cc5"
  ],
  "high_level_IL": [
    "int64_t* r13 = *arg1",
    "char* r12 = arg1[0x11]",
    "void* i_44 = arg1[0xd]",
    "uint64_t i_26",
    "i_26.b = *(r13 + 0x5e)",
    "int64_t* r11 = arg1",
    "char* var_300 = r12",
    "char* rsi = r12",
    "i_33 = i_26.b",
    "uint32_t rdi = 0",
    "uint32_t var_308 = 0",
    "int64_t* var_2f8 = r13",
    "arg_18 = 0",
    "int32_t r9 = 0",
    "arg_20 = 0",
    "uint64_t r8 = 0",
    "int32_t var_2b0 = 0",
    "void* i_30 = i_44",
    "int32_t r15 = 1",
    "int64_t* r12_9",
    "int64_t* r12_10",
    "if (arg1[7].d == 7)",
    "label_1400396a4:",
    "sub_140016efc(r13)",
    "arg2 = sub_140032200(arg1, \"out of memory\", r8, arg2)",
    "rdi = 7",
    "label_14003da2b:",
    "r12_9 = arg1",
    "arg1[9] = 0",
    "arg1[0x14] = 0",
    "r13[0x45].d = 0",
    "int64_t* rcx_421",
    "char* rdx_163",
    "char* r8_83",
    "if (r13[0x2c].d != 0)",
    "label_14003c351:",
    "int32_t rax_1",
    "rax_1.b = *(r13 + 0x61)",
    "char temp2_1 = rax_1.b",
    "rax_1.b = neg.b(rax_1.b)",
    "rdi = (sbb.d(rdi, rdi, temp2_1 != 0) & 0xfffffffe) + 9",
    "r11[7].d = rdi",
    "rdx_163 = &data_1400f38e8",
    "rcx_421 = r11",
    "r8_83 = sub_14008335c(rdi)",
    "label_14003da74:",
    "arg2 = sub_140032200(rcx_421, rdx_163, r8_83, arg2)",
    "label_14003d8d9:",
    "r12_9 = arg1",
    "rsi = &r12[sx.q(*(arg1 + 0x34)) * 0x18]",
    "while (true)",
    "uint64_t rbp_1 = zx.q(*rsi)",
    "r8 = zx.q(r8.d + 1)",
    "char* var_2b8 = rsi",
    "var_2b0 = r8.d",
    "char* var_318",
    "int32_t var_310",
    "int32_t var_2e8",
    "int32_t var_2e0",
    "int32_t* var_2d8",
    "uint32_t i_46",
    "uint32_t i_31",
    "void* i_32",
    "void** var_2c0",
    "int32_t* var_2a8",
    "void* var_288",
    "int64_t* var_280",
    "int16_t rax_3",
    "int64_t rax_8",
    "void* rax_98",
    "int64_t rax_106",
    "uint32_t rax_322",
    "uint32_t rax_364",
    "void* rcx_41",
    "int64_t rcx_221",
    "void* rcx_359",
    "char const* const rdx_244",
    "char const* const rdx_251",
    "int64_t* rbx_25",
    "void* rbx_40",
    "char* rbx_58",
    "int64_t rbp_44",
    "void* rbp_57",
    "int64_t* r11_2",
    "int64_t* r12_49",
    "int512_t zmm1",
    "bool cond:8_1",
    "bool cond:21_1",
    "bool cond:23_1",
    "bool cond:33_1",
    "if (rbp_1.d u<= 0xa8)",
    "switch (rbp_1)",
    "case 0",
    "int32_t r15_5 = *(rsi + 4)",
    "int64_t rbp_38 = *(rsi + 0x10)",
    "if (r15_5 == 0)",
    "if (r13[0x1a].d s> 0)",
    "rdx_244 = \"cannot open savepoint - SQL stat\u2026\"",
    "label_14003d8f3:",
    "arg2 = sub_140032200(r11, rdx_244, r8, arg2)",
    "rdi = 5",
    "goto label_14003d8d9",
    "int64_t r12_23 = sx.q(sub_140019074(rbp_38))",
    "uint32_t rax_245 = sub_140070818(r13, 0, r13[0x50].d + *(r13 + 0x27c))",
    "rdi = rax_245",
    "var_308 = rax_245",
    "if (rax_245 != 0)",
    "goto label_140038941",
    "int64_t* rax_246",
    "rax_246, i_26 = sub_140016c18(r13, r12_23 + 0x21, zmm1)",
    "if (rax_246 != 0)",
    "*rax_246 = &rax_246[4]",
    "i_26, arg2 = memcpy(&rax_246[4], rbp_38, sx.q((r12_23 + 1).d))",
    "if (*(r13 + 0x5f) == 0)",
    "*(r13 + 0x27c) += 1",
    "*(r13 + 0x5f) = 0",
    "*(r13 + 0x67) = 1",
    "rax_246[3] = r13[0x4e]",
    "int64_t rax_248 = r13[0x51]",
    "r13[0x4e] = rax_246",
    "rax_246[1] = rax_248",
    "rax_246[2] = r13[0x52]",
    "goto label_14003a0aa",
    "int64_t* r12_24 = var_2f8",
    "uint32_t i_47 = 0",
    "int32_t rbx_52 = 1",
    "int64_t* i = r12_24[0x4e]",
    "if (i == 0)",
    "label_14003d96e:",
    "arg2 = sub_140032200(r11, \"no such savepoint: %s\", rbp_38, arg2)",
    "rdi = 1",
    "r12_9 = arg1",
    "break",
    "int64_t r8_37",
    "int32_t rax_250",
    "rax_250, i_26, r8_37 = sub_1400192b0(*i, rbp_38)",
    "if (rax_250 == 0)",
    "break",
    "i = i[3]",
    "i_47 += 1",
    "do while (i != 0)",
    "if (i == 0)",
    "goto label_14003d96e",
    "if (r12_24[0x1a].d s> 0 && r15_5 == 1)",
    "arg2 = sub_140032200(r11, \"cannot release savepoint - SQL s\u2026\", r8_37, arg2)",
    "rdi = 5",
    "r12_9 = arg1",
    "break",
    "if (i[3] != 0 || *(r12_24 + 0x67) == 0)",
    "var_2e8 = 0",
    "var_2e8 = 1",
    "if (r15_5 == 1)",
    "rdi = sub_140034284(r11, 1, arg2)",
    "if (rdi != 0)",
    "goto label_140038a2a",
    "*(r12_24 + 0x5f) = 1",
    "int32_t rax_252",
    "rax_252, i_26, arg2, zmm1 = sub_1400342d4(arg1)",
    "if (rax_252 == 5)",
    "*(arg1 + 0x34) = ((rsi - var_300) s/ 0x18).d",
    "*(r12_24 + 0x5f) = 0",
    "label_14003d94d:",
    "r12_10 = arg1",
    "rdi = 5",
    "r12_10[7].d = 5",
    "goto label_140038a39",
    "*(r12_24 + 0x67) = 0",
    "rdi = arg1[7].d",
    "var_308 = rdi",
    "label_14003a020:",
    "while (r12_24[0x4e] != i)",
    "int64_t* rdx_74 = r12_24[0x4e]",
    "r12_24[0x4e] = rdx_74[3]",
    "sub_1400169a8(r12_24, rdx_74)",
    "*(r12_24 + 0x27c) -= 1",
    "if (r15_5 != 1)",
    "r12_24[0x51] = i[1]",
    "r12_24[0x52] = i[2]",
    "if (rbx_52 == 0 || r15_5 == 2)",
    "goto label_14003a07c",
    "r13 = var_2f8",
    "r12_24[0x4e] = i[3]",
    "sub_1400169a8(r12_24, i)",
    "if (rbx_52 != 0)",
    "r13 = var_2f8",
    "*(r12_24 + 0x27c) -= 1",
    "label_14003a07c:",
    "r13 = var_2f8",
    "uint32_t rax_262",
    "rax_262, i_26 = sub_140070818(r13, r15_5, i_47)",
    "rdi = rax_262",
    "var_308 = rax_262",
    "if (rax_262 != 0)",
    "goto label_140038941",
    "i_44 = i_30",
    "label_14003a0aa:",
    "if (rdi != 0)",
    "goto label_140038941",
    "goto label_14003804a",
    "i_47 = *(r12_24 + 0x27c) - i_47 - 1",
    "int64_t* rax_255 = var_2f8",
    "i_46 = i_47",
    "int32_t r12_26",
    "if (r15_5 != 2)",
    "r12_26 = 0",
    "r12_26 = *(r12_24 + 0x2c) & 1",
    "int32_t i_1 = 0",
    "if (rax_255[5].d s> 0)",
    "int64_t rbx_53 = 0",
    "int32_t r13_18",
    "r13_18.b = r12_26 == 0",
    "uint32_t rax_256",
    "rax_256, i_26, arg2, zmm1 = sub_140029308(*(rax_255[4] + rbx_53 + 8), 0x204, r13_18, arg2)",
    "rdi = rax_256",
    "var_308 = rax_256",
    "if (rax_256 != 0)",
    "goto label_140038941",
    "rax_255 = var_2f8",
    "i_1 += 1",
    "rbx_53 += 0x20",
    "do while (i_1 s< rax_255[5].d)",
    "i_47 = i_46",
    "int32_t i_2 = 0",
    "if (rax_255[5].d s> 0)",
    "int64_t rbx_54 = 0",
    "uint32_t rax_257",
    "rax_257, i_26, arg2, zmm1 = sub_1400294b4(*(rax_255[4] + rbx_54 + 8), r15_5, i_47, arg2)",
    "rdi = rax_257",
    "var_308 = rax_257",
    "if (rax_257 != 0)",
    "goto label_140038941",
    "rax_255 = var_2f8",
    "i_2 += 1",
    "rbx_54 += 0x20",
    "do while (i_2 s< rax_255[5].d)",
    "r12_24 = var_2f8",
    "if (r12_26 != 0)",
    "void* i_3 = r12_24[1]",
    "while (i_3 != 0)",
    "*(i_3 + 0xc8) &= 0xfffffffd",
    "*(i_3 + 0xc8) |= 1",
    "i_3 = *(i_3 + 0x10)",
    "i_26, arg2 = sub_14004e348(r12_24)",
    "*(r12_24 + 0x2c) |= 1",
    "rbx_52 = var_2e8",
    "goto label_14003a020",
    "case 1",
    "int32_t rbx_144 = *(rsi + 4)",
    "int32_t rcx_566 = *(rsi + 8)",
    "if (rbx_144 == zx.d(*(r13 + 0x5f)))",
    "rdx_251 = \"cannot commit - no transaction i\u2026\"",
    "if (rcx_566 != 0)",
    "rdx_251 = \"cannot rollback - no transaction\u2026\"",
    "if (rbx_144 == 0)",
    "rdx_251 = \"cannot start a transaction withi\u2026\"",
    "label_14003dad8:",
    "arg2 = sub_140032200(r11, rdx_251, r8, arg2)",
    "rdi = 1",
    "goto label_14003d8d9",
    "if (rcx_566 == 0)",
    "if (rbx_144 != 0 && r13[0x1a].d s> 0)",
    "rdx_244 = \"cannot commit transaction - SQL \u2026\"",
    "goto label_14003d8f3",
    "rdi = sub_140034284(r11, 1, arg2)",
    "if (rdi != 0)",
    "goto label_140038a2a",
    "*(r13 + 0x5f) = rbx_144.b",
    "sub_140083254(r13, 0x204, arg2)",
    "*(r13 + 0x5f) = 1",
    "if (sub_1400342d4(arg1) != 5)",
    "sub_140082dd4(r13)",
    "rdi = (sbb.d(arg1.d, arg1.d, arg1[7].d != 0) & 0xffffff9c) + 0x65",
    "goto label_140038a2a",
    "r15.b = 1 - rbx_144.b",
    "*(arg1 + 0x34) = ((rsi - r12) s/ 0x18).d",
    "*(r13 + 0x5f) = r15.b",
    "goto label_14003d94d",
    "case 2",
    "i_26 = zx.q(*(rsi + 8))",
    "uint32_t i_41 = 0",
    "i_31 = 0",
    "if (i_26.d != 0 && test_bit(zx.q(r13[6].d), 0x14))",
    "rdi = 8",
    "goto label_140038941",
    "int64_t* rbp_39 = *((sx.q(*(rsi + 4)) << 5) + r13[4] + 8)",
    "if (rbp_39 != 0)",
    "uint32_t rax_265",
    "rax_265, i_26, arg2, zmm1 = sub_140028524(rbp_39, i_26.d, &i_31, zmm1)",
    "rdi = rax_265",
    "var_308 = rax_265",
    "if (rax_265 != 0)",
    "if (rdi.b != 5)",
    "goto label_140038941",
    "r12_10 = arg1",
    "r12_10[7].d = rdi",
    "*(r12_10 + 0x34) = ((rsi - r12) s/ 0x18).d",
    "goto label_140038a39",
    "r11 = arg1",
    "if (*(rsi + 8) != 0 && (r11[0x19].b & 0x80) != 0 && (*(r13 + 0x5f) == 0 || *(r13 + 0xcc) s> 1))",
    "if (r11[8].d == 0)",
    "r13[0x50].d += 1",
    "r11[8].d = r13[0x50].d + *(r13 + 0x27c)",
    "uint32_t rax_266",
    "rax_266, i_26 = sub_140070818(r13, 0, r11[8].d - 1)",
    "rdi = rax_266",
    "var_308 = rax_266",
    "if (rax_266 == 0)",
    "void* rcx_204 = *rbp_39[1]",
    "i_26 = zx.q(arg1[8].d)",
    "if (i_26.d s<= *(rcx_204 + 0x80) || *(rcx_204 + 0xa) == 0)",
    "rdi = 0",
    "var_308 = 0",
    "uint32_t rax_268",
    "rax_268, i_26, arg2 = sub_140022dc0(rcx_204, i_26.d)",
    "rdi = rax_268",
    "var_308 = rax_268",
    "r12 = var_300",
    "r11 = arg1",
    "r11[0xb] = r13[0x51]",
    "r11[0xc] = r13[0x52]",
    "i_41 = i_31",
    "if (*(rsi + 2) != 0)",
    "if (i_41 != *(rsi + 0xc) || *(*((sx.q(*(rsi + 4)) << 5) + r13[4] + 0x18) + 4) != *(rsi + 0x10))",
    "int64_t* rdx_77 = r11[0x15]",
    "if (rdx_77 != 0)",
    "sub_1400169a8(r13, rdx_77)",
    "int64_t rax_273",
    "rax_273, arg2 = sub_140016dac(r13, \"database schema has changed\")",
    "r11 = arg1",
    "r11[0x15] = rax_273",
    "i_26 = sx.q(*(rsi + 4))",
    "if (**((i_26 << 5) + r13[4] + 0x18) != i_41)",
    "i_26, arg2 = sub_14004e2cc(r13, i_26.d)",
    "r11 = arg1",
    "r11[0x19].d &= 0xfffffffd",
    "r11[0x19].d |= 1",
    "rdi = 0x11",
    "var_308 = 0x11",
    "goto label_14003a283",
    "label_14003a283:",
    "if (rdi != 0)",
    "goto label_140038941",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 3",
    "rbp_57 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "void* rdi_10 = *(rbp_57 + 0x38)",
    "if (*(rdi_10 + 0x58) == 0)",
    "i_26 = *(rdi_10 + 0x38)",
    "*(rdi_10 + 0x38) = *(i_26 + 8)",
    "*(i_26 + 8) = 0",
    "if (*(rdi_10 + 0x40) == 0)",
    "uint64_t i_4",
    "i_4 = *(i_26 + 8)",
    "sub_1400169a8(r13, i_26)",
    "i_26 = i_4",
    "do while (i_4 != 0)",
    "rdi = not.d(sbb.d(rdi_10.d, rdi_10.d, *(rdi_10 + 0x38) != 0)) & 0x65",
    "var_308 = rdi",
    "int32_t* rcx_340 = *(rdi_10 + 0x18)",
    "int32_t var_298 = 0",
    "uint32_t rax_427",
    "rax_427, i_26, arg2 = sub_14003f7cc(rcx_340, &var_298)",
    "rdi = rax_427",
    "var_308 = rax_427",
    "if (rax_427 == 0 && var_298 != 0)",
    "rdi = 0x65",
    "var_308 = rdi",
    "goto label_14003b9b5",
    "case 4, 5",
    "rbp_57 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "uint32_t rax_432",
    "rax_432, i_26 = (*(rsi + 0x10))(*(rbp_57 + 0x38), zx.q(*(rsi + 0xc)))",
    "rdi = rax_432",
    "var_308 = rax_432",
    "label_14003b9b5:",
    "*(rbp_57 + 0x28) = 0",
    "if (rdi != 0)",
    "if (rdi != 0x65)",
    "goto label_140038941",
    "rdi = 0",
    "var_308 = 0",
    "*(rbp_57 + 2) = 1",
    "label_14003c339:",
    "r11 = arg1",
    "goto label_14003c348",
    "r11 = arg1",
    "*(rbp_57 + 2) = 0",
    "uint64_t rax_433 = zx.q(*(rsi + 2))",
    "*(r11 + (rax_433 << 2) + 0xd4) += 1",
    "label_14003d271:",
    "rsi = &r12[sx.q(*(rsi + 8) - 1) * 0x18]",
    "label_14003c348:",
    "if (r13[0x2c].d != 0)",
    "goto label_14003c351",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 6",
    "int32_t r8_91 = *(rsi + 8)",
    "int32_t rdx_190 = *(rsi + 4)",
    "int32_t var_270 = 0xffffffff",
    "int32_t var_274 = 0xffffffff",
    "var_318 = &var_270",
    "int32_t var_278 = 0",
    "uint32_t rax_579",
    "rax_579, i_26, arg2, zmm1 = sub_140083d94(r13, rdx_190, r8_91, &var_274, var_318)",
    "rdi = rax_579",
    "var_308 = rax_579",
    "if (rax_579 != 0)",
    "if (rdi != 5)",
    "goto label_140038941",
    "rdi = 0",
    "var_308 = 0",
    "var_278 = 1",
    "int64_t i_5 = 0",
    "void* rbx_126 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "int64_t rax_580 = sx.q((&var_278)[i_5])",
    "if ((*(rbx_126 + 8) & 0x2400) == 0)",
    "*rbx_126 = rax_580",
    "*(rbx_126 + 8) = 4",
    "i_26, arg2 = sub_1400315a0(rbx_126, rax_580)",
    "i_5 += 1",
    "rbx_126 += 0x38",
    "do while (i_5 s< 3)",
    "r13 = var_2f8",
    "goto label_14003874b",
    "case 7",
    "int32_t* rax_581",
    "rax_581, arg2 = sub_140037bb4(r11, rsi)",
    "uint32_t rbx_127 = *(rsi + 0xc)",
    "int64_t* r14_11 = *((sx.q(*(rsi + 4)) << 5) + var_2f8[4] + 8)",
    "int64_t* rbp_85 = *r14_11[1]",
    "uint32_t r12_44 = zx.d(*(rbp_85 + 9))",
    "if (rbx_127 == 0xffffffff)",
    "rbx_127 = r12_44",
    "if (*(rbp_85 + 0x14) u>= 3)",
    "rbx_127 = r12_44",
    "if (*rbp_85[0xa] != 0 && rbp_85[0xc] s> 0)",
    "rbx_127 = r12_44",
    "void* const rcx_477 = &data_1400f386c",
    "if (*(rbp_85 + 0x13) == 0)",
    "rcx_477 = rbp_85[0x1a]",
    "if (rbx_127 == 5)",
    "if (sub_140019074(rcx_477) == 0)",
    "rbx_127 = r12_44",
    "int32_t* rcx_478 = *rbp_85[9]",
    "if (*(rbp_85 + 0x11) != 0)",
    "rbx_127 = r12_44",
    "if (rbp_85[1].b == 0 && (*rcx_478 s< 2 || *(rcx_478 + 0x68) == 0))",
    "rbx_127 = r12_44",
    "if (rbx_127 == r12_44 || (r12_44 != 5 && rbx_127 != 5))",
    "goto label_14003cd65",
    "if (*(var_2f8 + 0x5f) == 0 || *(var_2f8 + 0xcc) s> 1)",
    "r8_83 = \"out of\"",
    "rdi = 1",
    "rdx_163 = \"cannot change %s wal mode from w\u2026\"",
    "if (rbx_127 == 5)",
    "r8_83 = \"into\"",
    "rcx_421 = arg1",
    "goto label_14003da74",
    "uint32_t rdx_197",
    "if (r12_44 != 5)",
    "if (r12_44 == 4)",
    "rdx_197 = 2",
    "label_14003cd3b:",
    "sub_140023170(rbp_85, rdx_197)",
    "if (rdi != 0)",
    "rbx_127 = r12_44",
    "int32_t rdx_195",
    "rdx_195.b = rbx_127 == 5",
    "uint32_t rax_586 = sub_140030114(r14_11, rdx_195 + 1)",
    "rdi = rax_586",
    "var_308 = rax_586",
    "label_14003cd65:",
    "if (rdi != 0)",
    "rbx_127 = r12_44",
    "uint32_t rax_585 = sub_140023370(rbp_85, var_2f8, zmm1)",
    "rdi = rax_585",
    "var_308 = rax_585",
    "if (rdi == 0)",
    "rdx_197 = rbx_127",
    "goto label_14003cd3b",
    "rbx_127 = r12_44",
    "int32_t rax_587",
    "rax_587, arg2, zmm1 = sub_140023170(rbp_85, rbx_127)",
    "rax_581[2].w = 0xa02",
    "int64_t rcx_483",
    "if (rax_587 != 6)",
    "rcx_483 = (&data_1400d84c8)[sx.q(rax_587)]",
    "rcx_483 = 0",
    "*(rax_581 + 0x10) = rcx_483",
    "i_26 = zx.q(i_33)",
    "rax_581[3] = sub_140019074(rcx_483)",
    "*(rax_581 + 0xa) = 1",
    "if (i_26.d != 1)",
    "i_26.b = i_26.b",
    "i_26, arg2, zmm1 = sub_140018a98(rax_581, i_26.b)",
    "i_26.b = i_33",
    "if (rdi != 0)",
    "goto label_140038941",
    "label_140038458:",
    "r13 = var_2f8",
    "i_44 = i_30",
    "label_140038462:",
    "r11 = arg1",
    "r12 = var_300",
    "r9 = arg_20",
    "case 8",
    "void* r9_32",
    "if (*(rsi + 8) == 0)",
    "r9_32 = nullptr",
    "r9_32 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "rax_322, i_26, arg2, zmm1 = sub_14006f2cc(&r11[0x15], r13, *(rsi + 4), r9_32, arg2)",
    "goto label_14003a95c",
    "case 9",
    "int32_t* rdx_213 = sx.q(*(rsi + 0xc)) * 0x38",
    "void* r13_27 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "int32_t rdi_16 = *(rdx_213 + i_44)",
    "int64_t** rbx_130 = *(r13_27 + 0x38)",
    "int64_t r9_34 = sx.q(*(rdx_213 + i_44 + 0x38))",
    "char* rdx_214 = r11[0xe]",
    "int64_t* r12_45 = *rbx_130",
    "int64_t rbp_87 = *r12_45",
    "int64_t rcx_503 = 0",
    "if (r9_34.d s> 0)",
    "int32_t r8_96 = 1",
    "int64_t rax_606 = sx.q(r8_96)",
    "r8_96 += 1",
    "*(rdx_214 + (rcx_503 << 3)) = rax_606 * 0x38 + rdx_213 + i_44 + 0x38",
    "rcx_503 += 1",
    "do while (rcx_503 s< r9_34)",
    "var_318 = rdx_214",
    "uint32_t rax_609 = (*(rbp_87 + 0x40))(rbx_130, zx.q(rdi_16), *(rsi + 0x10), r9_34, var_318, var_310, var_308, var_300, var_2f8, i_30)",
    "r12_9 = arg1",
    "rdi = rax_609",
    "var_308 = rax_609",
    "arg2 = sub_140035b88(r12_9, r12_45)",
    "if (rdi != 0)",
    "break",
    "int32_t rax_610",
    "rax_610, i_26 = (*(rbp_87 + 0x50))(rbx_130)",
    "*(r13_27 + 2) = 0",
    "if (rax_610 != 0)",
    "r12 = var_300",
    "goto label_14003d7a0",
    "label_14003a636:",
    "r13 = var_2f8",
    "label_14003804a:",
    "r11 = arg1",
    "label_140038052:",
    "r12 = var_300",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0xa",
    "if (*(r13 + 0x61) != 0)",
    "goto label_1400396a4",
    "int64_t* rbx_137 = *(*(rsi + 0x10) + 0x10)",
    "if (rbx_137 == 0)",
    "rdi = 6",
    "goto label_140038941",
    "void* r10_6 = *rbx_137",
    "int64_t rcx_525 = 0",
    "if (r10_6 == 0)",
    "rdi = 6",
    "goto label_140038941",
    "i_26 = sx.q(*(rsi + 8))",
    "if (*(r10_6 + 0x68) == 0)",
    "i_26.b = i_33",
    "int64_t r8_100 = r11[0xe]",
    "rbp_1.b = *(r13 + 0x66)",
    "void* rax_630 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "if (i_26.d s> 0)",
    "*(r8_100 + (rcx_525 << 3)) = rax_630",
    "rcx_525 += 1",
    "rax_630 += 0x38",
    "do while (rcx_525 s< i_26)",
    "rax_630.b = rsi[2]",
    "*(r13 + 0x66) = rax_630.b",
    "uint32_t rax_631 = (*(r10_6 + 0x68))(rbx_137)",
    "rdi = rax_631",
    "var_308 = rax_631",
    "*(r13 + 0x66) = rbp_1.b",
    "i_26, arg2 = sub_140035b88(arg1, rbx_137)",
    "int64_t var_210",
    "if (rdi == 0 && *(rsi + 4) != 0)",
    "r13[7] = var_210",
    "if (rdi.b != 0x13 || *(*(rsi + 0x10) + 0x1c) == 0)",
    "r11 = arg1",
    "*(r11 + 0x3c) += 1",
    "if (*(rsi + 2) == 4)",
    "rdi = 0",
    "var_308 = 0",
    "goto label_140038669",
    "char rax_634",
    "if (*(rsi + 2) != 5)",
    "rax_634 = (*(rsi + 2)).b",
    "rax_634 = 2",
    "r11 = arg1",
    "*(r11 + 0xc2) = rax_634",
    "label_14003be23:",
    "if (rdi != 0)",
    "goto label_140038941",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0xb",
    "goto label_14003d271",
    "case 0xc",
    "int64_t* r8_2 = sx.q(*(rsi + 4)) * 0x38",
    "*(r8_2 + i_44 + 8) = 4",
    "*(r8_2 + i_44) = sx.q(((rsi - r12) s/ 0x18).d)",
    "label_14003d7a0:",
    "rsi = &r12[sx.q(*(rsi + 8) - r15) * 0x18]",
    "label_1400382ff:",
    "r13 = var_2f8",
    "goto label_140038304",
    "case 0xd",
    "int64_t* rcx_7 = sx.q(*(rsi + 4)) * 0x38",
    "*(rcx_7 + i_44) = sx.q(*(rsi + 0xc) - 1)",
    "*(rcx_7 + i_44 + 8) = 4",
    "cond:8_1 = *(rsi + 8) != 0",
    "label_140037d5a:",
    "if (cond:8_1)",
    "goto label_14003d7a0",
    "case 0xe",
    "int64_t* r8_4 = sx.q(*(rsi + 4)) * 0x38",
    "int64_t rcx_9 = sx.q(*(r8_4 + i_44))",
    "*(r8_4 + i_44 + 8) = 4",
    "*(r8_4 + i_44) = sx.q(((rsi - r12) s/ 0x18).d)",
    "rsi = &r12[rcx_9 * 0x18]",
    "i_26.b = i_33",
    "case 0xf",
    "int64_t* rbx_28 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "int16_t rax_107 = rbx_28[1].w",
    "if ((4 & rax_107.b) != 0)",
    "rbx_28[1].w = (rax_107 & 0x3e40) | 4",
    "if ((8 & rax_107.b) != 0)",
    "i_26, arg2, zmm1 = sub_14003130c(rbx_28)",
    "i_26.b = i_33",
    "if ((2 & rax_107.b) != 0)",
    "i_26, arg2, zmm1 = sub_1400379cc(rbx_28, 1, arg2.o)",
    "r11 = arg1",
    "r9 = arg_20",
    "i_26.b = i_33",
    "rax_107 = rbx_28[1].w",
    "if ((4 & rax_107.b) == 0)",
    "if (*(rsi + 8) != 0)",
    "goto label_14003d7a0",
    "rdi = 0x14",
    "goto label_140038941",
    "rbx_28[1].w = (rax_107 & 0x3e40) | 4",
    "case 0x10",
    "int32_t rax_140",
    "if (r9 s< 0)",
    "rax_140 = *(rsi + 4)",
    "if (r9 != 0)",
    "rax_140 = *(rsi + 0xc)",
    "rax_140 = *(rsi + 8)",
    "rsi = &r12[sx.q(rax_140 - 1) * 0x18]",
    "case 0x11",
    "void* r10_1 = r11[0x20]",
    "if (r10_1 == 0)",
    "if (*(r11[0x11] + 4) == *(rsi + 4))",
    "goto label_14003d7a0",
    "*(rsi + 4) = *(r11[0x11] + 4)",
    "int64_t rax_153",
    "i_26:rax_153 = muls.dp.q(0x2aaaaaaaaaaaaaab, rsi - r11[0x11])",
    "int64_t r8_21 = i_26 s>> 2",
    "int32_t r8_22 = r8_21.d + (r8_21 u>> 0x3f).d",
    "char r8_23 = r8_22.b & 7",
    "char* r9_6 = zx.q(r8_22) u>> 3",
    "i_26.b = r9_6[*(r10_1 + 0x30)]",
    "if (((1 << r8_23).b & i_26.b) != 0)",
    "goto label_14003d7a0",
    "i_26 = *(r10_1 + 0x30)",
    "r9_6[i_26] |= 1 << r8_23",
    "i_26.b = i_33",
    "r9 = arg_20",
    "*(rsi + 4) = *(r11[0x11] + 4)",
    "case 0x12",
    "int32_t rax_161",
    "rax_161, i_26, arg2, zmm1 = sub_1400312cc(sx.q(*(rsi + 4)) * 0x38 + i_44, *(rsi + 0xc), arg2.o)",
    "cond:21_1 = rax_161 != 0",
    "label_14003918d:",
    "if (cond:21_1)",
    "goto label_14003d7a0",
    "goto label_140038669",
    "case 0x13",
    "void* rcx_120 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "rbx_40 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "if ((*(rcx_120 + 8) & 1) != 0)",
    "label_14003908a:",
    "rcx_359 = rbx_40",
    "label_14003908d:",
    "i_26, arg2 = sub_140031524(rcx_359)",
    "goto label_140038304",
    "int32_t rax_151",
    "rax_151, i_26, arg2, zmm1 = sub_1400312cc(rcx_120, 0, arg2.o)",
    "int64_t rcx_121",
    "rcx_121.b = rax_151 == 0",
    "if ((*(rbx_40 + 8) & 0x2400) != 0)",
    "i_26, arg2 = sub_1400315a0(rbx_40, rcx_121)",
    "goto label_140038304",
    "r11 = arg1",
    "i_26.b = i_33",
    "r9 = arg_20",
    "*rbx_40 = rcx_121",
    "*(rbx_40 + 8) = 4",
    "case 0x14",
    "int32_t rdx_52",
    "rdx_52.b = *(rsi + 0xc) == 0",
    "int32_t rax_162",
    "rax_162, i_26, arg2, zmm1 = sub_1400312cc(sx.q(*(rsi + 4)) * 0x38 + i_44, rdx_52, arg2.o)",
    "if (rax_162 == 0)",
    "goto label_14003d7a0",
    "goto label_140038669",
    "case 0x15",
    "if (*(*(r11[0xf] + (sx.q(*(rsi + 4)) << 3)) + 2) != 0)",
    "i_26, arg2 = sub_140031524(sx.q(*(rsi + 0xc)) * 0x38 + i_44)",
    "goto label_14003d7a0",
    "case 0x16, 0x17, 0x18, 0x19",
    "int32_t r15_7 = 0",
    "void* r12_33 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "*(r12_33 + 2) = 0",
    "*(r12_33 + 3) = 0",
    "*(r12_33 + 0x28) = 0",
    "int32_t var_2e4",
    "if (*(r12_33 + 4) == 0)",
    "bool cond:12_1 = (*(*(r12_33 + 0x38) + 3) & 2) != 0",
    "char var_232_1 = 0",
    "int64_t var_248 = *(r12_33 + 0x40)",
    "if (cond:12_1)",
    "r15_7 = 1",
    "int16_t var_238_1 = *(rsi + 0x10)",
    "char var_236_1 = (sbb.b(2, 2, (rbp_1.b & 1) != 0) & 0xfe) + 1",
    "void* var_240_1 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "var_318 = &var_2e4",
    "uint32_t rax_339",
    "rax_339, i_26, arg2, zmm1 = sub_140029f9c(*(r12_33 + 0x38), &var_248, 0, 0, var_318)",
    "rdi = rax_339",
    "var_308 = rax_339",
    "if (rax_339 != 0)",
    "r12_9 = arg1",
    "break",
    "break",
    "if (r15_7 == 0 || var_232_1 != 0)",
    "goto label_14003abd3",
    "goto label_14003ac8a",
    "void* rbx_67 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "int16_t r13_22 = *(rbx_67 + 8)",
    "int64_t rax_328",
    "rax_328.b = r13_22.b",
    "rax_328.b &= 0x2e",
    "if (rax_328.b == 2)",
    "sub_1400379cc(rbx_67, 0, arg2.o)",
    "int64_t rax_329",
    "rax_329, arg2, zmm1 = sub_140031230(rbx_67)",
    "i_26 = zx.q(*(rbx_67 + 8))",
    "*(rbx_67 + 8) = r13_22",
    "if ((i_26.b & 0x24) == 0)",
    "if ((8 & i_26.b) != 0)",
    "zmm1.o = zx.o(*rbx_67)",
    "arg2.o = zx.o(0)",
    "arg2.q = float.d(rax_329)",
    "if (zmm1.q f>= arg2.q)",
    "if (not(zmm1.q f<= arg2.q) && (1 & rbp_1.b) == 0)",
    "rbp_1 = zx.q(rbp_1.d + 1)",
    "if ((1 & rbp_1.b) != 0)",
    "rbp_1 = zx.q(rbp_1.d - 1)",
    "goto label_14003ab09",
    "if ((1 & i_26.b) != 0 || rbp_1.d s>= 0x18)",
    "r15 = 1",
    "label_14003d0c6:",
    "i_44 = i_30",
    "r12 = var_300",
    "goto label_14003d7a0",
    "uint32_t rax_330",
    "rax_330, i_26, arg2, zmm1 = sub_140029f40(*(r12_33 + 0x38), &var_2e4)",
    "rdi = rax_330",
    "var_308 = rax_330",
    "if (rax_330 == 0)",
    "goto label_14003ac8a",
    "r12_9 = arg1",
    "break",
    "break",
    "label_14003ab09:",
    "var_318 = &var_2e4",
    "uint32_t rax_331",
    "rax_331, i_26, arg2, zmm1 = sub_140029f9c(*(r12_33 + 0x38), nullptr, rax_329, 0, var_318)",
    "*(r12_33 + 0x58) = rax_329",
    "rdi = rax_331",
    "var_308 = rax_331",
    "if (rax_331 != 0)",
    "r12_9 = arg1",
    "break",
    "break",
    "i_44 = i_30",
    "label_14003abd3:",
    "int32_t rax_340 = var_2e4",
    "if (rbp_1.d s< 0x18)",
    "if (rax_340 s> 0 || (rax_340 == 0 && rbp_1.d == 0x16))",
    "char* rcx_264 = *(r12_33 + 0x38)",
    "var_2e4 = 0",
    "uint32_t rax_343",
    "rax_343, i_26, arg2, zmm1 = sub_14002a6d8(rcx_264)",
    "rdi = rax_343",
    "var_308 = rax_343",
    "if (rax_343 != 0)",
    "if (rax_343 != 0x65)",
    "r12_9 = arg1",
    "break",
    "break",
    "rdi = 0",
    "var_308 = 0",
    "var_2e4 = 1",
    "goto label_14003ac8a",
    "int32_t rcx_263",
    "rcx_263.b = **(r12_33 + 0x38) != 0",
    "var_2e4 = rcx_263",
    "label_14003ac8a:",
    "if (var_2e4 != 0)",
    "r15 = 1",
    "goto label_14003d0c6",
    "if (rax_340 s< 0 || (rax_340 == 0 && rbp_1.d == 0x19))",
    "char* rcx_262 = *(r12_33 + 0x38)",
    "var_2e4 = 0",
    "uint32_t rax_341",
    "rax_341, i_26, arg2, zmm1 = sub_14002a57c(rcx_262)",
    "rdi = rax_341",
    "var_308 = rax_341",
    "if (rax_341 != 0)",
    "if (rax_341 != 0x65)",
    "r12_9 = arg1",
    "break",
    "break",
    "r15 = rax_341 - 0x64",
    "rdi = 0",
    "var_308 = 0",
    "var_2e4 = r15",
    "r12 = var_300",
    "goto label_14003d7a0",
    "var_2e4 = 0",
    "r11 = arg1",
    "r13 = var_2f8",
    "i_44 = i_30",
    "r12 = var_300",
    "i_26.b = i_33",
    "r9 = arg_20",
    "if (r15_7 != 0)",
    "rsi = &rsi[0x18]",
    "case 0x1a",
    "if ((*(*(r11[0xf] + (sx.q(*(rsi + 4)) << 3)) + 8) & 8) == 0)",
    "goto label_14003ad17",
    "case 0x1b, 0x1c, 0x1d",
    "label_14003ad17:",
    "void* rbp_43 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "int32_t* rbx_70 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "int64_t* rdi_7",
    "int64_t* r12_34",
    "if (*(rsi + 0x10) s<= 0)",
    "int32_t rax_353",
    "if ((rbx_70[2].w & 0x4000) == 0)",
    "rax_353 = 0",
    "rax_353, r8, arg2 = sub_140030f10(rbx_70, zmm1)",
    "if (rax_353 != 0)",
    "goto label_1400396a4",
    "int64_t* rax_354",
    "rax_354, r8 = sub_140034bdc(*(rbp_43 + 0x40))",
    "r12_34 = rax_354",
    "rdi_7 = rax_354",
    "if (r12_34 == 0)",
    "goto label_1400396a4",
    "sub_140034c34(*(rbp_43 + 0x40), rbx_70[3], *(rbx_70 + 0x10), r12_34)",
    "int64_t var_1d8",
    "rdi_7 = &var_1d8",
    "r12_34 = nullptr",
    "var_1d8 = *(rbp_43 + 0x40)",
    "int32_t* var_1d0_1 = rbx_70",
    "int16_t var_1c8_1 = *(rsi + 0x10)",
    "*(rdi_7 + 0x12) = 0",
    "int32_t rbx_71 = 0",
    "if (*rsi == 0x1b)",
    "int32_t i_6 = 0",
    "if (0 u< rdi_7[2].w)",
    "char* rcx_273 = rdi_7[1] + 8",
    "if ((*rcx_273 & 1) != 0)",
    "rbx_71 = 1",
    "break",
    "i_6 += 1",
    "rcx_273 = &rcx_273[0x38]",
    "do while (i_6 s< zx.d(rdi_7[2].w))",
    "int32_t var_264",
    "var_318 = &var_264",
    "uint32_t rax_356",
    "rax_356, i_26, arg2, zmm1 = sub_140029f9c(*(rbp_43 + 0x38), rdi_7, 0, 0, var_318)",
    "rdi = rax_356",
    "var_308 = rax_356",
    "if (r12_34 != 0)",
    "sub_1400169a8(r13, r12_34)",
    "if (rdi != 0)",
    "goto label_140038941",
    "int32_t rax_357 = var_264",
    "*(rbp_43 + 3) = 0",
    "*(rbp_43 + 0x2c) = rax_357",
    "int32_t rcx_276",
    "rcx_276.b = rax_357 == 0",
    "*(rbp_43 + 0x28) = 0",
    "*(rbp_43 + 2) = 1 - rcx_276.b",
    "if (*rsi == 0x1d)",
    "cond:33_1 = rcx_276 != 0",
    "goto label_14003ae4b",
    "if (rbx_71 != 0)",
    "r12 = var_300",
    "goto label_14003d7a0",
    "r12 = var_300",
    "if (rcx_276 == 0)",
    "goto label_14003d7a0",
    "goto label_140038af5",
    "case 0x1e",
    "void* rdx_100 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "if ((*(rdx_100 + 8) & 0x24) != 0)",
    "goto label_14003af0b",
    "int64_t var_120",
    "i_26, arg2 = memcpy(&var_120, rdx_100, 0x38)",
    "char var_118",
    "char r11_16 = var_118",
    "if ((4 & r11_16) == 0)",
    "if ((8 & r11_16) != 0)",
    "i_26, arg2, zmm1 = sub_14003130c(&var_120)",
    "r11_16 = var_118",
    "if ((2 & r11_16) != 0)",
    "i_26, arg2, zmm1 = sub_1400379cc(&var_120, 1, arg2.o)",
    "r11_16 = var_118",
    "if ((4 & r11_16) == 0)",
    "goto label_14003d7a0",
    "rbp_44 = var_120",
    "r11 = arg1",
    "goto label_14003af1a",
    "case 0x1f",
    "label_14003af0b:",
    "rbp_44 = *(sx.q(*(rsi + 0xc)) * 0x38 + i_44)",
    "label_14003af1a:",
    "void* rbx_72 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "char* rcx_281 = *(rbx_72 + 0x38)",
    "int32_t var_290 = 0",
    "var_318 = &var_290",
    "uint32_t rax_362",
    "rax_362, i_26, arg2, zmm1 = sub_140029f9c(rcx_281, nullptr, rbp_44, 0, var_318)",
    "rdi = rax_362",
    "var_308 = rax_362",
    "int32_t rax_363 = var_290",
    "*(rbx_72 + 0x58) = rbp_44",
    "*(rbx_72 + 2) = 0",
    "*(rbx_72 + 0x28) = 0",
    "*(rbx_72 + 3) = 0",
    "*(rbx_72 + 0x2c) = rax_363",
    "if (rax_363 == 0)",
    "goto label_140038aec",
    "if (*(rsi + 8) != 0)",
    "goto label_14003d7a0",
    "rax_364, i_26, arg2, zmm1 = sub_140084e38(0x159cf, arg2)",
    "label_14003af84:",
    "var_308 = rax_364",
    "rdi = rax_364",
    "label_140038aec:",
    "if (rdi != 0)",
    "goto label_140038941",
    "goto label_140038af5",
    "case 0x20, 0x82",
    "int64_t rcx_325 = sx.q(*(rsi + 4))",
    "int64_t rax_409 = r11[0xf]",
    "int32_t var_294 = 0",
    "void* rbx_88 = *(rax_409 + (rcx_325 << 3))",
    "char* rcx_326 = *(rbx_88 + 0x38)",
    "if (rbp_1.b == 0x82)",
    "*(rbx_88 + 0x2c) = 0xffffffff",
    "if (rbp_1.b != 0x82 || *rcx_326 != 0)",
    "uint32_t rax_410",
    "rax_410, i_26, arg2, zmm1 = sub_140029f40(rcx_326, &var_294)",
    "rdi = rax_410",
    "var_308 = rax_410",
    "int32_t rax_411 = var_294",
    "*(rbx_88 + 3) = 0",
    "*(rbx_88 + 0x28) = 0",
    "*(rbx_88 + 2) = rax_411.b",
    "if (rdi != 0)",
    "goto label_140038941",
    "if (*(rsi + 8) s<= 0)",
    "goto label_140038af5",
    "cond:33_1 = rax_411 != 0",
    "label_14003ae50:",
    "if (cond:33_1)",
    "goto label_14003d7a0",
    "goto label_140038af5",
    "case 0x21",
    "char* rbx_89 = *(*(r11[0xf] + (sx.q(*(rsi + 4)) << 3)) + 0x38)",
    "uint32_t rax_413",
    "rax_413, i_26, arg2, zmm1 = sub_140029cbc(rbx_89)",
    "rdi = rax_413",
    "var_308 = rax_413",
    "int32_t var_2ac",
    "int32_t rbp_55",
    "if (rax_413 == 0)",
    "rbp_55 = 0",
    "var_2ac = 0",
    "uint32_t rax_414",
    "rax_414, i_26, arg2, zmm1 = sub_140029e50(rbx_89)",
    "rdi = rax_414",
    "var_308 = rax_414",
    "if (rdi != 0x10)",
    "rbp_55 = var_2ac",
    "rbp_55 = 1",
    "var_2ac = 1",
    "rdi = 0",
    "var_308 = 0",
    "if (rdi != 0)",
    "goto label_140038941",
    "if (rbp_55 != 0)",
    "goto label_14003d7a0",
    "if (*rbx_89 != 0)",
    "goto label_140038af5",
    "void* rax_415 = *(rbx_89 + 0x88)",
    "if (*(rax_415 + 8) == 0)",
    "goto label_140038af5",
    "int32_t i_7 = sx.d(rbx_89[0x54])",
    "uint64_t rcx_331 = zx.q(*(rax_415 + 0x18))",
    "char r8_68 = 0",
    "if (i_7 s> 0)",
    "uint64_t rax_416 = zx.q(r8_68)",
    "r8_68 += 1",
    "rcx_331 *= zx.q(*(*(rbx_89 + (rax_416 << 3) + 0x90) + 0x18))",
    "do while (zx.d(r8_68) s< i_7)",
    "if (rcx_331 s< 0)",
    "goto label_140038af5",
    "int16_t rax_419",
    "rax_419, i_26 = sub_14001a0b8(rcx_331)",
    "if (sx.d(rax_419) s>= *(rsi + 0xc))",
    "goto label_140038af5",
    "var_2ac = 1",
    "goto label_14003d7a0",
    "case 0x22, 0x23",
    "*(r11 + 0xdc) += 1",
    "label_14003b837:",
    "int32_t rbp_56 = 1",
    "char* r12_38 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "char* rbx_90 = *(r12_38 + 0x38)",
    "if (*r12_38 != 1)",
    "uint32_t rax_424",
    "rax_424, i_26, arg2, zmm1 = sub_140029cbc(rbx_90)",
    "rdi = rax_424",
    "var_308 = rax_424",
    "if (rax_424 == 0)",
    "rbp_56 = 0",
    "uint32_t rax_425",
    "rax_425, i_26, arg2, zmm1 = sub_140029e50(rbx_90)",
    "rdi = rax_425",
    "var_308 = rax_425",
    "if (rdi == 0x10)",
    "rdi = 0",
    "var_308 = 0",
    "r12_38[3] = 0",
    "*(r12_38 + 0x28) = 0",
    "rdi = 0",
    "var_308 = 0",
    "if (rbx_90[0x58] != 0)",
    "uint32_t rax_422",
    "rax_422, i_26, arg2 = sub_14003f984(rbx_90)",
    "rdi = rax_422",
    "var_308 = rax_422",
    "if (rax_422 == 0)",
    "uint32_t rax_423",
    "rax_423, i_26, arg2 = sub_140040270(rbx_90)",
    "rdi = rax_423",
    "var_308 = rax_423",
    "rbp_56 = 0",
    "if (*(rbx_90 + 0x38) != 0)",
    "rbp_56 = 0",
    "uint32_t rax_421",
    "rax_421, i_26, arg2 = sub_14003f48c(&rbx_90[0x60], &rbx_90[0x38], zmm1)",
    "rdi = rax_421",
    "var_308 = rax_421",
    "if (rdi != 0)",
    "goto label_140038941",
    "r12_38[2] = rbp_56.b",
    "cond:33_1 = rbp_56 != 0",
    "label_14003ae4b:",
    "r12 = var_300",
    "goto label_14003ae50",
    "case 0x24",
    "goto label_14003b837",
    "case 0x25, 0x26, 0x27, 0x28",
    "void* rdx_134 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "int64_t rax_459 = *(rdx_134 + 0x40)",
    "var_2e0 = 0",
    "int64_t var_208 = rax_459",
    "int16_t rax_460 = *(rsi + 0x10)",
    "int16_t var_1f8_1 = rax_460",
    "rax_460.b = sbb.b(rax_460.b, rax_460.b, rbp_1.b u< 0x27)",
    "char var_1f6_1 = rax_460.b",
    "void* var_200_1 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "uint32_t rax_464",
    "rax_464, i_26, arg2, zmm1 = sub_140035a9c(arg2, rdx_134, &var_208, &var_2e0, zmm1)",
    "rdi = rax_464",
    "var_308 = rax_464",
    "int32_t rax_465 = var_2e0",
    "int32_t rax_466",
    "if ((*rsi & 1) == 0)",
    "rax_466 = rax_465 + 1",
    "rax_466 = neg.d(rax_465)",
    "if (rdi != 0)",
    "goto label_140038941",
    "if (rax_466 s> 0)",
    "goto label_14003d7a0",
    "goto label_140038669",
    "case 0x29",
    "void* rbp_68 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "int64_t* rax_506",
    "int64_t* rbx_107",
    "if ((*(rbp_68 + 8) & 0x10) != 0)",
    "rbx_107 = *(rbp_68 + 0x10)",
    "if ((*(rbx_107 + 0x32) & 2) == 0)",
    "if ((*(rbx_107 + 0x32) & 1) == 0)",
    "void* rax_505",
    "rax_505, i_26, arg2 = sub_14001ec4c(rbx_107[2])",
    "rbx_107[2] = rax_505",
    "*(rbx_107 + 0x32) |= 3",
    "rax_506 = rbx_107[2]",
    "if ((*(rbp_68 + 8) & 0x10) == 0 || rax_506 == 0)",
    "i_26, arg2 = sub_140031524(rbp_68)",
    "r11 = arg1",
    "goto label_14003d271",
    "int64_t rbp_69 = *rax_506",
    "int64_t rax_507 = rax_506[1]",
    "rbx_107[2] = rax_507",
    "if (rax_507 == 0)",
    "sub_14001eac0(rbx_107)",
    "void* rax_510 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "if ((*(rax_510 + 8) & 0x2400) == 0)",
    "*rax_510 = rbp_69",
    "*(rax_510 + 8) = 4",
    "i_26, arg2 = sub_1400315a0(rax_510, rbp_69)",
    "goto label_14003c339",
    "case 0x2a",
    "int32_t r12_41 = *(rsi + 0x10)",
    "int64_t* rbp_71 = sx.q(*(rsi + 0xc)) * 0x38",
    "void* rbx_110 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "if ((*(rbx_110 + 8) & 0x10) == 0)",
    "int32_t rax_512",
    "rax_512, r8, arg2 = sub_1400315cc(rbx_110, zmm1)",
    "if (rax_512 != 0)",
    "goto label_1400396a4",
    "if (r12_41 != 0)",
    "int32_t rax_513",
    "rax_513, i_26, arg2 = sub_14001ee18(*(rbx_110 + 0x10), r12_41, *(rbp_71 + i_44), zmm1)",
    "if (rax_513 != 0)",
    "r12 = var_300",
    "goto label_14003d7a0",
    "if (r12_41 s< 0)",
    "goto label_14003804a",
    "sub_14001ebb0(*(rbx_110 + 0x10), *(rbp_71 + i_44), zmm1)",
    "goto label_14003874b",
    "case 0x2b, 0x2c",
    "int32_t rax_143",
    "uint64_t zmm0_1[0x2]",
    "rax_143, zmm0_1 = sub_1400312cc(sx.q(*(rsi + 4)) * 0x38 + i_44, 2, arg2.o)",
    "int64_t rbx_37 = sx.q(rax_143)",
    "int32_t rax_144",
    "rax_144, i_26, arg2, zmm1 = sub_1400312cc(sx.q(*(rsi + 8)) * 0x38 + i_44, 2, zmm0_1)",
    "int64_t r11_8 = sx.q(rax_144)",
    "uint32_t rax_145",
    "if (*rsi != 0x2c)",
    "rax_145 = zx.d(*(rbx_37 * 3 + r11_8 + 0x1400d7250))",
    "rax_145 = zx.d(*(rbx_37 * 3 + r11_8 + 0x1400d7240))",
    "r11 = arg1",
    "i_26.b = i_33",
    "r9 = arg_20",
    "void* rcx_113 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "if (rax_145 != 2)",
    "*rcx_113 = sx.q(rax_145)",
    "*(rcx_113 + 8) &= 0x3e40",
    "*(rcx_113 + 8) |= 4",
    "*(rcx_113 + 8) &= 0x3e40",
    "*(rcx_113 + 8) |= 1",
    "case 0x2d",
    "int64_t* r14_10 = *(rsi + 0x10)",
    "int64_t* rbx_113 = sx.q(*(rsi + 0xc)) * 0x38 + i_30",
    "if (*(rsi + 2) == 0)",
    "label_14003c454:",
    "if (r11[0x22].d s>= *(r13 + 0xa4))",
    "rdi = 1",
    "arg2 = sub_140032200(r11, \"too many levels of trigger recur\u2026\", r8, arg2)",
    "goto label_14003d8d9",
    "int64_t** r12_42",
    "if ((rbx_113[1].b & 0x10) != 0)",
    "r12_42 = rbx_113[2]",
    "label_14003c5b7:",
    "r11[0x22].d += 1",
    "r12_42[1] = r11[0x20]",
    "i_30 = &r12_42[0xe]",
    "r12_42[8] = r13[7]",
    "r12_42[0xd].d = *(r11 + 0x3c)",
    "*(r12_42 + 0x6c) = *(*r11 + 0x74)",
    "r12_42[9] = r11[0x24]",
    "r11[0xd] = &r12_42[0xe]",
    "r11[0x24] = 0",
    "*(r11 + 0x3c) = 0",
    "r11[0x20] = r12_42",
    "int64_t rcx_438 = sx.q(r12_42[0xc].d)",
    "r11[5].d = rcx_438.d",
    "*(r11 + 0x2c) = zx.d(*(r12_42 + 0x64))",
    "void* rcx_440 = rcx_438 * 0x38 + &r12_42[0xe]",
    "r11[0xf] = rcx_440",
    "void* rcx_441 = rcx_440 + (sx.q(r14_10[2].d) << 3)",
    "r12_42[6] = rcx_441",
    "int32_t temp19_1",
    "int32_t temp20_1",
    "temp19_1:temp20_1 = sx.q(r14_10[1].d + 7)",
    "i_26, arg2 = memset(rcx_441, 0, sx.q((temp20_1 + (temp19_1 & 7)) s>> 3))",
    "r12 = *r14_10",
    "r11 = arg1",
    "r11[0x11] = r12",
    "i_44 = i_30",
    "r11[0x12].d = r14_10[1].d",
    "var_300 = r12",
    "rsi = &r12[-0x18]",
    "goto label_14003c348",
    "int32_t rcx_427 = r14_10[2].d",
    "int32_t rbp_72 = rcx_427 + *(r14_10 + 0xc)",
    "if (rcx_427 == 0)",
    "rbp_72 += 1",
    "int32_t temp21_1",
    "int32_t temp22_1",
    "temp21_1:temp22_1 = sx.q(r14_10[1].d + 7)",
    "int32_t r13_25 = ((temp22_1 + (temp21_1 & 7)) s>> 3) + (((rbp_72 + 2) * 7 + r14_10[2].d) << 3)",
    "int64_t* rax_522",
    "rax_522, r8, arg2 = sub_140016ba8(var_2f8, sx.q(r13_25))",
    "r12_42 = rax_522",
    "if (rax_522 == 0)",
    "goto label_140039696",
    "if ((rbx_113[1].w & 0x2400) != 0 || rbx_113[4].d != 0)",
    "sub_14003118c(rbx_113)",
    "r11 = arg1",
    "*(rbx_113 + 0xc) = r13_25",
    "r13 = var_2f8",
    "rbx_113[2] = r12_42",
    "rbx_113[1].w = 0x410",
    "rbx_113[6] = sub_140033118",
    "*r12_42 = r11",
    "r12_42[0xc].d = rbp_72",
    "*(r12_42 + 0x64) = r14_10[2].d",
    "*(r12_42 + 0x54) = ((rsi - var_300) s/ 0x18).d",
    "r12_42[4] = r11[0xd]",
    "*(r12_42 + 0x5c) = r11[5].d",
    "r12_42[5] = r11[0xf]",
    "r12_42[0xa].d = *(r11 + 0x2c)",
    "r12_42[2] = r11[0x11]",
    "r12_42[0xb].d = r11[0x12].d",
    "r12_42[7] = r14_10[4]",
    "void* i_8 = &r12_42[0xe]",
    "while (i_8 != (sx.q(rbp_72) + 2) * 0x38 + r12_42)",
    "*(i_8 + 8) = 0x80",
    "*(i_8 + 0x28) = r13",
    "i_8 += 0x38",
    "goto label_14003c5b7",
    "void* rax_514 = r11[0x20]",
    "if (rax_514 == 0)",
    "goto label_14003c454",
    "while (*(rax_514 + 0x38) != r14_10[4])",
    "rax_514 = *(rax_514 + 8)",
    "if (rax_514 == 0)",
    "break",
    "if (rax_514 == 0)",
    "goto label_14003c454",
    "i_44 = i_30",
    "case 0x2e",
    "bool cond:22_1",
    "if (*(rsi + 4) == 0)",
    "cond:22_1 = r11[0xa] != 0",
    "cond:22_1 = r13[0x51] != 0",
    "if (not(cond:22_1))",
    "cond:23_1 = r13[0x52] == 0",
    "goto label_1400391e2",
    "case 0x2f",
    "uint64_t* rcx_449 = sx.q(*(rsi + 4)) * 0x38",
    "i_26 = *(rcx_449 + i_44)",
    "if (i_26 s> 0)",
    "*(rcx_449 + i_44) = i_26 - sx.q(*(rsi + 0xc))",
    "goto label_14003d7a0",
    "i_26.b = i_33",
    "case 0x30",
    "int64_t* rcx_453 = sx.q(*(rsi + 4)) * 0x38",
    "int64_t rax_556 = *(rcx_453 + i_44)",
    "if (rax_556 != 0)",
    "if (rax_556 s> 0)",
    "*(rcx_453 + i_44) = rax_556 - 1",
    "goto label_14003d7a0",
    "case 0x31",
    "int64_t* rcx_455 = sx.q(*(rsi + 4)) * 0x38",
    "int64_t rax_558 = *(rcx_455 + i_44)",
    "if (rax_558 s> -0x8000000000000000)",
    "*(rcx_455 + i_44) = rax_558 - 1",
    "cond:23_1 = *(rcx_455 + i_44) == 0",
    "goto label_1400391e2",
    "case 0x32",
    "cond:8_1 = (*(sx.q(*(rsi + 4)) * 0x38 + i_44 + 8) & 1) != 0",
    "goto label_140037d5a",
    "case 0x33",
    "cond:23_1 = (*(sx.q(*(rsi + 4)) * 0x38 + i_44 + 8) & 1) == 0",
    "label_1400391e2:",
    "if (cond:23_1)",
    "goto label_14003d7a0",
    "case 0x34, 0x35, 0x36, 0x37, 0x38, 0x39",
    "int64_t* rbp_25 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "int64_t* r12_13 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "int16_t rbx_35 = rbp_25[1].w",
    "int16_t r13_7 = r12_13[1].w",
    "uint32_t rcx_88",
    "rcx_88.w = rbx_35 | r13_7",
    "int32_t rcx_91",
    "uint32_t r8_16",
    "if ((1 & rcx_88.b) == 0)",
    "rax_3.b = rsi[2]",
    "rax_3.b &= 0x47",
    "if (rax_3.b s< 0x43)",
    "if (rax_3.b == 0x42)",
    "if ((2 & r13_7.b) == 0 && (r13_7.b & 0x2c) != 0)",
    "r8.b = 1",
    "i_26, r8, arg2, zmm1 = sub_140030f6c(r12_13, i_26.b, r8.b, arg2, zmm1)",
    "i_26.b = i_33",
    "r13_7 ^= (r13_7 ^ r12_13[1].w) & 0x3e40",
    "if ((2 & rbx_35.b) == 0 && (rbx_35.b & 0x2c) != 0)",
    "r8.b = 1",
    "sub_140030f6c(rbp_25, i_26.b, r8.b, arg2, zmm1)",
    "rbx_35 ^= (rbx_35 ^ rbp_25[1].w) & 0x3e40",
    "goto label_140038d37",
    "if ((2 & rcx_88.b) != 0)",
    "rax_3.b = r13_7.b",
    "rax_3.b &= 0x2e",
    "if (rax_3.b == 2)",
    "rax_3, arg2, zmm1 = sub_1400379cc(r12_13, 0, arg2.o)",
    "rbx_35 = rbp_25[1].w",
    "rax_3.b = rbx_35.b",
    "rax_3.b &= 0x2e",
    "if (rax_3.b == 2)",
    "rax_3, arg2, zmm1 = sub_1400379cc(rbp_25, 0, arg2.o)",
    "rax_3.b = r12_13[1].b",
    "rax_3.b &= rbp_25[1].b",
    "if ((rax_3.b & 4) == 0)",
    "label_140038d37:",
    "int32_t rax_123",
    "rax_123, arg2, zmm1 = sub_140034f80(rbp_25, r12_13, *(rsi + 0x10))",
    "rcx_91 = rax_123",
    "label_140038d41:",
    "if (rcx_91 s< 0)",
    "goto label_140038d50",
    "if (rcx_91 != 0)",
    "goto label_140038c2b",
    "goto label_140038d6e",
    "int64_t rax_119 = *r12_13",
    "int64_t temp17_1 = *rbp_25",
    "if (temp17_1 s> rax_119)",
    "rcx_91 = 1",
    "label_140038c2b:",
    "r8_16 = zx.d(*(zx.q(*rsi) + 0x1400d7204))",
    "goto label_140038c34",
    "if (temp17_1 s>= rax_119)",
    "goto label_140038b50",
    "rcx_91 = -1",
    "label_140038d50:",
    "r8_16 = zx.d(*(zx.q(*rsi) + 0x1400d71f4))",
    "goto label_140038c34",
    "if ((rsi[2] & 0x80) == 0)",
    "r12 = var_300",
    "if ((rsi[2] & 0x20) == 0)",
    "if ((rsi[2] & 0x10) != 0)",
    "goto label_14003d7a0",
    "r13 = var_2f8",
    "r9 = 1",
    "arg_20 = 1",
    "void* rax_118 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "*(rax_118 + 8) &= 0x3e40",
    "*(rax_118 + 8) |= 1",
    "r13 = var_2f8",
    "if ((1 & rbx_35.b & r13_7.b) == 0 || (0x100 & rbx_35) != 0)",
    "rcx_91 = (sbb.d(rcx_88, rcx_88, (rbx_35.b & 1) != 0) & 0xfffffffe) + 1",
    "goto label_140038d41",
    "label_140038b50:",
    "rcx_91 = 0",
    "label_140038d6e:",
    "r8_16 = zx.d(*(zx.q(*rsi) + 0x1400d71fc))",
    "label_140038c34:",
    "r12_13[1].w = r13_7",
    "rbp_25[1].w = rbx_35",
    "if ((rsi[2] & 0x20) == 0)",
    "r12 = var_300",
    "if (r8_16 != 0)",
    "goto label_14003d7a0",
    "r11 = arg1",
    "r13 = var_2f8",
    "i_26.b = i_33",
    "r9 = arg_20",
    "r9 = rcx_91",
    "arg_20 = rcx_91",
    "i_26 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "int32_t rax_121",
    "if ((rsi[2] & 8) != 0)",
    "rax_121.b = *rsi == 0x35",
    "if ((rsi[2] & 8) != 0 && rax_121 == r8_16)",
    "label_140038e60:",
    "r13 = var_2f8",
    "r11 = arg1",
    "r12 = var_300",
    "i_26.b = i_33",
    "r11 = arg1",
    "r13 = var_2f8",
    "r12 = var_300",
    "*(i_26 + 8) &= 0x3e40",
    "*(i_26 + 8) |= 4",
    "*i_26 = sx.q(r8_16)",
    "i_26.b = i_33",
    "case 0x3a",
    "cond:8_1 = r9 != 0",
    "goto label_140037d5a",
    "case 0x3b",
    "uint32_t rax_592",
    "rax_592, i_26, arg2, zmm1 = sub_140028efc(*((sx.q(*(rsi + 4)) << 5) + r13[4] + 8))",
    "rdi = rax_592",
    "var_308 = rax_592",
    "if (rax_592 == 0)",
    "goto label_140038af5",
    "if (rax_592 != 0x65)",
    "goto label_140038941",
    "rdi = 0",
    "var_308 = 0",
    "goto label_14003d7a0",
    "case 0x3c",
    "void* rbp_89 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "if (*(rbp_89 + 2) == 0)",
    "int64_t* rbx_133 = **(rbp_89 + 0x38)",
    "int64_t r12_47 = *rbx_133",
    "uint32_t rax_618 = (*(r12_47 + 0x48))()",
    "rdi = rax_618",
    "var_308 = rax_618",
    "arg2 = sub_140035b88(arg1, rbx_133)",
    "if (rdi != 0)",
    "goto label_140038941",
    "int32_t rax_619",
    "rax_619, i_26 = (*(r12_47 + 0x50))(*(rbp_89 + 0x38))",
    "r12 = var_300",
    "if (rax_619 != 0)",
    "goto label_14003c339",
    "r11 = arg1",
    "goto label_14003d271",
    "case 0x3d, 0xa8",
    "if ((r13[0xd].b & 1) != 0 && (r11[0x19].b & 0x10) == 0)",
    "int64_t r9_37 = *(rsi + 0x10)",
    "if (r9_37 != 0)",
    "label_14003d6c6:",
    "if (*(r13 + 0xd4) s<= 1)",
    "r13[0x1d](1, r13[0x1e], r11, r9_37, var_318, var_310, var_308, var_300, var_2f8, i_30)",
    "int64_t* rax_655",
    "rax_655, arg2, zmm1 = _printf_p_l(r13, \"-- %s\", r9_37, arg2)",
    "r13[0x1d](1, r13[0x1e], arg1, rax_655, var_318, var_310, var_308, var_300, var_2f8, i_30)",
    "if (rax_655 != 0)",
    "sub_1400169a8(r13, rax_655)",
    "i_26.b = i_33",
    "r11 = arg1",
    "r9_37 = r11[0x1e]",
    "if (r9_37 != 0)",
    "goto label_14003d6c6",
    "r9 = arg_20",
    "if (*(rsi + 4) s< data_14013d1e0)",
    "label_14003d78f:",
    "*(rsi + 4) += 1",
    "*(r11 + 0xec) += 1",
    "goto label_14003d7a0",
    "if (*rsi != 0xa8)",
    "i_26 = 1",
    "if (r11[0x12].d s> 1)",
    "char* rax_657 = 0x18",
    "int64_t rcx_547 = r11[0x11]",
    "if (rax_657[rcx_547] == 0x11)",
    "*(rax_657 + rcx_547 + 4) = 0",
    "i_26 = zx.q(i_26.d + 1)",
    "rax_657 = &rax_657[0x18]",
    "do while (i_26.d s< r11[0x12].d)",
    "*(rsi + 4) = 0",
    "goto label_14003d78f",
    "case 0x3e, 0x3f",
    "uint32_t rbx_138 = zx.d(*(rsi + 2))",
    "int64_t* rax_641",
    "rax_641, r8 = sub_140016c18(r13, (sx.q(rbx_138 - 1) << 3) + 0x38, zmm1)",
    "if (rax_641 == 0)",
    "goto label_1400396a4",
    "*rax_641 = 0",
    "int64_t rcx_536 = *(rsi + 0x10)",
    "*(rax_641 + 0x24) = 0",
    "rax_641[1] = rcx_536",
    "*(rax_641 + 0x29) = rbx_138.b",
    "r12_49 = arg1",
    "rax_641[3] = r12_49",
    "rax_641[4].d = ((rsi - r12) s/ 0x18).d",
    "*rsi += 2",
    "rsi[1] = 0xf0",
    "*(rsi + 0x10) = rax_641",
    "goto label_14003d547",
    "case 0x40, 0x41",
    "r12_49 = arg1",
    "label_14003d547:",
    "void** rbp_92 = *(rsi + 0x10)",
    "void* rbx_141 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "if (*rbp_92 != rbx_141)",
    "uint32_t rdx_237 = zx.d(*(rbp_92 + 0x29))",
    "*rbp_92 = rbx_141",
    "int32_t i_27 = rdx_237 - 1",
    "int64_t i_9 = sx.q(i_27)",
    "if (rdx_237 - 1 s>= 0)",
    "void** r9_35 = &rbp_92[i_9 + 6]",
    "i_9 -= 1",
    "int32_t rax_646 = *(rsi + 8) + i_27",
    "i_27 -= 1",
    "*r9_35 = sx.q(rax_646) * 0x38 + i_44",
    "r9_35 -= 8",
    "do while (i_9 s>= 0)",
    "r13 = var_2f8",
    "*(rbx_141 + 8) &= 0x3e40",
    "*(rbx_141 + 8) |= 1",
    "i_26, r8 = (*(rbp_92[1] + 0x18))(rbp_92, zx.q(*(rbp_92 + 0x29)), &rbp_92[6])",
    "int32_t rax_651 = *(rbp_92 + 0x24)",
    "if (rax_651 != 0)",
    "if (rax_651 s> 0)",
    "i_26.b = 1",
    "int64_t rax_652",
    "int512_t zmm0_8",
    "rax_652, zmm0_8 = sub_140031c84(rbx_141, i_26.b, arg2)",
    "arg2, zmm1 = sub_140032200(r12_49, \"%s\", rax_652, zmm0_8)",
    "rdi = *(rbp_92 + 0x24)",
    "var_308 = rdi",
    "i_26, r8 = sub_14003472c(r13, &arg1[0x24], rbp_92[4].d, *(rsi + 4))",
    "*(rbp_92 + 0x24) = 0",
    "if (rax_651 != 0 && rdi != 0)",
    "goto label_140038941",
    "if ((*(rbx_141 + 8) & 0x12) == 0)",
    "goto label_14003804a",
    "uint32_t i_40 = zx.d(i_33)",
    "if ((*(rbx_141 + 8) & 2) != 0 && zx.d(*(rbx_141 + 0xa)) != i_40)",
    "i_26.b = i_40.b",
    "r8, arg2, zmm1 = sub_140018a98(rbx_141, i_26.b)",
    "int32_t rax_654",
    "rax_654, i_26 = sub_140031694(rbx_141)",
    "r11 = arg1",
    "if (rax_654 != 0)",
    "goto label_14003d1f3",
    "goto label_140038052",
    "case 0x42",
    "i_26 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "rax_8 = *i_26",
    "label_140037d1f:",
    "*(i_26 + 8) = 0x80",
    "rsi = &r12[rax_8 * 0x18]",
    "i_26.b = i_33",
    "case 0x43",
    "i_26 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "rax_8 = sx.q(*(r12 + *i_26 * 0x18 + 8) - 1)",
    "goto label_140037d1f",
    "case 0x44",
    "if ((*(sx.q(*(rsi + 0xc)) * 0x38 + i_44 + 8) & 1) != 0)",
    "goto label_140037de6",
    "case 0x45",
    "label_140037de6:",
    "int32_t rbx_4 = ((rsi - r12) s/ 0x18).d",
    "int64_t* rcx_12",
    "if (*(rsi + 4) == 0)",
    "rcx_12 = r11[0x20]",
    "if (*(rsi + 4) != 0 || rcx_12 == 0)",
    "int32_t rcx_549 = *(rsi + 4)",
    "r11[7].d = rcx_549",
    "uint32_t rax_23",
    "rax_23.b = rsi[8]",
    "*(r11 + 0x34) = rbx_4",
    "*(r11 + 0xc2) = rax_23.b",
    "if (rcx_549 != 0)",
    "int64_t* rdi_18",
    "int512_t zmm0_9",
    "if (*(rsi + 2) == 0)",
    "zmm0_9 = sub_140032200(r11, \"%s\", *(rsi + 0x10), arg2)",
    "rdi_18 = arg1",
    "zmm0_9 = sub_140032200(r11, \"%s constraint failed\", *((zx.q(*(rsi + 2)) << 3) + 0x1400d7200), arg2)",
    "rdi_18 = arg1",
    "if (*(rsi + 0x10) != 0)",
    "int64_t* rax_661",
    "rax_661, zmm0_9 = _printf_p_l(r13, \"%z: %s\", rdi_18[0x15], zmm0_9)",
    "rdi_18[0x15] = rax_661",
    "rdi_18[0x1e]",
    "int64_t var_318_3 = rdi_18[0x15]",
    "sub_1400187fc(*(rsi + 4), \"abort at %d in [%s]: %s\", zx.q(rbx_4), zmm0_9)",
    "r11 = arg1",
    "r12_10 = arg1",
    "rdi = sub_1400342d4(r11)",
    "if (rdi != 5)",
    "rdi = (sbb.d(rdi, rdi, arg1[7].d != 0) & 0xffffff9c) + 0x65",
    "r12_10[7].d = 5",
    "goto label_140038a39",
    "r11[0x22].d -= 1",
    "r11[0x20] = rcx_12[1]",
    "int32_t rax_25 = *(r11 + 0x3c)",
    "r13[0xf].d += rax_25",
    "*(r13 + 0x74) = rax_25",
    "int32_t rax_26",
    "rax_26, i_26, arg2, zmm1 = sub_1400339f8(rcx_12)",
    "r11 = arg1",
    "if (*(rsi + 8) == 4)",
    "rax_26 = *(r11[0x11] + sx.q(rax_26) * 0x18 + 8) - 1",
    "r12 = r11[0x11]",
    "i_44 = r11[0xd]",
    "var_300 = r12",
    "i_30 = i_44",
    "rsi = &r12[sx.q(rax_26) * 0x18]",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x46",
    "int64_t* rax_31",
    "rax_31, i_26, arg2 = sub_140037bb4(r11, rsi)",
    "*rax_31 = sx.q(*(rsi + 4))",
    "label_140037ea8:",
    "r11 = arg1",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x47",
    "int64_t* rax_33",
    "rax_33, i_26, arg2 = sub_140037bb4(r11, rsi)",
    "r11_2 = rax_33",
    "label_140037ec7:",
    "*r11_2 = **(rsi + 0x10)",
    "goto label_140037ea8",
    "case 0x48",
    "goto label_140037fc2",
    "case 0x49",
    "int64_t* rax_47",
    "rax_47, i_26, arg2 = sub_140037bb4(r11, rsi)",
    "int32_t rbp_3 = *(rsi + 0xc) - *(rsi + 8)",
    "int64_t* rbx_6 = rax_47",
    "r12.w = sbb.w(r12.w, r12.w, *(rsi + 4) != 0)",
    "r12.w &= 0x100",
    "r12.w += 1",
    "while (true)",
    "*(rbx_6 + 0xc) = 0",
    "rbx_6[1].w = r12.w",
    "if (rbp_3 s<= 0)",
    "break",
    "rbx_6 = &rbx_6[7]",
    "i_26, arg2 = sub_140031524(rbx_6)",
    "rbp_3 -= 1",
    "goto label_14003804a",
    "case 0x4a",
    "void* rax_51 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "*(rax_51 + 8) &= 0xff41",
    "*(rax_51 + 8) |= 1",
    "case 0x4b",
    "int64_t* rax_52 = sub_140037bb4(r11, rsi)",
    "var_318 = nullptr",
    "i_26, arg2, zmm1 = sub_140031820(rax_52, *(rsi + 0x10), *(rsi + 4), 0, r12, zmm1, 0)",
    "i_26.b = i_33",
    "*(rax_52 + 0xa) = i_26.b",
    "r11 = arg1",
    "r9 = arg_20",
    "case 0x4c",
    "int64_t* rbp_6 = sx.q(*(rsi + 4) - 1) * 0x38 + r11[0x10]",
    "if ((rbp_6[1].b & 0x12) == 0)",
    "i_26 = 0",
    "int32_t rcx_30 = *(rbp_6 + 0xc)",
    "if ((rbp_6[1].w & 0x4000) != 0)",
    "rcx_30 += *rbp_6",
    "i_26.b = rcx_30 s> *(rbp_6[5] + 0x7c)",
    "if (i_26.d != 0)",
    "goto label_14003d1f3",
    "void* rbx_10 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "if ((*(rbx_10 + 8) & 0x2400) != 0)",
    "i_26, arg2 = sub_140031524(rbx_10)",
    "r11 = arg1",
    "r9 = arg_20",
    "*rbx_10 = *rbp_6",
    "*(rbx_10 + 8) = rbp_6[1]",
    "*(rbx_10 + 0x10) = rbp_6[2]",
    "*(rbx_10 + 8) = (*(rbx_10 + 8) & 0xebff) | 0x840",
    "i_26.b = i_33",
    "case 0x4d",
    "int32_t i_29 = *(rsi + 0xc)",
    "void* rbp_9 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "int32_t* rbx_13 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "int32_t i_10",
    "i_26, arg2 = sub_1400317cc(rbx_13, rbp_9)",
    "if ((rbx_13[2].w & 0x1000) != 0)",
    "int32_t rax_60",
    "rax_60, i_26, r8, arg2, zmm1 = sub_140030eb4(rbx_13)",
    "if (rax_60 != 0)",
    "goto label_1400396a4",
    "rbp_9 += 0x38",
    "rbx_13 = &rbx_13[0xe]",
    "i_10 = i_29",
    "i_29 -= 1",
    "do while (i_10 != 1)",
    "goto label_14003804a",
    "case 0x4e",
    "int32_t r12_1 = *(rsi + 0xc)",
    "int64_t* rbp_12 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "int32_t* rbx_16 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "while (true)",
    "i_26, arg2 = sub_1400316f8(rbx_16, rbp_12, 0x1000)",
    "if ((rbx_16[2].w & 0x1000) != 0)",
    "int32_t rax_61",
    "rax_61, i_26, r8, arg2, zmm1 = sub_140030eb4(rbx_16)",
    "if (rax_61 != 0)",
    "goto label_1400396a4",
    "int32_t rax_62 = r12_1",
    "r12_1 -= 1",
    "if (rax_62 == 0)",
    "break",
    "rbx_16 = &rbx_16[0xe]",
    "rbp_12 = &rbp_12[7]",
    "goto label_14003804a",
    "case 0x4f",
    "i_26, arg2 = sub_1400316f8(sx.q(*(rsi + 8)) * 0x38 + i_44, sx.q(*(rsi + 4)) * 0x38 + i_44, 0x1000)",
    "goto label_140037ea8",
    "case 0x50",
    "rcx_41 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "i_26 = *(sx.q(*(rsi + 4)) * 0x38 + i_44)",
    "if ((*(rcx_41 + 8) & 0x2400) != 0)",
    "goto label_1400382ab",
    "*rcx_41 = i_26",
    "*(rcx_41 + 8) = 4",
    "i_26.b = i_33",
    "case 0x51",
    "if (r11[0xa] s> 0)",
    "r11[7].d = 0x313",
    "rdx_251 = \"FOREIGN KEY constraint failed\"",
    "*(r11 + 0xc2) = 2",
    "goto label_14003dad8",
    "if (*(*r11 + 0x280) != 0 && r11[8].d != 0)",
    "r8, arg2, zmm1 = sub_140034190(r11, 1, arg2)",
    "r11 = arg1",
    "int32_t i_11 = 0",
    "r11[6].d = (r11[6].d + 2) | 1",
    "void* rbp_95 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "r11[0x14] = rbp_95",
    "if (*(rsi + 8) s> 0)",
    "int16_t* rbx_143 = rbp_95 + 8",
    "if ((*rbx_143 & 0x1000) != 0)",
    "int32_t rax_678",
    "rax_678, r8, arg2, zmm1 = sub_140030eb4(sx.q(i_11) * 0x38 + rbp_95)",
    "if (rax_678 != 0)",
    "goto label_1400396a4",
    "if ((*rbx_143 & 0x202) == 2)",
    "r8, arg2, zmm1 = sub_140030e58(&rbx_143[-4], zmm1)",
    "i_11 += 1",
    "rbx_143 = &rbx_143[0x1c]",
    "do while (i_11 s< *(rsi + 8))",
    "r11 = arg1",
    "if (*(r13 + 0x61) != 0)",
    "goto label_1400396a4",
    "if ((r13[0xd].b & 4) != 0)",
    "r13[0x1d](4, r13[0x1e], r11, 0, var_318, var_310, var_308, var_300, var_2f8, i_30)",
    "r12_10 = arg1",
    "rdi = 0x64",
    "*(r12_10 + 0x34) = ((rsi - r12) s/ 0x18).d + 1",
    "goto label_140038a39",
    "case 0x52",
    "if (*(rsi + 4) != 0)",
    "rax_98 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "if ((*(rax_98 + 8) & 0x2400) != 0)",
    "i_26 = 0",
    "goto label_140038777",
    "*rax_98 = 0",
    "*(rax_98 + 8) = 4",
    "case 0x53",
    "rbx_25 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "int64_t rax_104",
    "rax_104, i_26, arg2, zmm1 = sub_140031230(rbx_25)",
    "*rbx_25 = rax_104",
    "rbx_25[1].w &= 0x3e40",
    "rbx_25[1].w |= 4",
    "rax_106 = sx.q(*(rsi + 8)) + rax_104",
    "label_1400388c3:",
    "*rbx_25 = rax_106",
    "label_140038304:",
    "i_26.b = i_33",
    "r11 = arg1",
    "r9 = arg_20",
    "case 0x54",
    "void* rbx_31 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "if ((*(rbx_31 + 8) & 0x24) != 0)",
    "arg2, i_26, zmm1 = sub_140031294(rbx_31, arg2.o)",
    "*(rbx_31 + 8) &= 0x3e40",
    "*(rbx_31 + 8) |= 8",
    "*rbx_31 = (arg2.o).q",
    "goto label_140038304",
    "case 0x55",
    "int32_t* rbx_34 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "if ((rbx_34[2].w & 0x4000) == 0)",
    "rdi = 0",
    "var_308 = 0",
    "uint32_t rax_114",
    "rax_114, i_26, r8 = sub_140030f10(rbx_34, zmm1)",
    "i_26.b = i_33",
    "rdi = rax_114",
    "var_308 = rax_114",
    "r8.b = i_26.b",
    "i_26.b = rsi[8]",
    "i_26, arg2, zmm1 = sub_14003143c(rbx_34, i_26.b)",
    "goto label_140038aec",
    "case 0x57",
    "int64_t rbp_26",
    "if ((rsi[2] & 1) != 0)",
    "rbp_26 = *(rsi - 8) + 4",
    "rbp_26 = 0",
    "bool cond:19_1 = *(rsi + 0xc) s<= 0",
    "int32_t rcx_97 = *(rsi + 4)",
    "i_26 = zx.q(*(rsi + 8))",
    "void* r15_2 = *(rsi + 0x10)",
    "var_2e0 = rcx_97",
    "i_31 = i_26.d",
    "int32_t r13_8 = 0",
    "void* rbx_36 = nullptr",
    "if (cond:19_1)",
    "r13 = var_2f8",
    "i_26.b = i_33",
    "void** r14_1 = r15_2 + 0x20",
    "i_32 = sx.q(*(rsi + 0xc))",
    "while (true)",
    "int32_t r12_14",
    "if (rbp_26 == 0)",
    "r12_14 = r13_8",
    "r12_14 = *(rbp_26 + (rbx_36 << 2))",
    "i_46 = zx.d(*(rbx_36 + *(r15_2 + 0x18))) & 1",
    "int32_t rax_132",
    "rax_132, i_26, arg2, zmm1 = sub_140034f80(sx.q(r12_14 + rcx_97) * 0x38 + i_30, sx.q(r12_14 + i_26.d) * 0x38 + i_30, *r14_1)",
    "r9 = rax_132",
    "arg_20 = rax_132",
    "if (rax_132 != 0)",
    "i_44 = i_30",
    "if ((*(rbx_36 + *(r15_2 + 0x18)) & 2) != 0)",
    "int64_t rcx_101 = sx.q(r12_14)",
    "if ((*((sx.q(var_2e0) + rcx_101) * 0x38 + i_44 + 8) & 1) != 0 || (*((sx.q(i_31) + rcx_101) * 0x38 + i_44 + 8) & 1) != 0)",
    "r9 = neg.d(r9)",
    "arg_20 = r9",
    "r11 = arg1",
    "r13 = var_2f8",
    "r12 = var_300",
    "i_26.b = i_33",
    "if (i_46 != 0)",
    "r9 = neg.d(r9)",
    "arg_20 = r9",
    "break",
    "rcx_97 = var_2e0",
    "i_26 = zx.q(i_31)",
    "rbx_36 += 1",
    "r13_8 += 1",
    "r14_1 = &r14_1[1]",
    "if (rbx_36 s>= i_32)",
    "i_44 = i_30",
    "goto label_140038e60",
    "case 0x58",
    "int32_t rax_147",
    "rax_147, arg2, zmm1 = sub_1400312cc(sx.q(*(rsi + 4)) * 0x38 + i_44, *(rsi + 0xc), arg2.o)",
    "uint64_t i_34 = sx.q(rax_147) ^ sx.q(*(rsi + 0x10))",
    "rax_98 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "if ((*(rax_98 + 8) & 0x2400) == 0)",
    "*rax_98 = i_34",
    "*(rax_98 + 8) = 4",
    "goto label_140037ea8",
    "i_26 = i_34",
    "label_140038777:",
    "rcx_41 = rax_98",
    "label_1400382ab:",
    "i_26, arg2 = sub_1400315a0(rcx_41, i_26)",
    "goto label_140037ea8",
    "case 0x5a",
    "int64_t r13_9 = sx.q(*(rsi + 8))",
    "char* rbx_43 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "var_2e8 = r13_9.d",
    "uint32_t rax_169",
    "if (rbx_43[3] == 0)",
    "if (**(rbx_43 + 0x38) == 0)",
    "rdi = 0",
    "var_308 = 0",
    "rax_169, arg2, zmm1 = sub_140034960(rbx_43)",
    "label_140039265:",
    "r11 = arg1",
    "rdi = rax_169",
    "var_308 = rax_169",
    "if (rdi != 0)",
    "goto label_140038941",
    "int64_t rcx_142 = *(rbx_43 + 0x20)",
    "int32_t rdx_53",
    "if (rcx_142 != 0)",
    "rdx_53 = *(rcx_142 + (r13_9 << 2) + 4)",
    "if (rcx_142 == 0 || rdx_53 s<= 0)",
    "rax_169, arg2, zmm1 = sub_140034914(rbx_43)",
    "goto label_140039265",
    "rbx_43 = *(rbx_43 + 0x30)",
    "r13_9 = zx.q(rdx_53 - 1)",
    "rdi = 0",
    "var_2e8 = r13_9.d",
    "var_308 = 0",
    "i_26 = i_30",
    "int32_t rax_171 = r11[6].d",
    "int32_t* r12_15 = *(rbx_43 + 0x60)",
    "int64_t* r14_4 = sx.q(*(rsi + 0xc)) * 0x38 + i_26",
    "var_280 = r14_4",
    "var_2d8 = r12_15",
    "void** rax_187",
    "int64_t* rcx_147",
    "if (*(rbx_43 + 0x28) == rax_171)",
    "label_1400393ca:",
    "uint64_t rbp_32",
    "if (zx.d(*(rbx_43 + 0x52)) s<= r13_9.d)",
    "if (*(rbx_43 + 0x48) u>= *r12_15)",
    "rbp_32 = 0",
    "label_1400395eb:",
    "if (zx.d(*(rbx_43 + 0x52)) s> r13_9.d)",
    "goto label_140039627",
    "rcx_147 = r14_4",
    "if (rsi[1] != 0xf5)",
    "goto label_1400392f9",
    "i_26, arg2 = sub_1400316f8(rcx_147, *(rsi + 0x10), 0x800)",
    "goto label_1400392fe",
    "rax_187 = *(rbx_43 + 0x68)",
    "var_2c0 = rax_187",
    "void var_190",
    "if (rax_187 == 0)",
    "int512_t zmm0_2 = memset(&var_190, 0, 0x38)",
    "uint32_t rax_188",
    "rax_188, arg2, zmm1 = sub_140031b74(*(rbx_43 + 0x38), 0, *r12_15, &var_190, zmm0_2, zmm1)",
    "rdi = rax_188",
    "var_308 = rax_188",
    "if (rax_188 != 0)",
    "goto label_140038941",
    "void** var_180",
    "rax_187 = var_180",
    "label_140039432:",
    "var_2c0 = rax_187",
    "uint64_t rcx_153 = zx.q(*(rbx_43 + 0x52))",
    "int32_t* r8_25 = var_2d8",
    "uint64_t r15_3 = zx.q(r12_15[rcx_153])",
    "void* i_36 = zx.q(*(rbx_43 + 0x48)) + rax_187",
    "i_26 = zx.q(*r8_25) + rax_187",
    "var_2e0 = rcx_153.d",
    "int64_t r13_10 = rcx_153",
    "i_32 = i_26",
    "rbp_32 = zx.q(*i_36)",
    "int32_t var_29c = rbp_32.d",
    "*(rbx_43 + (r13_10 << 2) + 0x78) = rbp_32.d",
    "uint64_t rax_189",
    "if (rbp_32.d u>= 0x80)",
    "char rax_190 = sub_140019e28(i_36, &var_29c)",
    "rbp_32 = zx.q(var_29c)",
    "*(rbx_43 + (r13_10 << 2) + 0x78) = rbp_32.d",
    "i_36 += zx.q(rax_190)",
    "if (rbp_32.d u< 0x80)",
    "rax_189 = zx.q(*(rbp_32 + &data_1400d7110))",
    "rax_189 = zx.q((rbp_32 - 0xc).d u>> 1)",
    "rcx_153 = zx.q(var_2e0)",
    "i_26 = i_32",
    "r8_25 = var_2d8",
    "rax_189 = zx.q(*(rbp_32 + &data_1400d7110))",
    "i_36 += 1",
    "rcx_153 = zx.q(rcx_153.d + 1)",
    "r15_3 += rax_189",
    "bool cond:54_1 = rcx_153.d s> var_2e8",
    "r13_10 = sx.q(rcx_153.d)",
    "var_2e0 = rcx_153.d",
    "r8_25[r13_10] = r15_3.d",
    "if (cond:54_1)",
    "break",
    "do while (i_36 u< i_26)",
    "rsi = var_2b8",
    "rdi = var_308",
    "r14_4 = var_280",
    "int16_t var_188",
    "int32_t var_170",
    "if ((i_36 u>= i_26 && (i_36 u> i_26 || r15_3 != zx.q(*(rbx_43 + 0x70)))) || r15_3 u> zx.q(*(rbx_43 + 0x70)))",
    "if (*r8_25 != 0)",
    "if (*(rbx_43 + 0x68) == 0 && ((var_188 & 0x2400) != 0 || var_170 != 0))",
    "i_26, arg2 = sub_14003118c(&var_190)",
    "goto label_140039564",
    "rcx_153 = 0",
    "i_36 = i_26",
    "int32_t r12_17 = i_36.d - var_2c0.d",
    "*(rbx_43 + 0x52) = rcx_153.w",
    "*(rbx_43 + 0x48) = r12_17",
    "if (*(rbx_43 + 0x68) == 0 && ((var_188 & 0x2400) != 0 || var_170 != 0))",
    "arg2 = sub_14003118c(&var_190)",
    "r12_15 = var_2d8",
    "r13_9 = zx.q(var_2e8)",
    "goto label_1400395eb",
    "rbp_32 = zx.q(*(rbx_43 + (sx.q(r13_9.d) << 2) + 0x78))",
    "label_140039627:",
    "if ((r14_4[1].w & 0x2400) != 0)",
    "arg2 = sub_140031524(r14_4)",
    "int64_t rcx_159 = sx.q(r13_9.d)",
    "int32_t rax_199",
    "char* rcx_160",
    "if (*(rbx_43 + 0x74) u< r12_15[rcx_159 + 1])",
    "rax_199.b = i_33",
    "*(r14_4 + 0xa) = rax_199.b",
    "if ((rsi[2] & 0xc0) != 0)",
    "if (rbp_32.d u< 0xc)",
    "if ((rsi[2] & 0x80) != 0)",
    "rcx_160 = &data_14013ff78",
    "goto label_140039657",
    "if ((1 & rbp_32.b) == 0 || (rsi[2] & 0x80) != 0)",
    "rcx_160 = &data_14013ff78",
    "goto label_140039657",
    "uint32_t r8_29",
    "if (rbp_32.d u< 0x80)",
    "r8_29 = zx.d(*(zx.q(rbp_32.d) + &data_1400d7110))",
    "r8_29 = (rbp_32 - 0xc).d u>> 1",
    "if (r8_29 == 0)",
    "rcx_160 = &data_14013ff78",
    "goto label_140039657",
    "uint32_t rax_207",
    "rax_207, arg2, zmm1 = sub_140031b74(*(rbx_43 + 0x38), r12_15[rcx_159], r8_29, r14_4, arg2, zmm1)",
    "rdi = rax_207",
    "var_308 = rax_207",
    "if (rax_207 != 0)",
    "goto label_140038941",
    "sub_1400349b0(r14_4[2], rbp_32.d, r14_4)",
    "r14_4[1].w &= 0xefff",
    "goto label_1400392fe",
    "char* r12_19 = zx.q(r12_15[rcx_159]) + *(rbx_43 + 0x68)",
    "if (rbp_32.d u< 0xc)",
    "rcx_160 = r12_19",
    "label_140039657:",
    "sub_1400349b0(rcx_160, rbp_32.d, r14_4)",
    "goto label_1400392fe",
    "rax_199.b = i_33",
    "uint64_t _Size = zx.q((rbp_32 - 0xc).d u>> 1)",
    "*(r14_4 + 0xa) = rax_199.b",
    "int32_t rdx_60 = (_Size + 2).d",
    "*(r14_4 + 0xc) = _Size.d",
    "if (r14_4[4].d s< rdx_60)",
    "r14_4[1].w = 1",
    "int32_t rax_200",
    "rax_200, r8, arg2, zmm1 = sub_140030d38(r14_4, rdx_60, 0, zmm1)",
    "if (rax_200 == 0)",
    "goto label_1400396d7",
    "goto label_140039696",
    "r14_4[2] = r14_4[3]",
    "label_1400396d7:",
    "i_26, arg2 = memcpy(r14_4[2], r12_19, _Size)",
    "r13 = var_2f8",
    "r12 = var_300",
    "i_26.b = i_33",
    "r9 = arg_20",
    "*(_Size + r14_4[2]) = 0",
    "r11 = arg1",
    "*(r14_4[2] + _Size + 1) = 0",
    "r14_4[1].w = *(((zx.q(rbp_32.d) & 1) << 1) + 0x1400d413c)",
    "i_44 = i_30",
    "if (rbx_43[2] == 0)",
    "void* rbp_31 = *(rbx_43 + 0x38)",
    "sub_1400296c8(rbp_31)",
    "*(rbx_43 + 0x70) = *(rbp_31 + 0x40)",
    "uint32_t rcx_149 = zx.d(*(rbp_31 + 0x44))",
    "i_26 = zx.q(*(*(rbp_31 + 0x88) + 0x58) - *(rbp_31 + 0x38))",
    "if (rcx_149 s> i_26.d)",
    "rcx_149 = i_26.d",
    "if (i_26.d s< 0)",
    "rcx_149 = 0",
    "r8 = var_2f8",
    "r11 = arg1",
    "*(rbx_43 + 0x74) = rcx_149",
    "*(rbx_43 + 0x68) = *(rbp_31 + 0x38)",
    "if (*(rbx_43 + 0x70) u> *(r8 + 0x7c))",
    "goto label_14003d1f3",
    "goto label_140039364",
    "if (*rbx_43 != 3)",
    "rcx_147 = r14_4",
    "label_1400392f9:",
    "i_26, arg2 = sub_140031524(rcx_147)",
    "label_1400392fe:",
    "i_44 = i_30",
    "r13 = var_2f8",
    "goto label_14003874b",
    "int64_t rcx_146 = sx.q(*(rbx_43 + 0x2c)) * 0x38",
    "int32_t rax_172 = *(rcx_146 + i_26 + 0xc)",
    "*(rbx_43 + 0x74) = rax_172",
    "*(rbx_43 + 0x70) = rax_172",
    "*(rbx_43 + 0x68) = *(rcx_146 + i_26 + 0x10)",
    "label_140039364:",
    "char* rcx_150 = *(rbx_43 + 0x68)",
    "*(rbx_43 + 0x28) = r11[6].d",
    "char rax_180",
    "if (*rcx_150 u>= 0x80)",
    "char rax_181",
    "rax_181, i_26 = sub_140019e28(rcx_150, r12_15)",
    "rax_180 = rax_181",
    "*r12_15 = zx.d(*rcx_150)",
    "rax_180 = 1",
    "*(rbx_43 + 0x52) = 0",
    "*(rbx_43 + 0x48) = zx.d(rax_180)",
    "if (*(rbx_43 + 0x74) u>= *r12_15)",
    "rax_187 = *(rbx_43 + 0x68)",
    "goto label_140039432",
    "*(rbx_43 + 0x68) = 0",
    "*(rbx_43 + 0x74) = 0",
    "int32_t rax_184 = *r12_15",
    "if (rax_184 u<= 0x18003 && rax_184 u<= *(rbx_43 + 0x70))",
    "goto label_1400393ca",
    "label_140039564:",
    "r12 = var_300",
    "int32_t rax_194 = *(r12 + 0xc)",
    "if (rax_194 s<= 0)",
    "arg2 = sub_140084e38(0x152d5, arg2)",
    "rdi = 0xb",
    "goto label_14003d8d9",
    "r11 = arg1",
    "r13 = var_2f8",
    "i_44 = i_30",
    "rsi = &r12[sx.q(rax_194 - 1) * 0x18]",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x5b",
    "char* rbp_33 = *(rsi + 0x10)",
    "int64_t* rbx_47 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "while (true)",
    "r8.b = i_26.b",
    "i_26.b = *rbp_33",
    "i_26, r8, arg2, zmm1 = sub_140037a64(rbx_47, i_26.b, r8.b, arg2, zmm1)",
    "if (*rbp_33 == 0x45)",
    "int16_t rax_208 = rbx_47[1].w",
    "if ((4 & rax_208.b) != 0)",
    "if (*rbx_47 s> 0x7fffffffffff || *rbx_47 s< -0x800000000000)",
    "arg2.o = zx.o(0)",
    "arg2.q = float.d(*rbx_47)",
    "rax_208 = (rax_208 & 0xfffb) | 8",
    "*rbx_47 = (arg2.o).q",
    "rax_208 = (rax_208 & 0xfffb) | 0x20",
    "rbx_47[1].w = rax_208",
    "i_26.b = i_33",
    "rbp_33 = &rbp_33[1]",
    "if (*rbp_33 == 0)",
    "break",
    "rbx_47 = &rbx_47[7]",
    "r11 = arg1",
    "r9 = arg_20",
    "case 0x5c",
    "int32_t rax_209 = *(rsi + 8)",
    "char* rbp_34 = *(rsi + 0x10)",
    "int32_t* r11_13 = sx.q(*(rsi + 4)) * 0x38 + i_30",
    "uint32_t i_45 = zx.d(*(arg1 + 0xc3))",
    "int64_t r14_5 = 0",
    "int32_t r15_4 = 0",
    "var_2c0 = nullptr",
    "var_2d8 = r11_13",
    "i_46 = i_45",
    "void* rax_212 = sx.q(*(rsi + 0xc)) * 0x38",
    "void* r13_13 = sx.q(rax_209 - 1) * 0x38 + r11_13",
    "var_288 = r13_13",
    "var_2a8 = rax_212 + i_30",
    "void* rcx_168",
    "if (rbp_34 != 0)",
    "void* rbx_48 = &r11_13[2]",
    "char r8_31 = i_26.b",
    "i_26.b = *rbp_34",
    "rcx_168, i_26, arg2, zmm1 = sub_140037a64(rbx_48 - 8, i_26.b, r8_31, arg2, zmm1)",
    "if (*rbp_34 == 0x45)",
    "int16_t rax_214 = *rbx_48",
    "if ((4 & rax_214.b) != 0)",
    "*rbx_48 = (rax_214 & 0xfffb) | 0x20",
    "i_26.b = i_33",
    "rbx_48 += 0x38",
    "rbp_34 = &rbp_34[1]",
    "do while (*rbp_34 != 0)",
    "rsi = var_2b8",
    "i_45 = i_46",
    "r11_13 = var_2d8",
    "r13_13 = var_288",
    "void* i_43 = sx.q(i_45)",
    "void* rbx_49 = r13_13 + 0x24",
    "i_32 = i_43",
    "while (true)",
    "rcx_168.w = *(rbx_49 - 0x1c)",
    "if ((1 & rcx_168.b) != 0)",
    "rcx_168.w &= 0x4000",
    "int16_t temp14_1 = rcx_168.w",
    "rcx_168.w = neg.w(rcx_168.w)",
    "r15_4 += 1",
    "*rbx_49 = sbb.d(0x4000, 0x4000, temp14_1 != 0) & 0xa",
    "if ((rcx_168.b & 0x24) != 0)",
    "uint64_t i_35 = *(rbx_49 - 0x24)",
    "i_26 = i_35",
    "if (i_35 s< 0)",
    "i_26 = not.q(i_26)",
    "r15_4 += 1",
    "if (i_26 u> 0x7f)",
    "uint64_t rax_219",
    "if (i_26 u<= 0x7fff)",
    "rax_219 = 2",
    "r14_5 += rax_219",
    "*rbx_49 = rax_219.d",
    "if (i_26 u<= 0x7fffff)",
    "rax_219 = 3",
    "r14_5 += rax_219",
    "*rbx_49 = rax_219.d",
    "if (i_26 u<= 0x7fffffff)",
    "rax_219 = 4",
    "r14_5 += rax_219",
    "*rbx_49 = rax_219.d",
    "if (i_26 u> 0x7fffffffffff)",
    "r14_5 += 8",
    "if ((0x20 & rcx_168.b) == 0)",
    "*rbx_49 = 6",
    "arg2.o = zx.o(0)",
    "rcx_168.w &= 0xffdf",
    "arg2.q = float.d(i_35)",
    "rcx_168.w |= 8",
    "*(rbx_49 - 0x1c) = rcx_168.w",
    "*(rbx_49 - 0x24) = (arg2.o).q",
    "*rbx_49 = 7.d",
    "r14_5 += 6",
    "*rbx_49 = 5.d",
    "if ((i_35 & 1) != i_35 || i_43 s< 4)",
    "r14_5 += 1",
    "*rbx_49 = 1",
    "*rbx_49 = (i_26 + 8).d",
    "if ((8 & rcx_168.b) == 0)",
    "uint64_t r12_21 = zx.q(*(rbx_49 - 0x18))",
    "int32_t r13_14 = (rcx_168.d u>> 1 & 1) + (r12_21 << 1).d + 0xc",
    "if ((0x4000 & rcx_168.w) != 0)",
    "int64_t rax_223 = sx.q(*(rbx_49 - 0x24))",
    "r13_14 += (rax_223 << 1).d",
    "if (r14_5 == 0)",
    "var_2c0 += rax_223",
    "int32_t rax_224",
    "rax_224, i_26, r8, arg2, zmm1 = sub_140030f10(rbx_49 - 0x24, zmm1)",
    "if (rax_224 != 0)",
    "goto label_140039696",
    "r12_21 = zx.q(r12_21.d + *(rbx_49 - 0x24))",
    "i_43 = i_32",
    "rcx_168 = 1",
    "r14_5 += zx.q(r12_21.d)",
    "uint64_t i_12 = zx.q(r13_14) u>> 7",
    "while (i_12 != 0)",
    "rcx_168 = zx.q(rcx_168.d + 1)",
    "i_12 u>>= 7",
    "r11_13 = var_2d8",
    "r15_4 += rcx_168.d",
    "*rbx_49 = r13_14",
    "r15_4 += 1",
    "r14_5 += 8",
    "*rbx_49 = 7",
    "if (rbx_49 - 0x24 == r11_13)",
    "break",
    "rbx_49 -= 0x38",
    "if (r15_4 s<= 0x7e)",
    "r15_4 += 1",
    "i_26 = 1",
    "int64_t rax_228 = sx.q(r15_4)",
    "while (true)",
    "rax_228 u>>= 7",
    "if (rax_228 == 0)",
    "break",
    "i_26 = zx.q(i_26.d + 1)",
    "r15_4 += i_26.d",
    "int32_t rcx_171 = 1",
    "int64_t rax_229 = sx.q(r15_4)",
    "while (true)",
    "rax_229 u>>= 7",
    "if (rax_229 == 0)",
    "break",
    "rcx_171 += 1",
    "if (i_26.d s< rcx_171)",
    "r15_4 += 1",
    "int32_t* r9_9 = var_2a8",
    "void** r13_15 = var_2c0",
    "uint64_t rbx_50 = sx.q(r15_4)",
    "int64_t rbp_35 = r14_5 + rbx_50",
    "void* rcx_172 = r13_15 + rbp_35",
    "if (rcx_172 s> sx.q(r9_9[8]))",
    "r8 = var_2f8",
    "if (rcx_172 s> sx.q(*(r8 + 0x7c)))",
    "goto label_14003d1e1",
    "int32_t rax_233",
    "if (r9_9[8] s>= rbp_35.d)",
    "r9_9[2].w &= 0x2d",
    "*(r9_9 + 0x10) = *(r9_9 + 0x18)",
    "rax_233 = 0",
    "rax_233, i_26, r8, arg2, zmm1 = sub_140030d38(r9_9, rbp_35.d, 0, zmm1)",
    "r9_9 = var_2a8",
    "r11_13 = var_2d8",
    "if (rax_233 != 0)",
    "goto label_140039696",
    "*(r9_9 + 0x10) = *(r9_9 + 0x18)",
    "r9_9[3] = rbp_35.d",
    "r9_9[2].w = 0x10",
    "if (r13_15 != 0)",
    "*r9_9 = r13_15.d",
    "r9_9[2].w = 0x4010",
    "char* rbp_36 = *(r9_9 + 0x10)",
    "void* r12_22 = &rbp_36[rbx_50]",
    "char rax_235",
    "if (r15_4 u< 0x80)",
    "*rbp_36 = r15_4.b",
    "rax_235 = 1",
    "if (rbx_50 u> 0x7f)",
    "rax_235, i_26 = sub_140019c64(rbp_36, rbx_50)",
    "rbx_50.b &= 0x7f",
    "*rbp_36 = rbx_50.b",
    "rax_235 = 1",
    "void* r13_16 = var_288",
    "void* rbp_37 = &rbp_36[zx.q(rax_235)]",
    "uint64_t r10_2 = zx.q(r11_13[9])",
    "char rax_237",
    "if (r10_2.d u< 0x80)",
    "*rbp_37 = r10_2.b",
    "rax_237 = 1",
    "if (r10_2 u> 0x7f)",
    "rax_237, i_26 = sub_140019c64(rbp_37, r10_2)",
    "i_26.b = r10_2.b & 0x7f",
    "*rbp_37 = i_26.b",
    "rax_237 = 1",
    "rbp_37 += zx.q(rax_237)",
    "uint64_t _Size_1",
    "if ((r10_2 - 1).d u<= 6)",
    "uint64_t rcx_176 = zx.q(*(r10_2 + &data_1400d7110))",
    "i_26 = *r11_13",
    "char* r8_32 = r12_22 + rcx_176",
    "_Size_1 = zx.q(rcx_176.d)",
    "r8_32 -= 1",
    "rcx_176 = zx.q(rcx_176.d - 1)",
    "*r8_32 = i_26.b",
    "i_26 u>>= 8",
    "do while (rcx_176.d != 0)",
    "if (r10_2.d u< 0xc)",
    "_Size_1 = 0",
    "_Size_1 = zx.q(r11_13[3])",
    "if (_Size_1.d u> 0)",
    "i_26, arg2 = memcpy(r12_22, *(r11_13 + 0x10), _Size_1)",
    "r11_13 = var_2d8",
    "r11_13 = &r11_13[0xe]",
    "r12_22 += zx.q(_Size_1.d)",
    "var_2d8 = r11_13",
    "do while (r11_13 u<= r13_16)",
    "rsi = var_2b8",
    "rdi = var_308",
    "r11 = arg1",
    "goto label_140039cf5",
    "case 0x5d",
    "void* rcx_179 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "var_280 = nullptr",
    "uint32_t rax_242",
    "rax_242, arg2, zmm1 = sub_14002f07c(*(rcx_179 + 0x38), &var_280)",
    "rdi = rax_242",
    "var_308 = rax_242",
    "if (rax_242 != 0)",
    "goto label_140038941",
    "int64_t** rax_243",
    "rax_243, i_26, arg2 = sub_140037bb4(arg1, rsi)",
    "*rax_243 = var_280",
    "goto label_1400387bf",
    "case 0x5e",
    "int32_t var_268",
    "sub_14002efb0(*((sx.q(*(rsi + 4)) << 5) + r13[4] + 8), zx.q(*(rsi + 0xc)), &var_268)",
    "int64_t* rax_277",
    "rax_277, i_26, arg2 = sub_140037bb4(r11, rsi)",
    "*rax_277 = sx.q(var_268)",
    "goto label_140037ea8",
    "case 0x5f",
    "void* rbx_57 = (sx.q(*(rsi + 4)) << 5) + r13[4]",
    "uint32_t rax_278",
    "rax_278, i_26, arg2, zmm1 = sub_14002f000(*(rbx_57 + 8), *(rsi + 8), *(rsi + 0xc), zmm1)",
    "rdi = rax_278",
    "var_308 = rax_278",
    "if (*(rsi + 8) == 1)",
    "**(rbx_57 + 0x18) = *(rsi + 0xc)",
    "*(r13 + 0x2c) |= 1",
    "if (*(rsi + 8) == 2)",
    "*(*(rbx_57 + 0x18) + 0x70) = rsi[0xc]",
    "if (*(rsi + 4) != 1)",
    "r11 = arg1",
    "void* i_13 = r13[1]",
    "while (i_13 != 0)",
    "*(i_13 + 0xc8) &= 0xfffffffd",
    "*(i_13 + 0xc8) |= 1",
    "i_13 = *(i_13 + 0x10)",
    "r11 = arg1",
    "r11[0x19].d &= 0xfffffffc",
    "goto label_14003a283",
    "case 0x60",
    "rbx_58 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "if (rbx_58 == 0 || *(rbx_58 + 0x4c) != *(rsi + 8))",
    "goto label_14003a38b",
    "label_14003a4e7:",
    "rcx_221.b = rsi[2]",
    "rcx_221.b &= 3",
    "*(*(rbx_58 + 0x38) + 3) = rcx_221.b",
    "if (rdi != 0)",
    "goto label_140038941",
    "case 0x61, 0x62",
    "label_14003a38b:",
    "if (((r11[0x19].d).b & 3) == 1)",
    "rdi = 0x204",
    "label_140038941:",
    "r12_9 = arg1",
    "break",
    "int64_t r15_6 = sx.q(*(rsi + 0xc))",
    "uint64_t r13_19 = sx.q(*(rsi + 8))",
    "uint32_t r12_28 = 0",
    "void* r14_6 = nullptr",
    "void* rax_286 = (r15_6 << 5) + var_2f8[4]",
    "i_32 = *(rax_286 + 8)",
    "int32_t rdi_4",
    "if (rbp_1.b != 0x62)",
    "rdi_4 = 0",
    "char rcx_223 = *(*(rax_286 + 0x18) + 0x70)",
    "rdi_4 = (zx.d(*(rsi + 2)) & 8) | 4",
    "if (rcx_223 u< *(r11 + 0xc3))",
    "*(r11 + 0xc3) = rcx_223",
    "if ((rsi[2] & 0x10) != 0)",
    "void* rbx_61 = r13_19 * 0x38 + i_30",
    "int64_t rax_288",
    "rax_288, zmm1 = sub_140031230(rbx_61)",
    "r11 = arg1",
    "*rbx_61 = rax_288",
    "r13_19 = zx.q(*rbx_61)",
    "*(rbx_61 + 8) &= 0x3e40",
    "*(rbx_61 + 8) |= 4",
    "char rax_289 = rsi[1]",
    "if (rax_289 == 0xf7)",
    "r14_6 = *(rsi + 0x10)",
    "r12_28 = zx.d(*(r14_6 + 8))",
    "if (rax_289 == 0xfd)",
    "r12_28 = *(rsi + 0x10)",
    "var_318.b = 0",
    "char* rax_290",
    "rax_290, r8, arg2, zmm1 = sub_14003789c(r11, *(rsi + 4), r12_28, r15_6.b, zmm1, 0)",
    "rbx_58 = rax_290",
    "if (rbx_58 == 0)",
    "goto label_140039696",
    "*(rbx_58 + 8) |= 4",
    "char* rax_291 = *(rbx_58 + 0x38)",
    "rbx_58[2] = 1",
    "*(rbx_58 + 0x4c) = r13_19.d",
    "uint32_t rax_292",
    "if (r13_19.d s>= 1)",
    "var_318 = rax_291",
    "rax_292, rcx_221, i_26 = sub_140029568(i_32, r13_19.d, rdi_4, r14_6, zmm1, var_318)",
    "rax_292, rcx_221, i_26, arg2, zmm1 = sub_140084e38(0x108ea, arg2)",
    "r11 = arg1",
    "r13 = var_2f8",
    "r12 = var_300",
    "i_26.b = i_33",
    "r9 = arg_20",
    "*(rbx_58 + 0x40) = r14_6",
    "i_44 = i_30",
    "var_308 = rax_292",
    "rdi = rax_292",
    "rax_292.b = rsi[1] != 0xf7",
    "rbx_58[4] = rax_292.b",
    "goto label_14003a4e7",
    "case 0x63, 0x64, 0x65, 0x66",
    "void* rcx_67 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "int64_t* rbp_21 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "void* r12_8 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "rax_3.b = *(rcx_67 + 8)",
    "rax_3.b |= rbp_21[1].b",
    "if ((1 & rax_3.b) != 0)",
    "i_26, arg2 = sub_140031524(r12_8)",
    "goto label_1400387bf",
    "int64_t rbx_21 = sub_140031230(rcx_67)",
    "int64_t rax_100",
    "rax_100, i_26, arg2, zmm1 = sub_140031230(rbp_21)",
    "i_26.b = *rsi",
    "int64_t r11_4 = rax_100",
    "if (i_26.b == 0x63)",
    "rbx_21 &= rax_100",
    "if (i_26.b == 0x64)",
    "rbx_21 |= rax_100",
    "if (rax_100 != 0)",
    "if (rax_100 s< 0)",
    "int64_t rcx_71 = neg.q(r11_4)",
    "i_26.b = 0xcb - i_26.b",
    "int64_t rax_102 = r11_4",
    "r11_4 = 0x40",
    "if (rax_102 s> -0x40)",
    "r11_4 = rcx_71",
    "if (r11_4 s< 0x40)",
    "char rcx_72 = r11_4.b",
    "int64_t r8_10",
    "if (i_26.b != 0x65)",
    "r8_10 = rbx_21 u>> rcx_72",
    "if (rbx_21 s< 0)",
    "r8_10 |= 0xffffffffffffffff << (0x40 - r11_4.b)",
    "r8_10 = rbx_21 << rcx_72",
    "rbx_21 = r8_10",
    "int32_t rax_103",
    "if (rbx_21 s>= 0 || i_26.b == 0x65)",
    "rax_103 = 0",
    "rax_103 = -1",
    "rbx_21 = sx.q(rax_103)",
    "*r12_8 = rbx_21",
    "*(r12_8 + 8) &= 0x3e40",
    "*(r12_8 + 8) |= 4",
    "goto label_140038664",
    "case 0x67, 0x68, 0x69, 0x6a, 0x6b",
    "int32_t* r13_6 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "int16_t rbx_1 = r13_6[2].w & 0x2c",
    "if (rbx_1 == 0)",
    "if ((r13_6[2].b & 0x12) == 0)",
    "rbx_1 = 0",
    "rax_3, i_26, arg2, zmm1 = sub_140037b08(r13_6)",
    "rbx_1 = rax_3",
    "void* rbp_18 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "rax_3 = *(rbp_18 + 8) & 0x2c",
    "if (rax_3 == 0)",
    "if ((*(rbp_18 + 8) & 0x12) == 0)",
    "rax_3 = 0",
    "rax_3, i_26, arg2, zmm1 = sub_140037b08(rbp_18)",
    "rax_3.b &= rbx_1.b",
    "void* r12_5 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "if ((4 & rax_3.b) != 0)",
    "uint32_t rcx_54 = zx.d(*rsi)",
    "char* r9_2 = *rbp_18",
    "uint64_t r8_9 = *r13_6",
    "var_2b8 = r9_2",
    "if (rcx_54 == 0x67)",
    "goto label_140038635",
    "char* r9_3",
    "if (rcx_54 == 0x68)",
    "if (r8_9 == -0x8000000000000000)",
    "if (r9_2 s>= 0)",
    "goto label_140038691",
    "r9_3 = r9_2 + -0x8000000000000000",
    "goto label_14003864f",
    "r8_9 = neg.q(r8_9)",
    "label_140038635:",
    "if (sub_140019ffc(&var_2b8, r8_9) != 0)",
    "goto label_140038691",
    "r9_3 = var_2b8",
    "label_14003864f:",
    "*r12_5 = r9_3",
    "*(r12_5 + 8) &= 0x3e40",
    "*(r12_5 + 8) |= 4",
    "r13 = var_2f8",
    "goto label_140038664",
    "if (rcx_54 == 0x69)",
    "bool cond:53_1",
    "if (r8_9 s> 0)",
    "if (r9_2 s> divs.dp.q(sx.o(0x7fffffffffffffff), r8_9))",
    "goto label_140038691",
    "cond:53_1 = r9_2 s< divs.dp.q(sx.o(-0x8000000000000000), r8_9)",
    "label_1400385be:",
    "if (cond:53_1)",
    "goto label_140038691",
    "if (r8_9 s< 0)",
    "if (r9_2 s> 0)",
    "cond:53_1 = r8_9 s< divs.dp.q(sx.o(-0x8000000000000000), r9_2)",
    "goto label_1400385be",
    "if (r9_2 s< 0)",
    "if (r8_9 == -0x8000000000000000 || r9_2 == -0x8000000000000000)",
    "goto label_140038691",
    "if (neg.q(r9_2) s> divs.dp.q(sx.o(-0x7fffffffffffffff), r8_9))",
    "goto label_140038691",
    "r9_3 = r9_2 * r8_9",
    "goto label_14003864f",
    "if (rcx_54 == 0x6a)",
    "if (r8_9 != 0)",
    "if (r8_9 == -1 && r9_2 == -0x8000000000000000)",
    "goto label_140038691",
    "r9_3 = divs.dp.q(sx.o(r9_2), r8_9)",
    "goto label_14003864f",
    "if (r8_9 != 0)",
    "if (r8_9 == -1)",
    "r8_9 = 1",
    "r9_3 = mods.dp.q(sx.o(r9_2), r8_9)",
    "goto label_14003864f",
    "if ((1 & (*(rbp_18 + 8) | r13_6[2].w).b) == 0)",
    "label_140038691:",
    "uint64_t zmm0[0x2] = sub_140031294(r13_6, arg2.o)",
    "uint64_t zmm2 = zmm0[0]",
    "arg2, zmm1 = sub_140031294(rbp_18, zmm0)",
    "uint32_t rdx_35 = zx.d(*rsi)",
    "i_26 = zx.q(rdx_35 - 0x67)",
    "if (rdx_35 == 0x67)",
    "arg2.q = arg2.q f+ zmm2",
    "label_140038713:",
    "if (sub_14001903c(arg2.q) == 0)",
    "*r12_5 = (arg2.o).q",
    "*(r12_5 + 8) &= 0x3e40",
    "*(r12_5 + 8) |= 8",
    "r13 = var_2f8",
    "goto label_140038664",
    "int32_t temp24_1 = i_26.d",
    "i_26 = zx.q(i_26.d - 1)",
    "if (temp24_1 == 1)",
    "arg2.q = arg2.q f- zmm2",
    "goto label_140038713",
    "if (i_26.d == 1)",
    "arg2.q = arg2.q f* zmm2",
    "goto label_140038713",
    "if (i_26.d != 2)",
    "int64_t rbx_20 = sub_140031230(r13_6)",
    "int64_t rax_92",
    "rax_92, arg2, zmm1 = sub_140031230(rbp_18)",
    "if (rbx_20 != 0)",
    "arg2.o = zx.o(0)",
    "if (rbx_20 == -1)",
    "rbx_20 = 1",
    "arg2.q = float.d(mods.dp.q(sx.o(rax_92), rbx_20))",
    "goto label_140038713",
    "if (not(zmm2 f== 0.0))",
    "arg2.q = arg2.q f/ zmm2",
    "goto label_140038713",
    "i_26, arg2 = sub_140031524(r12_5)",
    "r13 = var_2f8",
    "goto label_14003874b",
    "case 0x6c",
    "void* rbx_19 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "void* r13_3 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "int64_t* rbp_15 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "int16_t r14 = *(r13_3 + 8)",
    "rax_3.b = *(rbx_19 + 8)",
    "rax_3.b |= r14.b",
    "if ((1 & rax_3.b) != 0)",
    "i_26, arg2 = sub_140031524(rbp_15)",
    "i_44 = i_30",
    "goto label_1400382ff",
    "int32_t rax_65",
    "if ((r14.b & 0x12) != 0)",
    "if ((0x4000 & r14) == 0)",
    "goto label_140038361",
    "rax_65, i_26, r8, arg2, zmm1 = sub_140030f10(r13_3, zmm1)",
    "rax_65, i_26, r8, arg2, zmm1 = sub_140030f6c(r13_3, i_26.b, 0, arg2, zmm1)",
    "if (rax_65 != 0)",
    "label_140039696:",
    "r13 = var_2f8",
    "goto label_1400396a4",
    "i_26.b = i_33",
    "r14 = *(r13_3 + 8) & 0xfffd",
    "label_140038361:",
    "int16_t r12_2 = *(rbx_19 + 8)",
    "int32_t rax_66",
    "if ((r12_2.b & 0x12) != 0)",
    "if ((0x4000 & r12_2) == 0)",
    "goto label_1400383a2",
    "rax_66, r8, arg2, zmm1 = sub_140030f10(rbx_19, zmm1)",
    "rax_66, r8, arg2, zmm1 = sub_140030f6c(rbx_19, i_26.b, 0, arg2, zmm1)",
    "if (rax_66 != 0)",
    "goto label_140039696",
    "r12_2 = *(rbx_19 + 8) & 0xfffd",
    "label_1400383a2:",
    "r8 = var_2f8",
    "int64_t r15_1 = sx.q(*(r13_3 + 0xc) + *(rbx_19 + 0xc))",
    "if (r15_1 s> sx.q(*(r8 + 0x7c)))",
    "goto label_14003d1e1",
    "int32_t r8_6",
    "r8_6.b = rbp_15 == rbx_19",
    "int32_t rax_70",
    "rax_70, r8, arg2, zmm1 = sub_140030d38(rbp_15, (r15_1 + 3).d, r8_6, zmm1)",
    "if (rax_70 != 0)",
    "goto label_140039696",
    "rbp_15[1].w &= 0x3e40",
    "rbp_15[1].w |= 2",
    "if (rbp_15 != rbx_19)",
    "memcpy(rbp_15[2], *(rbx_19 + 0x10), sx.q(*(rbx_19 + 0xc)))",
    "*(rbx_19 + 8) = r12_2",
    "i_26, arg2 = memcpy(sx.q(*(rbx_19 + 0xc)) + rbp_15[2], *(r13_3 + 0x10), sx.q(*(r13_3 + 0xc)))",
    "i_26.b = i_33",
    "*(r13_3 + 8) = r14",
    "*(r15_1 + rbp_15[2]) = 0",
    "*(rbp_15[2] + r15_1 + 1) = 0",
    "*(rbp_15[2] + r15_1 + 2) = 0",
    "*(rbp_15 + 0xc) = r15_1.d",
    "rbp_15[1].w |= 0x200",
    "*(rbp_15 + 0xa) = i_26.b",
    "goto label_140038458",
    "case 0x6d",
    "void* rbx_62 = *(r11[0xf] + (sx.q(*(rsi + 8)) << 3))",
    "var_318.b = 0",
    "char* rax_295",
    "rax_295, i_26, r8, arg2, zmm1 = sub_14003789c(r11, *(rsi + 4), sx.d(*(rbx_62 + 0x50)), 0xff, zmm1, 0)",
    "if (rax_295 == 0)",
    "goto label_1400396a4",
    "*(rax_295 + 8) |= 1",
    "char* rdi_5 = *(rax_295 + 0x38)",
    "rax_295[2] = 1",
    "int64_t r13_20 = *(rbx_62 + 0x40)",
    "*(rax_295 + 0x40) = r13_20",
    "rax_295[4] = *(rbx_62 + 4)",
    "int32_t rcx_230 = *(rbx_62 + 0x4c)",
    "*(rax_295 + 0x4c) = rcx_230",
    "int32_t rbp_40 = rcx_230",
    "*(rax_295 + 8) ^= (*(rbx_62 + 8) ^ *(rax_295 + 8)) & 4",
    "void* r12_29 = *(rbx_62 + 0x10)",
    "if (rcx_230 s>= 1)",
    "void* rbx_63 = *(r12_29 + 8)",
    "if (*(rbx_63 + 0x60) == 0)",
    "int64_t* rax_300",
    "rax_300, rcx_230, i_26 = sub_14001e150(*(rbx_63 + 0x30), zmm1)",
    "*(rbx_63 + 0x60) = rax_300",
    "if (rax_300 != 0)",
    "rcx_230 = 0",
    "*rax_300 = 0",
    "*(rbx_63 + 0x60) += 4",
    "if (*(rbx_63 + 0x60) != 0 || *(rbx_63 + 0x60) != 0)",
    "if (rbp_40 == 1)",
    "rbp_40 &= sbb.d(rcx_230, rcx_230, *(rbx_63 + 0x3c) != 0)",
    "*(rdi_5 + 0x50) = rbp_40",
    "rdi_5[0x54] = 0xff",
    "*(rdi_5 + 0x80) = r13_20",
    "*(rdi_5 + 8) = r12_29",
    "*(rdi_5 + 0x20) = rbx_63",
    "rdi_5[1] = 1",
    "rdi_5[2] = 0",
    "void* i_14 = *(rbx_63 + 0x10)",
    "if (i_14 != 0)",
    "if (*(i_14 + 0x50) == rbp_40)",
    "*(i_14 + 1) |= 0x20",
    "rdi_5[1] |= 0x20",
    "i_14 = *(i_14 + 0x28)",
    "do while (i_14 != 0)",
    "i_44 = i_30",
    "var_308 = 0",
    "*(rdi_5 + 0x28) = *(rbx_63 + 0x10)",
    "*(rbx_63 + 0x10) = rdi_5",
    "*rdi_5 = 1",
    "rdi = 0",
    "rdi = 7",
    "var_308 = 7",
    "i_26, arg2, zmm1 = sub_140084e38(0x108ea, arg2)",
    "rdi = 0xb",
    "var_308 = 0xb",
    "goto label_14003a636",
    "case 0x6e",
    "rbx_25 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "int64_t* rbp_30 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "i_26, arg2 = sub_140031524(rbx_25)",
    "if ((rbp_30[1].b & 1) == 0)",
    "rbx_25[1].w = 4",
    "int64_t rax_152",
    "rax_152, i_26, arg2, zmm1 = sub_140031230(rbp_30)",
    "rax_106 = not.q(rax_152)",
    "goto label_1400388c3",
    "r11 = arg1",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x6f, 0x70",
    "i_26 = sx.q(*(rsi + 4))",
    "char* rbx_64 = *(r11[0xf] + (i_26 << 3))",
    "if (rbx_64 == 0)",
    "var_318.b = 0",
    "char* rax_306",
    "int512_t zmm1_1",
    "rax_306, r8, arg2, zmm1_1 = sub_14003789c(r11, i_26.d, *(rsi + 8), 0xff, zmm1, 0)",
    "rbx_64 = rax_306",
    "if (rbx_64 == 0)",
    "goto label_1400396a4",
    "*(rbx_64 + 8) |= 1",
    "var_310 = 0x41e",
    "var_318.d = zx.d(*(rsi + 2)) | 5",
    "uint32_t rax_307",
    "rax_307, i_26, arg2, zmm1 = sub_140027a84(*r13, nullptr, r13, &rbx_64[0x10], zmm1_1, 0, 0x41e)",
    "rdi = rax_307",
    "var_308 = rax_307",
    "if (rax_307 == 0)",
    "uint32_t rax_308",
    "int32_t rcx_239",
    "rax_308, rcx_239, i_26, arg2, zmm1 = sub_140028524(*(rbx_64 + 0x10), 1, nullptr, zmm1)",
    "rdi = rax_308",
    "var_308 = rax_308",
    "if (rax_308 == 0)",
    "int64_t r14_7 = *(rsi + 0x10)",
    "*(rbx_64 + 0x40) = r14_7",
    "if (r14_7 == 0)",
    "void* r12_31 = *(rbx_64 + 0x10)",
    "char* rdi_6 = *(rbx_64 + 0x38)",
    "*(rbx_64 + 0x4c) = 1",
    "void* rbp_42 = *(r12_31 + 8)",
    "if (*(rbp_42 + 0x60) == 0)",
    "int64_t* rax_314",
    "rax_314, rcx_239, i_26 = sub_14001e150(*(rbp_42 + 0x30), zmm1)",
    "*(rbp_42 + 0x60) = rax_314",
    "if (rax_314 != 0)",
    "rcx_239 = 0",
    "*rax_314 = 0",
    "*(rbp_42 + 0x60) += 4",
    "if (*(rbp_42 + 0x60) != 0 || *(rbp_42 + 0x60) != 0)",
    "int32_t rax_315 = *(rbp_42 + 0x3c)",
    "rdi_6[0x54] = 0xff",
    "*(rdi_6 + 0x80) = 0",
    "*(rdi_6 + 8) = r12_31",
    "*(rdi_6 + 0x20) = rbp_42",
    "rdi_6[1] = 1",
    "rdi_6[2] = 0",
    "int32_t rcx_246 = sbb.d(rcx_239, rcx_239, rax_315 != 0) & 1",
    "*(rdi_6 + 0x50) = rcx_246",
    "void* i_15 = *(rbp_42 + 0x10)",
    "if (i_15 != 0)",
    "if (*(i_15 + 0x50) == rcx_246)",
    "*(i_15 + 1) |= 0x20",
    "rdi_6[1] |= 0x20",
    "i_15 = *(i_15 + 0x28)",
    "do while (i_15 != 0)",
    "r13 = var_2f8",
    "var_308 = 0",
    "*(rdi_6 + 0x28) = *(rbp_42 + 0x10)",
    "*(rbp_42 + 0x10) = rdi_6",
    "*rdi_6 = 1",
    "rdi = 0",
    "rdi = 7",
    "var_308 = 7",
    "rbx_64[4] = 1",
    "uint32_t rax_309",
    "int32_t rcx_241",
    "rax_309, rcx_241, i_26, arg2, zmm1 = sub_14002e86c(*(rbx_64 + 0x10), &rbx_64[0x4c], (*(rsi + 2)).b | 2, arg2, zmm1)",
    "rdi = rax_309",
    "var_308 = rax_309",
    "if (rax_309 == 0)",
    "int32_t r13_21 = *(rbx_64 + 0x4c)",
    "char* rbp_41 = *(rbx_64 + 0x38)",
    "void* r12_30 = *(rbx_64 + 0x10)",
    "if (r13_21 s>= 1)",
    "void* i_42 = *(r12_30 + 8)",
    "i_32 = i_42",
    "if (*(i_42 + 0x60) == 0)",
    "int64_t* rax_310",
    "rax_310, rcx_241, i_26 = sub_14001e150(*(i_42 + 0x30), zmm1)",
    "*(i_42 + 0x60) = rax_310",
    "if (rax_310 != 0)",
    "rcx_241 = 0",
    "*rax_310 = 0",
    "*(i_42 + 0x60) += 4",
    "if (*(i_42 + 0x60) != 0 || *(i_42 + 0x60) != 0)",
    "if (r13_21 == 1)",
    "r13_21 &= sbb.d(rcx_241, rcx_241, *(i_42 + 0x3c) != 0)",
    "*(rbp_41 + 0x50) = r13_21",
    "rbp_41[0x54] = 0xff",
    "*(rbp_41 + 0x80) = r14_7",
    "*(rbp_41 + 8) = r12_30",
    "*(rbp_41 + 0x20) = i_42",
    "rbp_41[1] = 1",
    "rbp_41[2] = 0",
    "void* i_16 = *(i_42 + 0x10)",
    "if (i_16 != 0)",
    "if (*(i_16 + 0x50) == r13_21)",
    "*(i_16 + 1) |= 0x20",
    "rbp_41[1] |= 0x20",
    "i_16 = *(i_16 + 0x28)",
    "do while (i_16 != 0)",
    "i_42 = i_32",
    "var_308 = 0",
    "*(rbp_41 + 0x28) = *(i_42 + 0x10)",
    "*(i_42 + 0x10) = rbp_41",
    "*rbp_41 = 1",
    "rdi = 0",
    "rdi = 7",
    "var_308 = 7",
    "i_26, arg2, zmm1 = sub_140084e38(0x108ea, arg2)",
    "rdi = 0xb",
    "var_308 = 0xb",
    "r13 = var_2f8",
    "rbx_64[4] = 0",
    "i_44 = i_30",
    "r12 = var_300",
    "int32_t rax_317",
    "rax_317.b = *(rsi + 2) != 8",
    "*(rbx_64 + 8) ^= (rax_317 << 2 ^ *(rbx_64 + 8)) & 4",
    "r9 = arg_20",
    "r11 = arg1",
    "void* rcx_233 = *(rbx_64 + 0x10)",
    "*(rbx_64 + 0x18) = 0",
    "*(rbx_64 + 0x28) = 0",
    "if (rcx_233 != 0)",
    "uint32_t rax_305",
    "rax_305, i_26, arg2, zmm1 = sub_14002ed34(rcx_233, *(rbx_64 + 0x4c), nullptr, arg2)",
    "rdi = rax_305",
    "var_308 = rax_305",
    "r9 = arg_20",
    "r11 = arg1",
    "if (rdi != 0)",
    "goto label_140038941",
    "rbx_64[2] = 1",
    "i_26.b = i_33",
    "case 0x71",
    "int64_t* rax_36",
    "rax_36, r8, arg2 = sub_140037bb4(r11, rsi)",
    "int64_t rdx_13 = *(rsi + 0x10)",
    "rbp_1.b = i_33",
    "*(rsi + 4) = sub_140019074(rdx_13)",
    "if (rbp_1.b != 1)",
    "var_318 = nullptr",
    "uint32_t rax_38",
    "rax_38, r8, arg2, zmm1 = sub_140031820(rax_36, rdx_13, 0xffffffff, 1, r12, zmm1, 0)",
    "rdi = rax_38",
    "var_308 = rax_38",
    "if (rax_38 != 0)",
    "goto label_14003d1e1",
    "uint32_t rcx_22 = zx.d(rbp_1.b)",
    "int32_t rax_40",
    "if ((rax_36[1].b & 2) == 0 || zx.d(*(rax_36 + 0xa)) == rcx_22)",
    "rax_40 = 0",
    "rax_40, r8, arg2, zmm1 = sub_140018a98(rax_36, rcx_22.b)",
    "if (rax_40 != 0)",
    "goto label_1400396a4",
    "rax_36[4].d = 0",
    "rax_36[1].w |= 0x800",
    "if (rsi[1] == 0xf9)",
    "int64_t* rdx_15 = *(rsi + 0x10)",
    "if (rdx_15 != 0)",
    "r8 = sub_1400169a8(r13, rdx_15)",
    "rsi[1] = 0xf9",
    "*(rsi + 0x10) = rax_36[2]",
    "*(rsi + 4) = *(rax_36 + 0xc)",
    "goto label_140037fa3",
    "label_140037fa3:",
    "r11 = arg1",
    "if (*(rsi + 4) s> *(r13 + 0x7c))",
    "goto label_14003d1f3",
    "*rsi = 0x48",
    "label_140037fc2:",
    "int64_t* rax_44",
    "rax_44, i_26, arg2 = sub_140037bb4(r11, rsi)",
    "i_26.b = i_33",
    "rax_44[1].w = 0xa02",
    "rax_44[2] = *(rsi + 0x10)",
    "int32_t rax_46 = *(rsi + 4)",
    "*(rax_44 + 0xa) = i_26.b",
    "*(rax_44 + 0xc) = rax_46",
    "r11 = arg1",
    "r9 = arg_20",
    "case 0x72",
    "var_318.b = 1",
    "char* rax_321",
    "rax_321, r8, arg2, zmm1 = sub_14003789c(r11, *(rsi + 4), *(rsi + 8), 0xff, zmm1, 1)",
    "if (rax_321 == 0)",
    "goto label_1400396a4",
    "*(rax_321 + 0x40) = *(rsi + 0x10)",
    "rax_322, i_26, arg2 = sub_14003efa8(r13, *(rsi + 0xc), rax_321, zmm1)",
    "goto label_14003a95c",
    "case 0x73",
    "i_26 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "int64_t rcx_251 = *(i_26 + 0x18)",
    "*(i_26 + 0x18) = rcx_251 + 1",
    "if (rcx_251 == 0)",
    "goto label_14003d7a0",
    "i_26.b = i_33",
    "case 0x74",
    "var_318.b = 3",
    "char* rax_325",
    "rax_325, i_26, r8, arg2, zmm1 = sub_14003789c(r11, *(rsi + 4), *(rsi + 0xc), 0xff, zmm1, 3)",
    "if (rax_325 == 0)",
    "goto label_1400396a4",
    "rax_325[2] = 1",
    "int32_t rcx_253 = *(rsi + 8)",
    "rax_325[4] = 1",
    "*(rax_325 + 0x2c) = rcx_253",
    "*(rax_325 + 0x38) = &data_140140364",
    "goto label_140038669",
    "case 0x75",
    "i_26, arg2, zmm1 = sub_1400338fc(r11, *(r11[0xf] + (sx.q(*(rsi + 4)) << 3)))",
    "*(arg1[0xf] + (sx.q(*(rsi + 4)) << 3)) = 0",
    "label_140038664:",
    "r12 = var_300",
    "label_140038669:",
    "r11 = arg1",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x77",
    "i_26 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "*(i_26 + 8) ^= (*(rsi + 8) << 3 ^ *(i_26 + 8)) & 8",
    "i_26.b = i_33",
    "case 0x78",
    "int64_t* rax_365",
    "rax_365, arg2 = sub_140037bb4(r11, rsi)",
    "r11 = arg1",
    "*rax_365 = *(*(r11[0xf] + (sx.q(*(rsi + 4)) << 3)) + 0x18)",
    "i_26 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "*(i_26 + 0x18) += 1",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x79",
    "int32_t* rbx_73 = nullptr",
    "var_2d8 = nullptr",
    "var_2e8 = 0",
    "int64_t* rax_367",
    "rax_367, arg2 = sub_140037bb4(r11, rsi)",
    "int64_t* rax_368 = arg1",
    "void* r12_35 = *(rax_368[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "if ((*(r12_35 + 8) & 2) == 0)",
    "uint32_t rax_369",
    "rax_369, arg2, zmm1 = sub_140029f40(*(r12_35 + 0x38), &var_2e8)",
    "rdi = rax_369",
    "var_308 = rax_369",
    "if (rax_369 != 0)",
    "goto label_140038941",
    "if (var_2e8 == 0)",
    "void* rbx_74 = *(r12_35 + 0x38)",
    "sub_1400296c8(rbx_74)",
    "rbx_73 = *(rbx_74 + 0x30)",
    "rax_368 = arg1",
    "var_2d8 = rbx_73",
    "if (rbx_73 s< 0x7fffffffffffffff)",
    "rbx_73 += 1",
    "var_2d8 = rbx_73",
    "*(r12_35 + 8) |= 2",
    "rax_368 = arg1",
    "rbx_73 = 1",
    "var_2d8 = 1",
    "i_26 = sx.q(*(rsi + 0xc))",
    "if (i_26.d != 0)",
    "void* i_23 = rax_368[0x20]",
    "void* rbp_47",
    "if (i_23 == 0)",
    "rbp_47 = i_26 * 0x38 + i_44",
    "void* i_17 = *(i_23 + 8)",
    "while (i_17 != 0)",
    "i_23 = i_17",
    "i_17 = *(i_17 + 8)",
    "rbp_47 = i_26 * 0x38 + *(i_23 + 0x20)",
    "void* rax_370",
    "rax_370, i_26, arg2, zmm1 = sub_140031230(rbp_47)",
    "*(rbp_47 + 8) &= 0x3e40",
    "*rbp_47 = rax_370",
    "*(rbp_47 + 8) |= 4",
    "if (rax_370 == 0x7fffffffffffffff || (*(r12_35 + 8) & 2) != 0)",
    "rdi = 0xd",
    "goto label_14003d8d9",
    "if (rbx_73 s< rax_370 + 1)",
    "rbx_73 = rax_370 + 1",
    "*rbp_47 = rbx_73",
    "var_2d8 = rbx_73",
    "if ((*(r12_35 + 8) & 2) != 0)",
    "int32_t rbp_50 = 0",
    "while (true)",
    "sub_1400188ac(8, &var_2d8)",
    "char* rcx_291 = *(r12_35 + 0x38)",
    "rbx_73 = (var_2d8 & 0x3fffffffffffffff) + 1",
    "var_318 = &var_2e8",
    "var_2d8 = rbx_73",
    "uint32_t rax_372",
    "rax_372, i_26, arg2, zmm1 = sub_140029f9c(rcx_291, nullptr, rbx_73, 0, var_318)",
    "rdi = rax_372",
    "var_308 = rax_372",
    "if (rax_372 != 0)",
    "goto label_140038941",
    "if (var_2e8 != 0)",
    "break",
    "rbp_50 += 1",
    "if (rbp_50 s>= 0x64)",
    "rdi = 0xd",
    "goto label_140038941",
    "*(r12_35 + 3) = 0",
    "*(r12_35 + 0x28) = 0",
    "*rax_367 = rbx_73",
    "goto label_14003a636",
    "case 0x7a",
    "void* rbx_77 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "void* rdx_110 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "char* r8_61 = *(sx.q(*(rsi + 0xc)) * 0x38 + i_44)",
    "char* var_1b8_1 = r8_61",
    "int64_t* rbp_51",
    "int64_t r12_36",
    "if (rsi[1] != 0xfa || r13[0x24] == 0)",
    "rbp_51 = nullptr",
    "r12_36 = 0",
    "rbp_51 = *(rsi + 0x10)",
    "r12_36 = *((sx.q(*(rbx_77 + 1)) << 5) + r13[4])",
    "if ((rsi[2] & 1) != 0)",
    "*(r11 + 0x3c) += 1",
    "if ((rsi[2] & 0x20) != 0)",
    "r13[7] = r8_61",
    "r8_61.w = *(rsi + 2)",
    "int64_t var_1b0_1 = *(rdx_110 + 0x10)",
    "int32_t var_19c_1 = *(rdx_110 + 0xc)",
    "uint32_t r9_14",
    "if ((0x10 & r8_61.b) == 0)",
    "r9_14 = 0",
    "r9_14 = *(rbx_77 + 0x2c)",
    "if ((*(rdx_110 + 8) & 0x4000) == 0)",
    "int32_t var_198_2 = 0",
    "int32_t var_198_1 = *rdx_110",
    "int64_t var_1c0 = 0",
    "uint32_t rax_380",
    "rax_380, i_26, arg2, zmm1 = sub_14002dfd8(*(rbx_77 + 0x38), &var_1c0, r8_61.d & 0xa, r9_14, arg2, zmm1)",
    "rdi = rax_380",
    "var_308 = rax_380",
    "*(rbx_77 + 3) = 0",
    "*(rbx_77 + 0x28) = 0",
    "if (rax_380 != 0)",
    "goto label_140038941",
    "if (rbp_51 == 0)",
    "goto label_14003804a",
    "rax_380.b = rsi[2]",
    "rax_380.b &= 4",
    "var_318 = var_1b8_1",
    "r13[0x24](r13[0x23], zx.q((sbb.d(i_26.d, i_26.d, rax_380.b != 0) & 5) + 0x12), r12_36, *rbp_51, var_318, var_310, var_308, var_300, var_2f8, i_30)",
    "goto label_1400387bf",
    "case 0x7b",
    "void* rbp_52 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "char r14_9 = (*(rsi + 8)).b",
    "int64_t* r12_37",
    "int64_t r13_24",
    "if (rsi[1] != 0xfa || r13[0x24] == 0)",
    "r13_24 = 0",
    "r12_37 = nullptr",
    "r12_37 = *(rsi + 0x10)",
    "r13_24 = *((sx.q(*(rbp_52 + 1)) << 5) + r13[4])",
    "if ((rsi[2] & 2) != 0 && *(rbp_52 + 4) != 0)",
    "void* rbx_78 = *(rbp_52 + 0x38)",
    "sub_1400296c8(rbx_78)",
    "*(rbp_52 + 0x58) = *(rbx_78 + 0x30)",
    "i_26.b = rsi[2]",
    "uint32_t rax_384",
    "rax_384, i_26, arg2, zmm1 = sub_14002e468(*(rbp_52 + 0x38), i_26.b)",
    "rdi = rax_384",
    "var_308 = rax_384",
    "*(rbp_52 + 0x28) = 0",
    "*(rbp_52 + 0x2c) = 0",
    "if (rax_384 != 0)",
    "goto label_140038941",
    "r11 = arg1",
    "if ((1 & r14_9) == 0)",
    "label_140039cf5:",
    "r13 = var_2f8",
    "label_140039cfa:",
    "i_44 = i_30",
    "goto label_140038052",
    "*(r11 + 0x3c) += 1",
    "int64_t r10_3 = var_2f8[0x24]",
    "if (r10_3 == 0 || (r12_37[8].b & 0x20) != 0)",
    "r13 = var_2f8",
    "goto label_140039cfa",
    "r13 = var_2f8",
    "var_318 = *(rbp_52 + 0x58)",
    "r10_3(r13[0x23], 9, r13_24, *r12_37, var_318, var_310, var_308, var_300, var_2f8, i_30)",
    "i_44 = i_30",
    "goto label_1400387bf",
    "case 0x7c",
    "int32_t rax_386 = *(r11 + 0x3c)",
    "r13[0xf].d += rax_386",
    "*(r13 + 0x74) = rax_386",
    "*(r11 + 0x3c) = 0",
    "case 0x7d",
    "int32_t r8_66 = *(rsi + 0x10)",
    "void* rcx_304 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "void* rdx_117 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "int32_t var_2a0 = 0",
    "uint32_t rax_388",
    "rax_388, i_26, arg2, zmm1 = sub_1400403e4(rcx_304, rdx_117, r8_66, &var_2a0)",
    "rdi = rax_388",
    "var_308 = rax_388",
    "if (rax_388 != 0)",
    "goto label_140038941",
    "cond:21_1 = var_2a0 != 0",
    "goto label_14003918d",
    "case 0x7e",
    "int64_t* rbx_81 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "void* rax_390 = *(*(r11[0xf] + (sx.q(*(rsi + 4)) << 3)) + 0x38)",
    "void* rbp_53",
    "int32_t rdi_8",
    "if (*(rax_390 + 0x58) == 0)",
    "int32_t* rax_395 = *(rax_390 + 0x38)",
    "rdi_8 = *rax_395",
    "rbp_53 = &rax_395[4]",
    "void* rdx_118 = *(rax_390 + 0x18)",
    "void* rax_394 = sx.q(*(*(rdx_118 + 0x10) + 4)) * 0x50 + *(rdx_118 + 0x18)",
    "rdi_8 = *(rax_394 + 0x14)",
    "rbp_53 = *(rax_394 + 0x28)",
    "int32_t rax_396",
    "if (rbx_81[4].d s>= rdi_8)",
    "rbx_81[1].w &= 0x2d",
    "rbx_81[2] = rbx_81[3]",
    "rax_396 = 0",
    "rax_396, arg2, zmm1 = sub_140030d38(rbx_81, rdi_8, 0, zmm1)",
    "if (rax_396 != 0)",
    "r12_9 = arg1",
    "rdi = 7",
    "break",
    "int64_t rcx_309 = rbx_81[2]",
    "rbx_81[1].w &= 0x3e40",
    "rbx_81[1].w |= 0x10",
    "*(rbx_81 + 0xc) = rdi_8",
    "i_26, arg2 = memcpy(rcx_309, rbp_53, sx.q(rdi_8))",
    "r11 = arg1",
    "rdi = 0",
    "var_308 = 0",
    "*(*(r11[0xf] + (sx.q(*(rsi + 0xc)) << 3)) + 0x28) = 0",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x7f",
    "int64_t* rax_399",
    "rax_399, arg2 = sub_140037bb4(r11, rsi)",
    "r12_9 = arg1",
    "void* rdi_9 = *(*(r12_9[0xf] + (sx.q(*(rsi + 4)) << 3)) + 0x38)",
    "sub_1400296c8(rdi_9)",
    "r8 = zx.q(*(rdi_9 + 0x40))",
    "if (r8.d u> *(r13 + 0x7c))",
    "label_14003d1e1:",
    "r11 = arg1",
    "label_14003d1f3:",
    "arg2 = sub_140032200(r11, \"string or blob too big\", r8, arg2)",
    "rdi = 0x12",
    "goto label_14003d8d9",
    "uint32_t rax_400",
    "rax_400, i_26, arg2, zmm1 = sub_140031b74(rdi_9, 0, r8.d, rax_399, arg2, zmm1)",
    "rdi = rax_400",
    "var_308 = rax_400",
    "if (rax_400 != 0)",
    "break",
    "if (*(rsi + 0xc) == 0 && (rax_399[1].w & 0x1000) != 0)",
    "int32_t rax_401",
    "rax_401, i_26, r8, arg2, zmm1 = sub_140030eb4(rax_399)",
    "if (rax_401 != 0)",
    "goto label_1400396a4",
    "goto label_14003804a",
    "case 0x80",
    "int64_t* rax_402",
    "rax_402, arg2 = sub_140037bb4(r11, rsi)",
    "r11 = arg1",
    "char* rbx_83 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "if (rbx_83[2] != 0)",
    "rax_402[1].w = 1",
    "i_26.b = i_33",
    "r9 = arg_20",
    "int64_t var_258",
    "int64_t rax_403",
    "if (rbx_83[3] == 0)",
    "if (*rbx_83 == 2)",
    "int64_t* rbx_84 = **(rbx_83 + 0x38)",
    "uint32_t rax_405 = (*(*rbx_84 + 0x60))()",
    "r12_9 = arg1",
    "rdi = rax_405",
    "var_308 = rax_405",
    "i_26, arg2 = sub_140035b88(r12_9, rbx_84)",
    "if (rdi != 0)",
    "break",
    "rax_403 = var_258",
    "r11 = r12_9",
    "r12 = var_300",
    "goto label_14003b68b",
    "if (**(rbx_83 + 0x38) == 0)",
    "rdi = 0",
    "var_308 = 0",
    "uint32_t rax_407",
    "rax_407, i_26, arg2, zmm1 = sub_140034960(rbx_83)",
    "r11 = arg1",
    "rdi = rax_407",
    "var_308 = rax_407",
    "if (rdi != 0)",
    "goto label_140038941",
    "if (rbx_83[2] == 0)",
    "void* rbx_85 = *(rbx_83 + 0x38)",
    "sub_1400296c8(rbx_85)",
    "rax_403 = *(rbx_85 + 0x30)",
    "r11 = arg1",
    "goto label_14003b683",
    "rax_402[1].w = 1",
    "i_26.b = i_33",
    "r9 = arg_20",
    "rax_403 = *(rbx_83 + 0x58)",
    "label_14003b683:",
    "var_258 = rax_403",
    "label_14003b68b:",
    "*rax_402 = rax_403",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x81",
    "char* rbx_86 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "rbx_86[2] = 1",
    "*(rbx_86 + 0x28) = 0",
    "if (*rbx_86 == 0)",
    "char* rbx_87 = *(rbx_86 + 0x38)",
    "sub_140016950(*(rbx_87 + 0x18))",
    "*rbx_87 = 1",
    "*(rbx_87 + 0x18) = 0",
    "label_140038af5:",
    "r11 = arg1",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x83, 0x84",
    "void* rbp_58 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "int32_t* rbx_93 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "if ((rsi[2] & 1) != 0)",
    "*(r11 + 0x3c) += 1",
    "if ((rbx_93[2].w & 0x4000) == 0)",
    "rdi = 0",
    "uint32_t rax_435",
    "rax_435, r8, arg2, zmm1 = sub_140030f10(rbx_93, zmm1)",
    "rdi = rax_435",
    "if (rdi != 0)",
    "goto label_140038941",
    "if (*rsi != 0x83)",
    "r8.w = *(rsi + 2)",
    "int64_t var_a8_1 = sx.q(rbx_93[3])",
    "int64_t var_b0 = *(rbx_93 + 0x10)",
    "void* var_98_1 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "int16_t var_90_1 = *(rsi + 0x10)",
    "uint32_t r9_19",
    "if ((0x10 & r8.b) == 0)",
    "r9_19 = 0",
    "r9_19 = *(rbp_58 + 0x2c)",
    "rax_364, i_26, arg2, zmm1 = sub_14002dfd8(*(rbp_58 + 0x38), &var_b0, r8.d & 0xa, r9_19, arg2, zmm1)",
    "*(rbp_58 + 0x28) = 0",
    "rax_364, i_26, arg2 = sub_14003faf0(rbp_58, rbx_93)",
    "goto label_14003af84",
    "case 0x85",
    "void* rbx_94 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "char* rbp_59 = *(rbx_94 + 0x38)",
    "char var_1de_1 = 0",
    "int64_t var_1f0 = *(rbx_94 + 0x40)",
    "int16_t var_1e0_1 = *(rsi + 0xc)",
    "void* var_1e8_1 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "int32_t var_250",
    "var_318 = &var_250",
    "uint32_t rax_448",
    "rax_448, i_26, arg2, zmm1 = sub_140029f9c(rbp_59, &var_1f0, 0, 0, var_318)",
    "rdi = rax_448",
    "var_308 = rax_448",
    "if (rax_448 != 0)",
    "goto label_140038941",
    "if (var_250 == 0)",
    "i_26.b = 4",
    "uint32_t rax_449",
    "rax_449, i_26, arg2, zmm1 = sub_14002e468(rbp_59, i_26.b)",
    "rdi = rax_449",
    "var_308 = rax_449",
    "if (rax_449 != 0)",
    "goto label_140038941",
    "*(rbx_94 + 0x28) = 0",
    "*(rbx_94 + 0x2c) = 0",
    "goto label_140038af5",
    "case 0x86, 0x87",
    "void* rbx_95 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "if (**(rbx_95 + 0x38) == 0)",
    "rdi = 0",
    "var_308 = 0",
    "uint32_t rax_452",
    "rax_452, arg2, zmm1 = sub_140034960(rbx_95)",
    "rdi = rax_452",
    "var_308 = rax_452",
    "if (rdi != 0)",
    "goto label_140038941",
    "if (*(rbx_95 + 2) != 0)",
    "rcx_359 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "goto label_14003908d",
    "void* rdx_132 = *(rbx_95 + 0x38)",
    "var_2a8 = nullptr",
    "uint32_t rax_453",
    "rax_453, arg2, zmm1 = sub_14003594c(arg2, rdx_132, &var_2a8, zmm1)",
    "rdi = rax_453",
    "var_308 = rax_453",
    "if (rax_453 != 0)",
    "goto label_140038941",
    "if (*rsi != 0x86)",
    "int32_t** rax_457",
    "rax_457, i_26, arg2 = sub_140037bb4(arg1, rsi)",
    "*rax_457 = var_2a8",
    "goto label_14003874b",
    "r11 = arg1",
    "i_26 = *(r11[0xf] + (sx.q(*(rsi + 0xc)) << 3))",
    "int32_t* rax_455 = var_2a8",
    "*(i_26 + 2) = 0",
    "*(i_26 + 0x58) = rax_455",
    "*(i_26 + 3) = 1",
    "int64_t rax_456 = *(rsi + 0x10)",
    "*(i_26 + 0x30) = rbx_95",
    "*(i_26 + 0x20) = rax_456",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x88",
    "int64_t* rax_467",
    "rax_467, arg2 = sub_140037bb4(r11, rsi)",
    "rax_467[1].w = 1",
    "if (*(r13 + 0xcc) s> r13[0x1b].d + 1)",
    "r12_9 = arg1",
    "rdi = 6",
    "*(r12_9 + 0xc2) = 2",
    "break",
    "int64_t r12_39 = sx.q(*(rsi + 0xc))",
    "int32_t rdx_136 = *(rsi + 4)",
    "int32_t var_28c = 0",
    "int64_t rbp_61 = r12_39 << 5",
    "uint32_t rax_469",
    "rax_469, i_26, arg2, zmm1 = sub_14002edb8(*(r13[4] + rbp_61 + 8), rdx_136, &var_28c, arg2)",
    "int64_t r8_73 = sx.q(var_28c)",
    "rdi = rax_469",
    "var_308 = rax_469",
    "rax_467[1].w = 4",
    "*rax_467 = r8_73",
    "if (rdi != 0)",
    "goto label_140038941",
    "if (r8_73.d != 0)",
    "i_26 = r13[4]",
    "int32_t r9_21 = *(rsi + 4)",
    "void** i_18 = *(*(i_26 + rbp_61 + 0x18) + 0x10)",
    "while (i_18 != 0)",
    "void* rax_471 = i_18[2]",
    "if (*(rax_471 + 0x38) == r8_73.d)",
    "*(rax_471 + 0x38) = r9_21",
    "i_18 = *i_18",
    "void** i_19 = *(*(i_26 + rbp_61 + 0x18) + 0x28)",
    "while (i_19 != 0)",
    "void* rax_473 = i_19[2]",
    "if (*(rax_473 + 0x58) == r8_73.d)",
    "*(rax_473 + 0x58) = r9_21",
    "i_19 = *i_19",
    "arg_18 = (1 + r12_39).b",
    "goto label_14003804a",
    "case 0x89",
    "var_288.d = 0",
    "uint32_t rax_477",
    "rax_477, i_26, arg2, zmm1 = sub_14002ed34(*((sx.q(*(rsi + 8)) << 5) + r13[4] + 8), *(rsi + 4), sbb.q(r8, r8, *(rsi + 0xc) != 0) & &var_288, arg2)",
    "r11 = arg1",
    "rdi = rax_477",
    "var_308 = rax_477",
    "if (*(rsi + 0xc) != 0)",
    "int64_t rax_478 = sx.q(var_288.d)",
    "*(r11 + 0x3c) += rax_478.d",
    "if (*(rsi + 0xc) s> 0)",
    "int64_t* rcx_369 = sx.q(*(rsi + 0xc)) * 0x38",
    "*(rcx_369 + i_44) += rax_478",
    "goto label_14003be23",
    "case 0x8a",
    "char* rcx_371 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "if (*rcx_371 == 1)",
    "i_26, arg2 = sub_14003f1b4(r13, *(rcx_371 + 0x38))",
    "goto label_140037ea8",
    "void* rcx_373 = *(rcx_371 + 0x38)",
    "rax_322, i_26, arg2, zmm1 = sub_14002ed34(*(rcx_373 + 8), *(rcx_373 + 0x50), nullptr, arg2)",
    "goto label_14003a95c",
    "case 0x8b",
    "int64_t* rax_480",
    "int512_t zmm0_3",
    "rax_480, zmm0_3 = sub_140037bb4(r11, rsi)",
    "char r8_77 = (*(rsi + 0xc)).b",
    "void* rcx_377 = *((sx.q(*(rsi + 4)) << 5) + r13[4] + 8)",
    "i_46 = 0",
    "uint32_t rax_481",
    "rax_481, i_26, arg2, zmm1 = sub_14002e86c(rcx_377, &i_46, r8_77, zmm0_3, zmm1)",
    "rdi = rax_481",
    "var_308 = rax_481",
    "if (rax_481 != 0)",
    "goto label_140038941",
    "*rax_480 = sx.q(i_46)",
    "goto label_140038af5",
    "case 0x8c",
    "*(r13 + 0x6a) += 1",
    "var_318 = nullptr",
    "rax_322, i_26, arg2, zmm1 = sub_14005db80(r13, *(rsi + 0x10), 0, 0, nullptr)",
    "*(r13 + 0x6a) -= 1",
    "label_14003a95c:",
    "rdi = rax_322",
    "var_308 = rax_322",
    "if (rax_322 != 0)",
    "goto label_140038941",
    "goto label_140038669",
    "case 0x8d",
    "int64_t rcx_379 = *(rsi + 0x10)",
    "int64_t rbx_98 = sx.q(*(rsi + 4))",
    "if (rcx_379 != 0)",
    "int64_t r8_80 = r13[4]",
    "int64_t* var_230 = r13",
    "void* var_228_1 = &r11[0x15]",
    "int32_t var_220_1 = rbx_98.d",
    "int32_t var_218_1 = 0",
    "int64_t var_318_2 = rcx_379",
    "void* rax_489 = _printf_p_l(r13, \"SELECT*FROM\"%w\".%s WHERE %s ORDE\u2026\", *((rbx_98 << 5) + r8_80), arg2)",
    "if (rax_489 == 0)",
    "rdi = 7",
    "label_14003da17:",
    "r8, arg2 = sub_14004e348(r13)",
    "if (rdi == 7)",
    "goto label_1400396a4",
    "goto label_14003da2b",
    "*(r13 + 0xb5) = 1",
    "uint32_t var_21c_1 = 0",
    "int32_t var_214_1 = 0",
    "var_318 = nullptr",
    "uint32_t rax_490",
    "rax_490, arg2, zmm1 = sub_14005db80(r13, rax_489, sub_140061ca8, &var_230, nullptr)",
    "rdi = rax_490",
    "var_308 = rax_490",
    "if (rax_490 == 0)",
    "rdi = var_21c_1",
    "var_308 = rdi",
    "if (rdi == 0 && var_214_1 == 0)",
    "arg2, zmm1 = sub_140084e38(0x15f51, arg2)",
    "rdi = 0xb",
    "var_308 = 0xb",
    "sub_1400169a8(r13, rax_489)",
    "r11 = arg1",
    "*(r13 + 0xb5) = 0",
    "goto label_14003c02c",
    "int512_t zmm0_4 = sub_140054800(*((rbx_98 << 5) + r13[4] + 0x18))",
    "*(r13 + 0x2c) &= 0xffffffef",
    "uint32_t rax_485",
    "rax_485, i_26, arg2, zmm1 = sub_140061ea0(r13, rbx_98.d, &arg1[0x15], zmm0_4)",
    "*(r13 + 0x2c) |= 1",
    "r11 = arg1",
    "r11[0x19].d &= 0xfffffffc",
    "r12 = var_300",
    "rdi = rax_485",
    "var_308 = rax_485",
    "label_14003c02c:",
    "if (rdi != 0)",
    "goto label_14003da17",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x8e",
    "rax_322, i_26, arg2, zmm1 = sub_14004cd04(r13, *(rsi + 4), arg2)",
    "goto label_14003a95c",
    "case 0x8f",
    "int64_t* rax_491",
    "rax_491, i_26, arg2 = sub_14001a4ac(*((sx.q(*(rsi + 4)) << 5) + r13[4] + 0x18) + 8, *(rsi + 0x10), 0, zmm1)",
    "if (rax_491 != 0)",
    "int32_t temp7_1",
    "if (r13[0x53] == 0)",
    "temp7_1 = *(rax_491 + 0x3c)",
    "*(rax_491 + 0x3c) -= 1",
    "if (r13[0x53] != 0 || temp7_1 == 1)",
    "i_26, arg2 = sub_14004e45c(r13, rax_491)",
    "label_14003c08f:",
    "*(r13 + 0x2c) |= 1",
    "goto label_140038669",
    "case 0x90",
    "uint64_t rax_493",
    "rax_493, arg2 = sub_14001a4ac(*((sx.q(*(rsi + 4)) << 5) + r13[4] + 0x18) + 0x20, *(rsi + 0x10), 0, zmm1)",
    "if (rax_493 != 0)",
    "void* rax_494 = *(rax_493 + 0x18)",
    "void* i_25 = *(rax_494 + 0x10)",
    "if (i_25 == rax_493)",
    "*(rax_494 + 0x10) = *(rax_493 + 0x28)",
    "if (i_25 != 0)",
    "void* i_20",
    "i_20 = *(i_25 + 0x28)",
    "if (i_20 == rax_493)",
    "break",
    "i_25 = i_20",
    "do while (i_20 != 0)",
    "if (i_25 != 0 && *(i_25 + 0x28) == rax_493)",
    "*(i_25 + 0x28) = *(rax_493 + 0x28)",
    "i_26, arg2 = sub_14004e174(r13, rax_493)",
    "goto label_14003c08f",
    "case 0x91",
    "int64_t* rax_497",
    "rax_497, i_26, arg2 = sub_14001a4ac(*((sx.q(*(rsi + 4)) << 5) + r13[4] + 0x18) + 0x38, *(rsi + 0x10), 0, zmm1)",
    "if (rax_497 == 0)",
    "goto label_140038af5",
    "void* rcx_403 = rax_497[6]",
    "if (rax_497[5] == rcx_403)",
    "void* rdx_154 = *(sub_14001a410(rcx_403 + 8, rax_497[1], nullptr) + 0x10)",
    "if (rdx_154 != 0)",
    "int64_t* rdx_155 = rdx_154 + 0x68",
    "void* rax_499",
    "while (true)",
    "rax_499 = *rdx_155",
    "if (rax_499 == rax_497)",
    "break",
    "rdx_155 = rax_499 + 0x40",
    "*rdx_155 = *(rax_499 + 0x40)",
    "i_26, arg2 = sub_14006bfac(r13, rax_497)",
    "*(r13 + 0x2c) |= 1",
    "goto label_140038304",
    "case 0x92",
    "int64_t* rbp_63 = sx.q(*(rsi + 0xc)) * 0x38",
    "int32_t var_260",
    "var_318 = &var_260",
    "int64_t* rbx_103 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "int64_t* rax_502",
    "rax_502, zmm1 = sub_14002fce4(*((zx.q(*(rsi + 2)) << 5) + r13[4] + 8), *(rsi + 0x10) + 4, *(rsi + 8), *(rbp_63 + i_44) + 1, zmm1, var_318)",
    "r8, arg2 = sub_140031524(rbx_103)",
    "int32_t rcx_410 = var_260",
    "if (rcx_410 != 0)",
    "if (rax_502 == 0)",
    "goto label_1400396a4",
    "*(rbp_63 + i_44) -= sx.q(rcx_410 - 1)",
    "var_318 = sub_140016950",
    "arg2, zmm1 = sub_140031820(rbx_103, rax_502, 0xffffffff, 1, rax_502, zmm1, sub_140016950)",
    "i_26 = zx.q(i_33)",
    "if ((rbx_103[1].b & 2) == 0 || zx.d(*(rbx_103 + 0xa)) == i_26.d)",
    "goto label_140038462",
    "i_26.b = i_26.b",
    "i_26, arg2, zmm1 = sub_140018a98(rbx_103, i_26.b)",
    "label_14003874b:",
    "r12 = var_300",
    "goto label_140038304",
    "case 0x93",
    "void* rbx_106 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "int64_t* rbp_65 = sx.q(*(rsi + 8)) * 0x38",
    "if ((*(rbx_106 + 8) & 0x10) == 0)",
    "int32_t rax_504",
    "rax_504, r8, arg2 = sub_1400315cc(rbx_106, zmm1)",
    "if (rax_504 != 0)",
    "goto label_1400396a4",
    "sub_14001ebb0(*(rbx_106 + 0x10), *(rbp_65 + i_44), zmm1)",
    "goto label_140038304",
    "case 0x94",
    "int64_t* rax_35",
    "rax_35, i_26, arg2 = sub_140037bb4(r11, rsi)",
    "r11_2 = rax_35",
    "r11_2[1].w = 8",
    "goto label_140037ec7",
    "case 0x95",
    "int64_t* rax_547 = sub_140037bb4(r11, rsi)",
    "void* r9_28 = arg1[0x20]",
    "i_26, arg2 = sub_1400316f8(rax_547, sx.q(*(*(r9_28 + 0x10) + sx.q(*(r9_28 + 0x54)) * 0x18 + 4) + *(rsi + 4)) * 0x38 + *(r9_28 + 0x20), 0x1000)",
    "label_1400387bf:",
    "r11 = arg1",
    "r12 = var_300",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x96",
    "int64_t rax_549 = sx.q(*(rsi + 8))",
    "if (test_bit(zx.q(r13[6].d), 0x13))",
    "r13[0x52] += rax_549",
    "if (*(rsi + 4) == 0)",
    "r11[0xa] += rax_549",
    "r13[0x51] += rax_549",
    "case 0x97",
    "void* i_24 = r11[0x20]",
    "void* rbp_75",
    "if (i_24 == 0)",
    "rbp_75 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "void* i_21 = *(i_24 + 8)",
    "while (i_21 != 0)",
    "i_24 = i_21",
    "i_21 = *(i_21 + 8)",
    "rbp_75 = sx.q(*(rsi + 4)) * 0x38 + *(i_24 + 0x20)",
    "int64_t rax_550 = sub_140031230(rbp_75)",
    "*(rbp_75 + 8) &= 0x3e40",
    "*(rbp_75 + 8) |= 4",
    "*rbp_75 = rax_550",
    "void* rbx_116 = sx.q(*(rsi + 8)) * 0x38 + i_44",
    "int64_t rax_551",
    "rax_551, i_26, arg2, zmm1 = sub_140031230(rbx_116)",
    "*(rbx_116 + 8) &= 0x3e40",
    "r11 = arg1",
    "i_26.b = i_33",
    "r9 = arg_20",
    "*(rbx_116 + 8) |= 4",
    "*rbx_116 = rax_551",
    "if (*rbp_75 s< rax_551)",
    "*rbp_75 = rax_551",
    "case 0x98",
    "void** rbx_118 = sx.q(*(rsi + 4)) * 0x38",
    "uint64_t* rbp_79 = sx.q(*(rsi + 0xc)) * 0x38",
    "void** rax_553",
    "rax_553, i_26, arg2 = sub_140037bb4(r11, rsi)",
    "void* i_37 = *(rbx_118 + i_44)",
    "i_32 = i_37",
    "int32_t rax_554",
    "if (i_37 s> 0)",
    "i_26 = 0",
    "if (*(rbp_79 + i_44) s> 0)",
    "i_26 = *(rbp_79 + i_44)",
    "rax_554 = sub_140019ffc(&i_32, i_26)",
    "if (i_37 s<= 0 || rax_554 != 0)",
    "*rax_553 = -ffffffffffffffff",
    "*rax_553 = i_32",
    "goto label_140038af5",
    "case 0x99, 0x9a",
    "uint64_t rbx_119 = zx.q(*(rsi + 2))",
    "int64_t* rax_560",
    "rax_560, r8 = sub_140016c18(r13, (rbx_119 << 3) + 0x68, zmm1)",
    "if (rax_560 == 0)",
    "goto label_1400396a4",
    "rax_560[2] = 0",
    "*rax_560 = &rax_560[rbx_119 + 6]",
    "rax_560[rbx_119 + 7].w = 1",
    "rax_560[rbx_119 + 0xb] = r13",
    "rax_560[rbx_119 + 0xa].d = 0",
    "rax_560[5].b = 0",
    "rax_560[1] = *(rsi + 0x10)",
    "*(rax_560 + 0x24) = 0",
    "*(rax_560 + 0x29) = rbx_119.b",
    "r12_9 = arg1",
    "rax_560[3] = r12_9",
    "rax_560[4].d = ((rsi - r12) s/ 0x18).d",
    "rsi[1] = 0xf0",
    "*(rsi + 0x10) = rax_560",
    "*rsi = 0x9b",
    "goto label_14003c960",
    "case 0x9b",
    "r12_9 = arg1",
    "label_14003c960:",
    "int64_t* rbx_120 = *(rsi + 0x10)",
    "void* rdx_187 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "if (rbx_120[2] != rdx_187)",
    "uint32_t r8_88 = zx.d(*(rbx_120 + 0x29))",
    "rbx_120[2] = rdx_187",
    "int32_t i_28 = r8_88 - 1",
    "int64_t i_22 = sx.q(i_28)",
    "if (r8_88 - 1 s>= 0)",
    "void** r10_4 = &rbx_120[i_22 + 6]",
    "i_22 -= 1",
    "int32_t rax_565 = *(rsi + 8) + i_28",
    "i_28 -= 1",
    "*r10_4 = sx.q(rax_565) * 0x38 + i_44",
    "r10_4 -= 8",
    "do while (i_22 s>= 0)",
    "r13 = var_2f8",
    "*(rdx_187 + 0xc) += 1",
    "int64_t rax_569 = rbx_120[1]",
    "uint64_t rdx_188 = zx.q(*(rbx_120 + 0x29))",
    "if (*(rsi + 4) == 0)",
    "(*(rax_569 + 0x18))(rbx_120, rdx_188, &rbx_120[6])",
    "(*(rax_569 + 0x30))(rbx_120, rdx_188, &rbx_120[6])",
    "int32_t rax_570 = *(rbx_120 + 0x24)",
    "if (rax_570 == 0)",
    "goto label_14003804a",
    "if (rax_570 s> 0)",
    "i_26.b = 1",
    "int64_t rax_571",
    "int512_t zmm0_5",
    "rax_571, zmm0_5 = sub_140031c84(*rbx_120, i_26.b, arg2)",
    "i_26, arg2, zmm1 = sub_140032200(r12_9, \"%s\", rax_571, zmm0_5)",
    "rdi = *(rbx_120 + 0x24)",
    "var_308 = rdi",
    "if (rbx_120[5].b != 0)",
    "if (*(rsi - 0x14) != 0)",
    "void* rax_574 = sx.q(*(rsi - 0x14)) * 0x38 + i_44",
    "if ((*(rax_574 + 8) & 0x2400) == 0)",
    "*rax_574 = 1",
    "*(rax_574 + 8) = 4",
    "i_26, arg2 = sub_1400315a0(rax_574, 1)",
    "rbx_120[5].b = 0",
    "int64_t* rcx_465 = *rbx_120",
    "if ((rcx_465[1].w & 0x2400) != 0 || rcx_465[4].d != 0)",
    "i_26, arg2 = sub_14003118c(rcx_465)",
    "*(*rbx_120 + 8) = 1",
    "*(rbx_120 + 0x24) = 0",
    "goto label_14003ca7b",
    "case 0x9c, 0x9d",
    "void* rbp_82 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "if (*(rsi + 0xc) == 0)",
    "uint32_t rax_576",
    "rax_576, i_26, r8, arg2 = sub_1400310a0(rbp_82, *(rsi + 0x10))",
    "rdi = rax_576",
    "var_308 = rax_576",
    "int64_t rdi_15 = *(rsi + 0x10)",
    "void* rbx_123 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "void* var_e8",
    "memset(&var_e8, 0, 0x38)",
    "arg2 = sub_140031524(rbx_123)",
    "var_e8 = rbx_123",
    "void* var_d8_1 = rbp_82",
    "int64_t var_e0_1 = rdi_15",
    "i_26, r8 = (*(rdi_15 + 0x28))(&var_e8)",
    "uint32_t var_c4",
    "rdi = var_c4",
    "var_308 = rdi",
    "rbp_82 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "if (rdi != 0)",
    "i_26.b = 1",
    "char* rax_673",
    "rax_673, arg2 = sub_140031c84(rbp_82, i_26.b, arg2)",
    "rdx_163 = &data_1400f38e8",
    "r8_83 = rax_673",
    "rcx_421 = arg1",
    "goto label_14003da74",
    "uint32_t i_38 = zx.d(i_33)",
    "if ((*(rbp_82 + 8) & 2) != 0 && zx.d(*(rbp_82 + 0xa)) != i_38)",
    "i_26.b = i_38.b",
    "i_26, r8, arg2, zmm1 = sub_140018a98(rbp_82, i_26.b)",
    "int32_t rcx_471",
    "if ((*(rbp_82 + 8) & 0x12) == 0)",
    "rcx_471 = 0",
    "i_26 = zx.q(*(rbp_82 + 0xc))",
    "if ((*(rbp_82 + 8) & 0x4000) != 0)",
    "i_26 = zx.q(i_26.d + *rbp_82)",
    "rcx_471.b = i_26.d s> *(*(rbp_82 + 0x28) + 0x7c)",
    "r11 = arg1",
    "if (rcx_471 != 0)",
    "goto label_14003d1f3",
    "i_26.b = i_33",
    "r9 = arg_20",
    "case 0x9e",
    "if (*(rsi + 4) != 0)",
    "r11[0x19].d ^= ((*(rsi + 8) + 1) ^ r11[0x19].d) & 3",
    "sub_140035b60(r13, *(rsi + 8))",
    "i_26.b = i_33",
    "case 0xa0",
    "void* rbx_128 = *(rsi + 0x10)",
    "uint32_t rax_597",
    "rax_597, i_26, arg2, zmm1 = sub_140070734(r13, rbx_128, zmm1)",
    "r12_9 = arg1",
    "rdi = rax_597",
    "var_308 = rax_597",
    "if (rbx_128 != 0)",
    "i_26, arg2 = sub_140035b88(r12_9, *(rbx_128 + 0x10))",
    "goto label_14003ca7b",
    "case 0xa1",
    "void var_158",
    "memset(&var_158, 0, 0x38)",
    "int64_t* var_130_1 = r13",
    "uint32_t rax_598",
    "int512_t zmm0_6",
    "rax_598, zmm0_6 = sub_140031744(&var_158, sx.q(*(rsi + 8)) * 0x38 + i_44)",
    "rdi = rax_598",
    "var_308 = rax_598",
    "char* rax_599",
    "rax_599, i_26, arg2, zmm1 = sub_140031c84(&var_158, 1, zmm0_6)",
    "r12_9 = arg1",
    "if (rax_599 != 0)",
    "uint32_t rax_600",
    "rax_600, i_26, arg2, zmm1 = sub_140070298(r13, *(rsi + 4), rax_599, &r12_9[0x15], arg2, zmm1)",
    "rdi = rax_600",
    "var_308 = rax_600",
    "int16_t var_150",
    "int32_t var_138",
    "if ((var_150 & 0x2400) != 0 || var_138 != 0)",
    "i_26, arg2 = sub_14003118c(&var_158)",
    "if (rdi != 0)",
    "break",
    "goto label_140038664",
    "case 0xa2",
    "r13[0x1b].d += 1",
    "rax_322, i_26, arg2 = sub_1400705bc(r13, *(rsi + 4), *(rsi + 0x10))",
    "r13[0x1b].d -= 1",
    "goto label_14003a95c",
    "case 0xa3",
    "void* rax_601 = *(rsi + 0x10)",
    "var_2c0 = nullptr",
    "int64_t* rbx_129 = *(rax_601 + 0x10)",
    "if (rbx_129 == 0)",
    "rdi = 6",
    "goto label_140038941",
    "int64_t rbp_86 = *rbx_129",
    "if (rbp_86 == 0)",
    "rdi = 6",
    "goto label_140038941",
    "uint32_t rax_602 = (*(rbp_86 + 0x30))(rbx_129, &var_2c0)",
    "r12_9 = arg1",
    "rdi = rax_602",
    "var_308 = rax_602",
    "arg2 = sub_140035b88(r12_9, rbx_129)",
    "if (rdi != 0)",
    "break",
    "*var_2c0 = rbx_129",
    "var_318.b = 2",
    "char* rax_604",
    "rax_604, i_26, arg2, zmm1 = sub_14003789c(r12_9, *(rsi + 4), 0, 0xff, zmm1, 2)",
    "void** rcx_501 = var_2c0",
    "if (rax_604 == 0)",
    "r8 = (*(rbp_86 + 0x38))(rcx_501)",
    "goto label_1400396a4",
    "*(rax_604 + 0x38) = rcx_501",
    "rbx_129[1].d += 1",
    "goto label_14003804a",
    "case 0xa4",
    "void* rbp_88 = *(r11[0xf] + (sx.q(*(rsi + 4)) << 3))",
    "rbx_40 = sx.q(*(rsi + 0xc)) * 0x38 + i_44",
    "if (*(rbp_88 + 2) != 0)",
    "goto label_14003908a",
    "int64_t* r12_46 = **(rbp_88 + 0x38)",
    "int64_t rdi_17 = *r12_46",
    "void* var_80",
    "memset(&var_80, 0, 0x38)",
    "var_80 = rbx_40",
    "if ((rsi[2] & 1) == 0)",
    "*(rbx_40 + 8) &= 0x3e40",
    "*(rbx_40 + 8) |= 1",
    "sub_140031524(rbx_40)",
    "*(rbx_40 + 8) = 0x4001",
    "*rbx_40 = 0",
    "uint32_t rax_613 = (*(rdi_17 + 0x58))(*(rbp_88 + 0x38), &var_80, zx.q(*(rsi + 8)))",
    "r12_9 = arg1",
    "rdi = rax_613",
    "var_308 = rax_613",
    "r8, arg2 = sub_140035b88(r12_9, r12_46)",
    "uint32_t var_5c",
    "if (var_5c s> 0)",
    "int64_t rax_614",
    "int512_t zmm0_7",
    "rax_614, zmm0_7 = sub_140031c84(rbx_40, 1, arg2)",
    "r8, arg2, zmm1 = sub_140032200(r12_9, \"%s\", rax_614, zmm0_7)",
    "rdi = var_5c",
    "var_308 = rdi",
    "uint32_t i_39 = zx.d(i_33)",
    "if ((*(rbx_40 + 8) & 2) != 0 && zx.d(*(rbx_40 + 0xa)) != i_39)",
    "r8, arg2, zmm1 = sub_140018a98(rbx_40, i_39.b)",
    "int32_t rax_616",
    "rax_616, i_26 = sub_140031694(rbx_40)",
    "if (rax_616 != 0)",
    "goto label_14003d1e1",
    "label_14003ca7b:",
    "if (rdi != 0)",
    "break",
    "goto label_14003804a",
    "case 0xa5",
    "int32_t rbp_90 = r13[6].d",
    "r13[6] |= 0x4000000",
    "int64_t* r12_48 = *(*(rsi + 0x10) + 0x10)",
    "void* rbx_136 = sx.q(*(rsi + 4)) * 0x38 + i_44",
    "if ((*(rbx_136 + 8) & 2) == 0 || *(rbx_136 + 0xa) == 1)",
    "rdi = 0",
    "i_26.b = 1",
    "uint32_t rax_624",
    "rax_624, arg2, zmm1 = sub_140018a98(rbx_136, i_26.b)",
    "rdi = rax_624",
    "if (rdi != 0)",
    "goto label_140038941",
    "uint32_t rax_626 = (*(*r12_48 + 0x98))(r12_48, *(rbx_136 + 0x10))",
    "rdi = rax_626",
    "var_308 = rax_626",
    "if ((rbp_90 & 0x4000000) == 0)",
    "r13[6] &= 0xfffffffffbffffff",
    "i_26, arg2 = sub_140035b88(arg1, r12_48)",
    "r11 = arg1",
    "r11[0x19].d &= 0xfffffffc",
    "if (rdi != 0)",
    "goto label_140038941",
    "goto label_140038052",
    "case 0xa6",
    "int64_t* rax_635",
    "rax_635, arg2 = sub_140037bb4(r11, rsi)",
    "*rax_635 = zx.q(*(*(*((sx.q(*(rsi + 4)) << 5) + r13[4] + 8) + 8) + 0x3c))",
    "goto label_140037ea8",
    "case 0xa7",
    "int64_t* rax_636",
    "rax_636, arg2 = sub_140037bb4(r11, rsi)",
    "void* rax_637 = *((sx.q(*(rsi + 4)) << 5) + r13[4] + 8)",
    "int32_t rdx_231 = *(rsi + 0xc)",
    "int32_t rcx_533 = 0",
    "if (rdx_231 != 0)",
    "rcx_533 = *(*(rax_637 + 8) + 0x3c)",
    "if (rcx_533 u< rdx_231)",
    "rcx_533 = rdx_231",
    "i_26 = **(rax_637 + 8)",
    "if (rcx_533 s> 0)",
    "*(i_26 + 0xc0) = rcx_533",
    "*rax_636 = sx.q(*(i_26 + 0xc0))",
    "goto label_140038669",
    "r8 = zx.q(var_2b0)",
    "rsi = &rsi[0x18]",
    "r15 = 1",
    "if (*(var_2f8 + 0x61) != 0)",
    "rdi = 7",
    "if (r12_9[0x15] == 0 && rdi != 0xc0a)",
    "arg2 = sub_140032200(arg1, \"%s\", sub_14008335c(rdi), arg2)",
    "r12_9 = arg1",
    "r12_9[7].d = rdi",
    "sub_1400190d4(var_2f8, rdi)",
    "arg1[0x1e]",
    "int64_t var_318_1 = arg1[0x15]",
    "sub_1400187fc(rdi, \"statement aborts at %d: [%s] %s\", (rsi - var_300) s/ 0x18, arg2)",
    "sub_1400342d4(arg1)",
    "if (rdi == 0xc0a)",
    "sub_140016efc(var_2f8)",
    "rdi = 1",
    "if (arg_18 u> 0)",
    "sub_14004e2cc(var_2f8, zx.d(arg_18) - 1)",
    "label_140038a2a:",
    "r12_10 = arg1",
    "label_140038a39:",
    "*(r12_10 + 0xe4) += var_2b0",
    "return zx.q(rdi)"
  ]
}