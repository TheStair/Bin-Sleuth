{
  "address": "0x140089c74",
  "rules": [
    "decompress data using LZO/4cde8899b401464e87ec185666d6508a",
    "check OS version/fa26a21322994ec4bdbe5020e62bd777",
    "hash data using jshash/f142a7a7597843a791ba4ccc676b6fb1",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/dec108a2f8464ac388ec29affb61c4d8",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/2ee106c7c5d34df799b377fb04fb2ee1",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/88b7572ed916436d804701d7ca2c8848",
    "encrypt data using TEA/a99f0fb4fab7434084917883a6622883/5d37b64795ca4da78dcc19574a757de4",
    "decrypt data using TEA/b1609112b4574d7d84a6736fb833fd96/7a997b34591146dbbd4411d920ff141c",
    "inject pe/0fa951270c554b5eb43a556aa3ef2963",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "check OS version/0dbc6332c9724004b686b44a39c40b94",
    "check Internet connectivity via WinINet/e5536f56688049548c83e5cf372d25ac",
    "contain loop",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "log keystrokes via raw input data/8ec55ca04dc241fe81299251b8cd76f6",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/14b9db6dcaf34a3e86e9217d3cc476a8",
    "hash data using aphash/98bdcb90423346b7a1fc9c166925c881",
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/1d2aacee85cc43a0a1c1ba47e394ae52"
  ],
  "disassembly": [
    "mov     rax, rsp {__return_addr}",
    "mov     qword [rax+0x8 {__saved_rbx}], rbx",
    "mov     qword [rax+0x10 {__saved_rsi}], rsi",
    "push    rdi {__saved_rdi}",
    "sub     rsp, 0x670",
    "lea     rax, [rax+0x18 {arg_18}]",
    "xor     r9d, r9d  {0x0}",
    "mov     rdi, rcx",
    "mov     qword [rsp+0x28 {var_650}], rax {arg_18}",
    "lea     rax, [rsp+0x40 {hCard_2}]",
    "lea     r8d, [r9+0x3]",
    "mov     qword [rsp+0x20 {var_658}], rax {hCard_2}",
    "call    SCardConnectW",
    "xor     ebx, ebx  {0x0}",
    "cmp     eax, ebx",
    "jne     0x14008a01f",
    "lea     rcx, [rel data_1400face0]  {u\"ERROR kuhl_m_crypto_l_sc_prop ; \u2026\"}",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     rcx, qword [rsp+0x40 {hCard_2}]",
    "lea     r9, [rsp+0x690 {arg_18}]",
    "lea     r8, [rsp+0x50 {var_628}]",
    "or      esi, 0xffffffff  {0xffffffff}",
    "mov     edx, 0x10100",
    "mov     dword [rsp+0x690 {arg_18}], esi  {0xffffffff}",
    "call    SCardGetAttrib",
    "cmp     eax, ebx",
    "jne     0x140089ecb",
    "mov     rcx, qword [rsp+0x40 {hCard_2}]",
    "lea     rax, [rsp+0x690 {arg_18}]",
    "xor     r9d, r9d  {0x0}",
    "mov     qword [rsp+0x30 {var_648_3}], rax {arg_18}",
    "lea     rax, [rsp+0x70 {lpOutBuffer}]",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, 0x313520",
    "mov     dword [rsp+0x28], 0x5fa",
    "mov     qword [rsp+0x20 {var_658_3}], rax {lpOutBuffer}",
    "call    SCardControl",
    "cmp     eax, ebx",
    "jne     0x14008a011",
    "mov     r8d, dword [rsp+0x690 {arg_18}]",
    "mov     rax, qword [rsp+0x50 {var_628}]",
    "lea     edx, [r8-0x1]",
    "cmp     byte [rdx+rax], bl",
    "cmove   r8d, edx",
    "mov     dword [rsp+0x690 {arg_18}], r8d",
    "cmp     r8d, 0xffff",
    "ja      0x140089ebe",
    "mov     rcx, qword [rsp+0x40 {hCard_2}]",
    "xor     edx, edx  {0x0}",
    "call    SCardDisconnect",
    "jmp     0x14008a02d",
    "cmp     dword [rsp+0x690 {arg_18}], ebx",
    "je      0x14008a011",
    "mov     rdx, qword [rsp+0x50 {var_628}]",
    "mov     rcx, rdi",
    "call    SCardFreeMemory",
    "lea     rdx, [rsp+0x48 {String1}]",
    "lea     rcx, [rel data_1400fa9f0]  {u\"   | Vendor: %Z\\n\"}",
    "mov     word [rsp+0x4a {var_62e_1}], r8w",
    "mov     word [rsp+0x48 {String1}], r8w",
    "call    sub_14000c030",
    "mov     rcx, qword [rsp+0x40 {hCard_2}]",
    "lea     r9, [rsp+0x690 {arg_18}]",
    "lea     r8, [rsp+0x60 {var_618}]",
    "mov     edx, 0x10101",
    "mov     dword [rsp+0x690 {arg_18}], esi  {0xffffffff}",
    "call    SCardGetAttrib",
    "cmp     eax, ebx",
    "jne     0x140089ebe",
    "lea     r11, [rsp+0x670 {__saved_rdi}]",
    "mov     rbx, qword [r11+0x10 {__saved_rbx}]",
    "mov     rsi, qword [r11+0x18 {__saved_rsi}]",
    "mov     rsp, r11",
    "pop     rdi {__saved_rdi}",
    "retn     {__return_addr}",
    "lea     rcx, [rel data_1400fac10]  {u\"   | Features:\\n\"}",
    "call    sub_14000c030",
    "mov     ecx, dword [rsp+0x690 {arg_18}]",
    "mov     rsi, 0xaaaaaaaaaaaaaaab",
    "mov     rax, rsi  {-0x5555555555555555}",
    "mul     rcx",
    "shr     rdx, 0x2",
    "cmp     rdx, rbx",
    "jbe     0x14008a011",
    "mov     r8d, dword [rsp+0x690 {arg_18}]",
    "mov     rax, qword [rsp+0x60 {var_618}]",
    "lea     edx, [r8-0x1]",
    "cmp     byte [rdx+rax], bl",
    "cmove   r8d, edx",
    "mov     dword [rsp+0x690 {arg_18}], r8d",
    "cmp     r8d, 0xffff",
    "ja      0x140089eb1",
    "lea     rdi, [rsp+0x70 {lpOutBuffer}]",
    "mov     rdx, qword [rsp+0x60 {var_618}]",
    "mov     rcx, rdi",
    "call    SCardFreeMemory",
    "lea     rdx, [rsp+0x58 {var_620}]",
    "lea     rcx, [rel data_1400faa18]  {u\"   | Model : %Z\\n\"}",
    "mov     word [rsp+0x5a {var_61e_1}], r8w",
    "mov     word [rsp+0x58 {var_620}], r8w",
    "call    sub_14000c030",
    "lea     rdx, [rel data_1400d6290]",
    "lea     rcx, [rsp+0x48 {String1}]",
    "mov     r8b, 0x1",
    "call    RtlEqualString",
    "cmp     al, bl",
    "je      0x140089eb1",
    "mov     eax, ebx",
    "lea     rcx, [rax+rax*2]",
    "movzx   edx, byte [rsp+rcx*2+0x71 {var_607}]",
    "lea     rcx, [rel data_1400fac60]  {u\"ERROR kuhl_m_crypto_l_sc_prop ; \u2026\"}",
    "call    sub_14000c030",
    "mov     r9d, dword [rdi+0x2]",
    "bswap   r9d",
    "shr     r9d, 0x2",
    "and     r9d, 0xfff",
    "cmp     byte [rdi], 0x1",
    "mov     dword [rsp+0x698 {lpOutBuffer_1}], r9d",
    "jb      0x140089f93",
    "mov     rcx, qword [rsp+0x40 {hCard_2}]",
    "lea     rax, [rsp+0x690 {arg_18}]",
    "xor     r9d, r9d  {0x0}",
    "mov     qword [rsp+0x30 {var_648_1}], rax {arg_18}",
    "lea     rax, [rsp+0x698 {lpOutBuffer_1}]",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, 0x312ee4",
    "mov     dword [rsp+0x28 {var_650}], 0x4",
    "mov     qword [rsp+0x20 {var_658_1}], rax {lpOutBuffer_1}",
    "call    SCardControl",
    "mov     r8d, dword [rsp+0x690 {arg_18}]",
    "mov     esi, 0x51eb851f",
    "cmp     eax, ebx",
    "jne     0x140089e2b",
    "cmp     byte [rdi], 0x20",
    "lea     r8, [rel data_1400fa568]  {u\"EXECUTE_PACE\"}",
    "lea     rax, [rel data_1400e17c8]",
    "cmovne  r8, rax  {data_1400e17c8}",
    "cmp     byte [rdi], 0x13",
    "ja      0x140089f93",
    "mov     edx, eax",
    "lea     rcx, [rel data_1400faa80]  {u\"ERROR kuhl_m_crypto_l_sc_prop ; \u2026\"}",
    "cmp     r8d, 0x4",
    "jne     0x140089e2b",
    "mov     ecx, dword [rsp+0x690 {arg_18}]",
    "inc     ebx",
    "mov     rax, rsi  {-0x5555555555555555}",
    "add     rdi, 0x6",
    "mul     rcx",
    "shr     rdx, 0x2",
    "mov     eax, ebx",
    "cmp     rax, rdx",
    "jb      0x140089f49",
    "mov     edx, dword [rsp+0x698 {lpOutBuffer_1}]",
    "mov     rcx, qword [rsp+0x40 {hCard_2}]",
    "or      edx, 0xc4000",
    "shl     edx, 0x2",
    "call    sub_1400899d8",
    "movzx   eax, byte [rdi]",
    "lea     r8, [rel data_1400d62a0]",
    "mov     r8, qword [r8+rax*8]",
    "jmp     0x140089fa8",
    "mov     edx, eax",
    "lea     rcx, [rel data_1400fab60]  {u\"ERROR kuhl_m_crypto_l_sc_prop ; \u2026\"}",
    "cmp     r8d, 0x4",
    "jne     0x140089ea3",
    "mov     r8d, dword [rsp+0x698 {lpOutBuffer_1}]",
    "mov     eax, esi  {0x51eb851f}",
    "lea     rcx, [rel data_1400faa40]  {u\"   | FW version : %u.%02u\\n\"}",
    "mul     r8d",
    "shr     edx, 0x5",
    "mov     eax, edx",
    "imul    eax, eax, 0x64",
    "sub     r8d, eax",
    "jmp     0x140089e34",
    "lea     rcx, [rel data_1400fac30]  {u\"   \\ \"}",
    "call    sub_14000c030",
    "cmp     byte [rdi+0x1], 0x4",
    "jne     0x140089ffa",
    "jmp     0x14008a011",
    "movzx   edx, byte [rdi]",
    "lea     rcx, [rel data_1400fac40]  {u\"%02x - %s (%u)\\n\"}",
    "call    sub_14000c030",
    "cmp     byte [rdi], 0x12",
    "jne     0x140089fd6",
    "mov     r8d, dword [rsp+0x698 {lpOutBuffer_1}]",
    "mov     eax, esi  {0x51eb851f}",
    "lea     rcx, [rel data_1400fab28]  {u\"   | Lib version: %u.%02u\\n\"}",
    "mul     r8d",
    "shr     edx, 0x5",
    "mov     eax, edx",
    "imul    eax, eax, 0x64",
    "sub     r8d, eax",
    "jmp     0x140089eac",
    "call    sub_14000c030",
    "lea     rax, [rsp+0x690 {arg_18}]",
    "lea     rcx, [rsp+0x698 {lpOutBuffer_1}]",
    "mov     qword [rsp+0x30 {var_648_2}], rax {arg_18}",
    "mov     dword [rsp+0x28], 0x4",
    "mov     qword [rsp+0x20 {var_658_2}], rcx {lpOutBuffer_1}",
    "mov     rcx, qword [rsp+0x40 {hCard_2}]",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, 0x312f84",
    "call    SCardControl",
    "mov     r8d, dword [rsp+0x690 {arg_18}]",
    "cmp     eax, ebx",
    "jne     0x140089ea3",
    "call    sub_14000c030"
  ],
  "high_level_IL": [
    "uint64_t hCard_2",
    "PWSTR szReader",
    "int32_t rax = SCardConnectW(arg1, szReader, 3, 0, &hCard_2, &arg_18)",
    "int32_t rbx = 0",
    "if (rax != 0)",
    "return sub_14000c030(u\"ERROR kuhl_m_crypto_l_sc_prop ; \u2026\", zx.q(rax))",
    "uint64_t hCard = hCard_2",
    "arg_18 = 0xffffffff",
    "int64_t var_628",
    "if (SCardGetAttrib(hCard, 0x10100, &var_628, &arg_18) == 0)",
    "uint32_t r8_2 = arg_18",
    "uint64_t rdx = zx.q(r8_2 - 1)",
    "if (*(rdx + var_628) == 0)",
    "r8_2 = rdx.d",
    "arg_18 = r8_2",
    "if (r8_2 u<= 0xffff)",
    "int16_t var_62e_1 = r8_2.w",
    "int16_t String1 = r8_2.w",
    "sub_14000c030(u\"   | Vendor: %Z\\n\", &String1)",
    "uint64_t hCard_1 = hCard_2",
    "arg_18 = 0xffffffff",
    "int64_t var_618",
    "if (SCardGetAttrib(hCard_1, 0x10101, &var_618, &arg_18) == 0)",
    "uint32_t r8_4 = arg_18",
    "uint64_t rdx_2 = zx.q(r8_4 - 1)",
    "if (*(rdx_2 + var_618) == 0)",
    "r8_4 = rdx_2.d",
    "arg_18 = r8_4",
    "if (r8_4 u<= 0xffff)",
    "int16_t var_61e_1 = r8_4.w",
    "int16_t var_620 = r8_4.w",
    "sub_14000c030(u\"   | Model : %Z\\n\", &var_620)",
    "if (RtlEqualString(&String1, &data_1400d6290, 1) != 0)",
    "int32_t* var_650",
    "var_650.d = 4",
    "int32_t rax_6 = SCardControl(hCard_2, 0x312ee4, nullptr, 0, &lpOutBuffer_1, var_650.d, &arg_18)",
    "wchar16 const* const rcx_2",
    "uint64_t rdx_5",
    "if (rax_6 != 0 || arg_18 != 4)",
    "rdx_5 = zx.q(rax_6)",
    "rcx_2 = u\"ERROR kuhl_m_crypto_l_sc_prop ; \u2026\"",
    "rcx_2 = u\"   | FW version : %u.%02u\\n\"",
    "rdx_5 = zx.q(lpOutBuffer_1 u/ 0x64)",
    "sub_14000c030(rcx_2, rdx_5)",
    "int32_t rax_9 = SCardControl(hCard_2, 0x312f84, nullptr, 0, &lpOutBuffer_1, 4, &arg_18)",
    "wchar16 const* const rcx_4",
    "uint64_t rdx_7",
    "if (rax_9 != 0 || arg_18 != 4)",
    "rdx_7 = zx.q(rax_9)",
    "rcx_4 = u\"ERROR kuhl_m_crypto_l_sc_prop ; \u2026\"",
    "rcx_4 = u\"   | Lib version: %u.%02u\\n\"",
    "rdx_7 = zx.q(lpOutBuffer_1 u/ 0x64)",
    "sub_14000c030(rcx_4, rdx_7)",
    "SCardFreeMemory(arg1, var_618)",
    "SCardFreeMemory(arg1, var_628)",
    "void lpOutBuffer",
    "int32_t rax_12",
    "int64_t rdx_10",
    "rax_12, rdx_10 = SCardControl(hCard_2, 0x313520, nullptr, 0, &lpOutBuffer, 0x5fa, &arg_18)",
    "if (rax_12 == 0 && arg_18 != 0)",
    "sub_14000c030(u\"   | Features:\\n\", rdx_10)",
    "uint64_t i = zx.q(arg_18) u/ 6",
    "if (i u> 0)",
    "void* rdi_1 = &lpOutBuffer",
    "sub_14000c030(u\"   \\ \", i)",
    "if (*(rdi_1 + 1) != 4)",
    "void var_607",
    "sub_14000c030(u\"ERROR kuhl_m_crypto_l_sc_prop ; \u2026\", zx.q(*(&var_607 + zx.q(rbx) * 6)))",
    "break",
    "int32_t lpOutBuffer_2 = _bswap(*(rdi_1 + 2)) u>> 2 & 0xfff",
    "bool cond:0_1 = *rdi_1 u< 1",
    "lpOutBuffer_1 = lpOutBuffer_2",
    "if (not(cond:0_1) && *rdi_1 u<= 0x13)",
    "(&data_1400d62a0)[zx.q(*rdi_1)]",
    "*rdi_1",
    "sub_14000c030(u\"%02x - %s (%u)\\n\", zx.q(*rdi_1))",
    "if (*rdi_1 == 0x12)",
    "sub_1400899d8()",
    "rbx += 1",
    "rdi_1 += 6",
    "i = zx.q(arg_18) u/ 6",
    "do while (zx.q(rbx) u< i)",
    "return SCardDisconnect(hCard_2, 0)"
  ]
}