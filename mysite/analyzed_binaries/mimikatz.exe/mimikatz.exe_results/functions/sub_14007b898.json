{
  "address": "0x14007b898",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "write file on Windows/035d57bed47747649158312e9532f27d"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "mov     qword [rsp+0x10], rbp",
    "mov     qword [rsp+0x18], rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "sub     rsp, 0x30",
    "movsxd  r13, r8d",
    "mov     r12d, edx",
    "mov     rdi, rcx",
    "call    sub_140065300",
    "mov     rsi, rax",
    "mov     al, byte [rdi+0x1f]",
    "test    al, al",
    "jne     0x14007b8d0",
    "dec     al",
    "movzx   eax, al",
    "mov     byte [rdi+0x1f], al",
    "mov     ebp, dword [rdi+rax*4+0xbc]",
    "inc     dword [rdi+0x38]",
    "mov     ebp, dword [rdi+0x38]",
    "jmp     0x14007b8df",
    "mov     r9d, dword [rsi+0x90]",
    "and     dword [rsp+0x20], 0x0",
    "mov     r8d, r12d",
    "mov     edx, 0xf",
    "mov     rcx, rsi",
    "add     r9d, 0x2",
    "call    sub_140032364",
    "mov     al, byte [rdi+0x1f]",
    "test    al, al",
    "jne     0x14007b90f",
    "and     dword [rsp+0x20], 0x0",
    "xor     r8d, r8d",
    "mov     r9d, ebp",
    "lea     edx, [r8+0x46]",
    "mov     rcx, rsi",
    "call    sub_140032364",
    "cmp     r13d, 0x3",
    "jl      0x14007b98d",
    "mov     rbx, qword [rsp+0x50]",
    "mov     rbp, qword [rsp+0x58]",
    "mov     rsi, qword [rsp+0x60]",
    "add     rsp, 0x30",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "retn    ",
    "cmp     byte [rdi+0x1f], 0x8",
    "jae     0x14007ba35",
    "dec     al",
    "movzx   eax, al",
    "mov     byte [rdi+0x1f], al",
    "mov     ebx, dword [rdi+rax*4+0xbc]",
    "inc     dword [rdi+0x38]",
    "mov     ebx, dword [rdi+0x38]",
    "jmp     0x14007b91e",
    "movzx   eax, byte [rdi+0x1f]",
    "mov     dword [rdi+rax*4+0xbc], ebp",
    "inc     byte [rdi+0x1f]",
    "mov     r9d, dword [rsi+0x90]",
    "mov     rbx, r13",
    "lea     r13, [rel __dos_header]",
    "mov     edx, dword [r13+rbx*4+0x13df58]",
    "mov     r8d, ebp",
    "mov     rcx, rsi",
    "add     r9d, 0x2",
    "mov     dword [rsp+0x20], r12d",
    "call    sub_140032364",
    "mov     r11, qword [rdi+0x90]",
    "mov     edx, 0x45",
    "test    r11, r11",
    "mov     rax, rdi",
    "lea     r9d, [rdx-0x43]",
    "cmovne  rax, r11",
    "and     dword [rsp+0x20], 0x0",
    "lea     r8d, [rdx-0x44]",
    "mov     rcx, rsi",
    "mov     byte [rax+0x21], 0x1",
    "call    sub_140032364",
    "mov     rdx, qword [r13+rbx*8+0x13de88]",
    "or      r8d, 0xffffffff",
    "mov     rcx, rsi",
    "call    sub_140032cc0",
    "test    ebp, ebp",
    "je      0x14007ba35",
    "mov     rax, qword [rsi+0x88]",
    "lea     rcx, [r11+r11*2]",
    "mov     edx, 0x53",
    "mov     word [rax+rcx*8-0x16], dx",
    "jmp     0x14007b9ad",
    "and     dword [rsp+0x20], 0x0",
    "xor     r8d, r8d",
    "mov     r9d, ebx",
    "lea     edx, [r8+0x71]",
    "mov     rcx, rsi",
    "call    sub_140032364",
    "lea     r8, [rel data_1400f386c]",
    "or      r9d, 0xffffffff",
    "mov     edx, eax",
    "mov     rcx, rsi",
    "call    sub_140032c40",
    "mov     r9d, dword [rsi+0x90]",
    "mov     r8d, ebx",
    "mov     edx, 0x39",
    "mov     rcx, rsi",
    "add     r9d, 0x2",
    "mov     dword [rsp+0x20], r12d",
    "call    sub_140032364",
    "movsxd  r11, dword [rsi+0x90]",
    "test    r11d, r11d",
    "jle     0x14007b9ad"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}