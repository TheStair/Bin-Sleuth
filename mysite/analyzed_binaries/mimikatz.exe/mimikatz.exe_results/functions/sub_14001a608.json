{
  "address": "0x14001a608",
  "rules": [
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "contain loop",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e"
  ],
  "disassembly": [
    "mov     rax, rsp {__return_addr}",
    "mov     qword [rax+0x8 {__saved_rbx}], rbx",
    "mov     qword [rax+0x10 {__saved_rbp}], rbp",
    "mov     qword [rax+0x18 {__saved_rsi}], rsi",
    "mov     qword [rax+0x20 {__saved_rdi}], rdi",
    "mov     r9d, 0xc",
    "mov     r10, rdx",
    "lea     ecx, [r9+0x44]  {0x50}",
    "test    rdx, rdx",
    "jne     0x14001a64f",
    "lea     rbp, [rel data_14013d460]",
    "xor     eax, eax  {0x0}",
    "mov     rdx, rbp  {data_14013d460}",
    "xor     r9d, r9d  {0x0}",
    "lea     rax, [rel data_14013d470]",
    "test    ebx, ebx",
    "je      0x14001a688",
    "inc     r11",
    "test    edi, edi",
    "jne     0x14001a664",
    "add     rax, 0x18",
    "sub     rcx, 0x1",
    "jne     0x14001a637",
    "mov     qword [rax-0x8], rdx",
    "lea     rcx, [rax+rax*2]",
    "cmp     qword [rbp+rcx*8+0x10], 0x0",
    "jne     0x14001a69e",
    "inc     eax",
    "add     rdx, 0x18",
    "cmp     eax, ecx",
    "jb      0x14001a65b",
    "movzx   ebx, byte [r11]",
    "movzx   edi, byte [r11+rsi]",
    "sub     ebx, edi",
    "jne     0x14001a678",
    "mov     rdx, qword [rax]",
    "test    rdx, rdx",
    "je      0x14001a643",
    "jmp     0x14001a6b0",
    "xor     r9d, r9d  {0x0}",
    "test    r8, r8",
    "jne     0x14001a6ab",
    "mov     rax, qword [rbp+rcx*8+0x8]",
    "mov     qword [rbp+rcx*8+0x10], rax",
    "mov     rsi, qword [rdx]",
    "mov     r11, r10",
    "sub     rsi, r10",
    "jmp     0x14001a6b0",
    "mov     rbx, qword [rsp+0x8 {__saved_rbx}]",
    "mov     rbp, qword [rsp+0x10 {__saved_rbp}]",
    "mov     rsi, qword [rsp+0x18 {__saved_rsi}]",
    "mov     rdi, qword [rsp+0x20 {__saved_rdi}]",
    "mov     eax, r9d",
    "retn     {__return_addr}",
    "mov     qword [rbp+rcx*8+0x8], r8",
    "mov     r8, qword [rbp+rcx*8+0x10]"
  ],
  "high_level_IL": [
    "int32_t r9 = 0xc",
    "int64_t i_2 = 0x50",
    "if (arg2 != 0)",
    "uint64_t rax_1 = 0",
    "char const (** rdx_1)[0x10] = &data_14013d460",
    "void* r11_1 = arg2",
    "uint32_t rbx_1",
    "uint32_t i",
    "rbx_1 = zx.d(*r11_1)",
    "i = zx.d(*(r11_1 + *rdx_1 - arg2))",
    "if (rbx_1 != i)",
    "break",
    "r11_1 += 1",
    "do while (i != 0)",
    "if (rbx_1 - i == 0)",
    "uint64_t rcx = rax_1 * 3",
    "if (*((rcx << 3) + &data_14013d470) == 0)",
    "*((rcx << 3) + &data_14013d470) = (&data_14013d468)[rcx]",
    "r9 = 0",
    "if (arg3 == 0)",
    "arg3 = *((rcx << 3) + &data_14013d470)",
    "(&data_14013d468)[rcx] = arg3",
    "break",
    "rax_1 = zx.q(rax_1.d + 1)",
    "rdx_1 = &rdx_1[3]",
    "do while (rax_1.d u< 0x50)",
    "r9 = 0",
    "void* rax = &data_14013d470",
    "int64_t i_1",
    "int64_t rdx = *rax",
    "if (rdx != 0)",
    "*(rax - 8) = rdx",
    "rax += 0x18",
    "i_1 = i_2",
    "i_2 -= 1",
    "do while (i_1 != 1)",
    "return zx.q(r9)"
  ]
}