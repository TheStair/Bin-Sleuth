{
  "address": "0x14006f8f8",
  "rules": [
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "contain loop",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "mov     qword [rsp+0x10], rsi",
    "push    rdi",
    "sub     rsp, 0x30",
    "mov     rbx, qword [rcx+0x1c0]",
    "mov     rdi, rdx",
    "mov     rsi, rcx",
    "jmp     0x14006f974",
    "test    rbx, rbx",
    "jne     0x14006f916",
    "mov     r10, qword [rbx+0x10]",
    "mov     rbx, qword [rbx]",
    "test    rdi, rdi",
    "je      0x14006f95c",
    "mov     rbx, qword [rsp+0x40]",
    "mov     rsi, qword [rsp+0x48]",
    "xor     eax, eax",
    "add     rsp, 0x30",
    "pop     rdi",
    "retn    ",
    "mov     rdx, qword [r10+0x8]",
    "and     qword [rsp+0x20], 0x0",
    "xor     r9d, r9d",
    "xor     r8d, r8d",
    "mov     rcx, rsi",
    "call    sub_14006f874",
    "mov     rax, qword [rdi]",
    "xor     ecx, ecx",
    "jmp     0x14006f950",
    "test    rax, rax",
    "jne     0x14006f929",
    "mov     r9, qword [r10+0x8]",
    "sub     r9, rax",
    "cmp     qword [rdi+rcx*8], 0x0",
    "jne     0x14006f974",
    "test    edx, edx",
    "je      0x14006f955",
    "inc     rax",
    "test    r8d, r8d",
    "jne     0x14006f930",
    "inc     rcx",
    "mov     rax, qword [rdi+rcx*8]",
    "movzx   edx, byte [rax]",
    "movzx   r8d, byte [rax+r9]",
    "sub     edx, r8d",
    "jne     0x14006f945"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}