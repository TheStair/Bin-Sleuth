{
  "address": "0x1400c1be8",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "encode data using XOR",
    "hash data using murmur3/aeb1a4346751469b809f4261bcfbbb07/dbb00f9448c04dc1b720ac16935c1891",
    "encode data using ADD XOR SUB operations/9c4b9788382e4225a2cede511e008ac5",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     rax, rsp",
    "mov     qword [rax+0x8], rbx",
    "mov     qword [rax+0x10], rbp",
    "mov     qword [rax+0x18], rsi",
    "mov     qword [rax+0x20], rdi",
    "push    r12",
    "mov     r10d, dword [rdx]",
    "mov     rbp, r8",
    "mov     r8, rcx",
    "rol     r10d, 0x4",
    "mov     esi, 0x8",
    "mov     ebx, 0xfc",
    "mov     eax, r10d",
    "lea     rdi, [rel data_1400d36d0]",
    "xor     eax, dword [rdx+0x4]",
    "and     eax, 0xf0f0f0f0",
    "xor     r10d, eax",
    "xor     eax, dword [rdx+0x4]",
    "rol     eax, 0x14",
    "mov     ecx, r10d",
    "xor     ecx, eax",
    "and     ecx, 0xfff0000f",
    "xor     r10d, ecx",
    "xor     ecx, eax",
    "rol     ecx, 0xe",
    "mov     eax, r10d",
    "xor     eax, ecx",
    "and     eax, 0x33333333",
    "xor     ecx, eax",
    "xor     eax, r10d",
    "rol     eax, 0x16",
    "mov     r10d, eax",
    "xor     r10d, ecx",
    "and     r10d, 0x3fc03fc",
    "xor     ecx, r10d",
    "xor     r10d, eax",
    "rol     r10d, 0x9",
    "mov     r11d, r10d",
    "xor     r11d, ecx",
    "and     r11d, 0xaaaaaaaa",
    "xor     r10d, r11d",
    "xor     r11d, ecx",
    "rol     r11d, 0x1",
    "test    r9d, r9d",
    "je      0x1400c1dbe",
    "lea     r12, [r8+0x7c]",
    "lea     r12, [r8+0x8]",
    "mov     r9d, dword [r12]",
    "mov     ecx, dword [r12-0x4]",
    "sub     r12, 0x10",
    "xor     ecx, r10d",
    "xor     r9d, r10d",
    "mov     r8d, ecx",
    "ror     r9d, 0x4",
    "shr     rcx, 0x18",
    "and     rcx, rbx",
    "mov     rax, r8",
    "mov     edx, dword [rcx+rdi+0x600]",
    "mov     ecx, dword [r12+0x4]",
    "shr     rax, 0x10",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x400]",
    "mov     rax, r8",
    "and     r8, rbx",
    "shr     rax, 0x8",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x200]",
    "mov     rax, r9",
    "shr     rax, 0x18",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x700]",
    "mov     rax, r9",
    "shr     rax, 0x10",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x500]",
    "mov     rax, r9",
    "and     r9, rbx",
    "shr     rax, 0x8",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x300]",
    "xor     edx, dword [r8+rdi]",
    "xor     edx, dword [r9+rdi+0x100]",
    "mov     r9d, dword [r12+0x8]",
    "xor     r11d, edx",
    "xor     r9d, r11d",
    "xor     ecx, r11d",
    "mov     r8d, ecx",
    "ror     r9d, 0x4",
    "shr     rcx, 0x18",
    "and     rcx, rbx",
    "mov     rax, r8",
    "mov     edx, dword [rcx+rdi+0x600]",
    "shr     rax, 0x10",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x400]",
    "mov     rax, r8",
    "and     r8, rbx",
    "shr     rax, 0x8",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x200]",
    "mov     rax, r9",
    "shr     rax, 0x18",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x700]",
    "mov     rax, r9",
    "shr     rax, 0x10",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x500]",
    "mov     rax, r9",
    "and     r9, rbx",
    "shr     rax, 0x8",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x300]",
    "xor     edx, dword [r8+rdi]",
    "xor     edx, dword [r9+rdi+0x100]",
    "xor     r10d, edx",
    "sub     rsi, 0x1",
    "jne     0x1400c1dc2",
    "mov     rbx, qword [rsp+0x10]",
    "mov     rsi, qword [rsp+0x20]",
    "mov     rdi, qword [rsp+0x28]",
    "ror     r10d, 0x1",
    "mov     eax, r10d",
    "xor     eax, r11d",
    "and     eax, 0xaaaaaaaa",
    "xor     r10d, eax",
    "xor     eax, r11d",
    "ror     eax, 0x9",
    "mov     r8d, r10d",
    "xor     r8d, eax",
    "and     r8d, 0x3fc03fc",
    "xor     r10d, r8d",
    "xor     r8d, eax",
    "ror     r8d, 0x16",
    "mov     eax, r10d",
    "xor     eax, r8d",
    "and     eax, 0x33333333",
    "xor     r8d, eax",
    "xor     eax, r10d",
    "ror     eax, 0xe",
    "mov     edx, eax",
    "xor     edx, r8d",
    "and     edx, 0xfff0000f",
    "xor     r8d, edx",
    "xor     edx, eax",
    "ror     edx, 0x14",
    "mov     ecx, edx",
    "xor     ecx, r8d",
    "and     ecx, 0xf0f0f0f0",
    "mov     eax, ecx",
    "xor     eax, r8d",
    "ror     eax, 0x4",
    "xor     ecx, edx",
    "mov     dword [rbp+0x4], ecx",
    "mov     dword [rbp], eax",
    "mov     rbp, qword [rsp+0x18]",
    "pop     r12",
    "retn    ",
    "mov     r9d, dword [r12-0x4]",
    "mov     ecx, dword [r12-0x8]",
    "xor     ecx, r10d",
    "xor     r9d, r10d",
    "mov     r8d, ecx",
    "ror     r9d, 0x4",
    "shr     rcx, 0x18",
    "and     rcx, rbx",
    "mov     rax, r8",
    "mov     edx, dword [rcx+rdi+0x600]",
    "mov     ecx, dword [r12]",
    "shr     rax, 0x10",
    "and     rax, rbx",
    "add     r12, 0x10",
    "xor     edx, dword [rax+rdi+0x400]",
    "mov     rax, r8",
    "and     r8, rbx",
    "shr     rax, 0x8",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x200]",
    "mov     rax, r9",
    "shr     rax, 0x18",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x700]",
    "mov     rax, r9",
    "shr     rax, 0x10",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x500]",
    "mov     rax, r9",
    "and     r9, rbx",
    "shr     rax, 0x8",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x300]",
    "xor     edx, dword [r8+rdi]",
    "xor     edx, dword [r9+rdi+0x100]",
    "mov     r9d, dword [r12-0xc]",
    "xor     r11d, edx",
    "xor     r9d, r11d",
    "xor     ecx, r11d",
    "mov     r8d, ecx",
    "ror     r9d, 0x4",
    "shr     rcx, 0x18",
    "and     rcx, rbx",
    "mov     rax, r8",
    "mov     edx, dword [rcx+rdi+0x600]",
    "shr     rax, 0x10",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x400]",
    "mov     rax, r8",
    "and     r8, rbx",
    "shr     rax, 0x8",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x200]",
    "mov     rax, r9",
    "shr     rax, 0x18",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x700]",
    "mov     rax, r9",
    "shr     rax, 0x10",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x500]",
    "mov     rax, r9",
    "and     r9, rbx",
    "shr     rax, 0x8",
    "and     rax, rbx",
    "xor     edx, dword [rax+rdi+0x300]",
    "xor     edx, dword [r8+rdi]",
    "xor     edx, dword [r9+rdi+0x100]",
    "xor     r10d, edx",
    "sub     rsi, 0x1",
    "jne     0x1400c1c8e",
    "jmp     0x1400c1eed"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}