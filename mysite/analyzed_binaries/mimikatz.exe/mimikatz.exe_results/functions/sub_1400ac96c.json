{
  "address": "0x1400ac96c",
  "rules": [
    "resolve DNS",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop"
  ],
  "disassembly": [
    "mov     r11, rsp {__return_addr}",
    "mov     qword [r11+0x8 {__saved_rbx}], rbx",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0xb0",
    "xor     ebp, ebp  {0x0}",
    "lea     rax, [rel data_140119188]  {u\"userPrincipalName\"}",
    "lea     r8, [rel data_140119598]",
    "mov     qword [rsp+0x60 {var_88}], rax  {data_140119188, u\"userPrincipalName\"}",
    "lea     rax, [rel data_1401191b0]  {u\"sAMAccountName\"}",
    "xor     r9d, r9d  {0x0}",
    "mov     qword [r11-0x80 {var_80}], rax  {data_1401191b0, u\"sAMAccountName\"}",
    "lea     rax, [rel data_1401191d0]  {u\"userAccountControl\"}",
    "mov     rbx, rdx",
    "mov     qword [r11-0x78 {var_78}], rax  {data_1401191d0, u\"userAccountControl\"}",
    "lea     rax, [rel data_1401191f8]  {u\"servicePrincipalName\"}",
    "mov     edi, ecx",
    "mov     qword [r11-0x70 {var_70}], rax  {data_1401191f8, u\"servicePrincipalName\"}",
    "lea     rax, [rel data_140119228]  {u\"msDS-AllowedToDelegateTo\"}",
    "mov     qword [r11-0x48 {var_48}], rbp  {0x0}",
    "mov     qword [r11-0x68 {var_68}], rax  {data_140119228, u\"msDS-AllowedToDelegateTo\"}",
    "lea     rax, [rel data_140119260]  {u\"msDS-AllowedToActOnBehalfOfOther\u2026\"}",
    "mov     qword [r11+0x20 {arg_20}], rbp  {0x0}",
    "mov     qword [r11-0x60 {var_60}], rax  {data_140119260, u\"msDS-AllowedToActOnBehalfOfOther\u2026\"}",
    "lea     rax, [rel data_1401192b8]  {u\"objectSid\"}",
    "mov     qword [rsp+0x40 {var_a8}], rbp  {0x0}",
    "mov     qword [r11-0x58 {var_58}], rax  {data_1401192b8, u\"objectSid\"}",
    "lea     rax, [rel data_140118cd0]  {u\"objectGUID\"}",
    "mov     qword [rsp+0x20 {var_c8}], rbp  {0x0}",
    "mov     qword [r11-0x50 {var_50}], rax  {data_140118cd0, u\"objectGUID\"}",
    "call    sub_140013220",
    "lea     r9, [rsp+0x100 {arg_18}]",
    "lea     r8, [rel data_1400ee2e0]  {u\"server\"}",
    "mov     rdx, rbx",
    "mov     ecx, edi",
    "movsxd  rsi, eax",
    "mov     qword [rsp+0x20 {var_c8}], rbp  {0x0}",
    "call    sub_140013220",
    "mov     rcx, qword [rsp+0x100 {arg_18}]",
    "mov     edx, 0x185",
    "call    qword [rel Ordinal_WLDAP32_145]",
    "mov     r13, rax",
    "mov     qword [rsp+0x100 {arg_18}], rax",
    "test    rax, rax",
    "je      0x1400aca63",
    "lea     rcx, [rel data_1400eb720]  {u\"ERROR kull_m_ldap_getLdapAndRoot\u2026\"}",
    "call    sub_14000c030",
    "xor     eax, eax  {0x0}",
    "lea     r8, [rsp+0x48 {hMem}]",
    "lea     rdx, [rsp+0x100 {arg_18}]",
    "xor     r9d, r9d  {0x0}",
    "xor     ecx, ecx  {0x0}",
    "call    sub_14000b23c",
    "jmp     0x1400aca71",
    "xor     eax, eax  {0x0}",
    "mov     rbx, qword [rsp+0xf0 {__saved_rbx}]",
    "add     rsp, 0xb0",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     rdx, qword [rsp+0x48 {hMem}]",
    "lea     rax, [rsp+0x108 {arg_20}]",
    "lea     r9, [rel data_1401192d0]  {u\"(&(servicePrincipalname=*)(|(msD\u2026\"}",
    "mov     qword [rsp+0x30 {var_b8_1}], rax {arg_20}",
    "and     dword [rsp+0x28 {var_c0_1}], ebp  {0x0}",
    "lea     rax, [rsp+0x60 {var_88}]",
    "mov     r8d, 0x2",
    "mov     rcx, r13",
    "mov     qword [rsp+0x20 {var_c8_1}], rax {var_88}",
    "call    qword [rel Ordinal_WLDAP32_208]",
    "test    eax, eax",
    "jne     0x1400ace7b",
    "test    eax, eax",
    "je      0x1400aceb3",
    "lea     rcx, [rel data_140119650]  {u\"ERROR kuhl_m_net_deleg ; ldap_se\u2026\"}",
    "mov     r8d, eax",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     rdx, qword [rsp+0x108 {arg_20}]",
    "mov     rcx, r13",
    "call    qword [rel Ordinal_WLDAP32_36]",
    "lea     rcx, [rel data_1401190b8]  {u\"%u entries\\n\"}",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     rdx, qword [rsp+0x108 {arg_20}]",
    "mov     rcx, r13",
    "call    qword [rel Ordinal_WLDAP32_26]",
    "mov     qword [rsp+0x58 {var_90_1}], rsi",
    "mov     r15, rax",
    "test    rax, rax",
    "je      0x1400ace8c",
    "mov     rcx, qword [rsp+0x48 {hMem}]",
    "call    qword [rel LocalFree]",
    "mov     rcx, r13",
    "call    qword [rel Ordinal_WLDAP32_13]",
    "call    qword [rel Ordinal_WLDAP32_41]",
    "mov     rcx, qword [rsp+0x108 {arg_20}]",
    "test    rcx, rcx",
    "je      0x1400ace9f",
    "mov     r14, qword [rsp+0x100 {arg_18}]",
    "mov     rbp, rax",
    "test    rax, rax",
    "jne     0x1400acb31",
    "lea     rcx, [rel data_1401190e0]  {u\"  %s: \"}",
    "mov     rdx, rbp",
    "call    sub_14000c030",
    "mov     r8, rbp",
    "mov     rdx, r15",
    "mov     rcx, r13",
    "call    qword [rel Ordinal_WLDAP32_142]",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x1400ace29",
    "mov     rcx, qword [rsp+0x40 {var_a8}]",
    "test    rcx, rcx",
    "je      0x1400ace61",
    "mov     rcx, rbp",
    "call    qword [rel Ordinal_WLDAP32_147]",
    "mov     r8, qword [rsp+0x40 {var_a8}]",
    "mov     rdx, r15",
    "mov     rcx, r13",
    "call    qword [rel Ordinal_WLDAP32_167]",
    "lea     rdx, [rel data_1401191d0]  {u\"userAccountControl\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "jne     0x1400acc0a",
    "mov     rdx, r15",
    "mov     rcx, r13",
    "call    qword [rel Ordinal_WLDAP32_27]",
    "mov     r15, rax",
    "test    rax, rax",
    "jne     0x1400acb00",
    "xor     edx, edx  {0x0}",
    "call    qword [rel Ordinal_WLDAP32_301]",
    "lea     rdx, [rel data_140119188]  {u\"userPrincipalName\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "je      0x1400ace0a",
    "mov     rcx, qword [r12]",
    "mov     rdx, qword [rcx+0x8]",
    "mov     r8d, dword [rcx]",
    "test    rdx, rdx",
    "je      0x1400acb9a",
    "mov     rdx, r15",
    "mov     rcx, r13",
    "call    qword [rel Ordinal_WLDAP32_133]",
    "lea     rcx, [rel data_1401190d0]  {u\"\\n%s\\n\"}",
    "mov     rdx, rax",
    "call    sub_14000c030",
    "lea     r8, [rsp+0x40 {var_a8}]",
    "mov     rdx, r15",
    "mov     rcx, r13",
    "call    qword [rel Ordinal_WLDAP32_127]",
    "jmp     0x1400ace43",
    "jmp     0x1400ace8c",
    "mov     rax, qword [r12]",
    "lea     rcx, [rel data_1401190f0]  {u\"%*S\\n\"}",
    "mov     r8, qword [rax+0x8]",
    "mov     edx, dword [rax]",
    "call    sub_14000c030",
    "lea     rdx, [rel data_1401191b0]  {u\"sAMAccountName\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "je      0x1400ace0a",
    "xor     eax, eax  {0x0}",
    "lea     rcx, [rsp+0x100 {arg_18}]",
    "call    sub_140013518",
    "mov     r14, qword [rsp+0x100 {arg_18}]",
    "jmp     0x1400acb9c",
    "lea     rdx, [rel data_1401192b8]  {u\"objectSid\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "jne     0x1400acc5d",
    "mov     rcx, r12",
    "call    qword [rel Ordinal_WLDAP32_79]",
    "xor     edx, edx  {0x0}",
    "mov     rcx, r14",
    "lea     r8d, [rdx+0xa]",
    "call    qword [rel strtoul]",
    "lea     rcx, [rel data_140119100]  {u\"0x%08x - \"}",
    "mov     edx, eax",
    "mov     esi, eax",
    "call    sub_14000c030",
    "xor     ebx, ebx  {0x0}",
    "lea     rdi, [rel data_14013b000]",
    "test    eax, eax",
    "je      0x1400ace20",
    "lea     rdx, [rel data_140118cd0]  {u\"objectGUID\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "jne     0x1400acc8f",
    "mov     rcx, qword [r12]",
    "mov     rcx, qword [rcx+0x8]",
    "call    sub_14001311c",
    "jmp     0x1400acc7e",
    "inc     ebx",
    "add     rdi, 0x8",
    "cmp     ebx, 0x20",
    "jb      0x1400acbcc",
    "mov     rdx, qword [rdi]",
    "lea     rcx, [rel data_1400e69c8]  {u\"%s ; \"}",
    "call    sub_14000c030",
    "lea     rdx, [rel data_1401191f8]  {u\"servicePrincipalName\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "je      0x1400acccf",
    "mov     rcx, qword [r12]",
    "mov     rcx, qword [rcx+0x8]",
    "call    sub_1400130e8",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "jmp     0x1400ace20",
    "bt      esi, ebx",
    "jae     0x1400acbe0",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "mov     rcx, r14",
    "call    qword [rel LocalFree]",
    "mov     rsi, qword [rsp+0x58 {var_90_1}]",
    "jmp     0x1400ace20",
    "xor     edi, edi  {0x0}",
    "cmp     qword [r12], rdi",
    "je      0x1400acc7e",
    "lea     rdx, [rel data_140119228]  {u\"msDS-AllowedToDelegateTo\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "je      0x1400acccf",
    "mov     rbx, r12",
    "lea     rdx, [rel data_140119260]  {u\"msDS-AllowedToActOnBehalfOfOther\u2026\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "jne     0x1400ace20",
    "inc     rdi",
    "lea     rbx, [r12+rdi*8]",
    "cmp     qword [rbx], 0x0",
    "jne     0x1400accda",
    "lea     rdx, [rel data_1401191f8]  {u\"servicePrincipalName\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "jne     0x1400acdf4",
    "mov     rax, qword [rbx]",
    "lea     rcx, [rel data_1401195a0]  {u\"\\n    %*S\"}",
    "mov     r8, qword [rax+0x8]",
    "mov     edx, dword [rax]",
    "call    sub_14000c030",
    "test    rsi, rsi",
    "je      0x1400acdf4",
    "jmp     0x1400acc7e",
    "mov     rax, qword [rbx]",
    "mov     rdx, qword [rax+0x8]",
    "mov     r8d, dword [rax]",
    "test    rdx, rdx",
    "je      0x1400acd36",
    "xor     eax, eax  {0x0}",
    "lea     rcx, [rsp+0x100 {arg_18}]",
    "call    sub_140013518",
    "mov     r14, qword [rsp+0x100 {arg_18}]",
    "jmp     0x1400acd38",
    "lea     rdx, [rel data_1401195b4]  {\"HTTP/\"}",
    "mov     rcx, r14",
    "call    qword [rel strstr]",
    "cmp     rax, r14",
    "jne     0x1400acdeb",
    "test    eax, eax",
    "je      0x1400acdf4",
    "mov     rcx, r14",
    "call    qword [rel LocalFree]",
    "lea     rcx, [rel data_1401195b4]  {\"HTTP/\"}",
    "call    qword [rel lstrlenA]",
    "movsxd  rbx, eax",
    "add     rbx, r14",
    "cmp     byte [rbx], 0x0",
    "je      0x1400acdeb",
    "mov     edx, 0x2e",
    "mov     rcx, rbx",
    "call    qword [rel strchr]",
    "test    rax, rax",
    "je      0x1400acdeb",
    "and     qword [rsp+0x28 {var_c0_1}], 0x0",
    "and     qword [rsp+0x50 {ppQueryResults}], 0x0",
    "lea     rax, [rsp+0x50 {ppQueryResults}]",
    "mov     edx, 0x1",
    "xor     r9d, r9d  {0x0}",
    "mov     r8d, 0x18e8",
    "mov     rcx, rbx",
    "mov     qword [rsp+0x20 {var_c8_2}], rax {ppQueryResults}",
    "call    DnsQuery_A",
    "test    eax, eax",
    "jne     0x1400acdc8",
    "cmp     eax, 0x232b",
    "jne     0x1400acddd",
    "mov     rcx, qword [rsp+0x50 {ppQueryResults}]",
    "test    rcx, rcx",
    "je      0x1400acddd",
    "lea     rcx, [rel data_140119600]  {u\"ERROR kuhl_m_net_deleg ; DnsQuer\u2026\"}",
    "mov     edx, eax",
    "call    sub_14000c030",
    "lea     rcx, [rel data_1401195c0]  {u\" ** NAME IS NOT REGISTERED! **\"}",
    "call    sub_14000c030",
    "jmp     0x1400acdeb",
    "lea     edx, [rax+0x1]",
    "call    DnsFree",
    "jmp     0x1400acdeb"
  ],
  "high_level_IL": [
    "wchar16 const* const var_88 = u\"userPrincipalName\"",
    "wchar16 const* const var_80 = u\"sAMAccountName\"",
    "wchar16 const* const var_78 = u\"userAccountControl\"",
    "wchar16 const* const var_70 = u\"servicePrincipalName\"",
    "int64_t var_48 = 0",
    "wchar16 const* const var_68 = u\"msDS-AllowedToDelegateTo\"",
    "arg_20 = 0",
    "wchar16 const* const var_60 = u\"msDS-AllowedToActOnBehalfOfOther\u2026\"",
    "int64_t var_a8 = 0",
    "wchar16 const* const var_58 = u\"objectSid\"",
    "wchar16 const* const var_50 = u\"objectGUID\"",
    "int64_t rsi = sx.q(sub_140013220(arg1, arg2, u\"dns\", nullptr, nullptr))",
    "sub_140013220(arg1, arg2, u\"server\", &arg_18, nullptr)",
    "int64_t rax_1",
    "int64_t rdx_1",
    "rax_1, rdx_1 = Ordinal_WLDAP32_145(arg_18, 0x185)",
    "arg_18 = rax_1",
    "HLOCAL hMem",
    "int32_t rax_2",
    "if (rax_1 == 0)",
    "sub_14000c030(u\"ERROR kull_m_ldap_getLdapAndRoot\u2026\", rdx_1)",
    "rax_2 = 0",
    "rax_2 = sub_14000b23c(nullptr, &arg_18, &hMem, 0)",
    "if (rax_2 != 0)",
    "int32_t var_c0_1 = 0",
    "int32_t rax_3 = Ordinal_WLDAP32_208(rax_1, hMem, 2, u\"(&(servicePrincipalname=*)(|(msD\u2026\", &var_88, 0, &arg_20)",
    "if (rax_3 != 0)",
    "sub_14000c030(u\"ERROR kuhl_m_net_deleg ; ldap_se\u2026\", zx.q(rax_3))",
    "sub_14000c030(u\"%u entries\\n\", zx.q(Ordinal_WLDAP32_36(rax_1, arg_20)))",
    "int64_t i_2 = Ordinal_WLDAP32_26(rax_1, arg_20)",
    "int64_t var_90_1 = rsi",
    "int64_t i_1 = i_2",
    "if (i_2 != 0)",
    "int64_t r14_1 = arg_18",
    "int64_t i",
    "sub_14000c030(u\"\\n%s\\n\", Ordinal_WLDAP32_133(rax_1, i_1))",
    "int64_t string1 = Ordinal_WLDAP32_127(rax_1, i_1, &var_a8)",
    "while (string1 != 0)",
    "sub_14000c030(u\"  %s: \", string1)",
    "int64_t rax_6 = Ordinal_WLDAP32_142(rax_1, i_1, string1)",
    "if (rax_6 != 0)",
    "if (_wcsicmp(string1, u\"userAccountControl\") != 0)",
    "int32_t rax_10 = _wcsicmp(string1, u\"userPrincipalName\")",
    "int32_t rax_11",
    "if (rax_10 != 0)",
    "rax_11 = _wcsicmp(string1, u\"sAMAccountName\")",
    "if (rax_10 == 0 || rax_11 == 0)",
    "int32_t* rax_25 = *rax_6",
    "*(rax_25 + 8)",
    "sub_14000c030(u\"%*S\\n\", zx.q(*rax_25))",
    "if (_wcsicmp(string1, u\"objectSid\") != 0)",
    "if (_wcsicmp(string1, u\"objectGUID\") != 0)",
    "int32_t rax_14",
    "int64_t rdx_16",
    "rax_14, rdx_16 = _wcsicmp(string1, u\"servicePrincipalName\")",
    "if (rax_14 == 0)",
    "label_1400acccf:",
    "int64_t rdi_2 = 0",
    "if (*rax_6 != 0)",
    "int64_t rbx_1 = rax_6",
    "int32_t* rax_17 = *rbx_1",
    "*(rax_17 + 8)",
    "rdx_16 = sub_14000c030(u\"\\n    %*S\", zx.q(*rax_17))",
    "if (rsi != 0)",
    "int32_t rax_18",
    "rax_18, rdx_16 = _wcsicmp(string1, u\"servicePrincipalName\")",
    "if (rax_18 == 0)",
    "int32_t* rax_19 = *rbx_1",
    "rdx_16 = *(rax_19 + 8)",
    "int32_t rax_20",
    "if (rdx_16 == 0)",
    "rax_20 = 0",
    "rax_20, rdx_16 = sub_140013518(&arg_18, rdx_16, zx.q(*rax_19))",
    "r14_1 = arg_18",
    "if (rax_20 != 0)",
    "if (strstr(r14_1, \"HTTP/\") == r14_1)",
    "int64_t rbx_3 = sx.q(lstrlenA(\"HTTP/\")) + r14_1",
    "if (*rbx_3 != 0 && strchr(rbx_3, 0x2e) != 0)",
    "var_c0_1.q = 0",
    "struct DNS_RECORDA* ppQueryResults = nullptr",
    "enum WIN32_ERROR rax_24",
    "int64_t rdx_18",
    "rax_24, rdx_18 = DnsQuery_A(rbx_3, DNS_TYPE_A, 0x18e8, nullptr, &ppQueryResults, nullptr)",
    "if (rax_24 == NO_ERROR)",
    "struct DNS_RECORDA* pData = ppQueryResults",
    "if (pData == 0)",
    "sub_14000c030(u\"ERROR kuhl_m_net_deleg ; DnsQuer\u2026\", zx.q(rax_24))",
    "DnsFree(pData, rax_24 + 1)",
    "if (rax_24 != DNS_ERROR_RCODE_NAME_ERROR)",
    "sub_14000c030(u\"ERROR kuhl_m_net_deleg ; DnsQuer\u2026\", zx.q(rax_24))",
    "sub_14000c030(u\" ** NAME IS NOT REGISTERED! **\", rdx_18)",
    "rdx_16 = LocalFree(r14_1)",
    "rdi_2 += 1",
    "rbx_1 = rax_6 + (rdi_2 << 3)",
    "do while (*rbx_1 != 0)",
    "sub_14000c030(U\"\\n\", rdx_16)",
    "int32_t rax_15",
    "rax_15, rdx_16 = _wcsicmp(string1, u\"msDS-AllowedToDelegateTo\")",
    "if (rax_15 == 0)",
    "goto label_1400acccf",
    "int32_t rax_16",
    "rax_16, rdx_16 = _wcsicmp(string1, u\"msDS-AllowedToActOnBehalfOfOther\u2026\")",
    "if (rax_16 == 0)",
    "goto label_1400acccf",
    "*(*rax_6 + 8)",
    "sub_14000c030(U\"\\n\", sub_1400130e8())",
    "*(*rax_6 + 8)",
    "sub_14000c030(U\"\\n\", sub_14001311c())",
    "int32_t* rcx_9 = *rax_6",
    "int64_t rdx_12 = *(rcx_9 + 8)",
    "int32_t rax_8",
    "if (rdx_12 == 0)",
    "rax_8 = 0",
    "rax_8 = sub_140013518(&arg_18, rdx_12, zx.q(*rcx_9))",
    "r14_1 = arg_18",
    "if (rax_8 != 0)",
    "uint32_t rax_9 = strtoul(r14_1, nullptr, 0xa)",
    "int64_t rdx_14 = sub_14000c030(u\"0x%08x - \", zx.q(rax_9))",
    "int32_t k = 0",
    "wchar16 const (** rdi_1)[0x7] = &data_14013b000",
    "if (test_bit(rax_9, k))",
    "rdx_14 = sub_14000c030(u\"%s ; \", *rdi_1)",
    "k += 1",
    "rdi_1 = &rdi_1[1]",
    "do while (k u< 0x20)",
    "sub_14000c030(U\"\\n\", rdx_14)",
    "LocalFree(r14_1)",
    "rsi = var_90_1",
    "Ordinal_WLDAP32_79(rax_6)",
    "Ordinal_WLDAP32_147(string1)",
    "string1 = Ordinal_WLDAP32_167(rax_1, i_1, var_a8)",
    "int64_t rcx_33 = var_a8",
    "if (rcx_33 != 0)",
    "Ordinal_WLDAP32_301(rcx_33, 0)",
    "i = Ordinal_WLDAP32_27(rax_1, i_1)",
    "i_1 = i",
    "do while (i != 0)",
    "int64_t rcx_35 = arg_20",
    "if (rcx_35 != 0)",
    "Ordinal_WLDAP32_41(rcx_35)",
    "LocalFree(hMem)",
    "Ordinal_WLDAP32_13(rax_1)",
    "return 0"
  ]
}