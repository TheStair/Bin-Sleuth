{
  "address": "0x1400023b0",
  "rules": [
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/dc118f3b61184df4a511ed4919cf656f",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/5f4c97f31ce341008ea23885a97305d8",
    "check for kernel debugger via shared user data structure/f02b2044f10f450f9f5b2b0d5d96cef0",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "hash data with CRC32/7620b456d97a4aaeb63e1213270df3d4",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "allocate or change RWX memory/e5d60c23edee4683a25ac882b99be25c/be08ffa5ddd942e8ab0706a663121e4b",
    "hash data using aphash/53c84e7b18b64c82aa36e25c45372fcd",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/5f4855375d6b45e9bd6b2a189e856211"
  ],
  "disassembly": [
    "mov     rax, rsp",
    "mov     qword [rax+0x8], rbx",
    "mov     qword [rax+0x10], rbp",
    "mov     qword [rax+0x18], rsi",
    "mov     qword [rax+0x20], rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "sub     rsp, 0x20",
    "mov     edx, 0x80",
    "mov     rdi, rcx",
    "lea     ecx, [rdx-0x40]",
    "call    qword [rel LocalAlloc]",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x1400024ba",
    "mov     rbp, qword [rsp+0x48]",
    "mov     rsi, qword [rsp+0x50]",
    "mov     rdi, qword [rsp+0x58]",
    "mov     rax, rbx",
    "mov     rbx, qword [rsp+0x40]",
    "add     rsp, 0x20",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "retn    ",
    "mov     rcx, rax",
    "mov     rdx, rdi",
    "mov     r8d, 0x34",
    "call    memcpy",
    "mov     ecx, dword [rbx+0x30]",
    "lea     r11, [rdi+0x34]",
    "mov     qword [rbx+0x34], r11",
    "mov     eax, dword [rcx+r11]",
    "lea     rdx, [rcx+r11+0x4]",
    "lea     r8, [rax+rdx+0x4]",
    "mov     qword [rbx+0x58], rdx",
    "mov     dword [rbx+0x54], eax",
    "mov     eax, dword [rax+rdx]",
    "mov     qword [rbx+0x4c], r8",
    "lea     rdx, [rax+r8+0x4]",
    "mov     dword [rbx+0x48], eax",
    "mov     eax, dword [rax+r8]",
    "lea     r8, [rax+rdx+0x4]",
    "mov     dword [rbx+0x3c], eax",
    "mov     qword [rbx+0x40], rdx",
    "mov     eax, dword [rax+rdx]",
    "mov     qword [rbx+0x64], r8",
    "lea     r9, [rax+r8+0x4]",
    "mov     dword [rbx+0x60], eax",
    "mov     eax, dword [rax+r8]",
    "mov     r8d, dword [rbx+0x24]",
    "mov     qword [rbx+0x70], r9",
    "mov     dword [rbx+0x6c], eax",
    "test    r8d, r8d",
    "je      0x140002472",
    "mov     edx, dword [rbx+0x30]",
    "lea     rcx, [rbx+0x34]",
    "call    sub_1400131d0",
    "mov     edx, dword [rbx+0x3c]",
    "lea     rcx, [rbx+0x40]",
    "call    sub_1400131d0",
    "mov     edx, dword [rbx+0x48]",
    "lea     rcx, [rbx+0x4c]",
    "call    sub_1400131d0",
    "mov     edx, dword [rbx+0x54]",
    "lea     rcx, [rbx+0x58]",
    "call    sub_1400131d0",
    "mov     edx, dword [rbx+0x60]",
    "lea     rcx, [rbx+0x64]",
    "call    sub_1400131d0",
    "mov     edx, dword [rbx+0x6c]",
    "lea     rcx, [rbx+0x70]",
    "call    sub_1400131d0",
    "mov     rcx, rax",
    "lea     rdx, [rbx+0x78]",
    "and     ecx, 0x1",
    "add     rcx, r9",
    "add     rcx, rax",
    "call    sub_140002744"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}