{
  "address": "0x140006ff8",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop"
  ],
  "disassembly": [
    "mov     rax, rsp {__return_addr}",
    "mov     qword [rax+0x8 {__saved_rbx}], rbx",
    "mov     qword [rax+0x10 {__saved_rbp}], rbp",
    "mov     qword [rax+0x18 {__saved_rsi}], rsi",
    "mov     qword [rax+0x20 {__saved_rdi}], rdi",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "sub     rsp, 0x30",
    "lea     esi, [rcx+rcx]",
    "mov     rbx, rdx",
    "lea     r13, [rel data_1400e17cc]",
    "lea     rcx, [rel data_1400e8cf8]  {u\"%*s**BLOB**\\n\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "call    sub_14000c030",
    "xor     edi, edi  {0x0}",
    "cmp     rbx, rdi",
    "je      0x14000732c",
    "mov     rbx, qword [rsp+0x50 {__saved_rbx}]",
    "mov     rbp, qword [rsp+0x58 {__saved_rbp}]",
    "mov     rsi, qword [rsp+0x60 {__saved_rsi}]",
    "mov     rdi, qword [rsp+0x68 {__saved_rdi}]",
    "add     rsp, 0x30",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "retn     {__return_addr}",
    "mov     r9d, dword [rbx]",
    "lea     rcx, [rel data_1400e8d20]  {u\"%*s  dwVersion          : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_1}], r9d",
    "call    sub_14000c030",
    "lea     rcx, [rel data_1400e8d70]  {u\"%*s  guidProvider       : \"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "call    sub_14000c030",
    "lea     rcx, [rbx+0x4]",
    "call    sub_1400130e8",
    "lea     r14, [rel data_1400d27a8]",
    "mov     rcx, r14  {data_1400d27a8}",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x14]",
    "lea     rcx, [rel data_1400e8db0]  {u\"%*s  dwMasterKeyVersion : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_2}], r9d",
    "call    sub_14000c030",
    "lea     rcx, [rel data_1400e8e00]  {u\"%*s  guidMasterKey      : \"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "call    sub_14000c030",
    "lea     rcx, [rbx+0x18]",
    "call    sub_1400130e8",
    "mov     rcx, r14  {data_1400d27a8}",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x28]",
    "lea     rcx, [rel data_1400e8e40]  {u\"%*s  dwFlags            : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_3}], r9d",
    "call    sub_14000c030",
    "mov     r12d, dword [rbx+0x28]",
    "lea     rbp, [rel data_1400ddc78]",
    "inc     edi",
    "add     rbp, 0x8",
    "cmp     edi, 0x5",
    "jb      0x1400070e1",
    "mov     rdx, qword [rbp]",
    "lea     rcx, [rel data_1400e69c8]  {u\"%s ; \"}",
    "call    sub_14000c030",
    "mov     eax, r12d",
    "mov     ecx, edi",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0x1400070fc",
    "bt      r12d, 0x1d",
    "jae     0x140007121",
    "lea     rcx, [rel data_1400e8e8c]",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x2c]",
    "lea     rcx, [rel data_1400e8ea0]  {u\"%*s  dwDescriptionLen   : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_4}], r9d",
    "call    sub_14000c030",
    "mov     r9, qword [rbx+0x30]",
    "lea     rcx, [rel data_1400e8ef0]  {u\"%*s  szDescription      : %s\\n\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x38]",
    "mov     ecx, r9d",
    "call    sub_140005694",
    "lea     rcx, [rel data_1400e8f30]  {u\"%*s  algCrypt           : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     qword [rsp+0x28 {var_20_1}], rax",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_5}], r9d",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x3c]",
    "lea     rcx, [rel data_1400e8f90]  {u\"%*s  dwAlgCryptLen      : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_6}], r9d",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x40]",
    "lea     rcx, [rel data_1400e8fe0]  {u\"%*s  dwSaltLen          : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_7}], r9d",
    "call    sub_14000c030",
    "lea     rcx, [rel data_1400e9030]  {u\"%*s  pbSalt             : \"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "call    sub_14000c030",
    "mov     edx, dword [rbx+0x40]",
    "mov     rcx, qword [rbx+0x44]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "mov     rcx, r14  {data_1400d27a8}",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x4c]",
    "lea     rcx, [rel data_1400e9070]  {u\"%*s  dwHmacKeyLen       : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_8}], r9d",
    "call    sub_14000c030",
    "lea     rcx, [rel data_1400e90c0]  {u\"%*s  pbHmackKey         : \"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "call    sub_14000c030",
    "mov     edx, dword [rbx+0x4c]",
    "mov     rcx, qword [rbx+0x50]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "mov     rcx, r14  {data_1400d27a8}",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x58]",
    "mov     ecx, r9d",
    "call    sub_140005694",
    "lea     rcx, [rel data_1400e9100]  {u\"%*s  algHash            : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     qword [rsp+0x28 {var_20_2}], rax",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_9}], r9d",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x5c]",
    "lea     rcx, [rel data_1400e9160]  {u\"%*s  dwAlgHashLen       : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_10}], r9d",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x60]",
    "lea     rcx, [rel data_1400e91b0]  {u\"%*s  dwHmac2KeyLen      : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_11}], r9d",
    "call    sub_14000c030",
    "lea     rcx, [rel data_1400e9200]  {u\"%*s  pbHmack2Key        : \"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "call    sub_14000c030",
    "mov     edx, dword [rbx+0x60]",
    "mov     rcx, qword [rbx+0x64]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "mov     rcx, r14  {data_1400d27a8}",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x6c]",
    "lea     rcx, [rel data_1400e9240]  {u\"%*s  dwDataLen          : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_12}], r9d",
    "call    sub_14000c030",
    "lea     rcx, [rel data_1400e9290]  {u\"%*s  pbData             : \"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "call    sub_14000c030",
    "mov     edx, dword [rbx+0x6c]",
    "mov     rcx, qword [rbx+0x70]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "mov     rcx, r14  {data_1400d27a8}",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+0x78]",
    "lea     rcx, [rel data_1400e92d0]  {u\"%*s  dwSignLen          : %08x -\u2026\"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "mov     dword [rsp+0x20 {var_28_13}], r9d",
    "call    sub_14000c030",
    "lea     rcx, [rel data_1400e9320]  {u\"%*s  pbSign             : \"}",
    "mov     r8, r13  {data_1400e17cc}",
    "mov     edx, esi",
    "call    sub_14000c030",
    "mov     edx, dword [rbx+0x78]",
    "mov     rcx, qword [rbx+0x7c]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400e9358]",
    "call    sub_14000c030",
    "lea     rdx, [rel data_1400ea8a0]  {u\"system\"}",
    "lea     rcx, [rel data_1400e69c8]  {u\"%s ; \"}",
    "call    sub_14000c030"
  ],
  "high_level_IL": [
    "int32_t rsi = arg1 * 2",
    "int64_t result = sub_14000c030(u\"%*s**BLOB**\\n\", zx.q(rsi))",
    "int32_t i = 0",
    "if (arg2 == 0)",
    "return result",
    "int32_t var_28_1 = *arg2",
    "sub_14000c030(u\"%*s  dwVersion          : %08x -\u2026\", zx.q(rsi))",
    "sub_14000c030(u\"%*s  guidProvider       : \", zx.q(rsi))",
    "sub_14000c030(U\"\\n\", sub_1400130e8())",
    "int32_t var_28_2 = arg2[5]",
    "sub_14000c030(u\"%*s  dwMasterKeyVersion : %08x -\u2026\", zx.q(rsi))",
    "sub_14000c030(u\"%*s  guidMasterKey      : \", zx.q(rsi))",
    "sub_14000c030(U\"\\n\", sub_1400130e8())",
    "int32_t var_28_3 = arg2[0xa]",
    "int64_t rdx_8 = sub_14000c030(u\"%*s  dwFlags            : %08x -\u2026\", zx.q(rsi))",
    "int32_t r12_1 = arg2[0xa]",
    "wchar16 const (** const rbp_1)[0x14] = &data_1400ddc78",
    "if (((r12_1 u>> i.b).b & 1) != 0)",
    "rdx_8 = sub_14000c030(u\"%s ; \", *rbp_1)",
    "i += 1",
    "rbp_1 = &rbp_1[1]",
    "do while (i u< 5)",
    "if (test_bit(r12_1, 0x1d))",
    "rdx_8 = sub_14000c030(u\"%s ; \", u\"system\")",
    "sub_14000c030(u\")\\n\", rdx_8)",
    "int32_t var_28_4 = arg2[0xb]",
    "sub_14000c030(u\"%*s  dwDescriptionLen   : %08x -\u2026\", zx.q(rsi))",
    "*(arg2 + 0x30)",
    "sub_14000c030(u\"%*s  szDescription      : %s\\n\", zx.q(rsi))",
    "int32_t r9_6 = arg2[0xe]",
    "int64_t var_20_1 = sub_140005694(r9_6)",
    "int32_t var_28_5 = r9_6",
    "sub_14000c030(u\"%*s  algCrypt           : %08x -\u2026\", zx.q(rsi))",
    "int32_t var_28_6 = arg2[0xf]",
    "sub_14000c030(u\"%*s  dwAlgCryptLen      : %08x -\u2026\", zx.q(rsi))",
    "int32_t var_28_7 = arg2[0x10]",
    "sub_14000c030(u\"%*s  dwSaltLen          : %08x -\u2026\", zx.q(rsi))",
    "sub_14000c030(u\"%*s  pbSalt             : \", zx.q(rsi))",
    "sub_14000c030(U\"\\n\", sub_140012f68(*(arg2 + 0x44), zx.q(arg2[0x10]), 0))",
    "int32_t var_28_8 = arg2[0x13]",
    "sub_14000c030(u\"%*s  dwHmacKeyLen       : %08x -\u2026\", zx.q(rsi))",
    "sub_14000c030(u\"%*s  pbHmackKey         : \", zx.q(rsi))",
    "sub_14000c030(U\"\\n\", sub_140012f68(*(arg2 + 0x50), zx.q(arg2[0x13]), 0))",
    "int32_t r9_10 = arg2[0x16]",
    "int64_t var_20_2 = sub_140005694(r9_10)",
    "int32_t var_28_9 = r9_10",
    "sub_14000c030(u\"%*s  algHash            : %08x -\u2026\", zx.q(rsi))",
    "int32_t var_28_10 = arg2[0x17]",
    "sub_14000c030(u\"%*s  dwAlgHashLen       : %08x -\u2026\", zx.q(rsi))",
    "int32_t var_28_11 = arg2[0x18]",
    "sub_14000c030(u\"%*s  dwHmac2KeyLen      : %08x -\u2026\", zx.q(rsi))",
    "sub_14000c030(u\"%*s  pbHmack2Key        : \", zx.q(rsi))",
    "sub_14000c030(U\"\\n\", sub_140012f68(*(arg2 + 0x64), zx.q(arg2[0x18]), 0))",
    "int32_t var_28_12 = arg2[0x1b]",
    "sub_14000c030(u\"%*s  dwDataLen          : %08x -\u2026\", zx.q(rsi))",
    "sub_14000c030(u\"%*s  pbData             : \", zx.q(rsi))",
    "sub_14000c030(U\"\\n\", sub_140012f68(*(arg2 + 0x70), zx.q(arg2[0x1b]), 0))",
    "int32_t var_28_13 = arg2[0x1e]",
    "sub_14000c030(u\"%*s  dwSignLen          : %08x -\u2026\", zx.q(rsi))",
    "sub_14000c030(u\"%*s  pbSign             : \", zx.q(rsi))",
    "return sub_14000c030(u\"\\n\\n\", sub_140012f68(*(arg2 + 0x7c), zx.q(arg2[0x1e]), 0))"
  ]
}