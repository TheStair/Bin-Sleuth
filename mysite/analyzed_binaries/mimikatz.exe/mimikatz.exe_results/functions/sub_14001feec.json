{
  "address": "0x14001feec",
  "rules": [
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "contain loop",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2"
  ],
  "disassembly": [
    "mov     qword [rsp+0x10], rbx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x30",
    "mov     rsi, qword [rcx]",
    "mov     r15, rdx",
    "xor     ebp, ebp",
    "mov     eax, dword [rsi+0x4]",
    "add     eax, eax",
    "movsxd  rcx, eax",
    "call    sub_140016b70",
    "movsxd  r12, dword [rsi+0x4]",
    "add     r12, rax",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x14001ff84",
    "mov     edi, 0x7",
    "jmp     0x1400200bb",
    "and     qword [rsp+0x20], rbp",
    "mov     r9d, 0x4001",
    "mov     r8, rax",
    "mov     rdx, r15",
    "mov     rcx, rsi",
    "call    qword [rsi+0x28]",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x1400200bb",
    "mov     rcx, rbp",
    "call    sub_140016950",
    "test    rbx, rbx",
    "je      0x1400200e2",
    "mov     rax, qword [rbx]",
    "lea     rdx, [rsp+0x80]",
    "mov     rcx, rbx",
    "call    qword [rax+0x30]",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x1400200bb",
    "mov     eax, edi",
    "mov     rbx, qword [rsp+0x78]",
    "add     rsp, 0x30",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [rbx]",
    "test    rax, rax",
    "je      0x1400200da",
    "mov     r14d, dword [rsi+0x8]",
    "mov     rax, qword [rsp+0x80]",
    "inc     r14d",
    "movsxd  rcx, r14d",
    "lea     rcx, [rcx+rax+0x1]",
    "call    sub_140016870",
    "mov     rbp, rax",
    "test    rax, rax",
    "jne     0x14001ff8e",
    "mov     rcx, rbx",
    "call    sub_140016950",
    "mov     rcx, rbx",
    "call    qword [rax+0x8]",
    "and     qword [rbx], 0x0",
    "mov     rax, qword [rsp+0x80]",
    "mov     r10, qword [rbx]",
    "xor     r9d, r9d",
    "lea     rcx, [rax+rbp+0x1]",
    "mov     r8d, eax",
    "mov     rdx, rbp",
    "mov     qword [rsp+0x88], rcx",
    "mov     rcx, rbx",
    "call    qword [r10+0x10]",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x1400200bb",
    "mov     rax, qword [rsp+0x80]",
    "mov     r13, rbp",
    "mov     byte [rax+rbp], dil",
    "cmp     qword [rsp+0x80], 0x0",
    "jle     0x14002009b",
    "mov     rax, qword [rbx]",
    "test    rax, rax",
    "je      0x1400200ad",
    "lea     r9, [rsp+0x70]",
    "xor     r8d, r8d",
    "mov     rdx, r13",
    "mov     rcx, rsi",
    "call    qword [rsi+0x38]",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x1400200bb",
    "xor     r8d, r8d",
    "mov     rdx, r15",
    "mov     rcx, rsi",
    "call    qword [rsi+0x30]",
    "mov     edi, eax",
    "mov     rcx, rbx",
    "call    qword [rax+0x8]",
    "and     qword [rbx], 0x0",
    "cmp     dword [rsp+0x70], eax",
    "je      0x140020078",
    "mov     rcx, r13",
    "call    sub_140019074",
    "inc     eax",
    "cdqe    ",
    "add     r13, rax",
    "mov     rax, r13",
    "sub     rax, rbp",
    "cmp     rax, qword [rsp+0x80]",
    "jl      0x14001ffde",
    "and     qword [rsp+0x20], 0x0",
    "mov     r9d, 0x801",
    "mov     r8, r12",
    "mov     rdx, r13",
    "mov     rcx, rsi",
    "call    qword [rsi+0x28]",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x1400200bb",
    "mov     rdx, qword [rsp+0x88]",
    "mov     r8d, r14d",
    "mov     rcx, r12",
    "call    sub_14001f080",
    "mov     edi, eax",
    "mov     rax, qword [r12]",
    "test    rax, rax",
    "je      0x14002004a",
    "test    edi, edi",
    "jne     0x1400200bb",
    "mov     rcx, r12",
    "call    qword [rax+0x8]",
    "and     qword [r12], 0x0",
    "mov     rax, qword [rsp+0x88]",
    "cmp     byte [rax], dil",
    "je      0x140020078",
    "mov     r8, r15",
    "sub     r8, rax",
    "test    ecx, ecx",
    "je      0x1400200bb",
    "inc     rax",
    "test    edx, edx",
    "jne     0x140020061",
    "movzx   ecx, byte [rax]",
    "movzx   edx, byte [rax+r8]",
    "sub     ecx, edx",
    "jne     0x140020074"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}