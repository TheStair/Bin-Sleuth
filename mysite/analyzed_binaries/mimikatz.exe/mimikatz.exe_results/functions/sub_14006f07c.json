{
  "address": "0x14006f07c",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2"
  ],
  "disassembly": [
    "mov     r11, rsp {__return_addr}",
    "mov     qword [r11+0x8 {__saved_rbx}], rbx",
    "mov     qword [r11+0x10 {__saved_rbp}], rbp",
    "push    rsi {__saved_rsi}",
    "sub     rsp, 0x40",
    "mov     rsi, rcx",
    "lea     rcx, [r11+0x20 {arg_20}]",
    "mov     rax, r8",
    "xor     ebx, ebx  {0x0}",
    "mov     rbp, rdx",
    "mov     r9d, 0x80",
    "mov     qword [r11-0x18 {var_18}], rbx  {0x0}",
    "mov     qword [r11-0x20 {var_20}], rcx {arg_20}",
    "mov     rcx, rsi",
    "or      r8d, 0xffffffff  {0xffffffff}",
    "mov     rdx, rax",
    "mov     qword [r11-0x28 {var_28}], rbx  {0x0}",
    "call    sub_140062858",
    "cmp     eax, ebx",
    "jne     0x14006f164",
    "mov     rbx, qword [rsp+0x50 {__saved_rbx}]",
    "mov     rbp, qword [rsp+0x58 {__saved_rbp}]",
    "add     rsp, 0x40",
    "pop     rsi {__saved_rsi}",
    "retn     {__return_addr}",
    "jmp     0x14006f122",
    "mov     rcx, qword [rsp+0x68 {arg_20}]",
    "call    sub_1400365fc",
    "mov     ebx, eax",
    "cmp     eax, 0x64",
    "je      0x14006f0c6",
    "mov     rcx, qword [rsp+0x68 {arg_20}]",
    "xor     edx, edx  {0x0}",
    "call    sub_140036c30",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x14006f122",
    "cmp     ebx, 0x65",
    "mov     eax, 0x0",
    "cmove   ebx, eax  {0x0}",
    "cmp     ebx, eax",
    "je      0x14006f158",
    "lea     rdx, [rel data_1400f7008]",
    "mov     r8d, 0x3",
    "mov     rcx, rax",
    "call    qword [rel strncmp]",
    "test    eax, eax",
    "je      0x14006f10e",
    "mov     rcx, qword [rsp+0x68 {arg_20}]",
    "call    sub_140035c54",
    "mov     eax, ebx",
    "mov     rcx, rsi",
    "call    sub_140083ee4",
    "mov     rdx, rsi",
    "mov     rcx, rbp",
    "mov     r8, rax",
    "call    sub_140016eb4",
    "mov     r8, rbx",
    "mov     rdx, rbp",
    "mov     rcx, rsi",
    "call    sub_14006f07c",
    "mov     ebx, eax",
    "test    eax, eax",
    "jne     0x14006f133",
    "lea     rdx, [rel data_1400f700c]",
    "mov     r8d, 0x3",
    "mov     rcx, rbx",
    "call    qword [rel strncmp]",
    "test    eax, eax",
    "jne     0x14006f122"
  ],
  "high_level_IL": [
    "int32_t rax_1 = sub_140062858(arg1, arg3, 0xffffffff, 0x80, nullptr, &arg_20, 0)",
    "if (rax_1 != 0)",
    "return rax_1",
    "int32_t rbx_2",
    "while (true)",
    "int32_t rax_5 = sub_1400365fc(arg_20)",
    "rbx_2 = rax_5",
    "if (rax_5 != 0x64)",
    "break",
    "char* s1 = sub_140036c30(arg_20, 0)",
    "if (s1 != 0)",
    "if (strncmp(s1, \"CRE\", 3) != 0 && strncmp(s1, \"INS\", 3) != 0)",
    "continue",
    "int32_t rax_4 = sub_14006f07c(arg1, arg2, s1)",
    "rbx_2 = rax_4",
    "if (rax_4 != 0)",
    "break",
    "if (rbx_2 == 0x65)",
    "rbx_2 = 0",
    "if (rbx_2 != 0)",
    "sub_140016eb4(arg2, arg1, sub_140083ee4(arg1))",
    "sub_140035c54(arg_20)",
    "return rbx_2"
  ]
}