{
  "address": "0x1400a30a4",
  "rules": [
    "encrypt data using speck/4b1f3c27d17344b39cf9dede3bcf8b4b",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "encrypt data using AES MixColumns step/954c5d7507db4ab48ac65ac05419ca28",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     qword [rsp+0x10 {__saved_rbx}], rbx",
    "mov     qword [rsp+0x18 {__saved_rbp}], rbp",
    "mov     qword [rsp+0x20 {__saved_rsi}], rsi",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x50",
    "mov     r13, qword [rsp+0xa8 {arg6}]",
    "mov     r14, qword [rsp+0xa0 {arg5}]",
    "mov     rax, r9",
    "mov     rsi, rcx",
    "mov     rbx, r8",
    "mov     edi, edx",
    "lea     rcx, [rel data_14010fcc8]  {u\" [%s] %wZ -> %wZ\\n\"}",
    "mov     r9, r13",
    "mov     r8, r14",
    "mov     rdx, rax",
    "mov     dword [rsp+0x20 {var_58}], 0x12",
    "mov     dword [rsp+0x24 {var_54}], 0x11",
    "mov     dword [rsp+0x28 {var_50}], 0x17",
    "call    sub_14000c030",
    "xor     ebp, ebp  {0x0}",
    "cmp     rsi, rbp",
    "je      0x1400a327f",
    "cmp     rbx, rbp",
    "je      0x1400a33ae",
    "cmp     edi, ebp",
    "jbe     0x1400a33ae",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "lea     r11, [rsp+0x50 {__saved_r15}]",
    "mov     rbx, qword [r11+0x38 {__saved_rbx}]",
    "mov     rbp, qword [r11+0x40 {__saved_rbp}]",
    "mov     rsi, qword [r11+0x48 {__saved_rsi}]",
    "mov     rsp, r11",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "retn     {__return_addr}",
    "lea     rcx, [rel data_14010fcf0]  {u\"    * \"}",
    "call    sub_14000c030",
    "mov     rcx, rbx",
    "call    sub_1400130c0",
    "cmp     dword [rbx+0x8], 0x4",
    "jae     0x1400a32b2",
    "mov     qword [rsp+0x80 {i_2}], rdi",
    "lea     rbx, [rsi+0x8]",
    "lea     r12, [rel data_14013c2c8]",
    "lea     rdi, [rel data_14010fd00]",
    "lea     r15, [rel data_14010fd30]  {u\"- %u - \"}",
    "mov     ebp, 0x3",
    "lea     rdi, [rel data_14010fd00]  {u\"unknown?\"}",
    "mov     eax, dword [rbx+0x8]",
    "lea     r12, [rel data_14013c2c8]",
    "mov     rdi, qword [r12+rax*8]",
    "jmp     0x1400a32b9",
    "mov     rdx, rdi  {data_14010fd00, u\"unknown?\"}",
    "mov     eax, dword [rbx]",
    "mov     rdx, qword [r12+rax*8]",
    "jmp     0x1400a3165",
    "movzx   eax, word [r14]",
    "mov     ecx, 0x40",
    "mov     word [rsp+0x30 {Destination}], bp  {0x0}",
    "add     ax, word [r13]",
    "add     ax, word [rel data_14013c2e8]",
    "movzx   edx, ax",
    "mov     word [rsp+0x32 {var_46_2}], ax",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rsp+0x38 {var_40_2}], rax",
    "cmp     rax, rbp",
    "je      0x1400a33ae",
    "cmp     dword [rbx+0x8], 0x4",
    "lea     rcx, [rel data_14010fd18]",
    "lea     rax, [rel data_14010fd30]  {u\"- %u - \"}",
    "cmovb   rax, rcx  {data_14010fd18, u\" - %s - \"}",
    "mov     rdx, rdi",
    "mov     rcx, rax",
    "call    sub_14000c030",
    "mov     edx, dword [rbx+0xc]",
    "lea     rdi, [rbx+0x10]",
    "mov     rcx, rdi",
    "mov     r8d, 0x1",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "cmp     dword [rbx+0x8], 0x2",
    "jne     0x1400a33ae",
    "add     rsi, 0x18",
    "add     rbx, 0x18",
    "sub     qword [rsp+0x80 {i_2}], 0x1",
    "jne     0x1400a3141",
    "xor     eax, eax  {0x0}",
    "mov     ecx, 0x40",
    "mov     word [rsp+0x30 {Destination}], ax  {0x0}",
    "movzx   eax, word [r14]",
    "add     ax, word [r13]",
    "add     ax, word [rel data_14013c2e8]",
    "movzx   edx, ax",
    "mov     word [rsp+0x32 {var_46_1}], ax",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rsp+0x38 {var_40_1}], rax",
    "test    rax, rax",
    "je      0x1400a3263",
    "cmp     dword [rbx], 0x4",
    "lea     rax, [rel data_14010fd18]",
    "mov     rcx, r15  {data_14010fd30, u\"- %u - \"}",
    "cmovb   rcx, rax  {data_14010fd18, u\" - %s - \"}",
    "call    sub_14000c030",
    "mov     edx, dword [rbx+0x4]",
    "mov     rcx, qword [rbx+0x8]",
    "mov     r8d, 0x1",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "cmp     dword [rbx], 0x2",
    "jne     0x1400a3263",
    "lea     rcx, [rsp+0x30 {Destination}]",
    "mov     rdx, r14",
    "call    RtlAppendUnicodeStringToString",
    "lea     rdx, [rel data_14013c2e8]",
    "lea     rcx, [rsp+0x30 {Destination}]",
    "call    RtlAppendUnicodeStringToString",
    "lea     rcx, [rsp+0x30 {Destination}]",
    "mov     rdx, r13",
    "call    RtlAppendUnicodeStringToString",
    "movzx   r11d, word [rbx+0xc]",
    "mov     qword [rsp+0x48 {var_30_2}], rdi",
    "mov     word [rsp+0x42 {var_36_2}], r11w",
    "mov     word [rsp+0x40 {var_38}], r11w",
    "lea     rbx, [rsp+0x20 {var_58}]",
    "mov     ebp, 0x3",
    "lea     rcx, [rel data_14010fcf0]  {u\"    * \"}",
    "call    sub_14000c030",
    "mov     rcx, rsi",
    "call    sub_1400130c0",
    "cmp     dword [rbx], 0x4",
    "jae     0x1400a3162",
    "jmp     0x1400a33ae",
    "lea     rcx, [rsp+0x30 {Destination}]",
    "mov     rdx, r14",
    "call    RtlAppendUnicodeStringToString",
    "lea     rdx, [rel data_14013c2e8]",
    "lea     rcx, [rsp+0x30 {Destination}]",
    "call    RtlAppendUnicodeStringToString",
    "lea     rcx, [rsp+0x30 {Destination}]",
    "mov     rdx, r13",
    "call    RtlAppendUnicodeStringToString",
    "movzx   r11d, word [rbx+0x4]",
    "mov     rax, qword [rbx+0x8]",
    "mov     word [rsp+0x42 {var_36_1}], r11w",
    "mov     word [rsp+0x40 {var_38}], r11w",
    "mov     qword [rsp+0x48 {var_30_1}], rax",
    "lea     r15, [rsp+0x20 {var_58}]",
    "mov     r14, rbp  {0x3}",
    "mov     ecx, dword [rbx]",
    "lea     r8, [rsp+0x30 {Destination}]",
    "lea     rdx, [rsp+0x40 {var_38}]",
    "mov     r9d, 0x1000",
    "call    sub_140096420",
    "add     rbx, 0x4",
    "sub     rbp, 0x1",
    "jne     0x1400a3382",
    "mov     rcx, qword [rsp+0x38 {var_40_2}]",
    "call    qword [rel LocalFree]",
    "mov     ecx, dword [r15]",
    "lea     r8, [rsp+0x30 {Destination}]",
    "lea     rdx, [rsp+0x40 {var_38}]",
    "mov     r9d, 0x1000",
    "call    sub_140096420",
    "add     r15, 0x4",
    "sub     r14, 0x1",
    "jne     0x1400a3227",
    "mov     rcx, qword [rsp+0x38 {var_40_1}]",
    "call    qword [rel LocalFree]",
    "mov     r14, qword [rsp+0xa0 {arg5}]",
    "lea     r15, [rel data_14010fd30]  {u\"- %u - \"}"
  ],
  "high_level_IL": [
    "int16_t* Source = arg5",
    "void* rsi = arg1",
    "uint64_t i_4 = zx.q(arg2)",
    "int32_t var_58 = 0x12",
    "int32_t var_54 = 0x11",
    "int32_t var_50 = 0x17",
    "int64_t rdx_1 = sub_14000c030(u\" [%s] %wZ -> %wZ\\n\", arg4)",
    "int16_t Destination",
    "int16_t var_38",
    "if (rsi == 0)",
    "if (arg3 != 0)",
    "sub_14000c030(u\"    * \", rdx_1)",
    "sub_1400130c0(arg3)",
    "wchar16 const* const rdi",
    "if (arg3->__offset(0x8).d u>= 4)",
    "rdi = u\"unknown?\"",
    "rdi = (&data_14013c2c8)[zx.q(arg3->__offset(0x8).d)]",
    "wchar16 const* const rax_5 = u\"- %u - \"",
    "if (arg3->__offset(0x8).d u< 4)",
    "rax_5 = u\" - %s - \"",
    "sub_14000c030(rax_5, rdi)",
    "rdx_1 = sub_14000c030(U\"\\n\", sub_140012f68(&arg3[2], zx.q(arg3->__offset(0xc).d), 1))",
    "if (arg3->__offset(0x8).d == 2)",
    "int16_t rax_6 = *Source",
    "Destination = 0",
    "rax_6 = rax_6 + arg6->Length + data_14013c2e8",
    "int16_t var_46_2 = rax_6",
    "HLOCAL hMem_1",
    "hMem_1, rdx_1 = LocalAlloc(LMEM_ZEROINIT, zx.q(rax_6))",
    "if (hMem_1 != 0)",
    "RtlAppendUnicodeStringToString(&Destination, Source)",
    "RtlAppendUnicodeStringToString(&Destination, &data_14013c2e8)",
    "RtlAppendUnicodeStringToString(&Destination, arg6)",
    "int16_t r11_2 = arg3->__offset(0xc).w",
    "void* var_30_2 = &arg3[2]",
    "int16_t var_36_2 = r11_2",
    "var_38 = r11_2",
    "int32_t* rbx_2 = &var_58",
    "int64_t i_3 = 3",
    "int64_t i",
    "sub_140096420(*rbx_2, &var_38, &Destination, 0x1000)",
    "rbx_2 = &rbx_2[1]",
    "i = i_3",
    "i_3 -= 1",
    "do while (i != 1)",
    "rdx_1 = LocalFree(hMem_1)",
    "if (i_4.d u> 0)",
    "i_2 = i_4",
    "int32_t* rbx_1 = rsi + 8",
    "uint64_t i_1",
    "sub_14000c030(u\"    * \", rdx_1)",
    "sub_1400130c0(rsi)",
    "wchar16 const* const rdx_2",
    "if (*rbx_1 u>= 4)",
    "rdx_2 = u\"unknown?\"",
    "rdx_2 = (&data_14013c2c8)[zx.q(*rbx_1)]",
    "wchar16 const* const rcx_1 = u\"- %u - \"",
    "if (*rbx_1 u< 4)",
    "rcx_1 = u\" - %s - \"",
    "sub_14000c030(rcx_1, rdx_2)",
    "rdx_1 = sub_14000c030(U\"\\n\", sub_140012f68(*(rbx_1 + 8), zx.q(rbx_1[1]), 1))",
    "if (*rbx_1 == 2)",
    "Destination = 0",
    "int16_t rax_2 = *Source + arg6->Length + data_14013c2e8",
    "int16_t var_46_1 = rax_2",
    "HLOCAL hMem",
    "hMem, rdx_1 = LocalAlloc(LMEM_ZEROINIT, zx.q(rax_2))",
    "if (hMem != 0)",
    "RtlAppendUnicodeStringToString(&Destination, Source)",
    "RtlAppendUnicodeStringToString(&Destination, &data_14013c2e8)",
    "RtlAppendUnicodeStringToString(&Destination, arg6)",
    "int16_t r11_1 = rbx_1[1].w",
    "int64_t rax_3 = *(rbx_1 + 8)",
    "int16_t var_36_1 = r11_1",
    "var_38 = r11_1",
    "int64_t var_30_1 = rax_3",
    "int32_t* r15_1 = &var_58",
    "int64_t j_1 = 3",
    "int64_t j",
    "sub_140096420(*r15_1, &var_38, &Destination, 0x1000)",
    "r15_1 = &r15_1[1]",
    "j = j_1",
    "j_1 -= 1",
    "do while (j != 1)",
    "rdx_1 = LocalFree(hMem)",
    "Source = arg5",
    "rsi += 0x18",
    "rbx_1 = &rbx_1[6]",
    "i_1 = i_2",
    "i_2 -= 1",
    "do while (i_1 != 1)",
    "return sub_14000c030(U\"\\n\", rdx_1)"
  ]
}