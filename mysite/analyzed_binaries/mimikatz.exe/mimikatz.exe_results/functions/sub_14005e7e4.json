{
  "address": "0x14005e7e4",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "64-bit execution via heavens gate/d7fcc2def38746b09a33d0c7032e9b82",
    "allocate or change RWX memory/e5d60c23edee4683a25ac882b99be25c/be08ffa5ddd942e8ab0706a663121e4b",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check Internet connectivity via WinINet/e5536f56688049548c83e5cf372d25ac",
    "check OS version/e331473c09f0419eb22f4786f6872060",
    "contain loop",
    "hash data with CRC32/dc8063c9cb1c41b9a5bafe66f5117ac4",
    "empty recycle bin quietly/a401764de4c44240956dc7f3c78baebd",
    "encrypt data using chaskey/4b6f9d91d05f46dd9aa3662f80cb6278",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/5f4855375d6b45e9bd6b2a189e856211",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "hash data using djb2/1485ed9954f84e3481d22b64bc4cfca7",
    "decompress data using aPLib/88da69e00a6e49ce8c080be3a0beeb89",
    "PEB access/2627ea084e2f4bea91f14e6cd276939a",
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "check OS version/0dbc6332c9724004b686b44a39c40b94",
    "hash data using jshash/79354a2ef36a4036b42806ea4b41f8bd",
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/dc118f3b61184df4a511ed4919cf656f",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "check OS version/fa26a21322994ec4bdbe5020e62bd777",
    "encrypt data using Curve25519/4be2ead1b08a4c049dae9c8694881d76",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/1a6c04bed22346cdaee8fbdaa0f123d3",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/5f4c97f31ce341008ea23885a97305d8"
  ],
  "disassembly": [
    "mov     rax, rsp {__return_addr}",
    "mov     qword [rax+0x10 {__saved_rbx}], rbx",
    "mov     qword [rax+0x20 {arg_20}], r9",
    "mov     qword [rax+0x18 {arg_18}], r8",
    "mov     qword [rax+0x8 {j_27}], rcx",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x140",
    "mov     r12, qword [rcx]",
    "mov     rbx, r8",
    "mov     r13, rdx",
    "mov     qword [rsp+0xd0 {var_a8}], r12",
    "mov     r14, rcx",
    "call    sub_140065300",
    "xor     ecx, ecx  {0x0}",
    "mov     rbp, rax",
    "cmp     rax, rcx",
    "je      0x1400615b3",
    "mov     rbx, qword [rsp+0x188 {__saved_rbx}]",
    "add     rsp, 0x140",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "or      dword [rax+0xc8], 0x40",
    "mov     rax, qword [r14]",
    "lea     edi, [rcx+0x2]",
    "mov     dword [r14+0x38], edi  {0x2}",
    "cmp     dword [rbx+0x8], ecx",
    "jbe     0x14005e869",
    "movzx   ebx, byte [rax+0xb4]",
    "lea     r9, [rsp+0x68 {j_8}]",
    "mov     r8, rbx",
    "mov     rdx, r13",
    "mov     rcx, r14",
    "mov     qword [rsp+0x20 {var_158_1}], rax",
    "call    sub_14004e6f0",
    "mov     r13, qword [rsp+0x68 {j_8}]",
    "xor     ecx, ecx  {0x0}",
    "mov     ebx, eax",
    "jmp     0x14005e870",
    "movsxd  rax, ebx",
    "mov     esi, 0x1",
    "mov     r15, rax",
    "mov     qword [rsp+0x68 {j_8}], rax",
    "mov     rax, qword [r12+0x20]",
    "shl     r15, 0x5",
    "mov     qword [rsp+0x78 {var_100_1}], rax",
    "mov     qword [rsp+0xb0 {var_c8_1}], r15",
    "cmp     ebx, esi",
    "jne     0x14005e8c5",
    "cmp     ebx, ecx",
    "jl      0x1400615b3",
    "mov     rdx, r13",
    "mov     rcx, r12",
    "call    sub_14004e64c",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rsp+0xe8 {var_90_1}], rax",
    "cmp     rax, rcx",
    "je      0x1400615b3",
    "mov     rdx, qword [r14]",
    "mov     rax, qword [rdx+0x20]",
    "cmp     qword [rax+0x28], rcx",
    "jne     0x14005e8bb",
    "cmp     dword [rsp+0x1a0 {arg5}], ecx",
    "mov     rcx, r12",
    "je      0x14005e905",
    "mov     eax, ecx  {0x0}",
    "mov     rcx, r14",
    "call    sub_140053828",
    "xor     ecx, ecx  {0x0}",
    "jmp     0x14005e8bd",
    "mov     rdx, qword [rsp+0x198 {arg_20}]",
    "call    sub_14004e64c",
    "mov     r8, qword [rsp+0x198 {arg_20}]",
    "lea     rdx, [rel data_1400f648c]",
    "call    _printf_p_l",
    "jmp     0x14005e912",
    "cmp     eax, ecx",
    "jne     0x1400615b3",
    "mov     rax, rcx  {0x0}",
    "mov     rax, qword [rsp+0x78 {var_100_1}]",
    "mov     rax, qword [r15+rax]",
    "jmp     0x14005e93a",
    "mov     r13, rax",
    "mov     qword [rsp+0xc0 {var_b8_1}], rax",
    "mov     rax, qword [rsp+0x190 {arg_18}]",
    "xor     ecx, ecx  {0x0}",
    "cmp     dword [rax+0x8], ecx",
    "jbe     0x14005e937",
    "mov     rdx, qword [rsp+0xe8 {var_90_1}]",
    "mov     rcx, r12",
    "call    sub_1400169a8",
    "xor     eax, eax  {0x0}",
    "cmp     r13, rax",
    "je      0x1400615b3",
    "mov     rax, qword [rsp+0xe8 {var_90_1}]",
    "mov     rdx, qword [rsp+0xa0 {var_d8_1}]",
    "mov     qword [rsp+0x108 {var_70}], rcx  {0x0}",
    "mov     qword [rsp+0x120 {var_58_1}], rcx  {0x0}",
    "mov     qword [rsp+0x110 {result_1}], rax",
    "mov     qword [rsp+0x118 {var_60_1}], r13",
    "lea     r8d, [rcx+0xe]",
    "mov     dword [r12+0x228], ecx  {0x0}",
    "lea     r9, [rsp+0x108 {var_70}]",
    "mov     rcx, r12",
    "call    sub_1400851c8",
    "xor     ecx, ecx  {0x0}",
    "mov     dword [rsp+0x70 {var_108_1}], eax",
    "cmp     eax, ecx",
    "jne     0x14005ea09",
    "mov     r8, qword [rsp+0xe8 {var_90_1}]",
    "mov     r9, r13",
    "mov     edx, 0x13",
    "mov     rcx, r14",
    "mov     qword [rsp+0xa0 {var_d8_1}], rax",
    "mov     qword [rsp+0x20 {var_158_2}], rax",
    "call    sub_14004da74",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x140061591",
    "mov     rdx, r13",
    "mov     rcx, r12",
    "call    sub_1400169a8",
    "cmp     eax, 0xc",
    "je      0x14005ea48",
    "mov     edx, esi  {0x1}",
    "mov     rcx, rbp",
    "call    sub_140033bb0",
    "mov     r9, qword [rsp+0x108 {var_70}]",
    "or      r15, 0xffffffffffffffff",
    "xor     r8d, r8d  {0x0}",
    "xor     edx, edx  {0x0}",
    "mov     rcx, rbp",
    "mov     qword [rsp+0x20 {var_158}], r15  {-0x1}",
    "call    sub_140033c58",
    "mov     rdx, qword [rsp+0x108 {var_70}]",
    "mov     rcx, rbp",
    "call    sub_14005e650",
    "mov     rcx, qword [rsp+0x108 {var_70}]",
    "call    sub_140016950",
    "jmp     0x140061591",
    "mov     rcx, qword [rsp+0xe8 {var_90_1}]",
    "call    sub_14005e6e0",
    "mov     rdx, rax",
    "mov     qword [rsp+0x80 {var_f8_1}], rax",
    "xor     eax, eax  {0x0}",
    "cmp     rdx, rax",
    "je      0x140061591",
    "mov     r8, qword [rsp+0x108 {var_70}]",
    "cmp     r8, rcx",
    "je      0x14005ea3b",
    "test    byte [rdx+0x9], sil",
    "je      0x14005ea8d",
    "add     dword [r14+0x30], esi",
    "mov     dword [r14+0x18], eax",
    "jmp     0x140061591",
    "lea     rdx, [rel data_1400f38e8]",
    "mov     rcx, r14",
    "call    sub_1400191b8",
    "mov     rcx, qword [rsp+0x108 {var_70}]",
    "call    sub_140016950",
    "mov     eax, dword [rsp+0x70 {var_108_1}]",
    "test    byte [rdx+0x9], dil",
    "jne     0x14005eaae",
    "mov     rcx, r14",
    "call    sub_140062358",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x140061591",
    "movzx   ecx, byte [rdx+0x8]",
    "cmp     ecx, 0x14",
    "jg      0x140060925",
    "test    byte [rdx+0x9], 0x4",
    "je      0x14005ea9e",
    "mov     rdx, qword [rsp+0x80 {var_f8_1}]",
    "xor     eax, eax  {0x0}",
    "cmp     ecx, 0x1f",
    "jg      0x140061044",
    "je      0x1400607f8",
    "mov     rcx, rbp",
    "call    sub_14005e550",
    "mov     rdx, qword [rsp+0x80 {var_f8_1}]",
    "cmp     r13, rax",
    "jne     0x14005eaae",
    "sub     ecx, 0x20",
    "je      0x140061547",
    "je      0x140061037",
    "xor     r8d, r8d  {0x0}",
    "cmp     r13, r8",
    "jne     0x140060806",
    "mov     eax, 0xa",
    "cmp     ecx, eax",
    "jg      0x14005efbf",
    "xor     r15d, r15d  {0x0}",
    "cmp     r13, r15",
    "je      0x140061571",
    "sub     ecx, esi",
    "je      0x1400614ec",
    "mov     rcx, r12",
    "call    sub_140082ad0",
    "jmp     0x140061591",
    "sub     ecx, 0x15",
    "je      0x140060fcd",
    "mov     rcx, r13",
    "call    sub_140019074",
    "mov     r14d, r8d  {0x0}",
    "mov     ecx, eax",
    "mov     dword [rsp+0x180 {j_27}], eax",
    "lea     rax, [rel data_1400d84c8]",
    "or      r14d, 0xffffffff  {0xffffffff}",
    "jmp     0x140060882",
    "sub     ecx, 0xc",
    "je      0x140060742",
    "je      0x14005ef42",
    "call    sub_1400823f0",
    "mov     rdx, qword [rel data_140140330]",
    "or      r15, 0xffffffffffffffff",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "cmovne  rdx, r15  {-0x1}",
    "lea     rdx, [rsp+0x180 {j_27}]",
    "mov     rcx, r13",
    "call    sub_140019980",
    "cmp     eax, r15d",
    "jne     0x140061571",
    "xor     eax, eax  {0x0}",
    "cmp     r13, rax",
    "jne     0x140061505",
    "sub     ecx, esi",
    "je      0x1400612df",
    "mov     rax, qword [rsp+0x78 {var_100_1}]",
    "xor     ebx, ebx  {0x0}",
    "mov     qword [rsp+0x180 {j_27}], 0xfffffffffffffffe",
    "mov     rax, qword [r15+rax+0x8]",
    "mov     rcx, qword [rax+0x8]",
    "mov     rdi, qword [rcx]",
    "cmp     r13, rbx",
    "je      0x14006102b",
    "sub     ecx, edi",
    "je      0x140060eb7",
    "mov     r14d, r15d  {0xffffffff}",
    "mov     rdx, qword [rax]",
    "cmp     rdx, r8",
    "je      0x140060866",
    "mov     rax, qword [rsp+0x190 {arg_18}]",
    "cmp     dword [rax+0x8], r8d",
    "jne     0x140060896",
    "xor     ecx, ecx  {0x0}",
    "cmp     r13, rcx",
    "jne     0x140060775",
    "sub     ecx, esi",
    "je      0x1400601d7",
    "xor     r8d, r8d  {0x0}",
    "mov     dword [r14+0x38], 0x3",
    "cmp     dword [r12+0x28], r8d",
    "mov     edi, r8d  {0x0}",
    "jle     0x140061591",
    "xor     r11d, r11d  {0x0}",
    "cmp     ecx, r11d",
    "je      0x14005eecc",
    "mov     rcx, qword [rsp+0x180 {j_27}]",
    "call    sub_140016724",
    "cmp     byte [r12+0x5f], al",
    "jne     0x140061518",
    "mov     rax, qword [rsp+0x78 {var_100_1}]",
    "movzx   eax, byte [r15+rax+0x10]",
    "sub     eax, esi",
    "jmp     0x14005ec93",
    "xor     eax, eax  {0x0}",
    "cmp     r13, rax",
    "je      0x140061591",
    "sub     ecx, esi",
    "je      0x14006125d",
    "mov     rdx, qword [rdi+0xc8]",
    "jmp     0x140061589",
    "lea     rdx, [rsp+0x180 {j_27}]",
    "mov     rcx, r13",
    "call    sub_140019980",
    "mov     rdx, qword [rsp+0x180 {j_27}]",
    "mov     rax, qword [rdi+0x120]",
    "or      r15, 0xffffffffffffffff",
    "cmp     rdx, r15",
    "cmovl   rdx, r15  {-0x1}",
    "mov     qword [rdi+0xc8], rdx",
    "cmp     rax, rbx",
    "je      0x14006102b",
    "xor     r10d, r10d  {0x0}",
    "or      r15, 0xffffffffffffffff",
    "lea     rbx, [rel data_1400f63d4]",
    "lea     r11, [rel data_1400f63c8]",
    "cmp     r13, r10",
    "je      0x140060efe",
    "sub     ecx, esi",
    "je      0x140060e25",
    "cmp     r14d, r15d",
    "jne     0x140060896",
    "mov     eax, dword [r12+0x30]",
    "bt      rax, 0x1c",
    "jae     0x140060896",
    "mov     r8d, ecx",
    "mov     rcx, r13",
    "call    sub_1400192e8",
    "xor     r8d, r8d  {0x0}",
    "cmp     eax, r8d",
    "je      0x140060869",
    "mov     edi, dword [r12+0x28]",
    "movsxd  rcx, ebx",
    "sub     edi, esi",
    "mov     qword [rsp+0x180 {j_27}], rcx",
    "movsxd  r15, edi",
    "js      0x140060918",
    "mov     ebx, r8d  {0x0}",
    "mov     dword [rax+0x8], esi  {0x1}",
    "mov     rbx, qword [r12+0x20]",
    "mov     rax, qword [rbx+0x18]",
    "test    byte [rax+0x72], sil",
    "je      0x14006078e",
    "mov     rcx, r14",
    "call    sub_140062358",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x140061591",
    "mov     eax, dword [r14+0x38]",
    "xor     r8d, r8d  {0x0}",
    "lea     ecx, [rax+0x1]",
    "add     eax, 0x5",
    "mov     dword [rsp+0x74 {var_104_2}], eax",
    "inc     eax",
    "mov     dword [rsp+0xa8 {var_d0_2}], ecx",
    "mov     dword [r14+0x38], eax",
    "mov     rax, qword [r12+0x20]",
    "mov     rcx, qword [r15+rax+0x18]",
    "mov     rdx, qword [rcx+0x10]",
    "cmp     rdx, r8",
    "je      0x140061591",
    "sub     ecx, esi",
    "je      0x140060033",
    "mov     rbx, r8  {0x0}",
    "mov     r14d, dword [rdx+0x10]",
    "mov     ecx, ebx",
    "shl     esi, cl",
    "or      dword [rbp+0xcc], esi",
    "cmp     r13, r11",
    "je      0x14005ef16",
    "sub     ecx, esi",
    "je      0x14005edd5",
    "cmp     ebx, esi",
    "je      0x140061591",
    "lea     rdx, [rel data_1400f64b8]  {\"Safety level may not be changed \u2026\"}",
    "jmp     0x140061212",
    "movsxd  rdx, eax",
    "jmp     0x140061589",
    "mov     r9, qword [rsp+0xa0 {var_d8_1}]",
    "mov     r8, r13",
    "mov     edx, edi  {0x2}",
    "mov     rcx, r14",
    "call    sub_14004df10",
    "xor     r9d, r9d  {0x0}",
    "mov     rbx, rax",
    "mov     qword [rsp+0xb0 {var_c8_4}], rax",
    "cmp     rax, r9",
    "je      0x140061591",
    "xor     r11d, r11d  {0x0}",
    "cmp     r13, r11",
    "jne     0x140061270",
    "sub     ecx, esi",
    "je      0x1400611cb",
    "mov     rcx, rbp",
    "call    sub_14005e5f8",
    "mov     qword [rax+0x20], rdx",
    "mov     edx, r15d  {0xffffffff}",
    "mov     rdx, r11  {data_1400f63c8, \"exclusive\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "jne     0x140060ee8",
    "mov     edx, ebx",
    "mov     rcx, r14",
    "call    sub_1400538c0",
    "add     dword [r14+0x38], esi",
    "mov     rax, qword [rsp+0xe8 {var_90_1}]",
    "movzx   eax, byte [rax]",
    "mov     r14d, dword [r14+0x38]",
    "lea     r15, [rel __dos_header]",
    "cmp     byte [rax+r15+0xd6400], 0x70",
    "jne     0x140060e61",
    "sub     ecx, esi",
    "je      0x140060d29",
    "mov     r14d, r15d  {0xffffffff}",
    "cmp     r14d, edi",
    "jne     0x14006087d",
    "mov     rax, qword [rsp+0x68 {j_8}]",
    "mov     ecx, dword [rsp+0x180 {j_27}]",
    "add     r14d, esi",
    "add     rax, 0x8",
    "jmp     0x140060821",
    "mov     dword [rsp+0x20 {var_158}], r8d  {0x0}",
    "mov     r8d, esi  {0x1}",
    "jmp     0x140060ea2",
    "mov     r13, qword [rsp+0x190 {arg_18}]",
    "mov     rbx, r15",
    "shl     rbx, 0x5",
    "mov     rax, qword [rel data_1400d8530]  {data_1400f1dfc, \"UTF8\"}",
    "lea     r11, [rel data_1400d8530]",
    "cmp     rax, rcx",
    "je      0x1400607e1  {0x0}",
    "test    byte [rax+0x72], 0x4",
    "je      0x140061591",
    "mov     rax, qword [r14]",
    "lea     r11, [rel data_1400d8530]",
    "movzx   edx, byte [rax+0x5e]",
    "add     rdx, rdx",
    "mov     rdx, qword [r11+rdx*8]",
    "jmp     0x140060fc0",
    "or      r15, 0xffffffffffffffff",
    "mov     eax, 0xfff0bdc0",
    "xor     eax, eax  {0x0}",
    "cmp     r13, rax",
    "je      0x140061591",
    "sub     ecx, esi",
    "je      0x14005ffaf",
    "add     edi, esi",
    "add     rbx, 0x20",
    "cmp     edi, dword [r12+0x28]",
    "jl      0x14005ef5e",
    "mov     rax, qword [rax+0x8]",
    "mov     rcx, qword [rax]",
    "lea     rax, [rel data_1400f386c]",
    "cmp     byte [rcx+0x13], r8b",
    "jne     0x14005ef88",
    "xor     r9d, r9d",
    "lea     r8, [rel data_1400d85c8]",
    "mov     rcx, rbp",
    "lea     edx, [r9+0x3]",
    "call    sub_1400328e8",
    "mov     dword [rax+0x4], ebx",
    "mov     dword [rax+0x1c], ebx",
    "mov     dword [rax+0x24], r14d",
    "and     dword [rbp+0xc8], 0xffffffbf",
    "jmp     0x140061591",
    "test    byte [rdx+0x9], 0x8",
    "jne     0x14005ef16",
    "mov     rax, qword [rsp+0x78 {var_100_1}]",
    "mov     r15, qword [r15+rax+0x8]",
    "cmp     r13, r11",
    "jne     0x14005ee02",
    "sub     ecx, esi",
    "je      0x14005ed48",
    "mov     r8b, sil  {0x1}",
    "xor     edx, edx  {0x0}",
    "mov     rcx, r13",
    "call    sub_14005e430",
    "mov     dl, al",
    "mov     rax, qword [rsp+0x78 {var_100_1}]",
    "add     edx, esi",
    "mov     byte [r15+rax+0x11], sil  {0x1}",
    "and     edx, 0x7",
    "cmove   edx, esi  {0x1}",
    "mov     byte [r15+rax+0x10], dl",
    "jmp     0x14005ecf7",
    "mov     rcx, r14",
    "call    sub_1400191b8",
    "jmp     0x140061591",
    "mov     r8, qword [rax+0x70]",
    "mov     edx, 0xfff0bdc0",
    "cmp     r8, r9",
    "je      0x140061344",
    "cmp     byte [r13], 0x30",
    "jl      0x140061288",
    "movzx   edx, byte [r12+0x60]",
    "jmp     0x140061589",
    "xor     ecx, ecx  {0x0}",
    "cmp     r13, rcx",
    "jne     0x1400611de",
    "sub     ecx, esi",
    "je      0x140061181",
    "cmp     edx, r10d",
    "mov     rcx, qword [rsp+0x78 {var_100_1}]",
    "mov     rax, qword [rsp+0xb0 {var_c8_1}]",
    "mov     rax, qword [rax+rcx+0x8]",
    "mov     rcx, qword [rax+0x8]",
    "mov     rax, qword [rcx]",
    "jl      0x140060fb3",
    "cmp     edx, r15d",
    "jne     0x140060f21",
    "mov     rdx, rbx  {data_1400f63d4, \"normal\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "xor     r10d, r10d  {0x0}",
    "mov     edx, r10d  {0x0}",
    "cmp     eax, r10d",
    "je      0x140060f01",
    "mov     edx, esi  {0x1}",
    "jmp     0x140060f01",
    "mov     rcx, r13",
    "call    sub_140019bc0",
    "mov     edi, eax",
    "xor     eax, eax  {0x0}",
    "cmp     edi, eax",
    "jge     0x140060e82",
    "xor     eax, eax  {0x0}",
    "mov     edx, 0xa6",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "jmp     0x140060e8b",
    "xor     eax, eax  {0x0}",
    "cmp     r13, rax",
    "je      0x140060ddc",
    "sub     ecx, esi",
    "je      0x140060cf3",
    "lea     rdx, [rel data_1400d84f8]",
    "or      r15, 0xffffffffffffffff",
    "mov     qword [rsp+0x68 {j_8}], rax",
    "cmp     rax, rdx",
    "je      0x140060866",
    "mov     r9d, esi  {0x1}",
    "sub     edi, esi",
    "sub     r15, rsi",
    "sub     rbx, 0x20",
    "cmp     edi, r8d",
    "jge     0x1400608bc",
    "cmp     r15, rcx",
    "je      0x1400608d3",
    "lea     rdx, [rel data_1400f6600]  {\"unsupported encoding: %s\"}",
    "mov     r8, r13",
    "mov     rcx, r14",
    "call    sub_1400191b8",
    "jmp     0x140061591",
    "mov     rdx, rax",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "je      0x1400607c0",
    "mov     rcx, rbp",
    "call    sub_14005e650",
    "jmp     0x140061591",
    "mov     rcx, qword [rdx+0x10]",
    "mov     rdx, qword [rdx]",
    "mov     qword [rsp+0x80 {var_f8_3}], rcx",
    "mov     r9, rbx",
    "mov     r8, r13",
    "xor     edx, edx  {0x0}",
    "mov     rcx, r14",
    "call    sub_14004df10",
    "xor     r8d, r8d",
    "mov     rcx, rax",
    "mov     qword [rsp+0x80 {var_f8_3}], rax",
    "mov     eax, 0xfff0bdc0",
    "mov     rdx, r8  {0x0}",
    "jmp     0x140060259",
    "mov     r8, qword [rsp+0xa0 {var_d8_1}]",
    "mov     rdx, r13",
    "mov     rcx, r12",
    "call    sub_14004de30",
    "xor     r8d, r8d  {0x0}",
    "mov     rbx, rax",
    "cmp     rax, r8",
    "je      0x140061591",
    "mov     dword [r14+0x38], edi  {0x2}",
    "lea     rbx, [rel data_1401400a0]",
    "xor     ecx, ecx  {0x0}",
    "sub     ecx, esi",
    "je      0x14005fee5",
    "mov     rdx, qword [r12+0x20]",
    "mov     rax, qword [rbx+rdx+0x8]",
    "cmp     rax, r8",
    "je      0x14005efad",
    "jmp     0x140061591",
    "mov     qword [rsp+0x28 {var_150_1}], rax",
    "mov     rax, qword [rbx+rdx]",
    "lea     r8, [rel data_1400f6520]",
    "mov     r9d, edi",
    "mov     edx, esi  {0x1}",
    "mov     rcx, rbp",
    "mov     qword [rsp+0x20 {var_158_4}], rax",
    "call    sub_140032430",
    "xor     r8d, r8d  {0x0}",
    "mov     rax, qword [rcx+0xd0]",
    "lea     r8, [rel data_1400d85c0]",
    "xor     r9d, r9d  {0x0}",
    "mov     edx, edi  {0x2}",
    "mov     rcx, rbp",
    "call    sub_1400328e8",
    "mov     rcx, r13",
    "mov     dword [rax+0x4], ebx",
    "mov     dword [rax+0x1c], ebx",
    "mov     dword [rax+0x20], r14d",
    "mov     rdi, rax",
    "call    sub_140019bc0",
    "mov     dword [rdi+0x24], eax",
    "jmp     0x140061591",
    "lea     rdx, [rel data_1400f63dc]  {\"none\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "cmp     eax, r11d",
    "jne     0x14005ee1b",
    "mov     rax, qword [r15+0x8]",
    "cmp     byte [rax+0x21], r11b",
    "je      0x14005ec7d",
    "cmp     r13, r11",
    "jne     0x14005ed73",
    "sub     ecx, edi",
    "je      0x14005ed04",
    "mov     rcx, r12",
    "call    sub_14005e68c",
    "jmp     0x140061591",
    "mov     rcx, qword [rbx+0x10]",
    "mov     qword [rsp+0x68 {j_8}], rcx",
    "cmp     rcx, r9",
    "je      0x14006136a",
    "mov     rcx, qword [r12+0x20]",
    "mov     edx, r9d  {0x0}",
    "cmp     qword [rcx+0x18], r8",
    "je      0x140061344",
    "lea     rdx, [rel data_1400f22fc]  {\"file\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "cmp     eax, r11d",
    "je      0x1400612b5",
    "cmp     byte [r13], 0x32",
    "jg      0x140061288",
    "cmp     byte [r13], cl",
    "je      0x14006121f",
    "mov     rdx, qword [rel data_140140388]",
    "jmp     0x140060fc0",
    "xor     eax, eax  {0x0}",
    "cmp     r13, rax",
    "je      0x1400611be",
    "sub     ecx, esi",
    "je      0x140061141",
    "movzx   eax, byte [rax+0x8]",
    "cmp     byte [rax+0x10], r10b",
    "jne     0x140060fb3",
    "cmp     ecx, r10d",
    "jne     0x140060f7a",
    "movzx   eax, byte [r12+0x63]",
    "jmp     0x140060fb7",
    "mov     rax, qword [rsp+0x190 {arg_18}]",
    "mov     ecx, dword [rax+0x8]",
    "cmp     ecx, r10d",
    "jne     0x140060f7a",
    "mov     dword [rsp+0x20 {var_158_2}], edi",
    "mov     edx, 0xa7",
    "cmp     edi, 0x80000000",
    "jne     0x140060e80",
    "mov     r9d, r14d",
    "mov     r8d, ebx",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "xor     eax, eax  {0x0}",
    "mov     r8d, r14d",
    "mov     dword [rsp+0x20 {var_158}], eax  {0x0}",
    "mov     rdx, qword [rsp+0xa0 {var_d8_1}]",
    "or      r15, 0xffffffffffffffff",
    "lea     r9, [rsp+0x180 {j_27}]",
    "lea     r8d, [r15+0x13]  {0x12}",
    "mov     rcx, r12",
    "mov     qword [rsp+0x180 {j_27}], r15  {-0x1}",
    "call    sub_1400851c8",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x140060e17",
    "lea     rdx, [rsp+0x180 {j_27}]",
    "mov     rcx, r13",
    "call    sub_140019980",
    "mov     rdx, qword [rsp+0x180 {j_27}]",
    "mov     rcx, qword [rsp+0x190 {arg_18}]",
    "xor     r8d, r8d  {0x0}",
    "cmp     rdx, r8",
    "cmovl   rdx, qword [rel data_14013d178]",
    "mov     qword [rsp+0x180 {j_27}], rdx",
    "cmp     dword [rcx+0x8], r8d",
    "jne     0x140060d75",
    "mov     dword [r14+0x38], esi  {0x1}",
    "mov     rdi, qword [r12+0x1c0]",
    "xor     ebx, ebx  {0x0}",
    "jmp     0x140060d1f",
    "sub     ecx, esi",
    "je      0x140060aa4",
    "mov     rax, qword [r12+0x20]",
    "cmp     qword [rbx+rax+0x8], r8",
    "je      0x140060902",
    "mov     r13, qword [rsp+0xc0 {var_b8_1}]",
    "mov     ecx, edi",
    "mov     eax, esi  {0x1}",
    "mov     r9d, esi  {0x1}",
    "shl     eax, cl",
    "mov     r8d, edi",
    "mov     edx, 0x7",
    "or      dword [rbp+0xcc], eax",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], r14d",
    "call    sub_140032364",
    "mov     rcx, qword [rsp+0x180 {j_27}]",
    "xor     r8d, r8d  {0x0}",
    "cmp     dword [r13+0x8], r8d",
    "jne     0x140060902",
    "mov     al, byte [r11+0x8]",
    "cmp     al, cl",
    "je      0x1400607cb",
    "add     r11, 0x10",
    "mov     rax, qword [r11]",
    "cmp     rax, rcx",
    "jne     0x1400607a1",
    "mov     eax, 0xfff0bdc0",
    "cmp     rdx, r8",
    "jne     0x140060215",
    "cmp     qword [rcx+0x20], r8",
    "je      0x14006072f",
    "mov     qword [rsp+0xe0 {var_98_2}], rdx",
    "cmp     rcx, r8",
    "je      0x14006072f",
    "mov     rdi, qword [rax+0x20]",
    "cmp     rdi, r8",
    "je      0x140061591",
    "cmp     rdi, rcx",
    "jne     0x14005ffc1",
    "xor     r15d, r15d  {0x0}",
    "cmp     r13, r15",
    "je      0x14005ff0e",
    "sub     ecx, esi",
    "je      0x14005fd27",
    "lea     rdx, [rel data_1400f63e4]  {\"full\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "cmp     eax, r11d",
    "jne     0x14005ee34",
    "mov     r14d, r11d  {0x0}",
    "jmp     0x14005ee64",
    "mov     eax, r11d  {0x0}",
    "jmp     0x14005ec93",
    "mov     al, byte [rax+0x22]",
    "neg     al",
    "sbb     eax, eax",
    "neg     eax",
    "add     eax, esi",
    "jmp     0x14005ec93",
    "mov     rdi, qword [rdx+0x10]",
    "cmp     byte [r12+0x5f], r11b",
    "jne     0x14005ed83",
    "mov     rcx, rbp",
    "call    sub_14005e550",
    "mov     rbx, qword [rsp+0x80 {var_f8_1}]",
    "mov     rdx, qword [rbx+0x10]",
    "test    qword [r12+0x30], rdx",
    "mov     edx, 0x0",
    "setne   dl",
    "jmp     0x140061589",
    "cmp     r13, r11",
    "jne     0x14005ed1c",
    "sub     ecx, esi",
    "je      0x14005ec70",
    "mov     rcx, r14",
    "mov     dword [r14+0x38], 0x7",
    "call    sub_1400538c0",
    "mov     rdx, rbx",
    "mov     rcx, r14",
    "call    sub_140050b50",
    "movsx   ecx, word [rbx+0x46]",
    "mov     rax, qword [rbx+0x8]",
    "xor     edx, edx  {0x0}",
    "cmp     ecx, edx",
    "mov     r8d, edx  {0x0}",
    "mov     dword [rsp+0x180 {j_27}], edx  {0x0}",
    "jle     0x140061591",
    "mov     eax, dword [rcx+0x64]",
    "and     al, 0x3",
    "cmp     al, dil",
    "je      0x140061365",
    "mov     rax, rcx",
    "add     rax, 0x18",
    "mov     rdi, qword [r14]",
    "movzx   eax, byte [rdi+0x60]",
    "cmp     eax, esi",
    "je      0x140061591",
    "lea     rdx, [rel data_1400f63fc]  {\"memory\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "neg     eax",
    "sbb     ecx, ecx",
    "not     ecx",
    "and     ecx, edi",
    "mov     esi, ecx",
    "movsx   esi, byte [r13]",
    "sub     esi, 0x30",
    "jmp     0x1400612b5",
    "cmp     byte [r12+0x60], sil",
    "ja      0x14006122e",
    "mov     rax, qword [r12]",
    "lea     r9, [rsp+0x180 {j_27}]",
    "mov     r8d, esi  {0x1}",
    "mov     rcx, rax",
    "mov     rdx, r13",
    "call    qword [rax+0x38]",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x14006120b",
    "movsxd  rdx, dword [r12+0xa8]",
    "jmp     0x140061589",
    "lea     rdx, [rsp+0x180 {j_27}]",
    "mov     rcx, r13",
    "call    sub_140019980",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x1400611be",
    "xor     ecx, ecx  {0x0}",
    "cmp     r13, rcx",
    "je      0x14006115c",
    "cmp     ecx, esi",
    "je      0x1400610a8",
    "mov     rcx, qword [rax+0x120]",
    "cmp     rcx, r10",
    "je      0x140060fb0",
    "cmp     dword [r12+0x28], edi",
    "mov     r8d, edi  {0x2}",
    "jle     0x140060f75",
    "cmp     eax, esi",
    "cmovne  r11, rbx  {data_1400f63d4, \"normal\"}",
    "mov     rdx, r11",
    "neg     edi",
    "mov     edi, 0x7fffffff",
    "jmp     0x140060e82",
    "cmp     eax, 0xc",
    "je      0x140061591",
    "mov     rdx, qword [rsp+0x180 {j_27}]",
    "jmp     0x140061589",
    "mov     eax, dword [r12+0x28]",
    "sub     eax, esi",
    "movsxd  rdi, eax",
    "cmp     rdi, r8",
    "jl      0x140060ddc",
    "mov     qword [r12+0x40], rdx",
    "cmp     rdi, rbx",
    "jne     0x140060d03",
    "xor     r8d, r8d  {0x0}",
    "cmp     r13, r8",
    "je      0x140060ac9",
    "sub     ecx, esi",
    "je      0x140060a47",
    "mov     byte [r12+0x5e], dil",
    "mov     rax, qword [rbx+0x18]",
    "mov     byte [rax+0x71], dil",
    "movzx   edi, al",
    "jmp     0x1400607d8",
    "mov     rbx, qword [rsp+0xa0 {var_d8_1}]",
    "cmp     r13, r8",
    "je      0x14006024a",
    "jmp     0x140061591",
    "mov     rdx, qword [rcx+0x70]",
    "mov     dword [rsp+0x60 {var_118_1}], eax  {0xfff0bdc0}",
    "mov     ecx, eax  {0xfff0bdc0}",
    "cmp     rdx, r8",
    "je      0x1400602a8",
    "mov     rdx, qword [rax+0x70]",
    "mov     ecx, 0xfff0bdc0",
    "cmp     rdx, r8",
    "je      0x140060098",
    "bt      dword [rdi+0x4], 0x12",
    "jb      0x14005ffe3",
    "lea     rax, [rel data_140140158]",
    "add     rbx, 0x8",
    "cmp     rbx, rax",
    "jl      0x14005ffbc",
    "mov     edi, 0x7fffffff",
    "lea     rdx, [rsp+0x180 {j_27}]",
    "mov     rcx, r13",
    "call    sub_140019a68",
    "cmp     eax, r15d",
    "je      0x14005ff0e",
    "xor     eax, eax  {0x0}",
    "cmp     r13, rax",
    "je      0x140061591",
    "sub     ecx, esi",
    "je      0x14005fc1f",
    "lea     rdx, [rel data_1400f63f0]  {\"incremental\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "cmp     eax, r11d",
    "jne     0x14005ee4d",
    "mov     r14d, esi  {0x1}",
    "jmp     0x14005ee64",
    "mov     edx, r14d",
    "mov     rcx, r15",
    "mov     byte [r12+0x64], r14b",
    "call    sub_140028010",
    "cmp     eax, r11d",
    "jne     0x140061591",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, esi  {0x1}",
    "mov     rcx, r13",
    "call    sub_14005e430",
    "xor     ecx, ecx  {0x0}",
    "cmp     al, cl",
    "je      0x14005ed9d",
    "btr     rdi, 0xe",
    "mov     rcx, r13",
    "call    sub_140019bc0",
    "mov     rdi, qword [rsp+0x78 {var_100_1}]",
    "mov     rcx, qword [r15+rdi+0x18]",
    "mov     dword [rcx+0x74], eax",
    "mov     rax, qword [r15+rdi+0x18]",
    "mov     rcx, qword [r15+rdi+0x8]",
    "mov     edx, dword [rax+0x74]",
    "call    sub_140027e80",
    "jmp     0x140061591",
    "mov     rax, qword [rsp+0x78 {var_100_1}]",
    "mov     rax, qword [r15+rax+0x18]",
    "movsxd  rdx, dword [rax+0x74]",
    "jmp     0x140061589",
    "cmp     r13, r11",
    "jne     0x14005ec9b",
    "sub     ecx, esi",
    "je      0x14005ec44",
    "mov     rbx, qword [rsp+0x80 {var_f8_1}]",
    "mov     r14, qword [rsp+0x68 {j_8}]",
    "mov     r13, rax",
    "mov     rax, qword [rsp+0xb0 {var_c8_4}]",
    "or      r15, 0xffffffffffffffff",
    "mov     r12d, edx  {0x0}",
    "mov     qword [rsp+0x68 {j_8}], rcx",
    "mov     rcx, qword [rcx+0x28]",
    "cmp     rcx, r9",
    "jne     0x140061352",
    "add     rax, 0x20",
    "add     edx, esi",
    "cmp     qword [rax], r8",
    "jne     0x140061339",
    "mov     rcx, r14",
    "call    sub_14005e4f8",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x140061591",
    "mov     rcx, qword [rel data_140140388]",
    "call    sub_140016950",
    "xor     eax, eax  {0x0}",
    "cmp     byte [r13], al",
    "je      0x140061251",
    "mov     rcx, r14",
    "call    sub_14005e4f8",
    "lea     rdx, [rel data_1400f6498]  {\"not a writable directory\"}",
    "cmp     dword [rsp+0x180 {j_27}], ecx",
    "jne     0x14006121f",
    "mov     rax, qword [rsp+0x180 {j_27}]",
    "cmp     rax, rcx",
    "jl      0x1400611be",
    "lea     rax, [rel sub_140083bf0]",
    "cmp     qword [r12+0x130], rax",
    "jne     0x14006117a",
    "mov     rcx, r13",
    "call    sub_140019bc0",
    "mov     rcx, r12",
    "mov     edx, eax",
    "call    sub_140083c20",
    "xor     ecx, ecx  {0x0}",
    "mov     rax, qword [rsp+0x190 {arg_18}]",
    "xor     ecx, ecx  {0x0}",
    "mov     r15d, 0xa",
    "cmp     qword [rax], rcx",
    "mov     r11d, ecx  {0x0}",
    "cmovne  r15d, ebx",
    "lea     ebx, [rcx+0x3]",
    "cmp     r13, rcx",
    "je      0x140061115",
    "xor     r11d, r11d  {0x0}",
    "mov     byte [rax+0x8], dl",
    "cmp     byte [rcx+0x3f], dil",
    "je      0x140060fb3",
    "mov     byte [r12+0x63], dl",
    "mov     r9d, 0x40",
    "jmp     0x14005ea3b",
    "mov     r15, qword [rsp+0x68 {j_8}]",
    "mov     rbx, rdi",
    "shl     rbx, 0x5",
    "mov     r9, qword [rdi+0x10]",
    "lea     r8, [rel data_1400f652c]",
    "mov     edx, esi  {0x1}",
    "mov     r9, qword [r9+0x8]",
    "mov     rcx, rbp",
    "call    sub_140032430",
    "mov     rdi, qword [rdi]",
    "jmp     0x140061591",
    "mov     dword [rsp+0x180 {j_27}], 0xfffe",
    "mov     rcx, r13",
    "call    sub_140019bc0",
    "mov     dword [rsp+0x180 {j_27}], eax",
    "test    dil, al",
    "je      0x140061591",
    "mov     rax, qword [rsp+0x78 {var_100_1}]",
    "mov     rdi, qword [r15+rax+0x8]",
    "xor     eax, eax  {0x0}",
    "cmp     r13, rax",
    "jne     0x140060a70",
    "sub     ecx, esi",
    "je      0x140060a17",
    "cmp     qword [r11], rcx",
    "jne     0x140061591",
    "mov     edx, ecx",
    "mov     rcx, r14",
    "call    sub_1400538c0",
    "mov     rax, qword [rsp+0x80 {var_f8_3}]",
    "mov     ecx, dword [rsp+0x74 {var_104_2}]",
    "movsx   edx, word [rax+0x46]",
    "inc     ecx",
    "add     ecx, edx",
    "cmp     ecx, dword [r14+0x38]",
    "jle     0x1400602d0",
    "mov     rax, qword [r12+0x20]",
    "mov     ecx, r8d  {0x0}",
    "mov     dword [rsp+0x60 {var_118_1}], ecx  {0x0}",
    "cmp     qword [rax+0x18], rdx",
    "je      0x1400602a8",
    "mov     edx, ecx",
    "mov     rcx, r14",
    "mov     r15d, r8d  {0x0}",
    "mov     dword [rsp+0x180 {j_27}], r8d  {0x0}",
    "mov     dword [r14+0x38], 0x8",
    "call    sub_1400538c0",
    "xor     eax, eax  {0x0}",
    "mov     rax, qword [r12+0x20]",
    "mov     ecx, r8d  {0x0}",
    "cmp     qword [rax+0x18], rdx",
    "je      0x140060098",
    "mov     rdi, qword [rdi+0x40]",
    "mov     r9, qword [rdi+0x38]",
    "lea     r8, [rel data_1400f6528]",
    "mov     edx, esi  {0x1}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], esi  {0x1}",
    "call    sub_140032430",
    "xor     ecx, ecx  {0x0}",
    "mov     rdi, qword [rbx]",
    "jmp     0x14005ffe7",
    "mov     rdi, qword [r12+0x1f0]",
    "jmp     0x140060029",
    "mov     edi, dword [rsp+0x180 {j_27}]",
    "cmp     edi, r15d",
    "jg      0x14005ff13",
    "mov     r8, qword [rsp+0xa0 {var_d8_1}]",
    "mov     rdx, r13",
    "mov     rcx, r12",
    "call    sub_14004e0d8",
    "xor     r8d, r8d  {0x0}",
    "mov     r15d, 0x3",
    "mov     rbx, rax",
    "cmp     rax, r8",
    "jne     0x14005fda4",
    "xor     eax, eax  {0x0}",
    "cmp     r13, rax",
    "je      0x140061591",
    "cmp     ecx, esi",
    "jne     0x140061081",
    "mov     rcx, r13",
    "call    sub_140019bc0",
    "xor     r11d, r11d",
    "cmp     eax, edi",
    "mov     edx, r11d  {0x0}",
    "cmovbe  edx, eax",
    "movzx   r14d, dl",
    "mov     r14d, edi  {0x2}",
    "jmp     0x14005ee64",
    "cmp     r14d, esi",
    "je      0x14005ee8b",
    "mov     rax, rdi",
    "not     rax",
    "and     qword [r12+0x30], rax",
    "cmp     rdi, 0x80000",
    "jne     0x14005edb9",
    "or      qword [r12+0x30], rdi",
    "jmp     0x14005edb9",
    "lea     rdx, [rsp+0x180 {j_27}]",
    "mov     rcx, r13",
    "mov     dword [rsp+0x180 {j_27}], esi  {0x1}",
    "call    sub_140019a68",
    "mov     edi, dword [rsp+0x180 {j_27}]",
    "xor     r10d, r10d  {0x0}",
    "cmp     eax, r10d",
    "je      0x14005ecd2",
    "test    byte [r12+0x30], 0x20",
    "jne     0x14005ec82",
    "cmp     r13, r11",
    "je      0x140061591",
    "sub     ecx, esi",
    "je      0x14005ebfa",
    "test    sil, r9b",
    "jne     0x1400613e8",
    "cmp     qword [rbx+0x10], rdx",
    "jne     0x1400613de",
    "mov     byte [rdi+0x60], sil",
    "jmp     0x140061591",
    "mov     qword [rel data_140140388], rax",
    "jmp     0x140061591",
    "lea     rcx, [rel data_1400f38e8]",
    "mov     rdx, r13",
    "call    sub_14001874c",
    "btr     eax, 0x1f",
    "cmp     eax, ecx",
    "jl      0x1400611be",
    "mov     eax, ecx  {0x0}",
    "jmp     0x14005ec93",
    "mov     eax, dword [r12+0x138]",
    "jmp     0x14005ec93",
    "mov     r9d, r11d",
    "mov     r8d, r15d",
    "mov     edx, 0x6",
    "mov     rcx, rbp",
    "mov     dword [r14+0x38], ebx  {0x3}",
    "mov     dword [rsp+0x20 {var_158}], esi  {0x1}",
    "call    sub_140032364",
    "xor     eax, eax  {0x0}",
    "mov     r9d, ebx  {0x3}",
    "mov     dword [rsp+0x20 {var_158}], eax  {0x0}",
    "mov     r8d, esi  {0x1}",
    "jmp     0x140060ea5",
    "lea     rdx, [rel data_1400f63e4]  {\"full\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x1400610e4",
    "movsxd  rdx, dword [r12+0x278]",
    "jmp     0x140061589",
    "mov     rcx, r13",
    "call    sub_140019bc0",
    "mov     rcx, r12",
    "mov     edx, eax",
    "call    sub_14008344c",
    "add     r8d, esi",
    "add     r9, 0x20",
    "cmp     r8d, dword [r12+0x28]",
    "jl      0x140060f36",
    "cmp     byte [rcx+0x10], r10b",
    "jne     0x140060f67",
    "sub     rdi, rsi",
    "sub     rbx, 0x20",
    "cmp     rdi, r8",
    "jge     0x140060d90",
    "cmp     rdi, r15",
    "je      0x140060daa",
    "mov     eax, dword [r12+0x28]",
    "sub     eax, esi",
    "mov     eax, ebx",
    "jmp     0x140060afa",
    "xor     r8d, r8d  {0x0}",
    "jmp     0x140060ad4",
    "mov     rcx, r13",
    "call    sub_140019bc0",
    "xor     r9d, r9d  {0x0}",
    "or      r8d, 0xffffffff  {0xffffffff}",
    "mov     edx, eax",
    "mov     rcx, rdi",
    "mov     dword [r12+0x6c], eax",
    "call    sub_140027f38",
    "cmp     eax, 0x7",
    "jne     0x140061591",
    "cmp     rdi, rax",
    "je      0x140060a66",
    "lea     rdi, [rel data_1400d7eb0]",
    "xor     r11d, r11d  {0x0}",
    "cmp     ecx, esi",
    "jne     0x140061084",
    "mov     r8d, dword [rsp+0x60 {var_118_1}]",
    "mov     r9, rax",
    "xor     edx, edx  {0x0}",
    "mov     rcx, r14",
    "mov     dword [rsp+0x20 {var_158_2}], 0x61",
    "call    sub_14005a1e8",
    "mov     r8, qword [rsp+0x80 {var_f8_3}]",
    "mov     edx, dword [rsp+0xa8 {var_d0_2}]",
    "mov     r8, qword [r8]",
    "mov     rcx, rbp",
    "call    sub_1400323e0",
    "mov     rax, qword [rsp+0x80 {var_f8_3}]",
    "mov     ecx, esi  {0x1}",
    "mov     rax, qword [rax+0x20]",
    "jmp     0x1400603d5",
    "mov     dword [r14+0x38], ecx",
    "add     rax, 0x18",
    "mov     rdi, qword [rdi+0x8]",
    "add     r15d, esi",
    "mov     dword [rsp+0x180 {j_27}], r15d",
    "cmp     rdi, rax",
    "jne     0x1400600b7",
    "mov     r13d, dword [rsp+0x180 {j_27}]",
    "lea     r15, [rdi+0x40]",
    "add     rax, 0x18",
    "cmp     rdi, rcx",
    "jne     0x140060006",
    "mov     r8d, ebx",
    "xor     edx, edx  {0x0}",
    "mov     rcx, r14",
    "call    sub_14005398c",
    "mov     r9d, esi  {0x1}",
    "mov     r8d, edi",
    "mov     edx, 0x46",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158}], r15d  {0x0}",
    "call    sub_140032364",
    "xor     r9d, r9d  {0x0}",
    "mov     r8d, ebx",
    "lea     edx, [r9+0x3b]",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158}], r15d  {0x0}",
    "call    sub_140032364",
    "xor     r9d, r9d  {0x0}",
    "mov     r8d, esi  {0x1}",
    "lea     edx, [r9+0x51]",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158}], r15d  {0x0}",
    "mov     edi, eax",
    "call    sub_140032364",
    "or      r9d, 0xffffffff  {0xffffffff}",
    "lea     edx, [r9+0x54]  {0x53}",
    "mov     r8d, esi  {0x1}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158}], r15d  {0x0}",
    "call    sub_140032364",
    "xor     eax, eax  {0x0}",
    "lea     edx, [rax+0x2f]",
    "mov     r9d, edi",
    "mov     r8d, esi  {0x1}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158}], eax  {0x0}",
    "call    sub_140032364",
    "mov     edx, edi",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     dword [rax+0x8], ecx",
    "jmp     0x140061591",
    "mov     rdx, qword [rbx+0x30]",
    "mov     ecx, 0xfff0bdc0",
    "cmp     rdx, r8",
    "je      0x14005fdcf",
    "mov     r9, qword [rsp+0xa0 {var_d8_1}]",
    "mov     r8, r13",
    "mov     edx, edi  {0x2}",
    "mov     rcx, r14",
    "call    sub_14004df10",
    "xor     r8d, r8d  {0x0}",
    "cmp     rax, r8",
    "je      0x140061591",
    "mov     r8, qword [rsp+0xa0 {var_d8_1}]",
    "mov     rdx, r13",
    "mov     rcx, r12",
    "call    sub_14004de30",
    "xor     ecx, ecx  {0x0}",
    "mov     rdi, rax",
    "cmp     rax, rcx",
    "je      0x140061591",
    "mov     rax, qword [rsp+0xe8 {var_90_1}]",
    "xor     edx, edx  {0x0}",
    "lea     r15, [rel __dos_header]",
    "movzx   eax, byte [rax]",
    "mov     ecx, edx  {0x0}",
    "cmp     byte [rax+r15+0xd6400], 0x71",
    "mov     rax, qword [rsp+0x190 {arg_18}]",
    "sete    cl",
    "or      r15, 0xffffffffffffffff",
    "cmp     qword [rax], rdx",
    "lea     eax, [rdx+0x64]",
    "cmove   ebx, r15d  {0xffffffff}",
    "mov     dword [r14+0x38], 0x6",
    "mov     dword [rsp+0xa8 {var_d0_1}], ecx",
    "mov     dword [rsp+0x98 {j_22}], ebx",
    "mov     dword [rsp+0x70 {var_108_2}], eax  {0x64}",
    "mov     dword [rsp+0x64 {var_114}], eax",
    "cmp     r13, rdx",
    "je      0x14005f07f",
    "mov     edi, dword [rbp+0x90]",
    "xor     r9d, r9d",
    "lea     r8, [rel data_1400d84f8]",
    "lea     edx, [r9+0x5]",
    "mov     rcx, rbp",
    "call    sub_1400328e8",
    "lea     ecx, [rdi+0x4]",
    "mov     dword [rax+0x38], ecx",
    "lea     ecx, [r14-0x1]",
    "mov     dword [rax+0x4], ebx",
    "mov     dword [rax+0x6c], ecx",
    "mov     ecx, ebx",
    "mov     dword [rax+0x1c], ebx",
    "shl     esi, cl",
    "mov     dword [rax+0x64], ebx",
    "or      dword [rbp+0xcc], esi",
    "jmp     0x140061591",
    "cmp     r14d, edi",
    "jne     0x140061591",
    "mov     dword [rsp+0x20 {var_158}], ecx  {0x0}",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, rbp",
    "mov     edx, 0x9e",
    "call    sub_140032364",
    "jmp     0x14005ecf7",
    "mov     qword [r12+0x290], rcx  {0x0}",
    "cmp     edi, r10d",
    "mov     edx, esi  {0x1}",
    "mov     rcx, r13",
    "setne   r8b",
    "call    sub_14005e430",
    "xor     ecx, ecx  {0x0}",
    "cmp     al, cl",
    "je      0x14005ecf1",
    "mov     rax, qword [rsp+0x78 {var_100_1}]",
    "mov     edx, edi",
    "mov     rcx, qword [r15+rax+0x8]",
    "call    sub_140027ecc",
    "mov     rax, qword [rsp+0x78 {var_100_1}]",
    "xor     edx, edx  {0x0}",
    "mov     rcx, qword [r15+rax+0x8]",
    "call    sub_140027ecc",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, esi  {0x1}",
    "mov     rcx, r13",
    "call    sub_14005e430",
    "xor     ecx, ecx  {0x0}",
    "cmp     al, cl",
    "mov     edx, ecx  {0x0}",
    "mov     rcx, r12",
    "setne   dl",
    "call    sub_140058308",
    "jmp     0x140061591",
    "mov     dword [r14+0x38], edi  {0x2}",
    "mov     rdi, qword [r12+0x208]",
    "mov     ebx, r11d  {0x0}",
    "cmp     rdi, r11",
    "je      0x140061591",
    "sub     ecx, esi",
    "je      0x14005eb91",
    "mov     r10d, esi  {0x1}",
    "cmp     r14, rdx",
    "je      0x14006140d",
    "mov     r10d, edx  {0x0}",
    "jmp     0x14006140d",
    "add     r12d, esi",
    "jmp     0x1400614bb",
    "cmovg   eax, ecx  {0x0}",
    "mov     dword [r12+0xa8], eax",
    "mov     edx, 0x51",
    "lea     rdx, [rel data_1400f6620]  {\"restart\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x1400610fe",
    "mov     r11d, esi  {0x1}",
    "jmp     0x140061115",
    "cmp     edx, r10d",
    "mov     rax, qword [r12+0x20]",
    "mov     rcx, qword [r9+rax+0x8]",
    "mov     rax, qword [rcx+0x8]",
    "mov     rcx, qword [rax]",
    "jl      0x140060f67",
    "mov     rax, qword [rcx+0x120]",
    "cmp     rax, r10",
    "je      0x140060f64",
    "mov     rax, qword [r12+0x20]",
    "mov     rax, qword [rbx+rax+0x8]",
    "cmp     rax, r8",
    "je      0x140060dd0",
    "mov     rax, qword [rax+0x8]",
    "mov     rcx, qword [rax]",
    "mov     qword [rcx+0xa0], rdx",
    "call    sub_140020bb8",
    "mov     rdx, qword [rsp+0x180 {j_27}]",
    "mov     rcx, qword [rsp+0x190 {arg_18}]",
    "xor     r8d, r8d  {0x0}",
    "cmp     dword [rcx+0x8], r8d",
    "jne     0x140060dd0",
    "mov     dword [rsp+0x20 {var_158}], r8d  {0x0}",
    "xor     r9d, r9d  {0x0}",
    "mov     edx, 0x9e",
    "xor     r8d, r8d  {0x0}",
    "jmp     0x140060eaa",
    "mov     r15, rax",
    "sub     rdi, rax",
    "shl     r15, 0x5",
    "add     rdi, rsi",
    "mov     qword [rsp+0xb0 {i_27}], rdi",
    "movsxd  rdi, eax",
    "movsxd  rax, ebx",
    "cmp     rax, rdi",
    "jg      0x140060cde",
    "mov     eax, dword [r14+0x34]",
    "mov     dword [rsp+0x98 {var_e0_2}], eax",
    "inc     eax",
    "mov     dword [r14+0x34], eax",
    "cmp     qword [rsp+0xa0 {var_d8_1}], r8",
    "je      0x140060af3",
    "mov     rcx, r12",
    "call    sub_140016efc",
    "jmp     0x140061591",
    "mov     ecx, eax  {0x0}",
    "mov     rax, qword [rdi+0x8]",
    "mov     ecx, dword [rax+0x30]",
    "jmp     0x140060a68",
    "mov     r9, qword [rdi]",
    "lea     r8, [rel data_1400f652c]",
    "mov     edx, esi  {0x1}",
    "mov     rcx, rbp",
    "call    sub_140032430",
    "lea     rax, [rel data_1400d8498]  {\"onoffalseyestruextrafull\"}",
    "add     rdi, 0x18",
    "cmp     rdi, rax",
    "jl      0x140060a1e",
    "jmp     0x140061591",
    "cmp     r13, r11",
    "je      0x14006109b",
    "mov     rax, qword [rsp+0x78 {var_100_1}]",
    "mov     rbx, qword [r15+rax+0x8]",
    "or      r15, 0xffffffffffffffff",
    "cmp     r13, r11",
    "je      0x1400609c8",
    "xor     edx, edx  {0x0}",
    "mov     qword [rsp+0x90 {k_8}], rax",
    "mov     dword [rsp+0x64 {var_114}], ecx",
    "cmp     rax, rdx",
    "jne     0x140060317",
    "add     rax, 0x20",
    "add     ecx, esi",
    "cmp     qword [rax], rdx",
    "jne     0x140060299",
    "mov     dword [rsp+0x60 {var_118_1}], ecx",
    "cmp     dword [rdi+0x28], eax",
    "mov     r14d, eax  {0x0}",
    "jle     0x1400601ba",
    "jmp     0x1400614df",
    "lea     r8, [rel data_1400f6470]  {\"RESTRICT\"}",
    "sub     ecx, esi",
    "je      0x1400600ff",
    "add     rax, 0x20",
    "add     ecx, esi",
    "cmp     qword [rax], rdx",
    "jne     0x14006008d",
    "mov     r9, qword [rdi+0x10]",
    "mov     qword [rsp+0x20 {var_158_6}], rcx  {0x0}",
    "lea     r8, [rel data_1400f6528]",
    "mov     r9, qword [r9+0x38]",
    "mov     edx, esi  {0x1}",
    "mov     rcx, rbp",
    "call    sub_140032430",
    "mov     rdi, qword [rdi]",
    "xor     ecx, ecx  {0x0}",
    "jmp     0x140061591",
    "mov     rdi, qword [rsp+0x80 {var_f8_1}]",
    "cmp     qword [rdi+0x10], r8",
    "je      0x14005fdeb",
    "mov     rax, qword [r12+0x20]",
    "mov     ecx, r8d  {0x0}",
    "cmp     qword [rax+0x18], rdx",
    "je      0x14005fdcf",
    "test    byte [rax+0x40], 0x20",
    "je      0x140061591",
    "mov     rdx, qword [rax+0x70]",
    "mov     eax, 0xfff0bdc0",
    "cmp     rdx, rcx",
    "je      0x14005fc75",
    "mov     dword [rsp+0x20 {var_158_2}], edx  {0x0}",
    "lea     r8d, [rax-0x1]",
    "mov     r9d, esi  {0x1}",
    "mov     edx, 0x46",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "xor     r8d, r8d  {0x0}",
    "movsxd  rdx, ebx",
    "cmp     dword [r12+0x28], r8d",
    "mov     eax, r8d  {0x0}",
    "mov     qword [rsp+0x68 {j_8}], rdx",
    "mov     dword [rsp+0x60 {i_23}], eax  {0x0}",
    "jle     0x14005fbab",
    "lea     rdx, [rsp+0x64 {var_114}]",
    "mov     rcx, r13",
    "call    sub_140019a68",
    "mov     edx, dword [rsp+0x64 {var_114}]",
    "xor     eax, eax  {0x0}",
    "cmp     edx, eax",
    "lea     eax, [r15+0x65]",
    "cmovle  edx, eax  {0x64}",
    "mov     eax, edx",
    "mov     dword [rsp+0x70 {var_108_2}], edx",
    "xor     edx, edx  {0x0}",
    "and     qword [r12+0x30], 0xffffffffffffffdf",
    "or      qword [r12+0x30], 0x20",
    "jmp     0x14005ecf7",
    "xor     r13d, r13d  {0x0}",
    "xor     r12d, r12d  {0x0}",
    "mov     dword [r14+0x38], esi  {0x1}",
    "lea     r15, [rel __dos_header]",
    "mov     rdi, r12  {0x0}",
    "cmp     ecx, esi",
    "jne     0x140061084",
    "mov     rax, qword [r13+0x8]",
    "cmp     rax, rdx",
    "je      0x140061421",
    "cmp     ecx, esi",
    "jl      0x14006140d",
    "movsx   ecx, word [rax+0x46]",
    "add     r8d, esi",
    "add     r13, 0x20",
    "cmp     r8d, ecx",
    "mov     dword [rsp+0x180 {j_27}], r8d",
    "jl      0x1400613c0",
    "lea     rdx, [rel data_1400f1e08]  {\"truncate\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "cmove   r11d, ebx  {0x3}",
    "mov     r11d, edi  {0x2}",
    "jmp     0x140061115",
    "mov     byte [rcx+0x8], dl",
    "cmp     byte [rax+0x3f], dil",
    "je      0x140060f67",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "jmp     0x140061591",
    "add     ebx, esi",
    "add     r15, 0x20",
    "sub     rdi, rsi",
    "mov     qword [rsp+0xb0 {i_27}], rdi",
    "jne     0x140060b1e",
    "mov     edx, ebx",
    "mov     rcx, r14",
    "call    sub_1400538c0",
    "mov     rdx, qword [r12+0x20]",
    "xor     r8d, r8d  {0x0}",
    "mov     rax, qword [r15+rdx+0x18]",
    "mov     r13, qword [rax+0x10]",
    "cmp     r13, r8",
    "je      0x140060cbf",
    "movsxd  rdx, ecx",
    "jmp     0x140061589",
    "mov     rax, qword [rsp+0x190 {arg_18}]",
    "cmp     dword [rax+0x8], r11d",
    "jne     0x140060a07",
    "lea     rdx, [rel data_1400f6490]  {\"fast\"}",
    "mov     rcx, r13",
    "call    sub_1400192b0",
    "cmp     eax, r11d",
    "jne     0x1400609ac",
    "mov     rdx, qword [rax+0x10]",
    "mov     r8, rbx",
    "mov     rcx, r12",
    "call    sub_14004de30",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rsp+0x68 {j_8}], rax",
    "cmp     rax, rcx",
    "je      0x1400603c3",
    "cmp     dword [r14+0x34], ecx",
    "jge     0x1400603f6",
    "mov     r13, qword [rsp+0xc0 {var_b8_1}]",
    "jmp     0x140061591",
    "lea     rax, [rel data_1400f6470]  {\"RESTRICT\"}",
    "sub     ecx, esi",
    "je      0x14006013f",
    "lea     r8, [rel data_1400f6448]  {\"SET NULL\"}",
    "jmp     0x14006010f",
    "sub     ecx, esi",
    "je      0x1400600f6",
    "movzx   eax, word [rbx+0x5e]",
    "mov     dword [r14+0x38], r15d  {0x3}",
    "movzx   eax, word [rbx+0x60]",
    "mov     dword [r14+0x38], 0x6",
    "jmp     0x14005fdf3",
    "add     rax, 0x18",
    "mov     rbx, qword [rax+0x10]",
    "jmp     0x14005fd96",
    "mov     edx, eax",
    "mov     rcx, r14",
    "mov     dword [r14+0x38], 0x5",
    "call    sub_1400538c0",
    "mov     rdi, qword [rdi+0x10]",
    "xor     eax, eax  {0x0}",
    "mov     ebx, eax  {0x0}",
    "cmp     rdi, rax",
    "je      0x140061591",
    "mov     eax, ecx  {0x0}",
    "mov     rcx, qword [r12+0x20]",
    "cmp     qword [rcx+0x18], rdx",
    "je      0x14005fc75",
    "xor     r9d, r9d",
    "lea     r8, [rel data_1400d8510]",
    "mov     rcx, rbp",
    "lea     edx, [r9+0x7]",
    "call    sub_1400328e8",
    "xor     r9d, r9d  {0x0}",
    "mov     rdi, rax",
    "cmp     rax, r9",
    "je      0x14005fbf6",
    "xor     r13d, r13d  {0x0}",
    "mov     rax, qword [rdi+0x10]",
    "lea     r8, [rel data_1400f6524]",
    "mov     r9d, ebx",
    "mov     rcx, qword [rax]",
    "mov     edx, esi  {0x1}",
    "mov     qword [rsp+0x20 {var_158_3}], rcx",
    "mov     rcx, rbp",
    "call    sub_140032430",
    "mov     rdi, qword [rdi]",
    "add     ebx, esi",
    "cmp     rdi, r13",
    "jne     0x14005ec15",
    "jmp     0x1400614df",
    "mov     r8, r12  {0x0}",
    "cmp     rdi, 0x12",
    "jge     0x14005ebb7",
    "cmp     r13, r11",
    "jne     0x14005eb2d",
    "mov     qword [rsp+0x68 {j_8}], rdx  {0x0}",
    "mov     rax, qword [rax+0x8]",
    "mov     qword [rsp+0x68 {j_8}], rax",
    "jmp     0x140061426",
    "mov     rdx, qword [r14+0x8]",
    "movzx   r9d, byte [r13+0x1b]",
    "mov     r11d, r9d",
    "shr     r11d, 0x1",
    "and     r11d, esi",
    "je      0x1400613de",
    "mov     r12, qword [rsp+0xd0 {var_a8}]",
    "cmp     ebx, esi",
    "je      0x140060cbf",
    "mov     r13, qword [rsp+0xc0 {var_b8_1}]",
    "mov     edi, dword [rsp+0x180 {j_27}]",
    "mov     edx, r15d",
    "mov     rcx, rbx",
    "call    sub_140027fd8",
    "jmp     0x14005ec93",
    "cmp     r15d, r11d",
    "jl      0x140060a07",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, esi  {0x1}",
    "mov     rcx, r13",
    "call    sub_14005e430",
    "xor     r11d, r11d  {0x0}",
    "mov     ecx, r11d  {0x0}",
    "cmp     al, r11b",
    "setne   cl",
    "mov     r15d, ecx",
    "mov     r15d, edi  {0x2}",
    "jmp     0x1400609c8",
    "mov     rax, qword [rsp+0x90 {k_8}]",
    "mov     ecx, dword [rsp+0x64 {var_114}]",
    "mov     rax, qword [rax+0x8]",
    "add     ecx, esi",
    "mov     r8, qword [rsp+0x90 {k_8}]",
    "mov     qword [rsp+0xc8 {var_b0}], rcx  {0x0}",
    "mov     qword [rsp+0x20 {var_158_2}], rcx  {0x0}",
    "lea     r9, [rsp+0xc8 {var_b0}]",
    "mov     rdx, rax",
    "mov     rcx, r14",
    "call    sub_14005841c",
    "xor     edx, edx  {0x0}",
    "cmp     eax, edx",
    "jne     0x140061591",
    "xor     r9d, r9d  {0x0}",
    "mov     dword [rsp+0x20 {var_158_2}], edx  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "lea     edx, [r9+0x24]",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "mov     dword [rsp+0x60 {var_118_2}], esi  {0x1}",
    "mov     dword [rsp+0xd8 {var_a0}], eax",
    "mov     rax, qword [rsp+0x80 {var_f8_3}]",
    "mov     rcx, qword [rax+0x20]",
    "xor     eax, eax  {0x0}",
    "mov     qword [rsp+0x68 {j_8}], rcx",
    "cmp     rcx, rax",
    "je      0x1400606f3",
    "mov     dword [r14+0x34], ecx",
    "movzx   ecx, byte [rdi+0x2d]",
    "sub     ecx, 0x7",
    "je      0x140060108",
    "mov     r15d, r13d",
    "xor     eax, eax  {0x0}",
    "lea     rax, [rel data_1400f6448]  {\"SET NULL\"}",
    "jmp     0x14006014f",
    "sub     ecx, esi",
    "je      0x140060136",
    "movzx   ecx, byte [rdi+0x2e]",
    "sub     ecx, 0x7",
    "je      0x140060148",
    "lea     r8, [rel data_1400f6458]  {\"SET DEFAULT\"}",
    "jmp     0x14006010f",
    "cmp     ecx, esi",
    "je      0x1400600ed",
    "movsxd  r13, dword [rsp+0x180 {j_27}]",
    "mov     r12d, ecx  {0x0}",
    "jmp     0x14005fe32",
    "mov     dword [rsp+0x180 {j_27}], eax",
    "mov     rax, qword [rbx+0x18]",
    "mov     edx, ecx",
    "mov     rcx, r14",
    "mov     qword [rsp+0x68 {j_8}], rax",
    "call    sub_1400538c0",
    "movsxd  rax, dword [rsp+0x180 {j_27}]",
    "xor     ecx, ecx  {0x0}",
    "cmp     rax, rcx",
    "mov     r15, rcx  {0x0}",
    "jle     0x140061591",
    "add     rax, 0x20",
    "add     ecx, esi",
    "cmp     qword [rax], rdx",
    "jne     0x14005fdc4",
    "cmp     rbx, r8",
    "jne     0x14005fd87",
    "xor     r13d, r13d  {0x0}",
    "add     rcx, 0x18",
    "mov     rax, qword [rbp]",
    "mov     edx, dword [rbp+0x90]",
    "lea     rcx, [rel data_14013ff60]",
    "cmp     byte [rax+0x61], r9b",
    "jne     0x14005fc14",
    "sub     esi, dword [rsp+0x70 {var_108_2}]",
    "mov     byte [rax+0x31], r15b  {0xff}",
    "lea     ecx, [r9+0xb]",
    "mov     dword [rax+0x8], esi",
    "lea     rax, [rel data_1400f65f8]",
    "mov     byte [rdi+0x79], r15b  {0xff}",
    "mov     qword [rdi+0x40], rax  {data_1400f65f8}",
    "call    sub_14008335c",
    "mov     qword [rdi+0x88], rax",
    "mov     edx, eax",
    "mov     rcx, r14",
    "call    sub_1400538c0",
    "mov     rax, qword [r12+0x20]",
    "movsxd  rcx, dword [rsp+0x60 {i_23}]",
    "shl     rcx, 0x5",
    "mov     qword [rsp+0xb0 {var_c8_2}], rcx",
    "mov     rcx, qword [rcx+rax+0x18]",
    "add     rcx, 0x8",
    "xor     r9d, r9d  {0x0}",
    "mov     qword [rsp+0x90 {k_8}], rcx",
    "mov     rcx, qword [rcx+0x8]",
    "mov     eax, r9d  {0x0}",
    "jmp     0x14005f130",
    "cmp     eax, ebx",
    "jne     0x14005fb8f",
    "and     dword [rbp+0xc8], 0xffffffbf",
    "mov     r12, qword [rsp+0xd0 {var_a8}]",
    "jmp     0x140061591",
    "mov     edx, esi  {0x1}",
    "mov     rcx, rbp",
    "call    sub_1400323e0",
    "mov     r9d, esi  {0x1}",
    "mov     r8d, esi  {0x1}",
    "mov     edx, 0x51",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], r12d  {0x0}",
    "call    sub_140032364",
    "jmp     0x14005eba2",
    "mov     r8, qword [r15+rdi*8+0xd6370]",
    "jmp     0x14005ebba",
    "cmp     byte [r13], r11b",
    "je      0x14005eb62",
    "mov     rdx, qword [rel data_140140390]",
    "jmp     0x140060fc0",
    "mov     rdx, qword [r13]",
    "xor     eax, eax  {0x0}",
    "mov     rcx, r15  {-0x1}",
    "mov     rdi, rdx",
    "repne scasb byte [rdi]  {0x0}",
    "lea     edi, [rax+0x2]",
    "not     rcx",
    "sub     rcx, rsi",
    "lea     rcx, [rcx+rdx+0x1]",
    "xor     edx, edx  {0x0}",
    "lea     rcx, [rel data_1400f386c]",
    "jmp     0x140061453",
    "test    r9b, 0x4",
    "jne     0x140061435",
    "xor     edx, edx  {0x0}",
    "add     r10d, esi",
    "add     rdx, rdi",
    "cmp     r10d, ecx",
    "jle     0x1400613f8",
    "mov     r13, qword [r13]",
    "cmp     r13, r8",
    "jne     0x140060b51",
    "mov     cx, word [rdx+0x48]",
    "mov     rax, qword [rdx+0x10]",
    "add     cx, 0x2e",
    "mov     dword [rsp+0x70 {var_108_4}], ecx",
    "jmp     0x140060b81",
    "cmp     dword [r12+0x28], r11d",
    "mov     edi, r11d  {0x0}",
    "jle     0x140060a07",
    "mov     rcx, qword [rsp+0xc8 {var_b0}]",
    "cmp     rcx, rdx",
    "jne     0x140060395",
    "mov     ebx, dword [rsp+0xd8 {var_a0}]",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, rbp",
    "lea     r9d, [rbx+0x1]",
    "lea     edx, [r8+0x5]",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "mov     edx, ebx",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     rdx, qword [rsp+0xe0 {var_98_2}]",
    "mov     dword [rax+0x8], ecx",
    "xor     r8d, r8d  {0x0}",
    "mov     eax, dword [rsp+0xa8 {var_d0_2}]",
    "mov     r13, qword [rsp+0x68 {j_8}]",
    "lea     ecx, [rax+0x1]",
    "add     eax, 0x2",
    "mov     dword [rsp+0x98 {var_e0_1}], ecx",
    "mov     dword [rsp+0x78 {var_100_1}], eax",
    "mov     rcx, qword [rbx+0x8]",
    "movsxd  rdx, dword [r15]",
    "lea     r9, [rel data_1400f6530]  {\"NONE\"}",
    "mov     qword [rsp+0x50 {var_128_1}], r9  {data_1400f6530, \"NONE\"}",
    "mov     qword [rsp+0x48 {var_130_1}], r8",
    "mov     qword [rsp+0x40 {var_138_1}], rax",
    "mov     rax, qword [r15+0x8]",
    "shl     rdx, 0x5",
    "lea     r8, [rel data_1400f6538]  {\"iissssss\"}",
    "mov     qword [rsp+0x38 {var_140}], rax",
    "mov     rax, qword [rdx+rcx]",
    "mov     r9d, r13d",
    "mov     qword [rsp+0x30 {var_148_4}], rax",
    "mov     rax, qword [rdi+0x10]",
    "mov     edx, esi  {0x1}",
    "mov     qword [rsp+0x28 {var_150_4}], rax",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], r14d",
    "call    sub_140032430",
    "add     r14d, esi",
    "add     r15, 0x10",
    "cmp     r14d, dword [rdi+0x28]",
    "jl      0x1400600cf",
    "lea     rax, [rel data_1400f6458]  {\"SET DEFAULT\"}",
    "jmp     0x14006014f",
    "cmp     ecx, esi",
    "je      0x14006012d",
    "lea     r8, [rel data_1400f6468]  {\"CASCADE\"}",
    "jmp     0x14006010f",
    "lea     r8, [rel data_1400f6480]  {\"NO ACTION\"}",
    "jmp     0x14006010f",
    "mov     rax, qword [rbx+0x8]",
    "movzx   edx, word [rax+r15*2]",
    "cmp     dx, cx",
    "jl      0x14005fe55",
    "mov     eax, dword [rbx+0x64]",
    "and     al, r15b",
    "cmp     al, dil",
    "je      0x14005fd9b",
    "cmp     rbx, r8",
    "je      0x140061591",
    "cmp     qword [rdi+0x48], r13",
    "mov     edx, r13d  {0x0}",
    "lea     rax, [rel data_1400f6510]",
    "mov     qword [rsp+0x128 {var_50}], rax  {data_1400f6510}",
    "setne   dl",
    "mov     ecx, r13d  {0x0}",
    "mov     dword [rsp+0x38 {var_140_1}], edx",
    "lea     rax, [rel data_1400f6514]",
    "lea     r8, [rel data_1400f6518]  {\"isisi\"}",
    "mov     qword [rsp+0x130 {var_48_1}], rax  {data_1400f6514}",
    "lea     rax, [rel data_1400f2374]",
    "mov     r9d, ebx",
    "mov     qword [rsp+0x138 {var_40_1}], rax  {data_1400f2374}",
    "mov     eax, dword [rdi+0x64]",
    "mov     edx, esi  {0x1}",
    "and     eax, 0x3",
    "cmp     byte [rdi+0x62], r13b",
    "mov     rax, qword [rsp+rax*8+0x128 {var_50}]",
    "setne   cl",
    "mov     qword [rsp+0x30 {var_148_3}], rax",
    "mov     rax, qword [rdi]",
    "mov     dword [rsp+0x28 {var_150}], ecx",
    "mov     rcx, rbp",
    "mov     qword [rsp+0x20 {var_158_5}], rax",
    "call    sub_140032430",
    "mov     rdi, qword [rdi+0x28]",
    "add     ebx, esi",
    "cmp     rdi, r13",
    "jne     0x14005fc9b",
    "jmp     0x1400614df",
    "add     rcx, 0x20",
    "add     eax, esi",
    "cmp     qword [rcx], rdx",
    "jne     0x14005fc6a",
    "lea     eax, [rdx-0x2]",
    "mov     dword [rcx+0xc], eax",
    "jmp     0x140061591",
    "mov     rcx, qword [rbp+0x88]",
    "cmp     rcx, r9",
    "jne     0x14005f103",
    "xor     r13d, r13d  {0x0}",
    "cmp     rdi, r12",
    "jl      0x14005ebb7",
    "add     rdi, rsi",
    "cmp     r8, r12",
    "je      0x14005ebe6",
    "mov     rcx, qword [rel data_140140390]",
    "call    sub_140016950",
    "xor     eax, eax  {0x0}",
    "cmp     byte [r13], al",
    "je      0x14005eb85",
    "mov     rax, qword [r12]",
    "lea     r9, [rsp+0x180 {j_27}]",
    "mov     r8d, esi  {0x1}",
    "mov     rcx, rax",
    "mov     rdx, r13",
    "call    qword [rax+0x38]",
    "xor     ecx, ecx  {0x0}",
    "cmp     eax, ecx",
    "jne     0x14006120b",
    "cmp     byte [r13+0x18], dl",
    "mov     eax, edx  {0x0}",
    "mov     dword [rsp+0x48 {var_130}], r11d",
    "setne   al",
    "mov     dword [rsp+0x40 {var_138}], r10d",
    "mov     r9d, r8d",
    "sub     r9d, r12d",
    "cmp     qword [rbx+0x10], 0x0",
    "lea     rdx, [rel data_1400f64f0]",
    "lea     r8, [rel data_1400f64f8]  {\"issisi\"}",
    "cmovne  r8, rdx  {data_1400f64f0, \"issisii\"}",
    "mov     rdx, qword [rsp+0x68 {j_8}]",
    "mov     qword [rsp+0x38 {var_140}], rdx",
    "mov     dword [rsp+0x30 {var_148}], eax",
    "mov     rax, qword [r13]",
    "mov     qword [rsp+0x28 {var_150_5}], rcx",
    "mov     edx, esi  {0x1}",
    "mov     rcx, rbp",
    "mov     qword [rsp+0x20 {var_158_7}], rax",
    "call    sub_140032430",
    "mov     rax, qword [rsp+0xb0 {var_c8_4}]",
    "mov     r8d, dword [rsp+0x180 {j_27}]",
    "xor     edx, edx  {0x0}",
    "movsx   eax, word [rdx]",
    "cmp     eax, r8d",
    "je      0x14006140b",
    "mov     rdx, qword [r13+0x10]",
    "mov     qword [rsp+0x68 {j_8}], rdx",
    "bt      dword [rdx+0x40], 0x8",
    "jae     0x140060caa",
    "mov     rdi, qword [rsp+0xb0 {i_27}]",
    "cmp     rax, r8",
    "jne     0x140060b77",
    "mov     r9, r11  {0x0}",
    "mov     eax, dword [rsp+0x60 {var_118_1}]",
    "mov     r9d, dword [rcx+0x58]",
    "mov     r8d, dword [rsp+0x64 {var_114}]",
    "mov     edx, 0x61",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax",
    "call    sub_140032364",
    "mov     rdx, qword [rsp+0xc8 {var_b0}]",
    "mov     rcx, r14",
    "call    sub_140032d08",
    "mov     r9, qword [rsp+0x68 {j_8}]",
    "mov     r8d, dword [rsp+0x60 {var_118_1}]",
    "mov     edx, dword [rsp+0x64 {var_114}]",
    "mov     rcx, r14",
    "mov     dword [rsp+0x20 {var_158_2}], 0x61",
    "call    sub_14005a1e8",
    "jmp     0x1400603c3",
    "add     dword [r14+0x44], r15d",
    "cmp     dword [r13+0x28], r8d",
    "mov     eax, dword [r14+0x44]",
    "mov     dword [rsp+0x64 {var_114}], eax",
    "mov     dword [rsp+0x70 {var_108_3}], r8d  {0x0}",
    "jle     0x14006057f",
    "lea     rcx, [rsp+0x90 {k_8}]",
    "lea     r9, [rsp+0xc8 {var_b0}]",
    "mov     r8, r13",
    "mov     qword [rsp+0x20 {var_158_2}], rcx {k_8}",
    "mov     rcx, r14",
    "mov     rdx, rax",
    "call    sub_14005841c",
    "xor     r8d, r8d  {0x0}",
    "lea     rax, [rel data_1400f6468]  {\"CASCADE\"}",
    "jmp     0x14006014f",
    "lea     rax, [rel data_1400f6480]  {\"NO ACTION\"}",
    "jmp     0x14006014f",
    "movsx   eax, dx",
    "mov     qword [rsp+0x28 {var_150_3}], rcx",
    "lea     r8, [rel data_1400f6500]  {\"iisX\"}",
    "mov     r9d, r12d",
    "mov     edx, esi  {0x1}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax",
    "call    sub_140032430",
    "xor     ecx, ecx  {0x0}",
    "cmp     qword [rdi+0x10], rcx",
    "je      0x14005feb9",
    "mov     rax, qword [rsp+0x68 {j_8}]",
    "movsx   rcx, dx",
    "mov     rax, qword [rax+0x8]",
    "shl     rcx, 0x5",
    "mov     rcx, qword [rcx+rax]",
    "mov     rbx, qword [rbx+0x28]",
    "mov     rdx, qword [rcx+0x10]",
    "test    byte [rdx+0x40], 0x20",
    "jne     0x14005f10f",
    "inc     eax",
    "mov     rcx, r12",
    "movsxd  rdx, eax",
    "shl     rdx, 0x2",
    "call    sub_140016c18",
    "xor     r10d, r10d  {0x0}",
    "mov     rbx, rax",
    "cmp     rax, r10",
    "je      0x14005fba3",
    "xor     ecx, ecx  {0x0}",
    "cmp     rdx, rcx",
    "jl      0x14005f0c6",
    "mov     r13, qword [rsp+0xc0 {var_b8_1}]",
    "mov     qword [rel data_140140390], rax",
    "jmp     0x140061591",
    "lea     rcx, [rel data_1400f38e8]",
    "mov     rdx, r13",
    "call    sub_14001874c",
    "cmp     dword [rsp+0x180 {j_27}], ecx",
    "je      0x14006120b",
    "test    byte [rax+0x64], 0x80",
    "je      0x140060b88",
    "jmp     0x140060b8f",
    "mov     rcx, qword [r12+0x20]",
    "mov     edx, r15d",
    "mov     rcx, qword [r9+rcx+0x8]",
    "call    sub_140027fd8",
    "add     edi, esi",
    "add     r9, 0x20",
    "cmp     edi, dword [r12+0x28]",
    "jl      0x1400609e8",
    "mov     rdx, qword [rsp+0xc8 {var_b0}]",
    "cmp     rdx, r8",
    "je      0x1400605fc",
    "mov     rbx, qword [rsp+0x90 {k_8}]",
    "mov     r15d, dword [rsp+0x74 {var_104_2}]",
    "mov     r12, qword [rsp+0x80 {var_f8_3}]",
    "mov     r14d, dword [rsp+0x64 {var_114}]",
    "lea     rcx, [r13+0x40]",
    "inc     r15d",
    "mov     rax, rbx",
    "mov     qword [rsp+0xb0 {k_18}], rbx",
    "mov     qword [rsp+0x68 {j_8}], rcx",
    "mov     r9d, dword [r14+0x38]",
    "mov     dword [rsp+0x20 {var_158_2}], ecx  {0x0}",
    "mov     r8d, esi  {0x1}",
    "mov     edx, 0x51",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "add     r15, rsi",
    "add     r12d, esi",
    "cmp     r15, r13",
    "jl      0x14005fe30",
    "movzx   eax, word [rbx+0x5e]",
    "mov     edx, ecx  {0x0}",
    "mov     rcx, qword [rbx+0x40]",
    "cmp     r12d, eax",
    "mov     rax, qword [rbx+0x38]",
    "lea     r8, [rel data_1400f6508]  {\"isiX\"}",
    "movzx   r9d, byte [rax+r15]",
    "mov     rax, qword [rcx+r15*8]",
    "setl    dl",
    "mov     dword [rsp+0x28 {var_150_3}], edx",
    "mov     rcx, rbp",
    "mov     edx, 0x4",
    "mov     qword [rsp+0x20 {var_158_2}], rax",
    "call    sub_140032430",
    "xor     ecx, ecx  {0x0}",
    "mov     rdx, qword [rdx+0x10]",
    "mov     r8d, r9d  {0x0}",
    "jmp     0x14005f121",
    "add     eax, esi",
    "mov     r8, qword [rsp+0x90 {k_8}]",
    "mov     r9d, r10d  {0x0}",
    "mov     rcx, r10  {0x0}",
    "mov     r8, qword [r8+0x8]",
    "jmp     0x14005f19d",
    "mov     ecx, r8d  {0x0}",
    "mov     dword [rsp+0x70 {var_108_4}], ecx  {0x0}",
    "mov     rax, qword [rax+0x28]",
    "cmp     cx, r8w",
    "je      0x140060be4",
    "cmp     qword [rsp+0xf8 {var_80_1}], r8",
    "je      0x140060648",
    "mov     ebx, dword [r13+0x28]",
    "mov     rcx, r12",
    "call    sub_14005a288",
    "mov     ecx, dword [rsp+0x74 {var_104_2}]",
    "mov     r9d, dword [r13+0x28]",
    "lea     r8d, [rcx+0x1]",
    "mov     dword [rsp+0x20 {var_158_2}], ecx",
    "mov     edx, 0x5c",
    "mov     rcx, rbp",
    "mov     rdi, rax",
    "call    sub_140032364",
    "mov     r9d, ebx",
    "mov     r8, rdi",
    "mov     edx, eax",
    "mov     rcx, rbp",
    "call    sub_140032c40",
    "mov     r9d, dword [rsp+0x64 {var_114}]",
    "mov     r8d, dword [rsp+0x60 {var_118_2}]",
    "xor     eax, eax  {0x0}",
    "mov     edx, 0x1d",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x28 {var_150}], eax  {0x0}",
    "mov     eax, dword [rsp+0x74 {var_104_2}]",
    "mov     dword [rsp+0x20 {var_158_2}], eax",
    "call    sub_140032678",
    "mov     rbx, qword [rsp+0xa0 {var_d8_1}]",
    "mov     edi, 0x2",
    "jmp     0x140060645",
    "mov     r9d, dword [rcx]",
    "mov     r9d, dword [rax]",
    "jmp     0x1400604fe",
    "xor     ecx, ecx  {0x0}",
    "jmp     0x1400614d7",
    "cmp     rdx, r9",
    "jne     0x14005f118",
    "cmp     r8, r10",
    "jne     0x14005f169",
    "mov     r8, qword [r12+0x20]",
    "mov     r9, qword [rdx]",
    "lea     rdx, [rel data_1400f6628]  {\"ANALYZE \"%w\".\"%w\"\"}",
    "mov     r8, qword [r15+r8]",
    "mov     rcx, r12",
    "call    _printf_p_l",
    "mov     qword [rsp+0x68 {j_8}], rax",
    "test    sil, dil",
    "je      0x140060c79",
    "mov     r9, rdx",
    "mov     edx, dword [rsp+0x98 {var_e0_2}]",
    "mov     r8d, ebx",
    "mov     rcx, r14",
    "mov     dword [rsp+0x20 {var_158_2}], 0x61",
    "call    sub_14005a1e8",
    "movsx   edx, word [rsp+0x70 {var_108_4}]",
    "mov     eax, dword [rbp+0x90]",
    "mov     r8d, dword [rsp+0x98 {var_e0_2}]",
    "mov     ecx, edi",
    "mov     dword [rsp+0x20 {var_158_2}], edx",
    "and     ecx, esi",
    "mov     edx, 0x21",
    "lea     r9d, [rcx+rax+0x2]",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "mov     rdx, qword [rsp+0x68 {j_8}]",
    "mov     rax, qword [rsp+0x80 {var_f8_3}]",
    "mov     r9d, dword [rsp+0x98 {var_e0_1}]",
    "mov     dword [rsp+0x20 {var_158_2}], r8d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "test    byte [rax+0x40], 0x20",
    "mov     rcx, rbp",
    "mov     edx, 0x80",
    "je      0x140060672",
    "mov     eax, dword [rsp+0x74 {var_104_2}]",
    "mov     r9d, dword [rbp+0x90]",
    "mov     r8d, dword [rsp+0x60 {var_118_2}]",
    "inc     eax",
    "add     r9d, edi",
    "mov     edx, 0x1e",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax",
    "call    sub_140032364",
    "mov     r9d, dword [rsp+0x64 {var_114}]",
    "xor     eax, eax  {0x0}",
    "lea     edx, [rax+0xb]",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "xor     r8d, r8d  {0x0}",
    "cmp     rbx, r8",
    "je      0x1400604fb",
    "mov     r12, qword [rsp+0xd0 {var_a8}]",
    "mov     r14, qword [rsp+0x180 {j_27}]",
    "mov     rbx, qword [rsp+0xa0 {var_d8_1}]",
    "or      r15, 0xffffffffffffffff",
    "xor     r8d, r8d  {0x0}",
    "mov     rdx, r12",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], r15d",
    "call    sub_1400469b0",
    "xor     eax, eax  {0x0}",
    "lea     edx, [rax+0x32]",
    "mov     r9d, r14d",
    "mov     r8d, r15d",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "mov     edx, dword [rsp+0x70 {var_108_3}]",
    "mov     rcx, qword [rsp+0x68 {j_8}]",
    "mov     rax, qword [rsp+0xb0 {k_18}]",
    "add     edx, esi",
    "add     rcx, 0x10",
    "add     rax, 0x4",
    "add     r15d, esi",
    "cmp     edx, dword [r13+0x28]",
    "mov     dword [rsp+0x70 {var_108_3}], edx",
    "mov     qword [rsp+0x68 {j_8}], rcx",
    "mov     r8d, 0x0",
    "mov     qword [rsp+0xb0 {k_18}], rax",
    "jl      0x1400604f1",
    "mov     rdx, qword [rdx+0x28]",
    "add     eax, esi",
    "add     r8d, esi",
    "mov     rcx, qword [rcx]",
    "cmp     r8d, r13d",
    "cmovg   r13d, r8d",
    "mov     rdx, qword [r8+0x10]",
    "test    byte [rdx+0x40], 0x20",
    "jne     0x14005f17f",
    "mov     dword [rbx], r9d",
    "lea     eax, [r13+0x8]",
    "mov     r8d, edi  {0x2}",
    "cmp     dword [r14+0x38], eax",
    "mov     edx, 0x92",
    "mov     rcx, rbp",
    "cmovg   eax, dword [r14+0x38]",
    "xor     r13d, r13d  {0x0}",
    "mov     dword [rsp+0x20 {var_158_2}], esi  {0x1}",
    "mov     byte [r14+0x1f], r13b  {0x0}",
    "mov     dword [r14+0x28], r13d  {0x0}",
    "mov     dword [r14+0x38], eax",
    "call    sub_140032364",
    "lea     r9d, [r13-0xf]  {0xfffffff1}",
    "mov     r8, rbx",
    "mov     edx, eax",
    "mov     rcx, rbp",
    "call    sub_140032c40",
    "movsxd  rax, dword [rbp+0x90]",
    "cmp     eax, r13d",
    "jle     0x14005f207",
    "xor     eax, eax  {0x0}",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, 0x8c",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "mov     r8, qword [rsp+0x68 {j_8}]",
    "mov     r9d, 0xfffffff9",
    "mov     edx, eax",
    "mov     rcx, rbp",
    "call    sub_140032c40",
    "mov     cl, byte [r14+0x1f]",
    "xor     edx, edx  {0x0}",
    "cmp     cl, dl",
    "jne     0x140060c1d",
    "call    sub_140032364",
    "mov     eax, dword [rsp+0x60 {var_118_2}]",
    "mov     r9, qword [r13+0x10]",
    "mov     edx, dword [rsp+0x78 {var_100_1}]",
    "dec     eax",
    "lea     r8, [rel data_1400f6544]",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax",
    "call    sub_140032430",
    "mov     r8d, dword [rsp+0xa8 {var_d0_2}]",
    "xor     eax, eax  {0x0}",
    "lea     r9d, [rax+0x4]",
    "lea     edx, [rax+0x51]",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "mov     edx, dword [rsp+0x64 {var_114}]",
    "mov     rcx, rbp",
    "call    sub_14003278c",
    "mov     rdx, qword [rsp+0x90 {k_8}]",
    "xor     eax, eax  {0x0}",
    "cmp     rdx, rax",
    "je      0x1400606da",
    "lea     edx, [r8+0x49]",
    "mov     rdx, qword [rdx+0x10]",
    "jmp     0x14005f195",
    "mov     eax, dword [rdx+0x38]",
    "add     r9d, esi",
    "add     rcx, rsi",
    "mov     dword [rbx+rcx*4], eax",
    "xor     r9d, r9d  {0x0}",
    "mov     r8d, edi  {0x2}",
    "mov     rcx, rbp",
    "lea     edx, [r9+0x32]",
    "mov     dword [rsp+0x20 {var_158_2}], r13d  {0x0}",
    "call    sub_140032364",
    "mov     r8, qword [r12+0x20]",
    "lea     rdx, [rel data_1400f6548]  {\"*** in database %s ***\\n\"}",
    "mov     ebx, eax",
    "mov     rax, qword [rsp+0xb0 {var_c8_2}]",
    "mov     rcx, r12",
    "mov     r8, qword [rax+r8]",
    "call    _printf_p_l",
    "mov     r9d, 0x3",
    "xor     r8d, r8d  {0x0}",
    "lea     edx, [r9+0x6e]  {0x71}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], r13d  {0x0}",
    "mov     rdi, rax",
    "call    sub_140032364",
    "mov     r9d, 0xfffffff9",
    "mov     r8, rdi",
    "mov     rcx, rbp",
    "mov     edx, eax",
    "call    sub_140032c40",
    "mov     edi, 0x2",
    "mov     rcx, rbp",
    "lea     r9d, [rdi+0x1]  {0x3}",
    "lea     edx, [rdi+0x6a]  {0x6c}",
    "mov     r8d, edi  {0x2}",
    "mov     dword [rsp+0x20 {var_158_2}], 0x3",
    "call    sub_140032364",
    "mov     rcx, rbp",
    "call    sub_14005e778",
    "mov     edx, ebx",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     dword [rax+0x8], ecx",
    "mov     rax, qword [rsp+0x90 {k_8}]",
    "mov     rbx, qword [rax+0x8]",
    "jmp     0x14005fb6c",
    "movzx   edx, byte [rsp+0x60 {i_23}]",
    "lea     rcx, [rax+rax*2]",
    "mov     rax, qword [rbp+0x88]",
    "mov     word [rax+rcx*8-0x16], dx",
    "sub     cl, sil",
    "movzx   eax, cl",
    "mov     byte [r14+0x1f], al",
    "mov     eax, dword [r14+rax*4+0xbc]",
    "add     dword [r14+0x38], esi",
    "mov     eax, dword [r14+0x38]",
    "jmp     0x140060c2f",
    "mov     r13, qword [r13+0x8]",
    "add     dword [rsp+0x60 {var_118_2}], esi",
    "cmp     r13, rax",
    "jne     0x140060450",
    "mov     rcx, r12",
    "call    sub_1400169a8",
    "xor     eax, eax  {0x0}",
    "cmp     rdx, r10",
    "jne     0x14005f185",
    "mov     qword [rsp+0xb0 {var_c8_3}], rbx",
    "cmp     rbx, r13",
    "jne     0x14005f2bb",
    "xor     r8d, r8d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "mov     dword [rsp+0x20 {var_158_2}], edx  {0x0}",
    "mov     r9d, eax",
    "lea     edx, [r8+0x71]",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x70 {var_108_5}], eax",
    "call    sub_140032364",
    "mov     r8, qword [rsp+0x68 {j_8}]",
    "mov     r9d, 0xfffffff9",
    "mov     edx, eax",
    "mov     rcx, rbp",
    "call    sub_140032c40",
    "mov     r8d, dword [rsp+0x70 {var_108_5}]",
    "xor     eax, eax  {0x0}",
    "lea     edx, [rax+0x51]",
    "mov     r9d, esi  {0x1}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "jmp     0x140060ca7",
    "mov     rdx, qword [r13+0x10]",
    "mov     r8, rbx",
    "mov     rcx, r12",
    "call    sub_14004de30",
    "xor     r8d, r8d  {0x0}",
    "mov     qword [rsp+0xf8 {var_80_1}], rax",
    "mov     qword [rsp+0xc8 {var_b0}], r8  {0x0}",
    "mov     qword [rsp+0x90 {k_8}], r8  {0x0}",
    "cmp     rax, r8",
    "je      0x1400604a5",
    "mov     r13, qword [rsp+0xc0 {var_b8_1}]",
    "mov     eax, dword [rdx+0x58]",
    "add     r9d, esi",
    "add     rcx, rsi",
    "mov     dword [rbx+rcx*4], eax",
    "mov     rdx, qword [rdx+0x28]",
    "mov     r8, qword [r8]",
    "mov     rbx, qword [rbx+0x10]",
    "mov     qword [rsp+0xf8 {k_9}], r13  {0x0}",
    "mov     dword [rsp+0x74 {var_104_1}], r15d  {0xffffffff}",
    "cmp     dword [rbx+0x38], esi",
    "mov     qword [rsp+0x90 {k_8}], rbx",
    "jl      0x14005fb61",
    "mov     ebx, dword [rsp+0x98 {j_22}]",
    "mov     eax, dword [rsp+0x60 {i_23}]",
    "mov     rdx, qword [rsp+0x68 {j_8}]",
    "jmp     0x14005fb92",
    "mov     rbx, qword [rsp+0xb0 {var_c8_3}]",
    "mov     rbx, qword [rbx]",
    "test    byte [rbx+0x40], 0x20",
    "jne     0x14005f2ed",
    "add     eax, esi",
    "cmp     eax, dword [r12+0x28]",
    "mov     dword [rsp+0x60 {i_23}], eax",
    "jl      0x14005f0b7",
    "mov     rcx, qword [rbx+0x10]",
    "mov     qword [rsp+0x80 {var_f8_2}], rcx",
    "cmp     rcx, r13",
    "je      0x14005f319",
    "mov     qword [rsp+0x80 {var_f8_2}], r13  {0x0}",
    "jmp     0x14005f319",
    "cmp     dword [rbx+0x54], r13d",
    "jne     0x14005f351",
    "mov     eax, dword [rcx+0x64]",
    "and     al, 0x3",
    "cmp     al, dil",
    "je      0x14005f311",
    "mov     r9d, 0x7",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, rbp",
    "lea     edx, [r9+0x3f]  {0x46}",
    "mov     dword [rsp+0x20 {var_158_2}], r13d  {0x0}",
    "call    sub_140032364",
    "mov     rdi, qword [rbx+0x10]",
    "cmp     rdi, r13",
    "je      0x14005f3ab",
    "lea     rax, [rsp+0xf0 {var_88}]",
    "xor     r9d, r9d  {0x0}",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x38 {var_140}], rax {var_88}",
    "lea     rax, [rsp+0x64 {var_114}]",
    "lea     r8d, [r9+0x61]",
    "mov     qword [rsp+0x30 {var_148_1}], rax {var_114}",
    "mov     rcx, r14",
    "mov     qword [rsp+0x28 {var_150}], r13  {0x0}",
    "mov     dword [rsp+0x20 {var_158_2}], esi  {0x1}",
    "call    sub_14005cf58",
    "mov     qword [rsp+0x80 {var_f8_2}], rcx",
    "mov     rcx, qword [rcx+0x28]",
    "cmp     rcx, r13",
    "jne     0x14005f2fe",
    "mov     edi, dword [rsp+0x64 {var_114}]",
    "xor     r9d, r9d  {0x0}",
    "mov     rcx, rbp",
    "lea     edx, [r9+0x24]",
    "mov     r8d, edi",
    "mov     dword [rsp+0x20 {var_158_2}], r13d  {0x0}",
    "call    sub_140032364",
    "mov     edx, 0x53",
    "mov     r9d, esi  {0x1}",
    "lea     r8d, [rdx-0x4c]  {0x7}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], r13d  {0x0}",
    "call    sub_140032364",
    "mov     dword [rsp+0x78 {var_100_1}], eax",
    "movsxd  rax, dword [rsp+0xa8 {var_d0_1}]",
    "cmp     rax, r13",
    "jne     0x14005f431",
    "mov     r13d, 0x8",
    "xor     r12d, r12d  {0x0}",
    "xor     ecx, ecx  {0x0}",
    "cmp     cx, word [rbx+0x46]",
    "jge     0x14005f54b",
    "movsx   r9d, word [rbx+0x46]",
    "mov     r8d, edi",
    "mov     edx, 0x5a",
    "mov     rcx, rbp",
    "sub     r9d, esi",
    "mov     dword [rsp+0x20 {var_158_2}], 0x3",
    "call    sub_140032364",
    "movsxd  rdx, dword [rbp+0x90]",
    "cmp     edx, r13d",
    "jle     0x14005f431",
    "xor     r8d, r8d  {0x0}",
    "mov     r9d, r13d",
    "mov     rcx, rbp",
    "lea     edx, [r8+0x46]",
    "mov     dword [rsp+0x20 {var_158_2}], r12d  {0x0}",
    "call    sub_140032364",
    "mov     rdi, qword [rdi+0x28]",
    "add     r13d, esi",
    "cmp     rdi, r12",
    "jne     0x14005f37d",
    "mov     r12, qword [rsp+0xd0 {var_a8}]",
    "xor     r13d, r13d  {0x0}",
    "mov     rdx, qword [rbx+0x30]",
    "xor     r13d, r13d  {0x0}",
    "cmp     rdx, r13",
    "je      0x14005f697",
    "mov     r15, rcx  {0x0}",
    "mov     r14d, 0x80",
    "mov     rax, qword [rbp+0x88]",
    "lea     rcx, [rdx+rdx*2]",
    "mov     edx, 0x80",
    "mov     word [rax+rcx*8-0x16], dx  {0x80}",
    "movsxd  rax, dword [rsp+0xa8 {var_d0_1}]",
    "cmp     rax, r13",
    "jne     0x14005fa0d",
    "mov     eax, dword [r12+0x30]",
    "bt      rax, 0x9",
    "jb      0x14005f697",
    "movsx   eax, word [rbx+0x46]",
    "add     r13d, esi",
    "add     r15, 0x20",
    "cmp     r13d, eax",
    "jl      0x14005f446",
    "mov     rax, qword [rbx+0x8]",
    "cmp     byte [rax+r15+0x18], cl",
    "je      0x14005f52b",
    "mov     edi, dword [rsp+0x78 {var_100_1}]",
    "mov     r8d, dword [rsp+0x64 {var_114}]",
    "mov     edx, 0x5",
    "mov     rcx, rbp",
    "mov     r9d, edi",
    "mov     dword [rsp+0x20 {var_158_2}], r13d  {0x0}",
    "call    sub_140032364",
    "lea     edx, [rdi-0x1]",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     edi, 0x2",
    "mov     dword [rax+0x8], ecx",
    "movsxd  rax, dword [rsp+0xa8 {var_d0_1}]",
    "cmp     rax, r13",
    "jne     0x14005fb61",
    "mov     rdi, qword [rbx+0x10]",
    "mov     qword [rsp+0x90 {k_8}], rdi",
    "cmp     rdi, r13",
    "je      0x14005fa0d",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, r12",
    "call    sub_140044284",
    "xor     edx, edx  {0x0}",
    "mov     r13, rax",
    "cmp     byte [r12+0x61], dl",
    "jne     0x14005f684",
    "movsx   eax, word [rbx+0x44]",
    "cmp     r13d, eax",
    "je      0x14005f52b",
    "mov     r14, qword [rsp+0x180 {j_27}]",
    "or      r15, 0xffffffffffffffff",
    "mov     r9d, r13d",
    "mov     r8d, edi",
    "mov     rdx, rbx",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], 0x3",
    "call    sub_1400469b0",
    "movsxd  rdx, dword [rbp+0x90]",
    "xor     edi, edi  {0x0}",
    "cmp     edx, edi",
    "jle     0x14005f499",
    "lea     r8, [rel data_1400f65d8]  {\"wrong # of entries in index \"}",
    "mov     edx, edi  {0x2}",
    "mov     rcx, rbp",
    "call    sub_1400323e0",
    "mov     rbx, qword [rbx+0x10]",
    "cmp     rbx, r13",
    "je      0x14005fb61",
    "mov     ecx, dword [rsp+0xf0 {var_88}]",
    "mov     eax, 0x8",
    "mov     r12d, 0x3",
    "sub     eax, ecx",
    "mov     r13d, ecx",
    "mov     dword [rsp+0xb8 {var_c0_2}], ecx",
    "mov     dword [rsp+0x100 {var_78_1}], eax",
    "mov     rax, qword [rsp+0x80 {var_f8_2}]",
    "cmp     r13, rdx",
    "je      0x14005f694",
    "mov     eax, dword [r14+0x44]",
    "lea     ecx, [rdi+0x1]",
    "dec     eax",
    "mov     dword [r14+0x40], ecx",
    "mov     dword [rsp+0x88 {var_f0_1}], eax",
    "dec     eax",
    "mov     dword [r14+0x44], eax",
    "mov     ecx, dword [r13]",
    "mov     dword [rsp+0xb8 {var_c0_1}], eax",
    "sub     ecx, esi",
    "movsxd  rdi, ecx",
    "cmp     rdi, rdx",
    "jle     0x14005f601",
    "xor     r9d, r9d  {0x0}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], edi  {0x0}",
    "lea     edx, [r9+0x33]",
    "lea     r8d, [r9+0x3]",
    "call    sub_140032364",
    "mov     r8, qword [rsp+0x90 {k_8}]",
    "lea     rdx, [rel data_1400f6560]  {\"NULL value in %s.%s\"}",
    "mov     r9, qword [r8+0x8]",
    "mov     r8, qword [r8]",
    "mov     rcx, r12",
    "mov     r9, qword [r9+r15]",
    "mov     ebx, eax",
    "call    _printf_p_l",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, rbp",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "lea     r9d, [rax+0x3]",
    "lea     edx, [rax+0x71]",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "mov     r9d, 0xfffffff9",
    "mov     r8, rdi",
    "mov     edx, eax",
    "mov     rcx, rbp",
    "call    sub_140032c40",
    "mov     rcx, rbp",
    "call    sub_14005e778",
    "mov     edx, ebx",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     rbx, qword [rsp+0x90 {k_8}]",
    "mov     edi, dword [rsp+0x64 {var_114}]",
    "mov     dword [rax+0x8], ecx",
    "xor     ecx, ecx  {0x0}",
    "mov     rax, qword [rbp+0x88]",
    "lea     rcx, [rdx+rdx*2]",
    "mov     word [rax+rcx*8-0x16], r14w  {0x80}",
    "mov     r14d, dword [rsp+0xf0 {var_88}]",
    "mov     rax, qword [rsp+0x80 {var_f8_2}]",
    "lea     r13d, [rdi+0x6]  {0x8}",
    "xor     r12d, r12d  {0x0}",
    "mov     rdi, qword [rdi+0x28]",
    "add     r13d, esi",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rsp+0x90 {k_8}], rdi",
    "mov     dword [rsp+0xb8 {var_c0_2}], r13d",
    "cmp     rdi, rcx",
    "jne     0x14005f6ea",
    "mov     eax, dword [rsp+0x74 {var_104_1}]",
    "mov     r8d, dword [rsp+0x64 {var_114}]",
    "xor     r9d, r9d  {0x0}",
    "mov     dword [rsp+0x38 {var_140}], eax",
    "mov     rax, qword [rsp+0xf8 {k_9}]",
    "mov     rdx, rdi",
    "mov     qword [rsp+0x30 {var_148_2}], rax",
    "lea     rax, [rsp+0xd8 {var_a0}]",
    "mov     rcx, r14",
    "mov     qword [rsp+0x28 {var_150_2}], rax {var_a0}",
    "xor     eax, eax  {0x0}",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140055bac",
    "mov     r8d, dword [rsp+0x100 {var_78_1}]",
    "mov     dword [rsp+0x74 {var_104_1}], eax",
    "xor     eax, eax  {0x0}",
    "add     r8d, r13d",
    "lea     edx, [rax+0x53]",
    "mov     r9d, esi  {0x1}",
    "mov     rcx, rbp",
    "mov     qword [rsp+0xf8 {k_9}], rdi",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "movzx   edx, word [rdi+0x60]",
    "mov     eax, dword [rsp+0x74 {var_104_1}]",
    "mov     r9d, dword [rsp+0x88 {var_f0_2}]",
    "mov     dword [rsp+0x28 {var_150_2}], edx",
    "mov     r8d, r13d",
    "mov     rcx, rbp",
    "mov     edx, 0x1d",
    "mov     dword [rsp+0x20 {var_158_2}], eax",
    "call    sub_140032678",
    "lea     r8, [rel data_1400f6598]  {\"row \"}",
    "mov     edx, r12d  {0x3}",
    "mov     rcx, rbp",
    "mov     edi, eax",
    "call    sub_1400323e0",
    "mov     edx, 0x6c",
    "mov     r9d, r12d  {0x3}",
    "lea     r8d, [rdx-0x65]  {0x7}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], r12d  {0x3}",
    "call    sub_140032364",
    "lea     r8, [rel data_1400f65a0]  {\" missing from index \"}",
    "mov     edx, 0x4",
    "mov     rcx, rbp",
    "call    sub_1400323e0",
    "mov     edx, 0x6c",
    "mov     r9d, r12d  {0x3}",
    "lea     r8d, [rdx-0x68]  {0x4}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], r12d  {0x3}",
    "call    sub_140032364",
    "mov     r8, qword [rsp+0x90 {k_8}]",
    "mov     edx, 0x4",
    "mov     r8, qword [r8]",
    "mov     rcx, rbp",
    "call    sub_1400323e0",
    "mov     edx, 0x6c",
    "mov     r9d, r12d  {0x3}",
    "lea     r8d, [rdx-0x68]  {0x4}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], r12d  {0x3}",
    "mov     dword [rsp+0xc8 {var_b0}], eax",
    "call    sub_140032364",
    "mov     rcx, rbp",
    "call    sub_14005e778",
    "mov     edx, edi",
    "mov     rcx, rbp",
    "mov     dword [rsp+0xa0 {var_d8_1}], eax",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     rdi, qword [rsp+0x90 {k_8}]",
    "xor     r8d, r8d  {0x0}",
    "mov     dword [rax+0x8], ecx",
    "cmp     byte [rdi+0x62], r8b",
    "je      0x14005f9aa",
    "xor     r13d, r13d  {0x0}",
    "mov     rdx, r13",
    "mov     rcx, r12",
    "call    sub_140044bf4",
    "mov     rdx, qword [r13+0x8]",
    "mov     r9d, 0x10",
    "mov     r8d, eax",
    "mov     rcx, r14",
    "call    sub_140048248",
    "mov     edx, dword [rsp+0x88 {var_f0_1}]",
    "mov     rcx, rbp",
    "call    sub_14003278c",
    "xor     eax, eax  {0x0}",
    "lea     rdx, [rel data_1400f6578]  {\"CHECK constraint failed in %s\"}",
    "mov     dword [r14+0x40], eax  {0x0}",
    "mov     r8, qword [rbx]",
    "mov     rcx, r12",
    "call    _printf_p_l",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, rbp",
    "mov     rdi, rax",
    "xor     eax, eax  {0x0}",
    "lea     r9d, [rax+0x3]",
    "lea     edx, [rax+0x71]",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "mov     r9d, 0xfffffff9",
    "mov     r8, rdi",
    "mov     edx, eax",
    "mov     rcx, rbp",
    "call    sub_140032c40",
    "mov     rcx, rbp",
    "call    sub_14005e778",
    "mov     edx, dword [rsp+0xb8 {var_c0_1}]",
    "mov     rcx, rbp",
    "call    sub_14003278c",
    "xor     edx, edx  {0x0}",
    "mov     r12d, dword [rsp+0x88 {var_f0_1}]",
    "lea     rax, [rdi+rdi*4]",
    "xor     r15d, r15d  {0x0}",
    "lea     rbx, [r13+rax*8+0x8]",
    "mov     rbx, qword [rbx+0x28]",
    "add     r13d, esi",
    "cmp     rbx, r12",
    "jne     0x14005fa8a",
    "mov     edx, 0x5d",
    "lea     r8d, [r14+r13-0x8]",
    "mov     rcx, rbp",
    "lea     r9d, [rdx-0x5a]  {0x3}",
    "mov     dword [rsp+0x20 {var_158_2}], r12d  {0x0}",
    "call    sub_140032364",
    "xor     r9d, r9d  {0x0}",
    "mov     r8d, r13d",
    "lea     edx, [r9+0x35]",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], 0x3",
    "call    sub_140032364",
    "movsxd  rcx, dword [rbp+0x90]",
    "cmp     ecx, r12d",
    "mov     dword [rsp+0x78 {var_100_1}], eax",
    "jle     0x14005faed",
    "add     dword [r14+0x44], r15d",
    "mov     ecx, dword [r14+0x44]",
    "mov     dword [rsp+0x88 {var_f0_2}], ecx",
    "cmp     rax, rdi",
    "je      0x14005f9e0",
    "mov     r12, qword [rsp+0xd0 {var_a8}]",
    "xor     r13d, r13d  {0x0}",
    "mov     edx, dword [rsp+0xa0 {var_d8_1}]",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     edx, dword [rsp+0xd8 {var_a0}]",
    "mov     dword [rax+0x8], ecx",
    "xor     eax, eax  {0x0}",
    "cmp     edx, eax",
    "je      0x14005f9d8",
    "add     dword [r14+0x44], r15d",
    "mov     eax, dword [r14+0x44]",
    "mov     r13d, r8d  {0x0}",
    "mov     dword [rsp+0x88 {var_f0_3}], eax",
    "cmp     r8w, word [rdi+0x5e]",
    "jae     0x14005f8ed",
    "mov     rdx, qword [rbx]",
    "xor     r9d, r9d  {0x0}",
    "mov     r8d, r12d",
    "mov     rcx, r14",
    "call    sub_1400485c0",
    "sub     rdi, rsi",
    "sub     rbx, 0x28",
    "cmp     rdi, r15",
    "jg      0x14005f5c9",
    "mov     r12, qword [rsp+0xd0 {var_a8}]",
    "mov     rbx, qword [rsp+0x90 {k_8}]",
    "mov     eax, dword [rsp+0xb8 {var_c0_1}]",
    "or      r15, 0xffffffffffffffff",
    "cmp     rax, rbx",
    "je      0x14005fb3e",
    "mov     r12, qword [rsp+0xd0 {var_a8}]",
    "mov     r14, qword [rsp+0x180 {j_27}]",
    "xor     r13d, r13d  {0x0}",
    "mov     r8, qword [rbx]",
    "mov     edx, 0x4",
    "mov     rcx, rbp",
    "call    sub_1400323e0",
    "mov     edx, 0x6c",
    "mov     r9d, edi  {0x2}",
    "lea     r8d, [rdx-0x68]  {0x4}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], 0x3",
    "call    sub_140032364",
    "mov     rcx, rbp",
    "call    sub_14005e778",
    "mov     edx, dword [rsp+0x78 {var_100_1}]",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     dword [rax+0x8], ecx",
    "mov     rax, qword [rsp+0x80 {var_f8_2}]",
    "lea     rdx, [rcx+rcx*2]",
    "mov     rcx, qword [rbp+0x88]",
    "mov     eax, 0x90",
    "mov     word [rcx+rdx*8-0x16], ax  {0x90}",
    "mov     rax, qword [rsp+0x80 {var_f8_2}]",
    "mov     rcx, qword [r14+0x10]",
    "call    sub_14003278c",
    "mov     r13d, dword [rsp+0xb8 {var_c0_2}]",
    "xor     r9d, r9d  {0x0}",
    "mov     dword [rsp+0x20 {var_158_2}], r8d  {0x0}",
    "lea     edx, [r9+0x5]",
    "mov     r8d, r13d",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "mov     r9d, dword [rsp+0x88 {var_f0_3}]",
    "xor     r8d, r8d  {0x0}",
    "mov     edi, eax",
    "xor     eax, eax  {0x0}",
    "mov     rcx, rbp",
    "lea     edx, [rax+0xb]",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "mov     edx, edi",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     ecx, dword [rbp+0x90]",
    "mov     rdi, qword [rsp+0x90 {k_8}]",
    "mov     r9d, dword [rsp+0x88 {var_f0_3}]",
    "mov     dword [rax+0x8], ecx",
    "movzx   eax, word [rdi+0x5e]",
    "mov     dword [rsp+0x28 {var_150_2}], eax",
    "mov     eax, dword [rsp+0x74 {var_104_1}]",
    "mov     r8d, r13d",
    "mov     edx, 0x26",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax",
    "call    sub_140032678",
    "lea     r8, [rel data_1400f65b8]  {\"non-unique entry in index \"}",
    "mov     edx, r12d  {0x3}",
    "mov     rcx, rbp",
    "call    sub_1400323e0",
    "mov     r9d, dword [rsp+0xc8 {var_b0}]",
    "xor     eax, eax  {0x0}",
    "lea     edx, [rax+0xb]",
    "xor     r8d, r8d  {0x0}",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "mov     edx, dword [rsp+0x88 {var_f0_3}]",
    "mov     rcx, rbp",
    "call    sub_14003278c",
    "mov     r15d, dword [rsp+0x74 {var_104_1}]",
    "mov     rcx, r8  {0x0}",
    "mov     r14d, eax",
    "mov     qword [rsp+0xe0 {var_98_1}], rcx  {0x0}",
    "xor     eax, eax  {0x0}",
    "lea     r8d, [r13+r15]",
    "mov     r9d, r14d",
    "lea     edx, [rax+0x32]",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20 {var_158_2}], eax  {0x0}",
    "call    sub_140032364",
    "xor     r8d, r8d  {0x0}",
    "mov     rax, qword [rbx+0x8]",
    "mov     rcx, rdx",
    "shl     rcx, 0x5",
    "cmp     byte [rcx+rax+0x18], r8b",
    "jne     0x14005f8c1",
    "mov     rax, qword [rdi+0x8]",
    "movsx   rdx, word [rax+rcx]",
    "cmp     edx, r8d",
    "jl      0x14005f8a5",
    "mov     r14, qword [rsp+0x180 {j_27}]",
    "or      r15, 0xffffffffffffffff",
    "mov     rcx, qword [rsp+0xe0 {var_98_1}]",
    "movzx   eax, word [rdi+0x5e]",
    "add     r13d, esi",
    "add     rcx, 0x2",
    "cmp     r13d, eax",
    "mov     qword [rsp+0xe0 {var_98_1}], rcx",
    "jl      0x14005f885"
  ],
  "high_level_IL": [
    "j_27 = arg1",
    "int64_t* r12 = *arg1",
    "int64_t* j_18 = arg2",
    "int64_t* var_a8 = r12",
    "int64_t* j_32 = arg1",
    "int64_t* result",
    "int512_t zmm0",
    "int512_t zmm1",
    "result, zmm0, zmm1 = sub_140065300(arg1)",
    "int64_t* result_2 = result",
    "if (result != 0)",
    "result[0x19].d |= 0x40",
    "result = *j_32",
    "char rdi_1 = 2",
    "j_32[7].d = 2",
    "int64_t* j_8",
    "uint32_t j_21",
    "if (*(arg3 + 8) u<= 0)",
    "j_21 = zx.d(*(result + 0xb4))",
    "result, zmm1 = sub_14004e6f0(j_32, j_18, arg3, &j_8, zmm0, zmm1, result)",
    "j_18 = j_8",
    "j_21 = result.d",
    "if (j_21 s>= 0)",
    "int64_t j_9 = sx.q(j_21)",
    "int32_t rsi_1 = 1",
    "j_8 = j_9",
    "int64_t rax = r12[4]",
    "int64_t r15_2 = j_9 << 5",
    "if (j_21 == 1)",
    "int64_t* rdx_1 = *j_32",
    "if (*(rdx_1[4] + 0x28) != 0)",
    "result = nullptr",
    "result, zmm1 = sub_140053828(j_32, rdx_1)",
    "if (j_21 != 1 || result.d == 0)",
    "int512_t zmm0_1",
    "result, zmm0_1 = sub_14004e64c(r12, j_18, zmm1)",
    "if (result != 0)",
    "int64_t* rax_2",
    "if (arg5 == 0)",
    "rax_2 = sub_14004e64c(r12, arg4, zmm1)",
    "rax_2 = _printf_p_l(r12, \"-%T\", arg4, zmm0_1)",
    "int64_t* r13 = rax_2",
    "char* rax_5",
    "if (*(arg3 + 8) u<= 0)",
    "rax_5 = nullptr",
    "rax_5 = *(r15_2 + rax)",
    "int64_t** var_158_2 = rax_5",
    "int32_t rax_6",
    "int512_t zmm0_2",
    "int512_t zmm1_1",
    "rax_6, zmm0_2, zmm1_1 = sub_14004da74(j_32, 0x13)",
    "if (rax_6 == 0)",
    "int64_t* var_70 = nullptr",
    "int64_t var_58_1 = 0",
    "int64_t* result_1 = result",
    "int64_t* var_60_1 = r13",
    "r12[0x45].d = 0",
    "int32_t rax_8 = sub_1400851c8(r12, rax_5, 0xe, &var_70)",
    "if (rax_8 == 0)",
    "sub_140033bb0(result_2, 1, zmm1_1)",
    "sub_140033c58(result_2, 0, 0, var_70, zmm1_1, -1)",
    "sub_14005e650(result_2, var_70)",
    "sub_140016950(var_70)",
    "if (rax_8 == 0xc)",
    "void* rax_9",
    "int64_t r8_4",
    "rax_9, r8_4 = sub_14005e6e0(result)",
    "void* rdx_6 = rax_9",
    "if (rdx_6 != 0)",
    "if ((*(rdx_6 + 9) & 1) == 0)",
    "goto label_14005ea9c",
    "int32_t rax_10",
    "rax_10, r8_4, zmm0_2, zmm1_1 = sub_140062358(j_32, zmm0_2)",
    "if (rax_10 == 0)",
    "rdx_6 = rax_9",
    "label_14005ea9c:",
    "if ((*(rdx_6 + 9) & 2) == 0 && ((*(rdx_6 + 9) & 4) == 0 || r13 == 0))",
    "r8_4, zmm0_2, zmm1_1 = sub_14005e550(result_2, rdx_6)",
    "rdx_6 = rax_9",
    "uint32_t rcx_15 = zx.d(*(rdx_6 + 8))",
    "int32_t var_140",
    "int64_t rdx_13",
    "int32_t r8_61",
    "if (rcx_15 s<= 0x14)",
    "if (rcx_15 == 0x14)",
    "int32_t r14_5",
    "if (r13 != 0)",
    "int32_t rax_177 = sub_140019074(r13)",
    "r14_5 = 0",
    "int32_t rcx_245 = rax_177",
    "j_27.d = rax_177",
    "char** j_11 = &data_1400d84c8",
    "while (true)",
    "j_8 = j_11",
    "if (j_11 != &data_1400d84f8)",
    "char* rdx_89 = *j_11",
    "if (rdx_89 != 0)",
    "if (sub_1400192e8(r13, rdx_89, rcx_245, j_11.d) == 0)",
    "break",
    "rcx_245 = j_27.d",
    "r14_5 += 1",
    "j_11 = &j_8[1]",
    "continue",
    "r14_5 = -1",
    "break",
    "if (r14_5 != 2)",
    "goto label_14006087d",
    "if (test_bit(zx.q(r12[6].d), 0x1c))",
    "r14_5 = -1",
    "label_14006087d:",
    "if (r14_5 == 0xffffffff)",
    "goto label_14006088a",
    "r14_5 = -1",
    "label_14006088a:",
    "if (*(arg3 + 8) == 0)",
    "j_21 = 0",
    "*(arg3 + 8) = 1",
    "int32_t rdi_21 = r12[5].d",
    "int64_t j_25 = sx.q(j_21)",
    "int32_t i = rdi_21 - 1",
    "j_27 = j_25",
    "int64_t i_26 = sx.q(i)",
    "if (rdi_21 - 1 s>= 0)",
    "int64_t rbx_16 = i_26 << 5",
    "if (*(rbx_16 + r12[4] + 8) != 0 && (i_26 == j_25 || *(arg3 + 8) == 0))",
    "*(result_2 + 0xcc) |= 1 << i.b",
    "var_158_2.d = r14_5",
    "zmm1_1 = sub_140032364(result_2, 7, i, 1, zmm1_1, var_158_2.d)",
    "j_25 = j_27",
    "i -= 1",
    "i_26 -= 1",
    "rbx_16 -= 0x20",
    "do while (i s>= 0)",
    "r13 = rax_2",
    "r8_61 = 1",
    "goto label_140060ea2",
    "if (rcx_15 s> 0xa)",
    "if (rcx_15 == 0xc)",
    "if (r13 != 0)",
    "void* rbx_14 = r12[4]",
    "void* rax_174 = *(rbx_14 + 0x18)",
    "if ((*(rax_174 + 0x72) & 1) == 0 || (*(rax_174 + 0x72) & 4) != 0)",
    "char const* const i_1 = \"UTF8\"",
    "char const (** const r11_1)[0x5] = &data_1400d8530",
    "if (sub_1400192b0(r13, i_1) == 0)",
    "int32_t rax_175",
    "rax_175.b = r11_1[1].b",
    "if (rax_175.b != 0)",
    "rdi_1 = rax_175.b",
    "*(r12 + 0x5e) = rdi_1",
    "*(*(rbx_14 + 0x18) + 0x71) = rdi_1",
    "break",
    "r11_1 = &r11_1[2]",
    "i_1 = *r11_1",
    "do while (i_1 != 0)",
    "if (*r11_1 == 0)",
    "sub_1400191b8(j_32, \"unsupported encoding: %s\", r13, zmm0_2)",
    "if (sub_140062358(j_32, zmm0_2) == 0)",
    "sub_14005e650(result_2, (&data_1400d8530)[zx.q(*(*j_32 + 0x5e)) * 2])",
    "int64_t var_150",
    "int32_t var_114",
    "int64_t var_100_1",
    "void* k_8",
    "void* const var_b0",
    "int32_t var_a0",
    "if (rcx_15 == 0xd)",
    "int32_t rax_144 = j_32[7].d",
    "j_32[7].d = rax_144 + 6",
    "void** i_2 = *(*(r15_2 + r12[4] + 0x18) + 0x10)",
    "while (i_2 != 0)",
    "char* rbx_11 = rax_5",
    "int64_t* var_f8_3",
    "int64_t* rcx_203",
    "if (r13 == 0)",
    "rcx_203 = i_2[2]",
    "i_2 = *i_2",
    "var_f8_3 = rcx_203",
    "int64_t* rax_148",
    "rax_148, zmm0_2, zmm1_1 = sub_14004df10(j_32, 0, r13, rbx_11, zmm0_2, zmm1_1)",
    "rcx_203 = rax_148",
    "var_f8_3 = rax_148",
    "i_2 = nullptr",
    "if (rcx_203 != 0 && rcx_203[4] != 0)",
    "int64_t j = rcx_203[0xe]",
    "int32_t var_118_1 = 0xfff0bdc0",
    "int32_t rcx_204 = -0xf4240",
    "if (j != 0)",
    "void* rax_149 = r12[4]",
    "rcx_204 = 0",
    "var_118_1 = 0",
    "if (*(rax_149 + 0x18) != j)",
    "void* rax_150 = rax_149 + 0x18",
    "rax_150 += 0x20",
    "rcx_204 += 1",
    "do while (*rax_150 != j)",
    "var_118_1 = rcx_204",
    "sub_1400538c0(j_32, rcx_204)",
    "int32_t rcx_208 = rax_144 + 6 + sx.d(*(var_f8_3 + 0x46))",
    "if (rcx_208 s> j_32[7].d)",
    "j_32[7].d = rcx_208",
    "var_158_2.d = 0x61",
    "int512_t zmm1_43 = sub_14005a1e8(j_32, 0, var_118_1, var_f8_3, 0x61)",
    "int512_t zmm0_7",
    "int512_t zmm1_44",
    "zmm0_7, zmm1_44 = sub_1400323e0(result_2, rax_144 + 1, *var_f8_3, zmm1_43)",
    "int32_t rcx_211 = 1",
    "void* k_11 = var_f8_3[4]",
    "while (true)",
    "k_8 = k_11",
    "var_114 = rcx_211",
    "if (k_11 == 0)",
    "if (*(j_32 + 0x34) s< rcx_211)",
    "*(j_32 + 0x34) = rcx_211",
    "var_158_2.d = 0",
    "int32_t rax_156",
    "int512_t zmm0_8",
    "int512_t zmm1_46",
    "rax_156, zmm0_8, zmm1_46 = sub_140032364(result_2, 0x24, 0, 0, zmm1_44, 0)",
    "int32_t var_118_2 = 1",
    "var_a0 = rax_156",
    "int64_t* j_13 = var_f8_3[4]",
    "j_8 = j_13",
    "if (j_13 != 0)",
    "int64_t* j_1 = j_8",
    "var_100_1.d = rax_144 + 3",
    "void* rax_160",
    "int32_t r10_2",
    "rax_160, r10_2 = sub_14004de30(r12, j_1[2], rbx_11)",
    "var_b0 = nullptr",
    "k_8 = nullptr",
    "if (rax_160 != 0)",
    "r10_2, zmm1_46 = sub_14005841c(j_32, rax_160, j_1, &var_b0, zmm0_8, zmm1_46, &k_8)",
    "*(j_32 + 0x44) -= 1",
    "bool cond:30_1 = j_1[5].d s<= 0",
    "var_114 = *(j_32 + 0x44)",
    "int32_t var_108_3 = 0",
    "if (not(cond:30_1))",
    "int32_t* k_15 = k_8",
    "int32_t r14_4 = var_114",
    "int32_t* j_14 = &j_1[8]",
    "int32_t r15_10 = rax_144 + 6",
    "int32_t* k_19 = k_15",
    "int32_t* k_18 = k_15",
    "j_8 = j_14",
    "bool cond:33_1",
    "int32_t r9_37",
    "if (k_15 == 0)",
    "r9_37 = *j_14",
    "r9_37 = *k_19",
    "var_158_2.d = r15_10",
    "int512_t zmm1_47 = sub_1400469b0(result_2, var_f8_3, 0, r9_37, r10_2, zmm1_46, var_158_2.d)",
    "var_158_2.d = 0",
    "r10_2, zmm1_46 = sub_140032364(result_2, 0x32, r15_10, r14_4, zmm1_47, 0)",
    "j_14 = &j_8[2]",
    "k_19 = &k_18[1]",
    "r15_10 += 1",
    "cond:33_1 = var_108_3 + 1 s< j_1[5].d",
    "var_108_3 += 1",
    "j_8 = j_14",
    "k_18 = k_19",
    "do while (cond:33_1)",
    "r12 = var_a8",
    "j_32 = j_27",
    "rbx_11 = rax_5",
    "void* const rdx_80 = var_b0",
    "if (rdx_80 != 0)",
    "int32_t rbx_12 = j_1[5].d",
    "int64_t* rax_163 = sub_14005a288(r12, rdx_80, zmm1_46)",
    "var_158_2.d = rax_144 + 5",
    "int32_t rax_164",
    "int512_t zmm1_48",
    "rax_164, zmm1_48 = sub_140032364(result_2, 0x5c, rax_144 + 6, j_1[5].d, zmm1_46, var_158_2.d)",
    "sub_140032c40(result_2, rax_164, rax_163, rbx_12, zmm1_48)",
    "var_150.d = 0",
    "var_158_2.d = rax_144 + 5",
    "zmm1_46 = sub_140032678(result_2, 0x1d, var_118_2, var_114)",
    "rbx_11 = rax_5",
    "if (rax_160 != 0)",
    "var_158_2.d = rax_144 + 6",
    "int512_t zmm1_49 = sub_140032364(result_2, 0x1e, var_118_2, result_2[0x12].d + 2, zmm1_46, var_158_2.d)",
    "var_158_2.d = 0",
    "zmm1_46 = sub_140032364(result_2, 0xb, 0, var_114, zmm1_49, 0)",
    "var_158_2.d = 0",
    "int32_t rdx_82 = 0x80",
    "if ((var_f8_3[8].b & 0x20) != 0)",
    "rdx_82 = 0x49",
    "int512_t zmm1_50 = sub_140032364(result_2, rdx_82, 0, rax_144 + 2, zmm1_46, 0)",
    "j_1[2]",
    "var_158_2.d = var_118_2 - 1",
    "var_158_2.d = 0",
    "int512_t zmm1_52 = sub_140032364(result_2, 0x51, rax_144 + 1, 4, sub_140032430(result_2, var_100_1.d, \"siX\", zmm1_50), 0)",
    "zmm0_8, zmm1_46 = sub_14003278c(result_2, var_114, zmm1_52)",
    "int64_t* k_13 = k_8",
    "if (k_13 != 0)",
    "sub_1400169a8(r12, k_13)",
    "j_1 = j_1[1]",
    "var_118_2 += 1",
    "do while (j_1 != 0)",
    "r13 = rax_2",
    "int32_t rbx_13 = var_a0",
    "var_158_2.d = 0",
    "zmm0_2, zmm1_1 = sub_140032364(result_2, 5, 0, rbx_13 + 1, zmm1_46, 0)",
    "void* rax_171 = sub_140032d34(result_2, rbx_13)",
    "*(rax_171 + 8) = result_2[0x12].d",
    "break",
    "int64_t* j_10 = sub_14004de30(r12, *(k_11 + 0x10), rbx_11)",
    "j_8 = j_10",
    "if (j_10 != 0)",
    "int64_t* k_17 = k_8",
    "var_b0 = nullptr",
    "var_158_2 = nullptr",
    "int32_t rax_153",
    "int512_t zmm1_45",
    "rax_153, zmm1_45 = sub_14005841c(j_32, j_10, k_17, &var_b0, zmm0_7, zmm1_44, nullptr)",
    "if (rax_153 != 0)",
    "goto label_14006159c",
    "void* const rcx_214 = var_b0",
    "if (rcx_214 != 0)",
    "var_158_2.d = var_118_1",
    "sub_140032364(result_2, 0x61, var_114, *(rcx_214 + 0x58), zmm1_45, 0)",
    "zmm0_7, zmm1_44 = sub_140032d08(j_32)",
    "var_158_2.d = 0x61",
    "zmm0_7, zmm1_44 = sub_14005a1e8(j_32, var_114, var_118_1, j_8, 0x61)",
    "k_11 = *(k_8 + 8)",
    "rcx_211 = var_114 + 1",
    "if (rcx_15 == 0xe)",
    "if (r13 != 0)",
    "void* rax_137 = sub_14004de30(r12, r13, rax_5)",
    "if (rax_137 != 0)",
    "void* i_4 = *(rax_137 + 0x20)",
    "if (i_4 != 0)",
    "int64_t i_3 = *(rax_137 + 0x70)",
    "int32_t rcx_188 = -0xf4240",
    "if (i_3 != 0)",
    "void* rax_138 = r12[4]",
    "rcx_188 = 0",
    "if (*(rax_138 + 0x18) != i_3)",
    "void* rax_139 = rax_138 + 0x18",
    "rax_139 += 0x20",
    "rcx_188 += 1",
    "do while (*rax_139 != i_3)",
    "int32_t r15_7 = 0",
    "j_27.d = 0",
    "j_32[7].d = 8",
    "int512_t zmm1_42 = sub_1400538c0(j_32, rcx_188)",
    "int32_t j_2 = 0",
    "if (*(i_4 + 0x28) s> 0)",
    "int32_t r13_7 = j_27.d",
    "int32_t* r15_8 = i_4 + 0x40",
    "uint32_t rcx_190 = zx.d(*(i_4 + 0x2d))",
    "char const* const r8_42",
    "if (rcx_190 == 7)",
    "r8_42 = \"RESTRICT\"",
    "if (rcx_190 == 8)",
    "r8_42 = \"SET NULL\"",
    "if (rcx_190 == 9)",
    "r8_42 = \"SET DEFAULT\"",
    "if (rcx_190 == 0xa)",
    "r8_42 = \"CASCADE\"",
    "r8_42 = \"NO ACTION\"",
    "uint32_t rcx_194 = zx.d(*(i_4 + 0x2e))",
    "char const* const rax_140",
    "if (rcx_194 == 7)",
    "rax_140 = \"RESTRICT\"",
    "if (rcx_194 == 8)",
    "rax_140 = \"SET NULL\"",
    "if (rcx_194 == 9)",
    "rax_140 = \"SET DEFAULT\"",
    "if (rcx_194 == 0xa)",
    "rax_140 = \"CASCADE\"",
    "rax_140 = \"NO ACTION\"",
    "char const* const var_128_1 = \"NONE\"",
    "char const* const var_130_1 = r8_42",
    "char const* const var_138_1 = rax_140",
    "var_140.q = *(r15_8 + 8)",
    "int64_t var_148_4 = *((sx.q(*r15_8) << 5) + *(rax_137 + 8))",
    "int64_t var_150_4 = *(i_4 + 0x10)",
    "var_158_2.d = j_2",
    "zmm1_42 = sub_140032430(result_2, 1, \"iissssss\", zmm1_42)",
    "j_2 += 1",
    "r15_8 = &r15_8[4]",
    "do while (j_2 s< *(i_4 + 0x28))",
    "r15_7 = r13_7",
    "i_4 = *(i_4 + 8)",
    "r15_7 += 1",
    "j_27.d = r15_7",
    "do while (i_4 != 0)",
    "r13 = rax_2",
    "if (rcx_15 == 0xf)",
    "j_32[7].d = 2",
    "void* i_5 = &data_1401400a0",
    "while (i_5 s< &data_140140158)",
    "void* j_3 = *i_5",
    "while (j_3 != 0)",
    "if (not(test_bit(*(j_3 + 4), 0x12)))",
    "*(j_3 + 0x38)",
    "var_158_2.d = 1",
    "zmm1_1 = sub_140032430(result_2, 1, \"si\", zmm1_1)",
    "j_3 = *(j_3 + 0x40)",
    "i_5 += 8",
    "void** i_6 = r12[0x3e]",
    "while (i_6 != 0)",
    "int64_t var_158_6 = 0",
    "*(i_6[2] + 0x38)",
    "zmm1_1 = sub_140032430(result_2, 1, \"si\", zmm1_1)",
    "i_6 = *i_6",
    "if (rcx_15 == 0x10)",
    "int32_t rdi_18",
    "if (r13 == 0)",
    "rdi_18 = 0x7fffffff",
    "if (sub_140019a68(r13, &j_27) == 0)",
    "rdi_18 = 0x7fffffff",
    "rdi_18 = j_27.d",
    "if (rdi_18 s<= 0)",
    "rdi_18 = 0x7fffffff",
    "int32_t rax_135",
    "int512_t zmm1_39",
    "rax_135, zmm1_39 = sub_140032364(result_2, 0x3b, j_21, 0, sub_140032364(result_2, 0x46, rdi_18, 1, sub_14005398c(j_32, 0, j_21), 0), 0)",
    "sub_140032364(result_2, 0x2f, 1, rax_135, sub_140032364(result_2, 0x53, 1, 0xffffffff, sub_140032364(result_2, 0x51, 1, 0, zmm1_39, 0), 0), 0)",
    "void* rax_136 = sub_140032d34(result_2, rax_135)",
    "*(rax_136 + 8) = result_2[0x12].d",
    "if (rcx_15 == 0x11)",
    "if (r13 != 0)",
    "void* i_24 = sub_14004e0d8(r12, r13, rax_5)",
    "void* i_8 = i_24",
    "if (i_24 != 0)",
    "label_14005fda4:",
    "int64_t i_7 = *(i_8 + 0x30)",
    "int32_t rcx_167 = -0xf4240",
    "if (i_7 != 0)",
    "void* rax_122 = r12[4]",
    "rcx_167 = 0",
    "if (*(rax_122 + 0x18) != i_7)",
    "void* rax_123 = rax_122 + 0x18",
    "rax_123 += 0x20",
    "rcx_167 += 1",
    "do while (*rax_123 != i_7)",
    "uint32_t rax_124",
    "if (*(rax_9 + 0x10) == 0)",
    "rax_124 = zx.d(*(i_8 + 0x5e))",
    "j_32[7].d = 3",
    "rax_124 = zx.d(*(i_8 + 0x60))",
    "j_32[7].d = 6",
    "j_27.d = rax_124",
    "j_8 = *(i_8 + 0x18)",
    "int512_t zmm1_35 = sub_1400538c0(j_32, rcx_167)",
    "int64_t rcx_169 = 0",
    "int64_t r15_6 = 0",
    "if (sx.q(j_27.d) s> 0)",
    "int64_t r13_6 = sx.q(j_27.d)",
    "int32_t r12_2 = 0",
    "while (true)",
    "int16_t rdx_60 = *(*(i_8 + 8) + (r15_6 << 1))",
    "if (rdx_60 s>= 0)",
    "rcx_169 = *((sx.q(rdx_60) << 5) + j_8[1])",
    "int64_t var_150_3 = rcx_169",
    "var_158_2.d = sx.d(rdx_60)",
    "int512_t zmm1_36 = sub_140032430(result_2, 1, \"iisX\", zmm1_35)",
    "if (*(rax_9 + 0x10) != 0)",
    "*(*(i_8 + 0x38) + r15_6)",
    "int32_t rdx_61",
    "rdx_61.b = r12_2 s< zx.d(*(i_8 + 0x5e))",
    "var_150_3.d = rdx_61",
    "var_158_2 = *(*(i_8 + 0x40) + (r15_6 << 3))",
    "zmm1_36 = sub_140032430(result_2, 4, \"isiX\", zmm1_36)",
    "var_158_2.d = 0",
    "zmm1_35 = sub_140032364(result_2, 0x51, 1, j_32[7].d, zmm1_36, 0)",
    "r15_6 += 1",
    "r12_2 += 1",
    "if (r15_6 s>= r13_6)",
    "break",
    "rcx_169 = 0",
    "r12 = var_a8",
    "r13 = rax_2",
    "void* rax_120 = sub_14004df10(j_32, 2, r13, rax_5, zmm0_2, zmm1_1)",
    "if (rax_120 != 0 && (*(rax_120 + 0x40) & 0x20) != 0)",
    "i_8 = *(rax_120 + 0x10)",
    "while (i_8 != 0)",
    "if (((*(i_8 + 0x64)).b & 3) == 2)",
    "break",
    "i_8 = *(i_8 + 0x28)",
    "if (i_8 != 0)",
    "goto label_14005fda4",
    "if (rcx_15 != 0x12)",
    "if (rcx_15 != 0x13)",
    "goto label_140061087",
    "int32_t rcx_64",
    "rcx_64.b = *(zx.q(*result) + &data_1400d6400) == 0x71",
    "int32_t rax_48 = 0x64",
    "if (*arg3 == 0)",
    "j_21 = -1",
    "j_32[7].d = 6",
    "uint32_t j_22 = j_21",
    "int32_t var_108_2 = 0x64",
    "var_114 = 0x64",
    "if (r13 != 0)",
    "sub_140019a68(r13, &var_114)",
    "int32_t rdx_20 = var_114",
    "if (rdx_20 s<= 0)",
    "rdx_20 = 0x64",
    "rax_48 = rdx_20",
    "var_108_2 = rdx_20",
    "var_158_2.d = 0",
    "int512_t zmm1_3 = sub_140032364(result_2, 0x46, rax_48 - 1, 1, zmm1_1, 0)",
    "int64_t* j_16 = sx.q(j_21)",
    "bool cond:19_1 = r12[5].d s<= 0",
    "int32_t i_9 = 0",
    "j_8 = j_16",
    "int32_t i_23 = 0",
    "if (not(cond:19_1))",
    "int32_t k_3 = 0",
    "if (j_16 s< 0 || i_9 == j_21)",
    "zmm1_3 = sub_1400538c0(j_32, i_9)",
    "int64_t rcx_69 = sx.q(i_23) << 5",
    "void* k_12 = *(rcx_69 + r12[4] + 0x18) + 8",
    "k_8 = k_12",
    "void** j_4 = *(k_12 + 8)",
    "int32_t rax_50 = 0",
    "while (j_4 != 0)",
    "void* rdx_22 = j_4[2]",
    "if ((*(rdx_22 + 0x40) & 0x20) == 0)",
    "rax_50 += 1",
    "void* k = *(rdx_22 + 0x10)",
    "int32_t k_10 = 0",
    "while (k != 0)",
    "k = *(k + 0x28)",
    "rax_50 += 1",
    "k_10 += 1",
    "j_4 = *j_4",
    "if (k_10 s> k_3)",
    "k_3 = k_10",
    "int64_t* rax_52 = sub_140016c18(r12, sx.q(rax_50 + 1) << 2, zmm1_3)",
    "if (rax_52 == 0)",
    "break",
    "int32_t r9_8 = 0",
    "int64_t rcx_72 = 0",
    "void** j_5 = *(k_8 + 8)",
    "while (j_5 != 0)",
    "void* rdx_25 = j_5[2]",
    "if ((*(rdx_25 + 0x40) & 0x20) == 0)",
    "r9_8 += 1",
    "rcx_72 += 1",
    "*(rax_52 + (rcx_72 << 2)) = *(rdx_25 + 0x38)",
    "void* k_1 = *(rdx_25 + 0x10)",
    "while (k_1 != 0)",
    "r9_8 += 1",
    "rcx_72 += 1",
    "*(rax_52 + (rcx_72 << 2)) = *(k_1 + 0x58)",
    "k_1 = *(k_1 + 0x28)",
    "j_5 = *j_5",
    "*rax_52 = r9_8",
    "int32_t rax_55 = k_3 + 8",
    "if (j_32[7].d s> rax_55)",
    "rax_55 = j_32[7].d",
    "k_3 = 0",
    "var_158_2.d = 1",
    "*(j_32 + 0x1f) = 0",
    "j_32[5].d = 0",
    "j_32[7].d = rax_55",
    "int32_t rax_56",
    "int512_t zmm1_4",
    "rax_56, zmm1_4 = sub_140032364(result_2, 0x92, 2, r9_8, zmm1_3, 1)",
    "sub_140032c40(result_2, rax_56, rax_52, 0xfffffff1, zmm1_4)",
    "int64_t rax_57 = sx.q(result_2[0x12].d)",
    "if (rax_57.d s> 0)",
    "*(result_2[0x11] + rax_57 * 0x18 - 0x16) = zx.w(i_23.b)",
    "var_158_2.d = 0",
    "int32_t rax_59",
    "int512_t zmm0_3",
    "rax_59, zmm0_3 = sub_140032364(result_2, 0x32, 2, 0, zmm1_4, 0)",
    "int64_t* rax_61",
    "int512_t zmm1_5",
    "rax_61, zmm1_5 = _printf_p_l(r12, \"*** in database %s ***\\n\", *(rcx_69 + r12[4]), zmm0_3)",
    "var_158_2.d = 0",
    "int32_t rax_62",
    "int512_t zmm1_6",
    "rax_62, zmm1_6 = sub_140032364(result_2, 0x71, 0, 3, zmm1_5, 0)",
    "sub_140032c40(result_2, rax_62, rax_61, 0xfffffff9, zmm1_6)",
    "var_158_2.d = 3",
    "zmm1_3 = sub_14005e778(result_2, sub_140032364(result_2, 0x6c, 2, 3, zmm1_6, 3))",
    "void* rax_63 = sub_140032d34(result_2, rax_59)",
    "*(rax_63 + 8) = result_2[0x12].d",
    "void** j_6 = *(k_8 + 8)",
    "while (j_6 != 0)",
    "void* k_14 = j_6[2]",
    "void* k_9 = nullptr",
    "int32_t var_104_1 = 0xffffffff",
    "bool cond:35_1 = *(k_14 + 0x38) s< 1",
    "k_8 = k_14",
    "if (not(cond:35_1))",
    "void* var_f8_2",
    "if ((*(k_14 + 0x40) & 0x20) != 0)",
    "void* rcx_84 = *(k_14 + 0x10)",
    "var_f8_2 = rcx_84",
    "if (rcx_84 != 0)",
    "while (((*(rcx_84 + 0x64)).b & 3) != 2)",
    "rcx_84 = *(rcx_84 + 0x28)",
    "if (rcx_84 == 0)",
    "break",
    "var_f8_2 = rcx_84",
    "var_f8_2 = nullptr",
    "int32_t var_88",
    "if (*(k_14 + 0x54) == 0)",
    "var_140.q = &var_88",
    "var_158_2.d = 1",
    "zmm1_3 = sub_14005cf58(j_32, k_14, 0x61, 0, 1, nullptr, &var_114, var_140)",
    "var_158_2.d = 0",
    "int512_t zmm1_8 = sub_140032364(result_2, 0x46, 0, 7, zmm1_3, 0)",
    "void* k_2 = *(k_14 + 0x10)",
    "if (k_2 != 0)",
    "int32_t r13_1 = 8",
    "var_158_2.d = 0",
    "zmm1_8 = sub_140032364(result_2, 0x46, 0, r13_1, zmm1_8, 0)",
    "k_2 = *(k_2 + 0x28)",
    "r13_1 += 1",
    "do while (k_2 != 0)",
    "r12 = var_a8",
    "k_3 = 0",
    "int32_t rdi_9 = var_114",
    "var_158_2.d = 0",
    "var_158_2.d = 0",
    "int32_t rax_66",
    "int32_t r10_1",
    "int512_t zmm0_4",
    "int512_t zmm1_10",
    "rax_66, r10_1, zmm0_4, zmm1_10 = sub_140032364(result_2, 0x53, 7, 1, sub_140032364(result_2, 0x24, rdi_9, 0, zmm1_8, 0), 0)",
    "var_100_1.d = rax_66",
    "if (sx.q(rcx_64) == 0)",
    "var_158_2.d = 3",
    "r10_1, zmm0_4, zmm1_10 = sub_140032364(result_2, 0x5a, rdi_9, sx.d(*(k_14 + 0x46)) - 1, zmm1_10, 3)",
    "int64_t rdx_31 = sx.q(result_2[0x12].d)",
    "if (rdx_31.d s> 0)",
    "*(result_2[0x11] + rdx_31 * 0x18 - 0x16) = 0x80",
    "if (0 s< *(k_14 + 0x46))",
    "int64_t r15_4 = 0",
    "if (k_3 != sx.d(*(k_14 + 0x44)) && *(*(k_14 + 8) + r15_4 + 0x18) != 0)",
    "var_158_2.d = 3",
    "int512_t zmm1_11 = sub_1400469b0(result_2, k_14, rdi_9, k_3, r10_1, zmm1_10, 3)",
    "int64_t rdx_33 = sx.q(result_2[0x12].d)",
    "if (rdx_33.d s> 0)",
    "*(result_2[0x11] + rdx_33 * 0x18 - 0x16) = 0x80",
    "var_158_2.d = 0",
    "int32_t rax_72",
    "int512_t zmm0_5",
    "rax_72, zmm0_5 = sub_140032364(result_2, 0x33, 3, 0, zmm1_11, 0)",
    "void* k_16 = k_8",
    "*(*(k_16 + 8) + r15_4)",
    "int64_t* rax_73",
    "int512_t zmm1_12",
    "rax_73, zmm1_12 = _printf_p_l(r12, \"NULL value in %s.%s\", *k_16, zmm0_5)",
    "var_158_2.d = 0",
    "int32_t rax_74",
    "int512_t zmm1_13",
    "rax_74, zmm1_13 = sub_140032364(result_2, 0x71, 0, 3, zmm1_12, 0)",
    "sub_140032c40(result_2, rax_74, rax_73, 0xfffffff9, zmm1_13)",
    "r10_1, zmm0_4, zmm1_10 = sub_14005e778(result_2, zmm1_13)",
    "void* rax_75 = sub_140032d34(result_2, rax_72)",
    "k_14 = k_8",
    "rdi_9 = var_114",
    "*(rax_75 + 8) = result_2[0x12].d",
    "k_3 += 1",
    "r15_4 += 0x20",
    "do while (k_3 s< sx.d(*(k_14 + 0x46)))",
    "j_32 = j_27",
    "int32_t* rdx_36 = *(k_14 + 0x30)",
    "k_3 = 0",
    "if (rdx_36 != 0 && not(test_bit(zx.q(r12[6].d), 9)))",
    "int32_t* rax_78",
    "rax_78, zmm0_4 = sub_140044284(r12, rdx_36, 0, zmm1_10)",
    "if (*(r12 + 0x61) == 0)",
    "int32_t rax_80 = *(j_32 + 0x44) - 1",
    "j_32[8].d = rdi_9 + 1",
    "int32_t rax_81 = rax_80 - 1",
    "*(j_32 + 0x44) = rax_81",
    "int32_t var_c0_1 = rax_81",
    "int64_t k_4 = sx.q(*rax_78 - 1)",
    "if (k_4 s> 0)",
    "void* rbx_7 = &rax_78[k_4 * 0xa + 2]",
    "zmm0_4, zmm1_10 = sub_1400485c0(j_32, *rbx_7, rax_80, 0, zmm0_4, zmm1_10)",
    "k_4 -= 1",
    "rbx_7 -= 0x28",
    "do while (k_4 s> 0)",
    "r12 = var_a8",
    "k_14 = k_8",
    "rax_81 = var_c0_1",
    "int512_t zmm0_6 = sub_14003278c(result_2, rax_80, sub_140048248(j_32, *(rax_78 + 8), rax_81, 0x10, zmm0_4, zmm1_10))",
    "j_32[8].d = 0",
    "int64_t* rax_83",
    "int512_t zmm1_15",
    "rax_83, zmm1_15 = _printf_p_l(r12, \"CHECK constraint failed in %s\", *k_14, zmm0_6)",
    "var_158_2.d = 0",
    "int32_t rax_84",
    "int512_t zmm1_16",
    "rax_84, zmm1_16 = sub_140032364(result_2, 0x71, 0, 3, zmm1_15, 0)",
    "sub_140032c40(result_2, rax_84, rax_83, 0xfffffff9, zmm1_16)",
    "zmm0_4, zmm1_10 = sub_14003278c(result_2, var_c0_1, sub_14005e778(result_2, zmm1_16))",
    "if (rax_78 != 0)",
    "zmm0_4 = sub_140044bf4(r12, rax_78)",
    "k_3 = 0",
    "if (sx.q(rcx_64) == 0)",
    "void* k_5 = *(k_14 + 0x10)",
    "k_8 = k_5",
    "if (k_5 != 0)",
    "int32_t rcx_114 = var_88",
    "int32_t r13_3 = rcx_114",
    "int32_t var_c0_2 = rcx_114",
    "void* rax_87 = var_f8_2",
    "*(j_32 + 0x44) -= 1",
    "int32_t rcx_115 = *(j_32 + 0x44)",
    "if (rax_87 != k_5)",
    "var_158_2.d = 0",
    "int32_t rax_90",
    "int512_t zmm1_18",
    "rax_90, zmm1_18 = sub_140055bac(j_32, k_5, var_114, 0, zmm0_4, zmm1_10, 0, &var_a0, k_9, var_104_1)",
    "var_104_1 = rax_90",
    "k_9 = k_5",
    "var_158_2.d = 0",
    "sub_140032364(result_2, 0x53, 8 - rcx_114 + r13_3, 1, zmm1_18, 0)",
    "int32_t* var_150_2",
    "var_150_2.d = zx.d(*(k_5 + 0x60))",
    "var_158_2.d = var_104_1",
    "int32_t rax_92",
    "int512_t zmm1_19",
    "rax_92, zmm1_19 = sub_140032678(result_2, 0x1d, r13_3, rcx_115)",
    "var_158_2.d = 3",
    "var_158_2.d = 3",
    "int512_t zmm1_23 = sub_140032364(result_2, 0x6c, 4, 3, sub_1400323e0(result_2, 4, \" missing from index \", sub_140032364(result_2, 0x6c, 7, 3, sub_1400323e0(result_2, 3, \"row \", zmm1_19), 3)), 3)",
    "int32_t rax_93",
    "int512_t zmm1_24",
    "rax_93, zmm1_24 = sub_1400323e0(result_2, 4, *k_8, zmm1_23)",
    "var_158_2.d = 3",
    "var_b0.d = rax_93",
    "int32_t rax_94",
    "rax_94, zmm0_4, zmm1_10 = sub_14005e778(result_2, sub_140032364(result_2, 0x6c, 4, 3, zmm1_24, 3))",
    "char* var_d8_1",
    "var_d8_1.d = rax_94",
    "void* rax_95 = sub_140032d34(result_2, rax_92)",
    "k_5 = k_8",
    "*(rax_95 + 8) = result_2[0x12].d",
    "if (*(k_5 + 0x62) != 0)",
    "*(j_32 + 0x44) -= 1",
    "int32_t rax_96 = *(j_32 + 0x44)",
    "int32_t r13_4 = 0",
    "if (0 u< *(k_5 + 0x5e))",
    "int64_t rcx_128 = 0",
    "int64_t var_98_1 = 0",
    "int64_t rdx_46 = sx.q(*(*(k_5 + 8) + rcx_128))",
    "if (rdx_46.d s< 0 || *((rdx_46 << 5) + *(k_14 + 8) + 0x18) == 0)",
    "var_158_2.d = 0",
    "zmm1_10 = sub_140032364(result_2, 0x32, r13_4 + var_104_1, rax_96, zmm1_10, 0)",
    "r13_4 += 1",
    "rcx_128 = var_98_1 + 2",
    "var_98_1 = rcx_128",
    "do while (r13_4 s< zx.d(*(k_5 + 0x5e)))",
    "j_32 = j_27",
    "r13_3 = var_c0_2",
    "var_158_2.d = 0",
    "int32_t rax_100",
    "int512_t zmm1_26",
    "rax_100, zmm1_26 = sub_140032364(result_2, 5, r13_3, 0, zmm1_10, 0)",
    "var_158_2.d = 0",
    "sub_140032364(result_2, 0xb, 0, rax_96, zmm1_26, 0)",
    "void* rax_101 = sub_140032d34(result_2, rax_100)",
    "k_5 = k_8",
    "*(rax_101 + 8) = result_2[0x12].d",
    "var_150_2.d = zx.d(*(k_5 + 0x5e))",
    "var_158_2.d = var_104_1",
    "int512_t zmm1_28 = sub_1400323e0(result_2, 3, \"non-unique entry in index \", sub_140032678(result_2, 0x26, r13_3, rax_96))",
    "var_158_2.d = 0",
    "zmm0_4, zmm1_10 = sub_14003278c(result_2, rax_96, sub_140032364(result_2, 0xb, 0, var_b0.d, zmm1_28, 0))",
    "void* rax_104 = sub_140032d34(result_2, var_d8_1.d)",
    "int32_t rdx_50 = var_a0",
    "*(rax_104 + 8) = result_2[0x12].d",
    "if (rdx_50 != 0)",
    "zmm0_4, zmm1_10 = sub_14003278c(j_32[2], rdx_50, zmm1_10)",
    "rax_87 = var_f8_2",
    "k_5 = *(k_5 + 0x28)",
    "r13_3 += 1",
    "k_8 = k_5",
    "var_c0_2 = r13_3",
    "do while (k_5 != 0)",
    "r12 = var_a8",
    "k_3 = 0",
    "int32_t rdi_14 = var_100_1.d",
    "var_158_2.d = 0",
    "zmm1_3 = sub_140032364(result_2, 5, var_114, rdi_14, zmm1_10, 0)",
    "void* rax_105 = sub_140032d34(result_2, rdi_14 - 1)",
    "*(rax_105 + 8) = result_2[0x12].d",
    "if (sx.q(rcx_64) == 0)",
    "zmm1_3 = sub_1400323e0(result_2, 2, \"wrong # of entries in index \", zmm1_3)",
    "int64_t* k_6 = *(k_14 + 0x10)",
    "if (k_6 != 0)",
    "int32_t r14_3 = var_88",
    "void* rax_107 = var_f8_2",
    "int32_t r13_5 = 8",
    "if (rax_107 != k_6)",
    "var_158_2.d = 0",
    "var_158_2.d = 3",
    "int32_t rax_108",
    "int512_t zmm1_31",
    "rax_108, zmm1_31 = sub_140032364(result_2, 0x35, r13_5, 0, sub_140032364(result_2, 0x5d, r14_3 + r13_5 - 8, 3, zmm1_3, 0), 3)",
    "int64_t rcx_150 = sx.q(result_2[0x12].d)",
    "var_100_1.d = rax_108",
    "if (rcx_150.d s> 0)",
    "*(result_2[0x11] + rcx_150 * 0x18 - 0x16) = 0x90",
    "var_158_2.d = 3",
    "zmm1_3 = sub_14005e778(result_2, sub_140032364(result_2, 0x6c, 4, 2, sub_1400323e0(result_2, 4, *k_6, zmm1_31), 3))",
    "void* rax_109 = sub_140032d34(result_2, var_100_1.d)",
    "*(rax_109 + 8) = result_2[0x12].d",
    "rax_107 = var_f8_2",
    "k_6 = k_6[5]",
    "r13_5 += 1",
    "do while (k_6 != 0)",
    "r12 = var_a8",
    "j_32 = j_27",
    "k_3 = 0",
    "j_6 = *j_6",
    "j_21 = j_22",
    "i_9 = i_23",
    "j_16 = j_8",
    "k_3 = 0",
    "i_9 += 1",
    "i_23 = i_9",
    "do while (i_9 s< r12[5].d)",
    "r13 = rax_2",
    "char* rax_110 = sub_1400328e8(result_2, 7, &data_1400d8510, zmm1_3)",
    "if (rax_110 != 0)",
    "rax_110[0x31] = 0xff",
    "*(rax_110 + 8) = 1 - var_108_2",
    "rax_110[0x79] = 0xff",
    "*(rax_110 + 0x40) = &data_1400f65f8",
    "*(rax_110 + 0x88) = sub_14008335c(0xb)",
    "void* rcx_158 = &data_14013ff60",
    "if (*(*result_2 + 0x61) == 0)",
    "rcx_158 = result_2[0x11]",
    "*(rcx_158 + 0xc) = result_2[0x12].d - 2",
    "if (r13 != 0)",
    "void* rax_114 = sub_14004de30(r12, r13, rax_5)",
    "if (rax_114 != 0)",
    "int64_t i_10 = *(rax_114 + 0x70)",
    "int32_t rax_115 = -0xf4240",
    "if (i_10 != 0)",
    "rax_115 = 0",
    "void* rcx_160 = r12[4]",
    "if (*(rcx_160 + 0x18) != i_10)",
    "void* rcx_161 = rcx_160 + 0x18",
    "rcx_161 += 0x20",
    "rax_115 += 1",
    "do while (*rcx_161 != i_10)",
    "j_32[7].d = 5",
    "int512_t zmm1_34 = sub_1400538c0(j_32, rax_115)",
    "int64_t* i_11 = *(rax_114 + 0x10)",
    "int32_t rbx_9 = 0",
    "if (i_11 != 0)",
    "bool cond:26_1 = i_11[9] != 0",
    "void* const var_50 = &data_1400f6510",
    "int32_t rdx_57",
    "rdx_57.b = cond:26_1",
    "int32_t var_140_1 = rdx_57",
    "void* const var_48_1 = &data_1400f6514",
    "void* const var_40_1 = &data_1400f2374",
    "int32_t rcx_163",
    "rcx_163.b = *(i_11 + 0x62) != 0",
    "int64_t var_148_3 = (&var_50)[zx.q(*(i_11 + 0x64)) & 3]",
    "var_150.d = rcx_163",
    "int64_t var_158_5 = *i_11",
    "zmm1_34 = sub_140032430(result_2, 1, \"isisi\", zmm1_34)",
    "i_11 = i_11[5]",
    "rbx_9 += 1",
    "do while (i_11 != 0)",
    "r13 = rax_2",
    "switch (rcx_15)",
    "case 0",
    "int32_t r14_1 = *(rdx_6 + 0x10)",
    "*(result_2 + 0xcc) |= 1 << j_21.b",
    "if (r13 == 0 || (*(rdx_6 + 9) & 8) != 0)",
    "char* rax_40 = sub_1400328e8(result_2, 3, &data_1400d85c8, zmm1_1)",
    "*(rax_40 + 4) = j_21",
    "*(rax_40 + 0x1c) = j_21",
    "*(rax_40 + 0x24) = r14_1",
    "result_2[0x19].d &= 0xffffffbf",
    "char* rax_38 = sub_1400328e8(result_2, 2, &data_1400d85c0, zmm1_1)",
    "*(rax_38 + 4) = j_21",
    "*(rax_38 + 0x1c) = j_21",
    "*(rax_38 + 0x20) = r14_1",
    "*(rax_38 + 0x24) = sub_140019bc0(r13)",
    "case 1",
    "void* r15_3 = *(r15_2 + rax + 8)",
    "if (r13 != 0)",
    "uint32_t r14",
    "if (sub_1400192b0(r13, \"none\") != 0)",
    "if (sub_1400192b0(r13, \"full\") != 0)",
    "if (sub_1400192b0(r13, \"incremental\") != 0)",
    "int32_t rax_35 = sub_140019bc0(r13)",
    "char rdx_16 = 0",
    "if (rax_35 u<= 2)",
    "rdx_16 = rax_35.b",
    "r14 = zx.d(rdx_16)",
    "r14 = 2",
    "r14 = 1",
    "r14 = 0",
    "*(r12 + 0x64) = r14.b",
    "if (sub_140028010(r15_3, r14.b) == 0 && (r14 == 1 || r14 == 2))",
    "int32_t rdi_6 = result_2[0x12].d",
    "char* rax_37 = sub_1400328e8(result_2, 5, &data_1400d84f8, zmm1_1)",
    "*(rax_37 + 0x38) = rdi_6 + 4",
    "*(rax_37 + 4) = j_21",
    "*(rax_37 + 0x6c) = r14 - 1",
    "*(rax_37 + 0x1c) = j_21",
    "*(rax_37 + 0x64) = j_21",
    "*(result_2 + 0xcc) |= 1 << j_21.b",
    "void* rax_29 = *(r15_3 + 8)",
    "if (*(rax_29 + 0x21) == 0)",
    "label_14005ec7d:",
    "sub_14005e5f8(result_2, sx.q(0), zmm1_1)",
    "rax_29.b = *(rax_29 + 0x22)",
    "char temp23_1 = rax_29.b",
    "rax_29.b = neg.b(rax_29.b)",
    "sub_14005e5f8(result_2, sx.q(neg.d(sbb.d(rax_29.d, rax_29.d, temp23_1 != 0)) + 1), zmm1_1)",
    "case 2",
    "if (r13 != 0)",
    "int64_t rdi_5 = *(rdx_6 + 0x10)",
    "if (*(r12 + 0x5f) == 0)",
    "rdi_5 &= 0xffffffffffffbfff",
    "if (sub_14005e430(r13, 1, 0) == 0)",
    "r12[6] &= not.q(rdi_5)",
    "if (rdi_5 == 0x80000)",
    "r12[0x52] = 0",
    "r12[6] |= rdi_5",
    "sub_140032364(result_2, 0x9e, 0, 0, zmm1_1, 0)",
    "sub_14005e68c(r12)",
    "zmm1_1 = sub_14005e550(result_2, rdx_6)",
    "rdx_13.b = (r12[6] & *(rax_9 + 0x10)) != 0",
    "sub_14005e5f8(result_2, rdx_13, zmm1_1)",
    "case 4",
    "if (r13 != 0)",
    "*(*(r15_2 + rax + 0x18) + 0x74) = sub_140019bc0(r13)",
    "sub_140027e80(*(r15_2 + rax + 8), *(*(r15_2 + rax + 0x18) + 0x74))",
    "sub_14005e5f8(result_2, sx.q(*(*(r15_2 + rax + 0x18) + 0x74)), zmm1_1)",
    "case 5",
    "if (r13 != 0)",
    "j_27.d = 1",
    "int32_t rax_18 = sub_140019a68(r13, &j_27)",
    "int32_t rdi_3 = j_27.d",
    "if (rax_18 != 0)",
    "sub_140027ecc(*(r15_2 + rax + 8), rdi_3)",
    "if (sub_14005e430(r13, 1, rdi_3 != 0) == 0)",
    "r12[6] &= 0xffffffffffffffdf",
    "r12[6] |= 0x20",
    "sub_14005e68c(r12)",
    "if ((r12[6].b & 0x20) == 0)",
    "goto label_14005ec7d",
    "sub_14005e5f8(result_2, sx.q(sub_140027ecc(*(r15_2 + rax + 8), 0)), zmm1_1)",
    "case 6",
    "if (r13 != 0)",
    "int32_t rdx_10",
    "rdx_10.b = sub_14005e430(r13, 1, 0) != 0",
    "sub_140058308(r12, rdx_10, zmm0_2, zmm1_1)",
    "case 7",
    "j_32[7].d = 2",
    "void** i_12 = r12[0x41]",
    "int32_t rbx_1 = 0",
    "if (i_12 != 0)",
    "int64_t var_158_3 = *i_12[2]",
    "zmm1_1 = sub_140032430(result_2, 1, \"is\", zmm1_1)",
    "i_12 = *i_12",
    "rbx_1 += 1",
    "do while (i_12 != 0)",
    "r13 = rax_2",
    "case 8",
    "j_32[7].d = 1",
    "int64_t rdi_2 = 0",
    "while (true)",
    "int64_t* r8_5",
    "if (rdi_2 s< 0 || rdi_2 s>= 0x12)",
    "r8_5 = nullptr",
    "r8_5 = (&data_1400d6370)[rdi_2]",
    "rdi_2 += 1",
    "if (r8_5 == 0)",
    "break",
    "var_158_2.d = 0",
    "zmm1_1 = sub_140032364(result_2, 0x51, 1, 1, sub_1400323e0(result_2, 1, r8_5, zmm1_1), 0)",
    "result_2[0x19].d &= 0xffffffbf",
    "r12 = var_a8",
    "case 0xa",
    "j_32[7].d = 3",
    "int32_t i_13 = 0",
    "if (r12[5].d s> 0)",
    "int64_t* rbx_3 = nullptr",
    "int64_t rdx_18 = r12[4]",
    "void* rax_41 = *(rbx_3 + rdx_18 + 8)",
    "if (rax_41 != 0)",
    "void* rcx_55 = **(rax_41 + 8)",
    "void* const rax_43 = &data_1400f386c",
    "if (*(rcx_55 + 0x13) == 0)",
    "rax_43 = *(rcx_55 + 0xd0)",
    "void* const var_150_1 = rax_43",
    "int64_t var_158_4 = *(rbx_3 + rdx_18)",
    "zmm1_1 = sub_140032430(result_2, 1, \"iss\", zmm1_1)",
    "i_13 += 1",
    "rbx_3 = &rbx_3[4]",
    "do while (i_13 s< r12[5].d)",
    "if (rcx_15 != 9)",
    "goto label_140061087",
    "if (r13 != 0)",
    "int32_t rax_12",
    "if (*r13 != 0)",
    "int64_t rax_11 = *r12",
    "rax_12, r8_4 = (*(rax_11 + 0x38))(rax_11, r13, 1, &j_27, var_158_2)",
    "if (*r13 != 0 && (rax_12 != 0 || j_27.d == 0))",
    "sub_1400191b8(j_32, \"not a writable directory\", r8_4, zmm0_2)",
    "sub_140016950(data_140140390)",
    "int64_t* rax_13 = nullptr",
    "if (*r13 != 0)",
    "rax_13 = sub_14001874c(\"%s\", r13)",
    "data_140140390 = rax_13",
    "sub_14005e650(result_2, data_140140390)",
    "if (rcx_15 s> 0x1f)",
    "switch (rcx_15)",
    "case 0x20",
    "if (r13 != 0 && sub_140019980(r13, &j_27) == 0)",
    "sub_140016724(j_27)",
    "int32_t rax_255",
    "rax_255, zmm1_1 = sub_1400823f0()",
    "rdx_13 = data_140140330",
    "if (rax_255 != 0)",
    "rdx_13 = -1",
    "sub_14005e5f8(result_2, rdx_13, zmm1_1)",
    "case 0x21",
    "if (r13 == 0)",
    "sub_14005e5f8(result_2, sx.q(zx.d(*(r15_2 + rax + 0x10)) - 1), zmm1_1)",
    "if (*(r12 + 0x5f) == 0)",
    "sub_1400191b8(j_32, \"Safety level may not be changed \u2026\", r8_4, zmm0_2)",
    "if (j_21 != 1)",
    "r8_4.b = 1",
    "char rax_252",
    "int32_t rdx_117",
    "rax_252, rdx_117 = sub_14005e430(r13, 0, r8_4.b)",
    "rdx_117.b = rax_252",
    "*(r15_2 + rax + 0x11) = 1",
    "int32_t rdx_119 = (rdx_117 + 1) & 7",
    "if (rdx_119 == 0)",
    "rdx_119 = 1",
    "*(r15_2 + rax + 0x10) = rdx_119.b",
    "sub_14005e68c(r12)",
    "case 0x22",
    "if (r13 != 0)",
    "void* rax_239 = sub_14004df10(j_32, 2, r13, rax_5, zmm0_2, zmm1_1)",
    "int64_t* rbx_20 = rax_239",
    "if (rax_239 != 0)",
    "int64_t i_14 = *(rax_239 + 0x70)",
    "int32_t rdx_112 = -0xf4240",
    "if (i_14 != 0)",
    "void* rcx_331 = r12[4]",
    "rdx_112 = 0",
    "if (*(rcx_331 + 0x18) != i_14)",
    "void* rax_241 = rcx_331 + 0x18",
    "rax_241 += 0x20",
    "rdx_112 += 1",
    "do while (*rax_241 != i_14)",
    "int64_t* j_15 = rbx_20[2]",
    "j_8 = j_15",
    "if (j_15 != 0)",
    "while (((*(j_15 + 0x64)).b & 3) != 2)",
    "j_15 = j_15[5]",
    "if (j_15 == 0)",
    "break",
    "j_8 = j_15",
    "j_32[7].d = 7",
    "sub_1400538c0(j_32, rdx_112)",
    "int512_t zmm1_57 = sub_140050b50(j_32, rbx_20)",
    "int32_t rcx_334 = sx.d(*(rbx_20 + 0x46))",
    "int32_t i_15 = 0",
    "j_27.d = 0",
    "if (rcx_334 s> 0)",
    "int64_t* j_19 = j_8",
    "int64_t* r13_9 = rbx_20[1]",
    "void* rax_244 = rax_239",
    "int32_t r12_4 = 0",
    "uint32_t r9_63 = zx.d(*(r13_9 + 0x1b))",
    "int32_t r11_6 = r9_63 u>> 1 & 1",
    "if (r11_6 == 0 || *(rax_9 + 0x10) != 0)",
    "int32_t r10_3",
    "if ((1 & r9_63.b) != 0)",
    "r10_3 = 1",
    "if (j_19 != 0 && rcx_334 s>= 1)",
    "int16_t* rdx_114 = j_19[1]",
    "while (sx.d(*rdx_114) != i_15)",
    "r10_3 += 1",
    "rdx_114 = &rdx_114[1]",
    "if (r10_3 s> rcx_334)",
    "break",
    "r10_3 = 0",
    "void* rax_246 = r13_9[1]",
    "if (rax_246 == 0)",
    "j_8 = nullptr",
    "j_8 = *(rax_246 + 8)",
    "void* const rcx_335",
    "if ((r9_63.b & 4) != 0)",
    "int64_t rdx_115 = *r13_9",
    "int64_t i_16 = -1",
    "int64_t rdi_28 = rdx_115",
    "while (i_16 != 0)",
    "bool cond:24_1 = 0 != *rdi_28",
    "rdi_28 += 1",
    "i_16 -= 1",
    "if (not(cond:24_1))",
    "break",
    "rcx_335 = not.q(i_16) - 1 + rdx_115 + 1",
    "rcx_335 = &data_1400f386c",
    "int64_t var_130",
    "var_130.d = r11_6",
    "int32_t rax_248",
    "rax_248.b = r13_9[3].b != 0",
    "int64_t var_138",
    "var_138.d = r10_3",
    "char* r8_72 = \"issisi\"",
    "if (*(rax_9 + 0x10) != 0)",
    "r8_72 = \"issisii\"",
    "var_140.q = j_8",
    "int64_t var_148",
    "var_148.d = rax_248",
    "void* const var_150_5 = rcx_335",
    "int64_t var_158_7 = *r13_9",
    "zmm1_57 = sub_140032430(result_2, 1, r8_72, zmm1_57)",
    "rax_244 = rax_239",
    "i_15 = j_27.d",
    "r12_4 += 1",
    "rcx_334 = sx.d(*(rax_244 + 0x46))",
    "i_15 += 1",
    "r13_9 = &r13_9[4]",
    "j_27.d = i_15",
    "do while (i_15 s< rcx_334)",
    "r12 = var_a8",
    "r13 = rax_2",
    "case 0x23",
    "if (r13 != 0)",
    "if (*r13 s< 0x30 || *r13 s> 0x32)",
    "if (sub_1400192b0(r13, \"file\") != 0)",
    "int32_t rax_235",
    "int32_t rcx_325",
    "rax_235, rcx_325 = sub_1400192b0(r13, \"memory\")",
    "rsi_1 = not.d(sbb.d(rcx_325, rcx_325, rax_235 != 0)) & 2",
    "rsi_1 = sx.d(*r13) - 0x30",
    "void* rdi_27 = *j_32",
    "if (zx.d(*(rdi_27 + 0x60)) != rsi_1 && sub_14005e4f8(j_32, zmm0_2) == 0)",
    "*(rdi_27 + 0x60) = rsi_1.b",
    "sub_14005e5f8(result_2, zx.q(r12[0xc].b), zmm1_1)",
    "case 0x24",
    "if (r13 != 0)",
    "int32_t rax_232",
    "if (*r13 != 0)",
    "int64_t rax_231 = *r12",
    "rax_232, r8_4 = (*(rax_231 + 0x38))(rax_231, r13, 1, &j_27, var_158_2)",
    "if (*r13 != 0 && (rax_232 != 0 || j_27.d == 0))",
    "sub_1400191b8(j_32, \"not a writable directory\", r8_4, zmm0_2)",
    "if (r12[0xc].b u<= 1)",
    "sub_14005e4f8(j_32, zmm0_2)",
    "sub_140016950(data_140140388)",
    "int64_t* rax_233 = nullptr",
    "if (*r13 != 0)",
    "rax_233 = sub_14001874c(\"%s\", r13)",
    "data_140140388 = rax_233",
    "sub_14005e650(result_2, data_140140388)",
    "case 0x25",
    "if (r13 != 0 && sub_140019980(r13, &j_27) == 0)",
    "int64_t j_29 = j_27",
    "if (j_29 s>= 0)",
    "int32_t rax_230 = j_29.d & 0x7fffffff",
    "if (rax_230 s>= 0)",
    "if (rax_230 s> 0)",
    "rax_230 = 0",
    "r12[0x15].d = rax_230",
    "sub_14005e5f8(result_2, sx.q(r12[0x15].d), zmm1_1)",
    "case 0x26",
    "if (r13 != 0)",
    "sub_140083c20(r12, sub_140019bc0(r13))",
    "int32_t rax_17",
    "if (r12[0x26] != sub_140083bf0)",
    "rax_17 = 0",
    "rax_17 = r12[0x27].d",
    "sub_14005e5f8(result_2, sx.q(rax_17), zmm1_1)",
    "case 0x27",
    "uint32_t j_26 = 0xa",
    "int32_t r11_3 = 0",
    "if (*arg3 != 0)",
    "j_26 = j_21",
    "if (r13 != 0)",
    "if (sub_1400192b0(r13, \"full\") != 0)",
    "if (sub_1400192b0(r13, \"restart\") != 0)",
    "if (sub_1400192b0(r13, \"truncate\") == 0)",
    "r11_3 = 3",
    "r11_3 = 2",
    "r11_3 = 1",
    "j_32[7].d = 3",
    "sub_140032364(result_2, 0x51, 1, 3, sub_140032364(result_2, 6, j_26, r11_3, zmm1_1, 1), 0)",
    "label_140061087:",
    "if (r13 != 0)",
    "sub_14008344c(r12, sub_140019bc0(r13))",
    "sub_14005e5f8(result_2, sx.q(r12[0x4f].d), zmm1_1)",
    "switch (rcx_15)",
    "case 0x15",
    "j_27 = -2",
    "void* rdi_26 = **(*(r15_2 + rax + 8) + 8)",
    "if (r13 != 0)",
    "sub_140019980(r13, &j_27)",
    "int64_t j_31 = j_27",
    "void* rax_222 = *(rdi_26 + 0x120)",
    "if (j_31 s< -1)",
    "j_31 = -1",
    "*(rdi_26 + 0xc8) = j_31",
    "if (rax_222 != 0)",
    "*(rax_222 + 0x20) = j_31",
    "sub_14005e5f8(result_2, *(rdi_26 + 0xc8), zmm1_1)",
    "case 0x17",
    "int64_t* r11_2 = \"exclusive\"",
    "int32_t rdx_104",
    "if (r13 == 0)",
    "rdx_104 = -1",
    "if (sub_1400192b0(r13, \"exclusive\") != 0)",
    "rdx_104 = 0",
    "if (sub_1400192b0(r13, \"normal\") != 0)",
    "rdx_104 = -1",
    "rdx_104 = 1",
    "int32_t rcx_293 = *(arg3 + 8)",
    "uint32_t rax_213",
    "if (rcx_293 != 0)",
    "label_140060f93:",
    "void* rax_219 = **(*(r15_2 + rax + 8) + 8)",
    "if (rdx_104 s>= 0 && *(rax_219 + 0x10) == 0)",
    "void* rcx_298 = *(rax_219 + 0x120)",
    "if (rcx_298 == 0 || *(rcx_298 + 0x3f) != 2)",
    "*(rax_219 + 8) = rdx_104.b",
    "rax_213 = zx.d(*(rax_219 + 8))",
    "if (rdx_104 != 0xffffffff)",
    "if (rcx_293 == 0)",
    "int32_t i_18 = 2",
    "if (r12[5].d s> 2)",
    "int64_t r9_59 = 0x40",
    "void* rcx_295 = **(*(r9_59 + r12[4] + 8) + 8)",
    "if (rdx_104 s>= 0 && *(rcx_295 + 0x10) == 0)",
    "void* rax_216 = *(rcx_295 + 0x120)",
    "if (rax_216 == 0 || *(rax_216 + 0x3f) != 2)",
    "*(rcx_295 + 8) = rdx_104.b",
    "i_18 += 1",
    "r9_59 += 0x20",
    "do while (i_18 s< r12[5].d)",
    "*(r12 + 0x63) = rdx_104.b",
    "goto label_140060f93",
    "rax_213 = zx.d(*(r12 + 0x63))",
    "if (rax_213 != 1)",
    "r11_2 = \"normal\"",
    "sub_14005e650(result_2, r11_2)",
    "case 0x18",
    "int512_t zmm1_56 = sub_1400538c0(j_32, j_21)",
    "j_32[7].d += 1",
    "int32_t r14_6 = j_32[7].d",
    "int32_t rdx_103",
    "if (*(zx.q(*result) + &data_1400d6400) != 0x70)",
    "int32_t rdi_25 = sub_140019bc0(r13)",
    "if (rdi_25 s< 0)",
    "if (rdi_25 != 0x80000000)",
    "rdi_25 = neg.d(rdi_25)",
    "rdi_25 = 0x7fffffff",
    "var_158_2.d = rdi_25",
    "rdx_103 = 0xa7",
    "rdx_103 = 0xa6",
    "var_158_2.d = 0",
    "zmm1_1 = sub_140032364(result_2, rdx_103, j_21, r14_6, zmm1_56, var_158_2.d)",
    "r8_61 = r14_6",
    "label_140060ea2:",
    "sub_140032364(result_2, 0x51, r8_61, 1, zmm1_1, 0)",
    "case 0x19",
    "if (r13 != 0)",
    "sub_140019980(r13, &j_27)",
    "int64_t j_30 = j_27",
    "void* rcx_284 = arg3",
    "if (j_30 s< 0)",
    "j_30 = data_14013d178",
    "j_27 = j_30",
    "if (*(rcx_284 + 8) == 0)",
    "r12[8] = j_30",
    "int64_t i_19 = sx.q(r12[5].d - 1)",
    "if (i_19 s>= 0)",
    "int64_t* j_20 = j_8",
    "int64_t rbx_19 = i_19 << 5",
    "void* rax_205 = *(rbx_19 + r12[4] + 8)",
    "if (rax_205 != 0 && (i_19 == j_20 || *(rcx_284 + 8) == 0))",
    "void* rcx_285 = **(rax_205 + 8)",
    "*(rcx_285 + 0xa0) = j_30",
    "sub_140020bb8(rcx_285)",
    "j_30 = j_27",
    "rcx_284 = arg3",
    "i_19 -= 1",
    "rbx_19 -= 0x20",
    "do while (i_19 s>= 0)",
    "j_27 = -1",
    "rax_8 = sub_1400851c8(r12, rax_5, 0x12, &j_27)",
    "if (rax_8 == 0)",
    "sub_14005e5f8(result_2, j_27, zmm1_1)",
    "if (rax_8 != 0xc)",
    "j_32[6].d += 1",
    "j_32[3].d = rax_8",
    "case 0x1a",
    "j_32[7].d = 1",
    "void** i_20 = r12[0x38]",
    "while (i_20 != 0)",
    "*(i_20[2] + 8)",
    "zmm1_1 = sub_140032430(result_2, 1, U\"s\", zmm1_1)",
    "i_20 = *i_20",
    "case 0x1b",
    "if (r13 == 0)",
    "j_27.d = 0xfffe",
    "label_140060ad4:",
    "int32_t rax_193 = *(j_32 + 0x34)",
    "*(j_32 + 0x34) = rax_193 + 1",
    "uint32_t j_23",
    "if (rax_5 == 0)",
    "j_23 = r12[5].d - 1",
    "j_23 = j_21",
    "int64_t j_28 = sx.q(j_23)",
    "int64_t j_24 = sx.q(j_21)",
    "if (j_24 s<= j_28)",
    "int64_t r15_13 = j_24 << 5",
    "int64_t i_25 = j_28 - j_24 + 1",
    "int64_t i_27 = i_25",
    "int64_t i_21",
    "if (j_21 != 1)",
    "int512_t zmm0_9",
    "zmm0_9, zmm1_1 = sub_1400538c0(j_32, j_21)",
    "void** j_7 = *(*(r15_13 + r12[4] + 0x18) + 0x10)",
    "if (j_7 != 0)",
    "int32_t rdi_24 = j_27.d",
    "int64_t* j_17 = j_7[2]",
    "j_8 = j_17",
    "if (test_bit(j_17[8].d, 8))",
    "void* k_7 = j_17[2]",
    "int16_t rcx_270 = j_17[9].w + 0x2e",
    "int16_t var_108_4 = rcx_270",
    "while (k_7 != 0)",
    "if ((*(k_7 + 0x64) & 0x80) == 0)",
    "rcx_270 = 0",
    "var_108_4 = 0",
    "break",
    "k_7 = *(k_7 + 0x28)",
    "if (rcx_270 != 0)",
    "var_158_2.d = 0x61",
    "int512_t zmm1_53 = sub_14005a1e8(j_32, rax_193, j_21, j_17, 0x61)",
    "var_158_2.d = sx.d(var_108_4)",
    "zmm0_9 = sub_140032364(result_2, 0x21, rax_193, (rdi_24 & 1) + result_2[0x12].d + 2, zmm1_53, 0x61)",
    "j_17 = j_8",
    "*j_17",
    "int64_t* j_12",
    "int512_t zmm1_54",
    "j_12, zmm1_54 = _printf_p_l(r12, \"ANALYZE \"%w\".\"%w\"\", *(r15_13 + r12[4]), zmm0_9)",
    "j_8 = j_12",
    "if ((1 & rdi_24.b) == 0)",
    "var_158_2.d = 0",
    "int32_t rax_201",
    "rax_201, zmm1_1 = sub_140032364(result_2, 0x8c, 0, 0, zmm1_54, 0)",
    "zmm0_9 = sub_140032c40(result_2, rax_201, j_8, 0xfffffff9, zmm1_1)",
    "char rcx_276 = *(j_32 + 0x1f)",
    "int32_t rax_198",
    "if (rcx_276 != 0)",
    "uint64_t rax_199 = zx.q(rcx_276 - 1)",
    "*(j_32 + 0x1f) = rax_199.b",
    "rax_198 = *(j_32 + (rax_199 << 2) + 0xbc)",
    "j_32[7].d += 1",
    "rax_198 = j_32[7].d",
    "var_158_2.d = 0",
    "int32_t rax_200",
    "int512_t zmm1_55",
    "rax_200, zmm1_55 = sub_140032364(result_2, 0x71, 0, rax_198, zmm1_54, 0)",
    "sub_140032c40(result_2, rax_200, j_8, 0xfffffff9, zmm1_55)",
    "var_158_2.d = 0",
    "zmm0_9, zmm1_1 = sub_140032364(result_2, 0x51, rax_198, 1, zmm1_55, 0)",
    "j_7 = *j_7",
    "do while (j_7 != 0)",
    "i_25 = i_27",
    "j_21 += 1",
    "r15_13 += 0x20",
    "i_21 = i_25",
    "i_25 -= 1",
    "i_27 = i_25",
    "do while (i_21 != 1)",
    "r13 = rax_2",
    "sub_140032364(result_2, 0x9e, 0, 0, zmm1_1, 0)",
    "int32_t rax_192 = sub_140019bc0(r13)",
    "j_27.d = rax_192",
    "if ((2 & rax_192.b) != 0)",
    "goto label_140060ad4",
    "case 0x1c",
    "void* rdi_22 = *(r15_2 + rax + 8)",
    "if (r13 != 0)",
    "int32_t rax_190 = sub_140019bc0(r13)",
    "*(r12 + 0x6c) = rax_190",
    "if (sub_140027f38(rdi_22, rax_190, 0xffffffff, 0, zmm1_1) == 7)",
    "sub_140016efc(r12)",
    "int32_t rcx_264",
    "if (rdi_22 == 0)",
    "rcx_264 = 0",
    "rcx_264 = *(*(rdi_22 + 8) + 0x30)",
    "sub_14005e5f8(result_2, sx.q(rcx_264), zmm1_1)",
    "case 0x1d",
    "char const (** const i_22)[0xf] = &data_1400d7eb0",
    "while (i_22 s< \"onoffalseyestruextrafull\")",
    "*i_22",
    "zmm1_1 = sub_140032430(result_2, 1, U\"s\", zmm1_1)",
    "i_22 = &i_22[3]",
    "case 0x1f",
    "sub_140082ad0(r12)",
    "if (rcx_15 != 0x1e)",
    "goto label_140061087",
    "void* rbx_17 = *(r15_2 + rax + 8)",
    "int32_t r15_11 = -1",
    "if (r13 != 0)",
    "if (sub_1400192b0(r13, \"fast\") != 0)",
    "int32_t rcx_259",
    "rcx_259.b = sub_14005e430(r13, 1, 0) != 0",
    "r15_11 = rcx_259",
    "r15_11 = 2",
    "if (*(arg3 + 8) == 0 && r15_11 s>= 0)",
    "int32_t i_17 = 0",
    "if (r12[5].d s> 0)",
    "int64_t r9_48 = 0",
    "sub_140027fd8(*(r9_48 + r12[4] + 8), r15_11)",
    "i_17 += 1",
    "r9_48 += 0x20",
    "do while (i_17 s< r12[5].d)",
    "sub_14005e5f8(result_2, sx.q(sub_140027fd8(rbx_17, r15_11)), zmm1_1)",
    "int64_t* r8_3 = var_70",
    "if (r8_3 != 0)",
    "sub_1400191b8(j_32, \"%s\", r8_3, zmm0_2)",
    "sub_140016950(var_70)",
    "j_32[6].d += 1",
    "j_32[3].d = rax_8",
    "label_14006159c:",
    "result = sub_1400169a8(r12, result)",
    "if (r13 != 0)",
    "return sub_1400169a8(r12, r13)",
    "return result"
  ]
}