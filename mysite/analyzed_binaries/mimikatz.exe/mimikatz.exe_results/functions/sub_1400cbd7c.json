{
  "address": "0x1400cbd7c",
  "rules": [
    "decompress data using aPLib/88da69e00a6e49ce8c080be3a0beeb89",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "hash data with CRC32/dc8063c9cb1c41b9a5bafe66f5117ac4",
    "encrypt data using Curve25519/4be2ead1b08a4c049dae9c8694881d76",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check for trap flag exception/f2973fbf4b89419fb73ecd274d9581c2",
    "hide graphical window from taskbar/c26bad2600334fd9a84ba1d9de3384f6"
  ],
  "disassembly": [
    "mov     qword [rsp+0x20 {__saved_rbx}], rbx",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x4a0",
    "mov     rax, qword [rel data_140139000]",
    "xor     rax, rsp {var_4d8}",
    "mov     qword [rsp+0x490 {var_48}], rax",
    "xor     ebx, ebx  {0x0}",
    "mov     r12, rdx",
    "mov     r9, r8",
    "mov     qword [rsp+0x48 {var_490}], r8",
    "mov     rdi, rcx",
    "mov     qword [rsp+0x50 {var_488}], rcx",
    "mov     dword [rsp+0x70 {var_468}], ebx  {0x0}",
    "mov     r13d, ebx  {0x0}",
    "mov     r11d, ebx  {0x0}",
    "mov     dword [rsp+0x40 {var_498}], ebx  {0x0}",
    "mov     edx, ebx  {0x0}",
    "mov     dword [rsp+0x34 {var_4a4}], ebx  {0x0}",
    "mov     r10d, ebx  {0x0}",
    "mov     dword [rsp+0x30 {var_4a8}], ebx  {0x0}",
    "mov     dword [rsp+0x58 {var_480}], ebx  {0x0}",
    "mov     dword [rsp+0x6c {var_46c}], ebx  {0x0}",
    "mov     esi, ebx  {0x0}",
    "mov     dword [rsp+0x38 {var_4a0}], ebx  {0x0}",
    "cmp     rcx, rbx",
    "jne     0x1400cbe10",
    "cmp     r12, rbx",
    "je      0x1400cbde8",
    "call    qword [rel _errno]",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "xor     edx, edx  {0x0}",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rsp+0x20 {var_4b8_1}], rbx  {0x0}",
    "mov     dword [rax], 0x16",
    "call    sub_1400c9168",
    "or      eax, 0xffffffff  {0xffffffff}",
    "jmp     0x1400cc826",
    "movzx   ebp, word [r12]",
    "mov     dword [rsp+0x3c {result_1}], ebx  {0x0}",
    "mov     r14d, ebx  {0x0}",
    "mov     r8d, ebx  {0x0}",
    "mov     qword [rsp+0x80 {_SrcCh_9}], rbx  {0x0}",
    "cmp     bp, bx",
    "je      0x1400cc822",
    "mov     rcx, qword [rsp+0x490 {var_48}]",
    "xor     rcx, rsp {var_4d8}",
    "call    sub_1400c9220",
    "mov     rbx, qword [rsp+0x4f8 {__saved_rbx}]",
    "add     rsp, 0x4a0",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     eax, dword [rsp+0x3c {result_1}]",
    "mov     rbx, qword [rsp+0x88 {_SrcCh_3}]",
    "or      r15, 0xffffffffffffffff",
    "xor     ecx, ecx  {0x0}",
    "xor     edi, edi  {0x0}",
    "cmp     r8d, edi",
    "je      0x1400cc822",
    "lea     eax, [rbp-0x20]",
    "mov     ecx, 0x58",
    "cmp     ax, cx",
    "ja      0x1400cbe77",
    "cmp     r8d, 0x7",
    "je      0x1400cc822",
    "xor     eax, eax",
    "mov     ecx, eax  {0x0}",
    "lea     rcx, [rel data_1400d2670]",
    "movzx   eax, bp",
    "movzx   ecx, byte [rax+rcx-0x20]",
    "and     ecx, 0xf",
    "jmp     0x1400cbe7b",
    "call    qword [rel _errno]",
    "mov     qword [rsp+0x20 {var_4b8_2}], rdi  {0x0}",
    "mov     dword [rax], 0x16",
    "jmp     0x1400cc80e",
    "call    qword [rel _errno]",
    "mov     dword [rax], 0x16",
    "xor     eax, eax  {0x0}",
    "mov     qword [rsp+0x20 {var_4b8_4}], rax  {0x0}",
    "mov     ecx, r8d",
    "test    r8d, r8d",
    "je      0x1400cc67d",
    "movsxd  rax, ecx",
    "lea     rcx, [rax+rax*8]",
    "movsxd  rax, r8d",
    "add     rcx, rax",
    "lea     rax, [rel data_1400d2670]",
    "movzx   r8d, byte [rcx+rax]",
    "shr     r8d, 0x4",
    "mov     dword [rsp+0x68 {var_470_1}], r8d",
    "cmp     r8d, 0x8",
    "je      0x1400cc7fb",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "xor     edx, edx  {0x0}",
    "xor     ecx, ecx  {0x0}",
    "call    sub_1400c9168",
    "mov     eax, r15d  {0xffffffff}",
    "jmp     0x1400cc826",
    "lea     r8, [rsp+0x3c {result_1}]",
    "mov     esi, 0x1",
    "mov     rdx, rdi",
    "movzx   ecx, bp",
    "mov     dword [rsp+0x38 {var_4a0}], esi  {0x1}",
    "call    sub_1400cbc48",
    "sub     ecx, 0x1",
    "je      0x1400cc7bd",
    "add     r12, 0x2",
    "cmp     dword [rsp+0x3c {result_1}], ecx",
    "mov     qword [rsp+0x78 {var_460_1}], r12",
    "jl      0x1400cc6be",
    "xor     esi, esi  {0x0}",
    "mov     edx, r15d  {0xffffffff}",
    "mov     dword [rsp+0x58 {var_480}], esi  {0x0}",
    "mov     dword [rsp+0x6c {var_46c}], esi  {0x0}",
    "mov     r11d, esi  {0x0}",
    "mov     dword [rsp+0x40 {var_498}], esi  {0x0}",
    "mov     r10d, esi  {0x0}",
    "mov     dword [rsp+0x30 {var_4a8}], esi  {0x0}",
    "mov     r13d, esi  {0x0}",
    "mov     dword [rsp+0x34 {var_4a4}], edx  {0xffffffff}",
    "mov     dword [rsp+0x38 {var_4a0}], esi  {0x0}",
    "jmp     0x1400cc6ae",
    "sub     ecx, 0x1",
    "je      0x1400cc75f",
    "mov     bp, word [r12]",
    "xor     ecx, ecx  {0x0}",
    "cmp     bp, cx",
    "jne     0x1400cbe43",
    "movzx   eax, bp",
    "mov     ecx, 0x20",
    "cmp     eax, ecx",
    "je      0x1400cc7b4",
    "sub     ecx, 0x1",
    "je      0x1400cc71e",
    "or      r13d, 0x2",
    "jmp     0x1400cc6ae",
    "cmp     eax, 0x23",
    "je      0x1400cc7aa",
    "cmp     bp, 0x2a",
    "jne     0x1400cc749",
    "sub     ecx, 0x1",
    "je      0x1400cc716",
    "bts     r13d, 0x7",
    "jmp     0x1400cc6ae",
    "mov     ecx, 0x2b",
    "cmp     eax, ecx",
    "je      0x1400cc7a1",
    "lea     ecx, [r11+r11*4]",
    "movzx   eax, bp",
    "lea     r11d, [rax+rcx*2-0x30]",
    "mov     r11d, dword [r9]",
    "add     r9, 0x8",
    "xor     ebp, ebp  {0x0}",
    "cmp     r11d, ebp",
    "mov     qword [rsp+0x48 {var_490}], r9",
    "mov     dword [rsp+0x40 {var_498}], r11d",
    "jge     0x1400cc6ae",
    "xor     edx, edx  {0x0}",
    "sub     ecx, 0x1",
    "je      0x1400cc6e9",
    "or      r13d, 0x1",
    "jmp     0x1400cc6ae",
    "mov     ecx, 0x2d",
    "cmp     eax, ecx",
    "je      0x1400cc798",
    "or      r13d, 0x4",
    "neg     r11d",
    "jmp     0x1400cc755",
    "cmp     bp, 0x2a",
    "jne     0x1400cc70a",
    "sub     ecx, 0x1",
    "je      0x1400cc59f",
    "or      r13d, 0x4",
    "jmp     0x1400cc6ae",
    "mov     ecx, 0x30",
    "cmp     eax, ecx",
    "jne     0x1400cc6ae",
    "mov     dword [rsp+0x40 {var_498}], r11d",
    "jmp     0x1400cc6ae",
    "lea     ecx, [rdx+rdx*4]",
    "movzx   eax, bp",
    "lea     edx, [rax+rcx*2-0x30]",
    "jmp     0x1400cc718",
    "mov     edx, dword [r9]",
    "add     r9, 0x8",
    "xor     ebp, ebp  {0x0}",
    "cmp     edx, ebp",
    "mov     qword [rsp+0x48 {var_490}], r9",
    "mov     dword [rsp+0x34 {var_4a4}], edx",
    "jge     0x1400cc6ae",
    "movzx   eax, bp",
    "cmp     eax, 0x49",
    "je      0x1400cc5ef",
    "cmp     ecx, 0x1",
    "jne     0x1400cc6ae",
    "or      r13d, 0x8",
    "jmp     0x1400cc6ae",
    "mov     dword [rsp+0x34 {var_4a4}], edx",
    "jmp     0x1400cc6ae",
    "mov     edx, r15d  {0xffffffff}",
    "jmp     0x1400cc718",
    "bts     r13d, 0xf",
    "cmp     word [r12], 0x36",
    "jne     0x1400cc613",
    "cmp     eax, 0x68",
    "je      0x1400cc5e6",
    "movzx   eax, bp",
    "mov     ecx, 0x64",
    "cmp     eax, ecx",
    "jg      0x1400cc124",
    "cmp     word [r12], 0x33",
    "jne     0x1400cc62f",
    "cmp     word [r12+0x2], 0x34",
    "jne     0x1400cc613",
    "or      r13d, 0x20",
    "jmp     0x1400cc6ae",
    "mov     ecx, 0x6c",
    "cmp     eax, ecx",
    "je      0x1400cc5c8",
    "cmp     eax, 0x65",
    "jl      0x1400cbf59",
    "je      0x1400cc212",
    "mov     eax, 0x64",
    "cmp     word [r12], ax",
    "je      0x1400cc6ae",
    "cmp     word [r12+0x2], 0x32",
    "jne     0x1400cc62f",
    "add     r12, 0x4",
    "bts     r13d, 0xf",
    "jmp     0x1400cc6ae",
    "cmp     word [r12], cx",
    "jne     0x1400cc5dd",
    "cmp     eax, 0x77",
    "jne     0x1400cc6ae",
    "mov     ebp, dword [rsp+0x30 {var_4a8}]",
    "jmp     0x1400cbfe4",
    "mov     r8d, 0x67",
    "cmp     eax, r8d",
    "jle     0x1400cc34c",
    "or      r13d, 0x40",
    "cmp     eax, 0x41",
    "je      0x1400cc110",
    "mov     eax, 0x69",
    "cmp     word [r12], ax",
    "je      0x1400cc6ae",
    "add     r12, 0x4",
    "btr     r13d, 0xf",
    "jmp     0x1400cc6ae",
    "or      r13d, 0x10",
    "jmp     0x1400cc6ae",
    "add     r12, 0x2",
    "bts     r13d, 0xc",
    "jmp     0x1400cc6ae",
    "bts     r13d, 0xb",
    "jmp     0x1400cc6ae",
    "mov     edx, 0x20",
    "mov     r14d, dword [rsp+0x58 {var_480}]",
    "jmp     0x1400cc35e",
    "lea     ecx, [r8+0x2]  {0x69}",
    "cmp     eax, ecx",
    "je      0x1400cc212",
    "bt      r13d, 0xc",
    "jb      0x1400cc223",
    "mov     rdi, qword [r9]",
    "add     r9, 0x8",
    "jmp     0x1400cc26a",
    "mov     r14d, 0x1",
    "add     bp, 0x20",
    "mov     dword [rsp+0x58 {var_480}], r14d  {0x1}",
    "jmp     0x1400cc358",
    "cmp     eax, 0x43",
    "je      0x1400cc093",
    "mov     eax, 0x6f",
    "cmp     word [r12], ax",
    "je      0x1400cc6ae",
    "mov     rax, qword [rsp+0x80 {_SrcCh_9}]",
    "xor     edx, edx  {0x0}",
    "cmp     rax, rdx",
    "je      0x1400cc696",
    "test    r13b, 0x40",
    "je      0x1400cc47e",
    "xor     eax, eax  {0x0}",
    "mov     ecx, 0x200",
    "or      r13d, 0x40",
    "cmp     edx, eax",
    "lea     rbx, [rsp+0x90 {_DstCh_1}]",
    "mov     esi, ecx  {0x200}",
    "jge     0x1400cc37c",
    "cmp     eax, 0x6e",
    "je      0x1400cc7fb",
    "mov     eax, 0x20",
    "add     r9, 0x8",
    "test    al, r13b",
    "je      0x1400cc25a",
    "mov     qword [rsp+0x48 {var_490}], r9",
    "mov     r8d, 0x67",
    "test    r13d, 0x830",
    "jne     0x1400cc0a4",
    "cmp     eax, 0x45",
    "je      0x1400cc110",
    "mov     eax, 0x75",
    "cmp     word [r12], ax",
    "je      0x1400cc6ae",
    "mov     r9, qword [rsp+0x48 {var_490}]",
    "mov     edx, dword [rsp+0x34 {var_4a4}]",
    "mov     r8d, dword [rsp+0x68 {var_470_1}]",
    "mov     r10d, dword [rsp+0x30 {var_4a8}]",
    "mov     r11d, dword [rsp+0x40 {var_498}]",
    "mov     rcx, rax",
    "call    qword [rel free]",
    "xor     edx, edx  {0x0}",
    "mov     qword [rsp+0x80 {_SrcCh_9}], rdx  {0x0}",
    "jmp     0x1400cc696",
    "mov     r12d, dword [rsp+0x40 {var_498}]",
    "sub     r12d, r14d",
    "sub     r12d, ebp",
    "test    r13b, 0xc",
    "jne     0x1400cc4a1",
    "bt      r13d, 0x8",
    "jae     0x1400cc458",
    "jne     0x1400cc38b",
    "lea     edx, [rax+0x6]",
    "jmp     0x1400cc3cf",
    "lea     ecx, [r8+0x8]  {0x6f}",
    "cmp     eax, ecx",
    "je      0x1400cc200",
    "test    r13b, 0x40",
    "je      0x1400cc266",
    "mov     qword [rsp+0x48 {var_490}], r9",
    "test    r13b, 0x40",
    "je      0x1400cc253",
    "bt      r13d, 0xf",
    "jb      0x1400cc295",
    "cmp     rdi, r14",
    "jge     0x1400cc285",
    "movzx   eax, word [r9]",
    "add     r9, 0x8",
    "mov     esi, 0x1",
    "lea     ecx, [rsi+0x1f]  {0x20}",
    "mov     word [rsp+0x5c {_DstCh}], ax",
    "mov     dword [rsp+0x38 {var_4a0}], esi  {0x1}",
    "mov     qword [rsp+0x48 {var_490}], r9",
    "test    cl, r13b",
    "je      0x1400cc0f8",
    "mov     eax, 0x20",
    "or      r13d, eax",
    "cmp     eax, 0x47",
    "je      0x1400cc110",
    "mov     eax, 0x78",
    "cmp     word [r12], ax",
    "je      0x1400cc6ae",
    "lea     r9, [rsp+0x3c {result_1}]",
    "lea     rcx, [rsp+0x60 {var_478}]",
    "mov     r8, rdi",
    "mov     edx, ebp",
    "call    sub_1400cbcf8",
    "test    r13b, 0x8",
    "je      0x1400cc4d6",
    "mov     ecx, edx  {0x20}",
    "lea     r9, [rsp+0x3c {result_1}]",
    "mov     r8, rdi",
    "mov     edx, r12d",
    "call    sub_1400cbca4",
    "test    r13b, 0x1",
    "je      0x1400cc46a",
    "mov     word [rsp+0x60 {var_478}], r8w  {0x2d}",
    "jmp     0x1400cc475",
    "cmp     edx, ecx",
    "cmovg   edx, ecx  {0x200}",
    "cmp     edx, 0xa3",
    "mov     dword [rsp+0x34 {var_4a4}], edx",
    "jle     0x1400cc3d3",
    "cmp     bp, r8w",
    "jne     0x1400cc3d3",
    "mov     dword [rsp+0x34 {var_4a4}], edx",
    "mov     r8d, 0x8",
    "test    r13b, r13b",
    "jns     0x1400cc21c",
    "cmp     eax, 0x70",
    "je      0x1400cc1c7",
    "mov     edi, dword [r9-0x8]",
    "movsxd  rdi, dword [r9-0x8]",
    "jmp     0x1400cc26a",
    "movzx   edi, word [r9-0x8]",
    "jmp     0x1400cc26f",
    "movsx   rdi, word [r9-0x8]",
    "jmp     0x1400cc26f",
    "mov     r15d, dword [rsp+0x34 {var_4a4}]",
    "cmp     r15d, r14d",
    "jge     0x1400cc2a7",
    "bt      r13d, 0xc",
    "jb      0x1400cc295",
    "neg     rdi",
    "bts     r13d, 0x8",
    "mov     word [rsp+0x90 {_DstCh_1}], ax",
    "mov     byte [rsp+0x64 {_SrcCh}], al",
    "mov     rax, qword [rel __mb_cur_max]",
    "xor     ebx, ebx  {0x0}",
    "mov     byte [rsp+0x65 {var_473_1}], bl  {0x0}",
    "movsxd  r8, dword [rax]",
    "lea     rdx, [rsp+0x64 {_SrcCh}]",
    "lea     rcx, [rsp+0x90 {_DstCh_1}]",
    "call    qword [rel mbtowc]",
    "cmp     eax, ebx",
    "jge     0x1400cc100",
    "cmp     eax, 0x53",
    "je      0x1400cc01b",
    "mov     eax, 0x58",
    "cmp     word [r12], ax",
    "je      0x1400cc6ae",
    "xor     eax, eax  {0x0}",
    "cmp     esi, eax",
    "jne     0x1400cc539",
    "test    r13b, 0x4",
    "jne     0x1400cc4d6",
    "test    r13b, 0x2",
    "je      0x1400cc47e",
    "mov     eax, 0x2b",
    "mov     word [rsp+0x60 {var_478}], ax  {0x2b}",
    "jmp     0x1400cc475",
    "mov     ebp, 0x1",
    "mov     dword [rsp+0x30 {var_4a8}], ebp  {0x1}",
    "test    r13b, r13b",
    "jns     0x1400cc3e2",
    "lea     edi, [rdx+0x15d]",
    "movsxd  rcx, edi",
    "call    qword [rel malloc]",
    "mov     r9, qword [rsp+0x48 {var_490}]",
    "xor     ecx, ecx  {0x0}",
    "mov     qword [rsp+0x80 {_SrcCh_9}], rax",
    "cmp     rax, rcx",
    "je      0x1400cc3ca",
    "mov     edx, 0x1",
    "jmp     0x1400cc3cf",
    "mov     rax, qword [r9]",
    "add     r9, 0x8",
    "mov     dword [rsp+0x28 {var_4b0_1}], r14d",
    "mov     qword [rsp+0x48 {var_490}], r9",
    "mov     dword [rsp+0x20 {var_4b8}], edx",
    "lea     rcx, [rsp+0x88 {_SrcCh_3}]",
    "movsx   r9d, bpl",
    "movsxd  r8, esi",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x88 {_SrcCh_3}], rax",
    "call    sub_1400caf88",
    "mov     r8d, 0x2d",
    "cmp     byte [rbx], r8b",
    "jne     0x1400cc429",
    "bts     r14d, 0x7",
    "mov     dword [rsp+0x58 {var_480}], r14d",
    "bt      r13d, 0xf",
    "jae     0x1400cc22c",
    "bts     r13d, 0x9",
    "jmp     0x1400cc21c",
    "mov     dword [rsp+0x34 {var_4a4}], 0x10",
    "bts     r13d, 0xf",
    "cmp     eax, 0x73",
    "je      0x1400cc028",
    "xor     r14d, r14d  {0x0}",
    "test    r13b, 0x40",
    "je      0x1400cc285",
    "mov     eax, 0x200",
    "and     r13d, 0xfffffff7",
    "cmp     r15d, eax",
    "cmovg   r15d, eax  {0x200}",
    "mov     r15d, 0x1",
    "jmp     0x1400cc2b7",
    "mov     edi, edi",
    "lea     rbx, [rsp+0x90 {_DstCh_1}]",
    "mov     r14d, esi  {0x1}",
    "jmp     0x1400cbf59",
    "mov     dword [rsp+0x6c {var_46c}], esi  {0x1}",
    "jmp     0x1400cc100",
    "test    r13d, 0x830",
    "jne     0x1400cc028",
    "mov     ecx, 0x58",
    "cmp     eax, ecx",
    "je      0x1400cc1d4",
    "xor     eax, eax  {0x0}",
    "mov     dword [rsp+0x68 {var_470_1}], eax  {0x0}",
    "lea     r9, [rsp+0x3c {result_1}]",
    "mov     r8, rdi",
    "mov     edx, r14d",
    "mov     rcx, rbx",
    "call    sub_1400cbcf8",
    "xor     eax, eax  {0x0}",
    "cmp     r14d, eax",
    "jle     0x1400cc539",
    "lea     r9, [rsp+0x3c {result_1}]",
    "mov     ecx, 0x30",
    "mov     r8, rdi",
    "mov     edx, r12d",
    "call    sub_1400cbca4",
    "mov     word [rsp+0x60 {var_478}], dx  {0x20}",
    "mov     edx, 0xa3",
    "mov     edx, dword [rsp+0x34 {var_4a4}]",
    "mov     rbx, rax",
    "mov     esi, edi",
    "jmp     0x1400cc3d3",
    "mov     esi, dword [rsp+0x38 {var_4a0}]",
    "mov     ebp, dword [rsp+0x30 {var_4a8}]",
    "xor     eax, eax  {0x0}",
    "mov     rcx, r15  {-0x1}",
    "mov     rdi, rbx",
    "lea     edx, [rax+0x20]",
    "repne scasb byte [rdi]  {0x0}",
    "mov     rdi, qword [rsp+0x50 {var_488}]",
    "not     rcx",
    "lea     r14d, [rcx-0x1]",
    "jmp     0x1400cbfef",
    "bts     r13d, 0x8",
    "inc     rbx",
    "lea     edx, [r8+0x20]  {0x30}",
    "add     ax, 0x51",
    "lea     r10d, [r8-0xe]  {0x2}",
    "mov     word [rsp+0x60 {var_478}], dx  {0x30}",
    "mov     word [rsp+0x62 {var_476_1}], ax",
    "jmp     0x1400cc21c",
    "mov     rbx, qword [r9]",
    "cmp     edx, r15d",
    "mov     edi, edx",
    "mov     eax, 0x7fffffff",
    "mov     edx, 0x20",
    "cmove   edi, eax  {0x7fffffff}",
    "add     r9, 0x8",
    "xor     ebp, ebp  {0x0}",
    "mov     qword [rsp+0x48 {var_490}], r9",
    "test    dl, r13b",
    "je      0x1400cc188",
    "lea     ecx, [r8+0xe]  {0x75}",
    "cmp     eax, ecx",
    "je      0x1400cc216",
    "xor     edx, edx  {0x0}",
    "mov     rax, rdi",
    "movsxd  rcx, r8d",
    "div     rcx",
    "mov     rdi, rax",
    "lea     eax, [rdx+0x30]",
    "cmp     eax, 0x39",
    "jle     0x1400cc2fc",
    "cmp     rdi, r14",
    "je      0x1400cc303",
    "mov     esi, dword [rsp+0x70 {var_468}]",
    "mov     rax, rdi",
    "lea     rbx, [rsp+0x28f {var_249}]",
    "neg     rax",
    "sbb     ecx, ecx",
    "and     ecx, r10d",
    "mov     ebp, ecx",
    "mov     dword [rsp+0x30 {var_4a8}], ecx",
    "or      r13d, 0x20",
    "mov     eax, 0x7",
    "cmp     eax, 0x5a",
    "je      0x1400cbf62",
    "mov     r12, qword [rsp+0x78 {var_460_1}]",
    "test    r13b, 0x4",
    "je      0x1400cc56f",
    "mov     rdi, rbx",
    "mov     esi, r14d",
    "xor     eax, eax  {0x0}",
    "cmp     dword [rsp+0x6c {var_46c}], eax",
    "jne     0x1400cc574",
    "cmp     rbx, rbp",
    "mov     esi, 0x1",
    "cmove   rbx, qword [rel data_140139018]",
    "mov     dword [rsp+0x38 {var_4a0}], esi  {0x1}",
    "mov     rax, rbx",
    "jmp     0x1400cc1ac",
    "cmp     rbx, rbp",
    "mov     r14d, ebp  {0x0}",
    "cmove   rbx, qword [rel data_140139010]",
    "cmp     edi, ebp",
    "mov     rsi, rbx",
    "jle     0x1400cc44f",
    "mov     r8d, 0xa",
    "lea     ecx, [r8+0x11]  {0x78}",
    "cmp     eax, ecx",
    "jne     0x1400cbf59",
    "mov     byte [rbx], al",
    "dec     rbx",
    "jmp     0x1400cc2d4",
    "add     eax, esi",
    "mov     esi, dword [rsp+0x38 {var_4a0}]",
    "lea     rax, [rsp+0x28f {var_249}]",
    "mov     dword [rsp+0x34 {var_4a4}], r15d",
    "sub     eax {var_249}, ebx",
    "inc     rbx",
    "bt      r13d, 0x9",
    "mov     r14d, eax",
    "mov     r15, 0xffffffffffffffff",
    "jae     0x1400cbfdf",
    "mov     rcx, qword [r9]",
    "add     r9, 0x8",
    "xor     ebp, ebp  {0x0}",
    "mov     qword [rsp+0x48 {var_490}], r9",
    "cmp     rcx, rbp",
    "je      0x1400cbfc3",
    "cmp     eax, 0x61",
    "je      0x1400cc353",
    "lea     r9, [rsp+0x3c {result_1}]",
    "mov     ecx, 0x20",
    "mov     r8, rdi",
    "mov     edx, r12d",
    "call    sub_1400cbca4",
    "mov     dword [rsp+0x3c {result_1}], r15d  {0xffffffff}",
    "mov     rdx, qword [rsp+0x50 {var_488}]",
    "movzx   ecx, word [rsp+0x5c {_DstCh}]",
    "lea     r8, [rsp+0x3c {result_1}]",
    "call    sub_1400cbc48",
    "xor     eax, eax  {0x0}",
    "add     rdi, rbp",
    "cmp     esi, eax",
    "jg      0x1400cc4e7",
    "cmp     edi, ebp",
    "jne     0x1400cc1a1",
    "mov     esi, dword [rsp+0x38 {var_4a0}]",
    "jmp     0x1400cc1b9",
    "cmp     byte [rsi], bpl",
    "je      0x1400cc08a",
    "lea     eax, [rcx-0x51]  {0x27}",
    "jmp     0x1400cc1d9",
    "mov     ecx, r15d",
    "dec     r15d",
    "cmp     ecx, r14d",
    "jg      0x1400cc2e4",
    "mov     rdi, qword [rsp+0x50 {var_488}]",
    "xor     edi, edi  {0x0}",
    "lea     edx, [rdi+0x30]",
    "cmp     eax, edi",
    "je      0x1400cc33f",
    "mov     rbx, qword [rel data_140139010]",
    "xor     eax, eax  {0x0}",
    "mov     rcx, r15  {-0x1}",
    "mov     rdi, rbx",
    "repne scasb byte [rdi]  {0x0}",
    "not     rcx",
    "lea     r14, [rcx-0x1]",
    "mov     rbx, qword [rcx+0x8]",
    "cmp     rbx, rbp",
    "je      0x1400cbfc3",
    "mov     r14d, dword [rsp+0x58 {var_480}]",
    "cmp     eax, 0x63",
    "je      0x1400cc0a4",
    "cmp     dword [rsp+0x3c {result_1}], eax",
    "jl      0x1400cc56f",
    "mov     rax, qword [rel __mb_cur_max]",
    "lea     rcx, [rsp+0x5c {_DstCh}]",
    "mov     rdx, rdi",
    "movsxd  r8, dword [rax]",
    "dec     esi",
    "call    qword [rel mbtowc]",
    "movsxd  rbp, eax",
    "xor     eax, eax  {0x0}",
    "cmp     ebp, eax",
    "jle     0x1400cc529",
    "jmp     0x1400cc52e",
    "dec     edi",
    "cmp     word [rax], bp",
    "je      0x1400cc1b0",
    "sub     rax, rbx",
    "sar     rax, 0x1",
    "mov     r14d, eax",
    "mov     ebp, dword [rsp+0x30 {var_4a8}]",
    "mov     rdi, qword [rsp+0x50 {var_488}]",
    "jmp     0x1400cbfe9",
    "mov     esi, dword [rsp+0x38 {var_4a0}]",
    "jmp     0x1400cbfdb",
    "movzx   ecx, byte [rsi]",
    "call    qword [rel isleadbyte]",
    "cmp     eax, ebp",
    "je      0x1400cc07f",
    "mov     dword [rsp+0x70 {var_468}], eax",
    "mov     r8d, 0x10",
    "test    r13b, r13b",
    "jns     0x1400cc21c",
    "dec     rbx",
    "inc     r14d",
    "mov     byte [rbx], dl  {0x30}",
    "jmp     0x1400cbfdf",
    "cmp     byte [rbx], dl",
    "je      0x1400cbfdf",
    "movzx   eax, word [rcx]",
    "cmp     word [rcx+0x2], ax",
    "jb      0x1400cc7e8",
    "mov     esi, dword [rsp+0x38 {var_4a0}]",
    "mov     rdi, qword [rsp+0x50 {var_488}]",
    "jmp     0x1400cc54e",
    "add     rax, 0x2",
    "mov     r8d, 0x2d",
    "mov     ebp, dword [rsp+0x30 {var_4a8}]",
    "inc     r14d",
    "inc     rsi",
    "cmp     r14d, edi",
    "jl      0x1400cc06a",
    "inc     rsi",
    "call    qword [rel _errno]",
    "mov     qword [rsp+0x20 {var_4b8_3}], rbp  {0x0}",
    "mov     dword [rax], 0x16",
    "jmp     0x1400cc80e",
    "bt      r13d, 0xb",
    "movzx   r14d, ax",
    "jae     0x1400cbfbb",
    "mov     esi, ebp  {0x0}",
    "mov     dword [rsp+0x38 {var_4a0}], ebp  {0x0}",
    "jmp     0x1400cbf59",
    "mov     eax, r14d",
    "not     eax",
    "test    al, 0x1",
    "je      0x1400cc7e8",
    "mov     eax, ebx",
    "not     eax",
    "test    al, 0x1",
    "je      0x1400cc7e8",
    "lea     esi, [rbp+0x1]",
    "shr     r14d, 0x1",
    "mov     dword [rsp+0x38 {var_4a0}], esi  {0x1}",
    "jmp     0x1400cbf59"
  ],
  "high_level_IL": [
    "void var_4d8",
    "int64_t rax_1 = data_140139000 ^ &var_4d8",
    "int16_t* r12 = arg2",
    "wchar16* r9 = arg3",
    "void* var_490 = arg3",
    "FILE* rdi = arg1",
    "int32_t var_468 = 0",
    "int32_t r13 = 0",
    "uint64_t r11 = 0",
    "int32_t var_498 = 0",
    "uint64_t rdx = 0",
    "int32_t var_4a4 = 0",
    "int32_t r10 = 0",
    "int32_t var_4a8 = 0",
    "int32_t var_480 = 0",
    "int32_t var_46c = 0",
    "int32_t rsi = 0",
    "int32_t var_4a0 = 0",
    "uint64_t result",
    "if (arg1 != 0 && r12 != 0)",
    "uint64_t rbp_1 = zx.q(*r12)",
    "int32_t result_1 = 0",
    "int32_t i_4 = 0",
    "uint32_t r8_1 = 0",
    "char* _SrcCh_9 = nullptr",
    "if (rbp_1.w != 0)",
    "char* _SrcCh_3",
    "char* _SrcCh_2 = _SrcCh_3",
    "while (true)",
    "r12 = &r12[1]",
    "if (result_1 s>= 0)",
    "int32_t rcx_1",
    "if ((rbp_1 - 0x20).w u> 0x58)",
    "rcx_1 = 0",
    "rcx_1 = zx.d(data_1400d2620[0x30][zx.q(rbp_1.w)]) & 0xf",
    "r8_1 = zx.d(*(sx.q(rcx_1) * 9 + sx.q(r8_1) + &data_1400d2670)) u>> 4",
    "uint32_t var_470_1 = r8_1",
    "if (r8_1 == 8)",
    "label_1400cc801:",
    "*_errno() = 0x16",
    "int64_t var_4b8_4 = 0",
    "goto label_1400cc818",
    "if (r8_1 == 0)",
    "goto label_1400cc682",
    "if (r8_1 != 1)",
    "if (r8_1 == 2)",
    "uint32_t rax_29 = zx.d(rbp_1.w)",
    "if (rax_29 == 0x20)",
    "r13 |= 2",
    "if (rax_29 == 0x23)",
    "r13 |= 0x80",
    "if (rax_29 == 0x2b)",
    "r13 |= 1",
    "if (rax_29 == 0x2d)",
    "r13 |= 4",
    "if (rax_29 == 0x30)",
    "r13 |= 8",
    "goto label_1400cc6ae",
    "if (r8_1 == 3)",
    "if (rbp_1.w != 0x2a)",
    "r11 = zx.q(zx.d(rbp_1.w) + ((r11 * 5).d << 1) - 0x30)",
    "var_498 = r11.d",
    "r11 = zx.q(*r9)",
    "r9 = &r9[4]",
    "var_490 = r9",
    "var_498 = r11.d",
    "if (r11.d s< 0)",
    "r13 |= 4",
    "r11 = zx.q(neg.d(r11.d))",
    "var_498 = r11.d",
    "goto label_1400cc6ae",
    "if (r8_1 == 4)",
    "rdx = 0",
    "var_4a4 = rdx.d",
    "goto label_1400cc6ae",
    "if (r8_1 == 5)",
    "if (rbp_1.w != 0x2a)",
    "rdx = zx.q(zx.d(rbp_1.w) + ((rdx * 5).d << 1) - 0x30)",
    "var_4a4 = rdx.d",
    "goto label_1400cc6ae",
    "rdx = zx.q(*r9)",
    "r9 = &r9[4]",
    "var_490 = r9",
    "var_4a4 = rdx.d",
    "if (rdx.d s>= 0)",
    "goto label_1400cc6ae",
    "rdx = 0xffffffff",
    "var_4a4 = rdx.d",
    "goto label_1400cc6ae",
    "if (r8_1 == 6)",
    "uint32_t rax_25 = zx.d(rbp_1.w)",
    "if (rax_25 != 0x49)",
    "if (rax_25 == 0x68)",
    "r13 |= 0x20",
    "if (rax_25 == 0x6c)",
    "if (*r12 != 0x6c)",
    "r13 |= 0x10",
    "r12 = &r12[1]",
    "r13 |= 0x1000",
    "if (rax_25 == 0x77)",
    "r13 |= 0x800",
    "goto label_1400cc6ae",
    "r13 |= 0x8000",
    "if (*r12 == 0x36 && r12[1] == 0x34)",
    "r12 = &r12[2]",
    "r13 |= 0x8000",
    "goto label_1400cc6ae",
    "if (*r12 == 0x33 && r12[1] == 0x32)",
    "r12 = &r12[2]",
    "r13 &= 0xffff7fff",
    "goto label_1400cc6ae",
    "if (*r12 == 0x64 || *r12 == 0x69 || *r12 == 0x6f || *r12 == 0x75 || *r12 == 0x78 || *r12 == 0x58)",
    "goto label_1400cc6ae",
    "var_470_1 = 0",
    "label_1400cc682:",
    "rsi = 1",
    "var_4a0 = 1",
    "sub_1400cbc48(rbp_1.w, rdi, &result_1)",
    "label_1400cc696:",
    "r9 = var_490",
    "rdx = zx.q(var_4a4)",
    "r8_1 = var_470_1",
    "r10 = var_4a8",
    "r11 = zx.q(var_498)",
    "goto label_1400cc6ae",
    "if (r8_1 != 7)",
    "goto label_1400cc6ae",
    "uint32_t rax_7 = zx.d(rbp_1.w)",
    "int32_t rcx_11 = 0x64",
    "int32_t r8_4",
    "wchar16 _DstCh",
    "wchar16 _DstCh_1",
    "int32_t r14_1",
    "if (rax_7 s> 0x64)",
    "int16_t var_478",
    "if (rax_7 s< 0x65)",
    "label_1400cbf59:",
    "rbp_1 = zx.q(var_4a8)",
    "label_1400cbff5:",
    "if (var_46c == 0)",
    "if ((r13.b & 0x40) != 0)",
    "if (test_bit(r13, 8))",
    "var_478 = 0x2d",
    "rbp_1 = 1",
    "var_4a8 = 1",
    "if ((r13.b & 1) != 0)",
    "var_478 = 0x2b",
    "rbp_1 = 1",
    "var_4a8 = 1",
    "if ((r13.b & 2) != 0)",
    "var_478 = 0x20",
    "rbp_1 = 1",
    "var_4a8 = 1",
    "int32_t r12_3 = var_498 - i_4 - rbp_1.d",
    "if ((r13.b & 0xc) == 0)",
    "sub_1400cbca4(0x20, r12_3, rdi, &result_1)",
    "sub_1400cbcf8(&var_478, rbp_1.d, rdi, &result_1)",
    "if ((r13.b & 8) != 0 && (r13.b & 4) == 0)",
    "sub_1400cbca4(0x30, r12_3, rdi, &result_1)",
    "if (rsi != 0 || i_4 s<= 0)",
    "sub_1400cbcf8(_SrcCh_2, i_4, rdi, &result_1)",
    "char* _SrcCh_1 = _SrcCh_2",
    "int32_t i = i_4",
    "i -= 1",
    "rbp_1 = sx.q(mbtowc(&_DstCh, _SrcCh_1, sx.q(*__mb_cur_max)))",
    "if (rbp_1.d s<= 0)",
    "result_1 = 0xffffffff",
    "break",
    "sub_1400cbc48(_DstCh, arg1, &result_1)",
    "_SrcCh_1 = &_SrcCh_1[rbp_1]",
    "do while (i s> 0)",
    "rsi = var_4a0",
    "rdi = arg1",
    "if (result_1 s>= 0 && (r13.b & 4) != 0)",
    "sub_1400cbca4(0x20, r12_3, rdi, &result_1)",
    "if (_SrcCh_9 == 0)",
    "goto label_1400cc696",
    "free(_SrcCh_9)",
    "_SrcCh_9 = nullptr",
    "goto label_1400cc696",
    "if (rax_7 s<= 0x67)",
    "r14_1 = var_480",
    "label_1400cc365:",
    "r13 |= 0x40",
    "_SrcCh_2 = &_DstCh_1",
    "int32_t rsi_2 = 0x200",
    "if (rdx.d s< 0)",
    "rdx = 6",
    "var_4a4 = rdx.d",
    "if (rdx.d != 0)",
    "if (rdx.d s> 0x200)",
    "rdx = 0x200",
    "var_4a4 = rdx.d",
    "if (rdx.d s> 0xa3)",
    "int32_t rdi_2 = (rdx + 0x15d).d",
    "char* _SrcCh_5 = malloc(sx.q(rdi_2))",
    "r9 = var_490",
    "_SrcCh_9 = _SrcCh_5",
    "if (_SrcCh_5 == 0)",
    "rdx = 0xa3",
    "var_4a4 = rdx.d",
    "rdx = zx.q(var_4a4)",
    "_SrcCh_2 = _SrcCh_5",
    "rsi_2 = rdi_2",
    "if (rbp_1.w == 0x67)",
    "rdx = 1",
    "var_4a4 = rdx.d",
    "if (r13.b s< 0)",
    "r14_1 |= 0x80",
    "var_480 = r14_1",
    "char var_4b0_1 = r14_1.b",
    "var_490 = &r9[4]",
    "int32_t var_4b8 = rdx.d",
    "_SrcCh_3 = *r9",
    "sub_1400caf88(&_SrcCh_3, _SrcCh_2, sx.q(rsi_2), sx.d(rbp_1.b), var_4b8, var_4b0_1)",
    "if (*_SrcCh_2 == 0x2d)",
    "r13 |= 0x100",
    "_SrcCh_2 = &_SrcCh_2[1]",
    "rsi = var_4a0",
    "rbp_1 = zx.q(var_4a8)",
    "int64_t i_1 = -1",
    "char* _SrcCh_8 = _SrcCh_2",
    "while (i_1 != 0)",
    "bool cond:7_1 = 0 != *_SrcCh_8",
    "_SrcCh_8 = &_SrcCh_8[1]",
    "i_1 -= 1",
    "if (not(cond:7_1))",
    "break",
    "rdi = arg1",
    "i_4 = (not.q(i_1)).d - 1",
    "goto label_1400cbff5",
    "rcx_11 = 0x69",
    "if (rax_7 == 0x69)",
    "goto label_1400cc212",
    "if (rax_7 == 0x6e)",
    "goto label_1400cc801",
    "rcx_11 = 0x6f",
    "if (rax_7 == 0x6f)",
    "r8_4 = 8",
    "if (r13.b s< 0)",
    "r13 |= 0x200",
    "int32_t rax_14",
    "if (rax_7 != 0x70)",
    "if (rax_7 != 0x73)",
    "rcx_11 = 0x75",
    "if (rax_7 == 0x75)",
    "goto label_1400cc216",
    "rcx_11 = 0x78",
    "if (rax_7 != 0x78)",
    "goto label_1400cbf59",
    "rax_14 = 0x27",
    "goto label_1400cc1d9",
    "label_1400cc028:",
    "_SrcCh_2 = *r9",
    "int32_t i_2 = rdx.d",
    "if (rdx.d == 0xffffffff)",
    "i_2 = 0x7fffffff",
    "var_490 = &r9[4]",
    "if ((0x20 & r13.b) == 0)",
    "rsi = 1",
    "if (_SrcCh_2 == 0)",
    "_SrcCh_2 = data_140139018",
    "var_4a0 = 1",
    "char* _SrcCh_4 = _SrcCh_2",
    "while (i_2 != 0)",
    "i_2 -= 1",
    "if (*_SrcCh_4 == 0)",
    "break",
    "_SrcCh_4 = &_SrcCh_4[2]",
    "i_4 = ((_SrcCh_4 - _SrcCh_2) s>> 1).d",
    "goto label_1400cc1b9",
    "i_4 = 0",
    "if (_SrcCh_2 == 0)",
    "_SrcCh_2 = data_140139010",
    "char* _SrcCh_6 = _SrcCh_2",
    "if (i_2 s<= 0)",
    "rsi = var_4a0",
    "label_1400cc1b9:",
    "rbp_1 = zx.q(var_4a8)",
    "rdi = arg1",
    "goto label_1400cbff5",
    "while (*_SrcCh_6 != 0)",
    "if (isleadbyte(zx.d(*_SrcCh_6)) != 0)",
    "_SrcCh_6 = &_SrcCh_6[1]",
    "i_4 += 1",
    "_SrcCh_6 = &_SrcCh_6[1]",
    "if (i_4 s>= i_2)",
    "break",
    "rsi = var_4a0",
    "label_1400cbfdb:",
    "rbp_1 = zx.q(var_4a8)",
    "label_1400cbfdf:",
    "rdi = arg1",
    "goto label_1400cbff5",
    "var_4a4 = 0x10",
    "r13 |= 0x8000",
    "label_1400cc1d4:",
    "rax_14 = 7",
    "label_1400cc1d9:",
    "var_468 = rax_14",
    "r8_4 = 0x10",
    "if (r13.b s< 0)",
    "rax_14.w += 0x51",
    "r10 = 2",
    "var_478 = 0x30",
    "int16_t var_476_1 = rax_14.w",
    "if (rax_7 != 0x64)",
    "if (rax_7 == 0x41)",
    "label_1400cc110:",
    "r14_1 = 1",
    "rbp_1.w += 0x20",
    "var_480 = 1",
    "goto label_1400cc365",
    "if (rax_7 != 0x43)",
    "if (rax_7 == 0x45 || rax_7 == 0x47)",
    "goto label_1400cc110",
    "if (rax_7 == 0x53)",
    "if ((r13 & 0x830) == 0)",
    "r13 |= 0x20",
    "goto label_1400cc028",
    "rcx_11 = 0x58",
    "if (rax_7 == 0x58)",
    "goto label_1400cc1d4",
    "if (rax_7 == 0x5a)",
    "int16_t* rcx_12 = *r9",
    "var_490 = &r9[4]",
    "if (rcx_12 != 0)",
    "_SrcCh_2 = *(rcx_12 + 8)",
    "if (rcx_12 == 0 || _SrcCh_2 == 0)",
    "_SrcCh_2 = data_140139010",
    "int64_t i_3 = -1",
    "char* _SrcCh_7 = _SrcCh_2",
    "while (i_3 != 0)",
    "bool cond:12_1 = 0 != *_SrcCh_7",
    "_SrcCh_7 = &_SrcCh_7[1]",
    "i_3 -= 1",
    "if (not(cond:12_1))",
    "break",
    "i_4 = (not.q(i_3)).d - 1",
    "goto label_1400cbfdb",
    "int16_t i_5 = *rcx_12",
    "if (rcx_12[1] u< i_5)",
    "label_1400cc7ee:",
    "int64_t var_4b8_3 = 0",
    "*_errno() = 0x16",
    "goto label_1400cc818",
    "i_4 = zx.d(i_5)",
    "if (not(test_bit(r13, 0xb)))",
    "rsi = 0",
    "var_4a0 = 0",
    "if (((not.d(i_4)).b & 1) == 0 || ((not.d(_SrcCh_2.d)).b & 1) == 0)",
    "goto label_1400cc7ee",
    "rsi = 1",
    "i_4 u>>= 1",
    "var_4a0 = 1",
    "goto label_1400cbf59",
    "if (rax_7 == 0x61)",
    "r14_1 = var_480",
    "goto label_1400cc365",
    "if (rax_7 != 0x63)",
    "goto label_1400cbf59",
    "if ((r13 & 0x830) == 0)",
    "r13 |= 0x20",
    "wchar16 _DstCh_2 = *r9",
    "rsi = 1",
    "_DstCh = _DstCh_2",
    "var_4a0 = 1",
    "var_490 = &r9[4]",
    "if ((0x20 & r13.b) == 0)",
    "_DstCh_1 = _DstCh_2",
    "char _SrcCh = _DstCh_2.b",
    "char var_473_1 = 0",
    "if (mbtowc(&_DstCh_1, &_SrcCh, sx.q(*__mb_cur_max)) s< 0)",
    "var_46c = 1",
    "_SrcCh_2 = &_DstCh_1",
    "i_4 = 1",
    "goto label_1400cbf59",
    "label_1400cc212:",
    "r13 |= 0x40",
    "label_1400cc216:",
    "r8_4 = 0xa",
    "int64_t rdi_1",
    "if (not(test_bit(r13, 0xf)) && not(test_bit(r13, 0xc)))",
    "void* r9_5 = &r9[4]",
    "if ((0x20 & r13.b) == 0)",
    "if ((r13.b & 0x40) == 0)",
    "rdi_1 = zx.q(*(r9_5 - 8))",
    "rdi_1 = sx.q(*(r9_5 - 8))",
    "var_490 = r9_5",
    "var_490 = r9_5",
    "if ((r13.b & 0x40) == 0)",
    "rdi_1 = zx.q(*(r9_5 - 8))",
    "rdi_1 = sx.q(*(r9_5 - 8))",
    "rdi_1 = *r9",
    "var_490 = &r9[4]",
    "if ((r13.b & 0x40) != 0 && rdi_1 s< 0)",
    "rdi_1 = neg.q(rdi_1)",
    "r13 |= 0x100",
    "if (not(test_bit(r13, 0xf)) && not(test_bit(r13, 0xc)))",
    "rdi_1 = zx.q(rdi_1.d)",
    "int32_t r15_1 = var_4a4",
    "if (r15_1 s>= 0)",
    "r13 &= 0xfffffff7",
    "if (r15_1 s> 0x200)",
    "r15_1 = 0x200",
    "r15_1 = 1",
    "void var_249",
    "void* rbx_1 = &var_249",
    "int32_t rcx_17 = sbb.d(rcx_11, rcx_11, rdi_1 != 0) & r10",
    "rbp_1 = zx.q(rcx_17)",
    "var_4a8 = rcx_17",
    "while (true)",
    "int32_t rcx_18 = r15_1",
    "r15_1 -= 1",
    "if (rcx_18 s<= 0 && rdi_1 == 0)",
    "break",
    "int64_t rdx_3 = 0",
    "int64_t rcx_19 = sx.q(r8_4)",
    "uint32_t temp1_1 = (modu.dp.q(rdx_3:rdi_1, rcx_19)).d",
    "rdi_1 = divu.dp.q(rdx_3:rdi_1, rcx_19)",
    "int32_t rax_21 = temp1_1 + 0x30",
    "if (rax_21 s> 0x39)",
    "rax_21 += var_468",
    "*rbx_1 = rax_21.b",
    "rbx_1 -= 1",
    "rsi = var_4a0",
    "var_4a4 = r15_1",
    "int32_t i_6 = &var_249 - rbx_1.d",
    "_SrcCh_2 = rbx_1 + 1",
    "i_4 = i_6",
    "if (test_bit(r13, 9) && (i_6 == 0 || *_SrcCh_2 != 0x30))",
    "_SrcCh_2 -= 1",
    "i_4 += 1",
    "*_SrcCh_2 = 0x30",
    "goto label_1400cbfdf",
    "rsi = 0",
    "rdx = 0xffffffff",
    "var_480 = 0",
    "var_46c = 0",
    "r11 = 0",
    "var_498 = 0",
    "r10 = 0",
    "var_4a8 = 0",
    "r13 = 0",
    "var_4a4 = 0xffffffff",
    "var_4a0 = 0",
    "label_1400cc6ae:",
    "rbp_1.w = *r12",
    "if (rbp_1.w != 0)",
    "continue",
    "if (r8_1 == 0)",
    "break",
    "if (r8_1 == 7)",
    "break",
    "int64_t var_4b8_2 = 0",
    "*_errno() = 0x16",
    "label_1400cc818:",
    "sub_1400c9168(0)",
    "result = 0xffffffff",
    "goto label_1400cc831",
    "result = zx.q(result_1)",
    "int64_t var_4b8_1 = 0",
    "*_errno() = 0x16",
    "sub_1400c9168(0)",
    "result = 0xffffffff",
    "label_1400cc831:",
    "sub_1400c9220(rax_1 ^ &var_4d8)",
    "return result"
  ]
}