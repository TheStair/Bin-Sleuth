{
  "address": "0x1400cf2dc",
  "rules": [
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "check OS version/816eee64e52f4728b8d606bec12904e3",
    "hash data using murmur3/aeb1a4346751469b809f4261bcfbbb07/dbb00f9448c04dc1b720ac16935c1891",
    "contain loop",
    "hash data with CRC32/dc8063c9cb1c41b9a5bafe66f5117ac4",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "decompress data using aPLib/88da69e00a6e49ce8c080be3a0beeb89"
  ],
  "disassembly": [
    "mov     qword [rsp+0x18 {__saved_rbx}], rbx",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0xa0",
    "mov     rax, qword [rel data_140139000]",
    "xor     rax, rsp {var_d8}",
    "mov     qword [rsp+0x90 {var_48}], rax",
    "xor     ebx, ebx  {0x0}",
    "mov     r15, rdx",
    "mov     qword [rsp+0x38 {var_a0}], rcx",
    "lea     edx, [rbx+0x1]",
    "mov     dword [rsp+0x28 {var_b0}], r9d",
    "lea     r10, [rsp+0x70 {var_68}]",
    "mov     word [rsp+0x2c {var_ac}], bx  {0x0}",
    "mov     edi, ebx  {0x0}",
    "mov     r13d, ebx  {0x0}",
    "mov     dword [rsp+0x24 {var_b4}], edx  {0x1}",
    "mov     dword [rsp+0x20 {var_b8}], ebx  {0x0}",
    "mov     r14d, ebx  {0x0}",
    "mov     esi, ebx  {0x0}",
    "mov     ebp, ebx  {0x0}",
    "mov     ecx, ebx  {0x0}",
    "mov     r11, r8",
    "add     r8, rdx",
    "jmp     0x1400cf33a",
    "cmp     al, 0x9",
    "je      0x1400cf34d",
    "mov     al, byte [r8]",
    "cmp     al, 0x20",
    "je      0x1400cf34d",
    "cmp     al, 0xa",
    "je      0x1400cf34d",
    "cmp     al, 0xd",
    "jne     0x1400cf352",
    "mov     r12b, byte [rsp+0x118 {arg8}]",
    "mov     rax, rdx  {0x1}",
    "mov     r9d, ecx",
    "sub     r9d, 0x6",
    "je      0x1400cf625",
    "je      0x1400cf560",
    "lea     eax, [rdx-0x31]",
    "lea     r11, [r8-0x2]",
    "cmp     al, 0x8",
    "jbe     0x1400cf608",
    "mov     eax, 0x1",
    "sub     r9d, eax",
    "je      0x1400cf601",
    "sub     dl, 0x30",
    "mov     dword [rsp+0x20 {var_b8}], eax  {0x1}",
    "cmp     dl, 0x9",
    "ja      0x1400cf6b7",
    "mov     r9d, ecx",
    "cmp     ecx, ebx",
    "je      0x1400cf50b",
    "mov     ecx, 0x9",
    "jmp     0x1400cf464",
    "cmp     dl, 0x2b",
    "je      0x1400cf649",
    "lea     eax, [rdx-0x31]",
    "cmp     al, 0x8",
    "ja      0x1400cf612",
    "sub     r9d, eax",
    "je      0x1400cf5db",
    "mov     r8, r11",
    "mov     ecx, 0x4",
    "jmp     0x1400cf469",
    "lea     eax, [rdx-0x31]",
    "cmp     al, 0x8",
    "jbe     0x1400cf45f",
    "mov     eax, 0x1",
    "sub     r9d, eax",
    "je      0x1400cf49a",
    "mov     eax, 0x1",
    "mov     ecx, 0x7",
    "lea     eax, [rcx-0x6]  {0x1}",
    "cmp     dl, 0x2d",
    "jne     0x1400cf612",
    "cmp     dl, 0x30",
    "jne     0x1400cf6b2",
    "mov     r14d, eax  {0x1}",
    "jmp     0x1400cf5e6",
    "sub     r9d, eax",
    "je      0x1400cf663",
    "mov     dx, bx  {0x0}",
    "mov     ax, bx  {0x0}",
    "mov     edi, ebx  {0x0}",
    "mov     ecx, ebx  {0x0}",
    "mov     ebx, 0x4",
    "cmp     edi, 0x18",
    "jbe     0x1400cf6ec",
    "sub     r8, rax",
    "jmp     0x1400cf35d",
    "mov     ecx, 0x3",
    "cmp     dl, r12b",
    "je      0x1400cf476",
    "mov     r13d, eax",
    "lea     eax, [rdx-0x31]",
    "cmp     al, 0x8",
    "ja      0x1400cf4ae",
    "sub     r9d, eax",
    "je      0x1400cf458",
    "mov     dl, byte [r8]",
    "add     r8, rax",
    "cmp     ecx, 0x5",
    "jg      0x1400cf57a",
    "mov     qword [r15], r8",
    "cmp     r13d, ebx",
    "je      0x1400cfb2c",
    "jmp     0x1400cf35d",
    "or      dword [rsp+0x24 {var_b4}], 0xffffffff  {0xffffffff}",
    "mov     ecx, 0x7",
    "jmp     0x1400cf47b",
    "mov     eax, 0x1",
    "mov     ecx, 0x8",
    "jmp     0x1400cf47b",
    "cmp     dl, 0x30",
    "je      0x1400cf5e0",
    "mov     r14d, eax",
    "mov     r9b, 0x30",
    "jmp     0x1400cf68b",
    "cmp     r9d, 0x2",
    "jne     0x1400cf651",
    "cmp     edi, ebx",
    "jbe     0x1400cfb20",
    "mov     al, byte [rsp+0x87 {var_51}]",
    "cmp     al, 0x5",
    "jl      0x1400cf6df",
    "mov     ecx, 0x5",
    "cmp     dl, 0x2b",
    "je      0x1400cf551",
    "cmp     dl, r12b",
    "jne     0x1400cf4c0",
    "mov     ecx, 0x3",
    "mov     rax, r13  {0x1}",
    "jmp     0x1400cf469",
    "lea     eax, [rdx-0x31]",
    "cmp     al, 0x8",
    "ja      0x1400cf471",
    "sub     r9d, eax",
    "je      0x1400cf420",
    "mov     eax, 0x1",
    "jmp     0x1400cf35d",
    "mov     dl, byte [r8]",
    "add     r8, rax",
    "sub     dl, 0x31",
    "cmp     dl, 0x8",
    "ja      0x1400cf537",
    "cmp     dl, r9b",
    "jge     0x1400cf66b",
    "cmp     ecx, 0xa",
    "je      0x1400cf6ba",
    "cmp     dword [rsp+0x110 {arg7}], ebx",
    "je      0x1400cf537",
    "mov     dx, bx  {0x0}",
    "mov     ax, bx  {0x0}",
    "mov     edi, ebx  {0x0}",
    "mov     ecx, ebx  {0x0}",
    "jmp     0x1400cfb3b",
    "sub     r10, rax",
    "or      r15d, 0xffffffff  {0xffffffff}",
    "jmp     0x1400cf705",
    "mov     edi, 0x18",
    "lea     eax, [rdi-0x17]  {0x1}",
    "sub     r10, rax",
    "add     ebp, eax",
    "inc     al",
    "mov     byte [rsp+0x87 {var_51_1}], al",
    "mov     ecx, 0x2",
    "mov     word [rsp+0x2c {var_ac}], bx  {0x0}",
    "jmp     0x1400cf47b",
    "cmp     dl, 0x2d",
    "je      0x1400cf53f",
    "cmp     dl, 0x2b",
    "je      0x1400cf4fb",
    "mov     ecx, 0x4",
    "cmp     dl, r12b",
    "jne     0x1400cf485",
    "mov     r13d, eax  {0x1}",
    "jmp     0x1400cf444",
    "cmp     r9d, eax",
    "jne     0x1400cf651",
    "sub     r8, rax",
    "jmp     0x1400cf6ba",
    "mov     ecx, 0x9",
    "jmp     0x1400cf469",
    "cmp     dl, 0x39",
    "jg      0x1400cf6a8",
    "jmp     0x1400cf6a8",
    "lea     r11, [r8-0x1]",
    "cmp     dl, 0x2b",
    "je      0x1400cf5d1",
    "mov     r8, qword [rsp+0x38 {var_a0}]",
    "or      ax, word [rsp+0x2c {var_ac}]",
    "mov     word [r8+0xa], ax",
    "mov     eax, ebx",
    "mov     word [r8], dx",
    "mov     dword [r8+0x2], ecx",
    "mov     dword [r8+0x6], edi",
    "mov     rcx, qword [rsp+0x90 {var_48}]",
    "xor     rcx, rsp {var_d8}",
    "call    sub_1400c9220",
    "mov     rbx, qword [rsp+0xf0 {__saved_rbx}]",
    "add     rsp, 0xa0",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "cmp     byte [r10], bl",
    "je      0x1400cf6fd",
    "mov     ecx, 0x2",
    "mov     dword [rsp+0x2c {var_ac}], 0x8000",
    "jmp     0x1400cf47b",
    "cmp     dl, 0x30",
    "je      0x1400cf48e",
    "mov     rax, r13  {0x1}",
    "cmp     dl, 0x2d",
    "je      0x1400cf4fb",
    "cmp     dl, 0x30",
    "jne     0x1400cf6b2",
    "cmp     dl, 0x30",
    "jge     0x1400cf425",
    "mov     r13d, eax  {0x1}",
    "mov     dword [rsp+0x20 {var_b8}], eax  {0x1}",
    "cmp     edi, ebx",
    "jne     0x1400cf3df",
    "cmp     dl, r9b",
    "jge     0x1400cf699",
    "movsx   eax, dl",
    "lea     ecx, [rsi+rsi*4]",
    "lea     esi, [rax+rcx*2-0x30]",
    "mov     rax, r14  {0x1}",
    "cmp     esi, 0x1450",
    "jg      0x1400cf692",
    "mov     ecx, 0x7",
    "jmp     0x1400cf35d",
    "cmp     dl, 0x2d",
    "jne     0x1400cf6b7",
    "add     edi, r15d",
    "add     ebp, eax",
    "sub     r10, rax",
    "lea     r8, [rsp+0x50 {var_88}]",
    "lea     rcx, [rsp+0x70 {var_68}]",
    "mov     edx, edi",
    "call    sub_1400cf0bc",
    "cmp     dword [rsp+0x24 {var_b4}], ebx",
    "jge     0x1400cf723",
    "mov     eax, 0x1",
    "mov     eax, 0x1",
    "cmp     dl, 0x30",
    "je      0x1400cf4f6",
    "cmp     dl, 0x39",
    "jg      0x1400cf449",
    "cmp     dl, r12b",
    "jne     0x1400cf3e4",
    "cmp     dl, 0x30",
    "jge     0x1400cf3c2",
    "jmp     0x1400cf3bb",
    "cmp     dl, 0x39",
    "jg      0x1400cf537",
    "jmp     0x1400cf537",
    "mov     esi, 0x1451",
    "jmp     0x1400cf6a8",
    "mov     dl, byte [r8]",
    "add     r8, rax",
    "or      dword [rsp+0x24 {var_b4}], 0xffffffff  {0xffffffff}",
    "lea     ecx, [rax+0x6]  {0x7}",
    "jmp     0x1400cf35d",
    "add     esi, ebp",
    "cmp     r14d, ebx",
    "jne     0x1400cf731",
    "neg     esi",
    "mov     rax, r13  {0x1}",
    "jmp     0x1400cf493",
    "cmp     dl, 0x43",
    "jle     0x1400cf65b",
    "cmp     edi, 0x19",
    "jae     0x1400cf43c",
    "cmp     dl, 0x2b",
    "je      0x1400cf4fe",
    "mov     ecx, 0x4",
    "jmp     0x1400cf35d",
    "cmp     dl, 0x39",
    "jg      0x1400cf3e4",
    "cmp     dl, 0x30",
    "je      0x1400cf3b3",
    "mov     dl, byte [r8]",
    "add     r8, rax",
    "cmp     dword [rsp+0x20 {var_b8}], ebx",
    "jne     0x1400cf73e",
    "add     esi, dword [rsp+0x100 {arg5}]",
    "mov     ecx, eax  {0x1}",
    "jmp     0x1400cf35d",
    "mov     rax, r13  {0x1}",
    "jmp     0x1400cf537",
    "cmp     dl, 0x45",
    "jle     0x1400cf4ef",
    "add     ebp, eax",
    "sub     dl, 0x30",
    "add     edi, eax",
    "mov     byte [r10], dl",
    "add     r10, rax",
    "jmp     0x1400cf43e",
    "sub     r8, rax",
    "mov     ecx, 0xb",
    "jmp     0x1400cf35d",
    "cmp     dl, 0x2d",
    "je      0x1400cf4fe",
    "cmp     edi, 0x19",
    "jae     0x1400cf3d9",
    "mov     dl, byte [r8]",
    "sub     ebp, eax",
    "add     r8, rax",
    "jmp     0x1400cf3df",
    "cmp     esi, 0x1450",
    "jg      0x1400cfb0a",
    "sub     esi, dword [rsp+0x108 {arg6}]",
    "mov     ecx, 0x6",
    "jmp     0x1400cf4b8",
    "cmp     dl, 0x63",
    "jle     0x1400cf65b",
    "mov     dl, byte [r8]",
    "add     r8, rax",
    "cmp     dl, 0x43",
    "jle     0x1400cf537",
    "mov     dl, byte [r8]",
    "add     r8, rax",
    "sub     dl, 0x30",
    "add     edi, eax",
    "mov     byte [r10], dl",
    "add     r10, rax",
    "sub     ebp, eax",
    "mov     ecx, ebx  {0x0}",
    "mov     dx, bx  {0x0}",
    "mov     eax, 0x7fff",
    "mov     ebx, 0x2",
    "mov     edi, 0x80000000",
    "jmp     0x1400cfb3b",
    "cmp     esi, 0xffffebb0",
    "jl      0x1400cfafa",
    "mov     rax, r13  {0x1}",
    "jmp     0x1400cf35d",
    "cmp     dl, 0x65",
    "jg      0x1400cf65b",
    "cmp     dl, 0x45",
    "jle     0x1400cf416",
    "mov     edx, ebx  {0x0}",
    "mov     ax, bx  {0x0}",
    "mov     edi, ebx  {0x0}",
    "mov     ecx, ebx  {0x0}",
    "mov     ebx, 0x1",
    "jmp     0x1400cfb3b",
    "lea     r12, [rel data_140139070]",
    "sub     r12, 0x60  {data_140139010}",
    "cmp     esi, ebx",
    "je      0x1400cfae4",
    "mov     ecx, 0x6",
    "jmp     0x1400cf35d",
    "cmp     dl, 0x63",
    "jle     0x1400cf537",
    "mov     eax, dword [rsp+0x58 {var_80}]",
    "mov     dx, word [rsp+0x50 {var_88}]",
    "mov     ecx, dword [rsp+0x52 {var_86}]",
    "mov     edi, dword [rsp+0x56 {var_82}]",
    "shr     eax, 0x10",
    "jmp     0x1400cfb3b",
    "jge     0x1400cf778",
    "cmp     dl, 0x65",
    "jg      0x1400cf537",
    "cmp     dword [rsp+0x28 {var_b0}], ebx",
    "jne     0x1400cf783",
    "lea     r12, [rel data_1401391d0]",
    "neg     esi",
    "sub     r12, 0x60  {data_140139170}",
    "cmp     esi, ebx",
    "je      0x1400cfae4",
    "mov     word [rsp+0x50 {var_88}], bx  {0x0}",
    "mov     edi, 0x80000000",
    "mov     r9d, 0x7fff",
    "mov     r11d, 0x1",
    "cmp     esi, ebx",
    "jne     0x1400cf79c",
    "cdqe    ",
    "mov     r14d, 0x8000",
    "lea     rcx, [rax+rax*2]",
    "lea     rdx, [r12+rcx*4]",
    "cmp     word [rdx], r14w",
    "jb      0x1400cf7f5",
    "mov     eax, esi",
    "add     r12, 0x54",
    "sar     esi, 0x3",
    "and     eax, 0x7",
    "mov     qword [rsp+0x30 {var_a8_1}], r12",
    "mov     dword [rsp+0x28 {var_b0_1}], esi",
    "cmp     eax, ebx",
    "je      0x1400cfadc",
    "movzx   ecx, word [rdx+0xa]",
    "mov     eax, ebx  {0x0}",
    "movzx   eax, word [rsp+0x5a {var_80+0x2}]",
    "movzx   r13d, cx",
    "and     cx, r9w",
    "mov     dword [rsp+0x40 {var_98_1}], ebx  {0x0}",
    "xor     r13w, ax",
    "and     ax, r9w",
    "mov     dword [rsp+0x44 {var_94}], ebx  {0x0}",
    "and     r13w, r14w",
    "lea     r8d, [rax+rcx]",
    "mov     dword [rsp+0x48 {var_90_1}], ebx  {0x0}",
    "cmp     ax, r9w",
    "jae     0x1400cfac3",
    "mov     rax, qword [rdx]",
    "lea     rcx, [rsp+0x60 {var_78}]",
    "mov     qword [rcx {var_78}], rax",
    "mov     eax, dword [rdx+0x8]",
    "lea     rdx, [rsp+0x60 {var_78}]",
    "mov     dword [rcx+0x8 {var_70_1}], eax",
    "mov     rax, qword [rsp+0x60 {var_78}]",
    "shr     rax, 0x10",
    "sub     eax, r11d",
    "mov     dword [rsp+0x62 {var_78+0x2}], eax",
    "neg     r13w",
    "sbb     eax, eax",
    "and     eax, edi",
    "add     eax, 0x7fff8000",
    "mov     dword [rsp+0x58 {var_80}], eax",
    "cmp     cx, r9w",
    "jae     0x1400cfac3",
    "mov     r10d, 0xbffd",
    "cmp     r8w, r10w",
    "ja      0x1400cfac3",
    "mov     r10d, 0x3fbf",
    "cmp     r8w, r10w",
    "ja      0x1400cf85d",
    "cmp     ax, bx",
    "jne     0x1400cf888",
    "mov     dword [rsp+0x58 {var_80}], ebx  {0x0}",
    "jmp     0x1400cfad4",
    "cmp     cx, bx",
    "jne     0x1400cf8a5",
    "mov     eax, dword [rsp+0x58 {var_80}]",
    "add     r8w, r11w",
    "btr     eax, 0x1f",
    "cmp     eax, ebx",
    "jne     0x1400cf888",
    "mov     dword [rsp+0x50 {var_88}], ebx  {0x0}",
    "mov     dword [rsp+0x54 {var_86+0x2}], ebx  {0x0}",
    "mov     r10d, 0x5",
    "mov     ebp, ebx  {0x0}",
    "lea     rcx, [rsp+0x44 {var_94}]",
    "lea     r12d, [r10-0x4]  {0x1}",
    "mov     eax, dword [rdx+0x8]",
    "add     r8w, r11w",
    "btr     eax, 0x1f",
    "cmp     eax, ebx",
    "jne     0x1400cf8a5",
    "cmp     dword [rsp+0x54 {var_86+0x2}], ebx",
    "jne     0x1400cf888",
    "sub     r10d, r12d",
    "add     rcx, 0x2",
    "add     ebp, r12d",
    "cmp     r10d, ebx",
    "jg      0x1400cf8b6",
    "mov     edi, ebp",
    "lea     r14, [rsp+r9+0x50] {var_d8}",
    "lea     r15, [rdx+0x8]",
    "and     edi, r12d",
    "cmp     dword [rdx+0x4], ebx",
    "jne     0x1400cf8a5",
    "cmp     dword [rsp+0x50 {var_88}], ebx",
    "jne     0x1400cf888",
    "cmp     r10d, ebx",
    "lea     eax, [rbp+rbp]",
    "mov     dword [rsp+0x24 {j_2}], r10d",
    "movsxd  r9, eax",
    "jle     0x1400cf91d",
    "mov     r10d, dword [rsp+0x48 {var_90_1}]",
    "mov     r9d, dword [rsp+0x40 {var_98_1}]",
    "mov     eax, 0xc002",
    "add     r8w, ax",
    "mov     ebp, 0xffff",
    "cmp     r8w, bx",
    "jle     0x1400cf98f",
    "mov     r11d, r12d  {0x1}",
    "cmp     esi, r9d",
    "jae     0x1400cf8f7",
    "cmp     dword [rdx], ebx",
    "je      0x1400cf854",
    "mov     word [rsp+0x5a {var_80+0x2}], bx  {0x0}",
    "jmp     0x1400cfadc",
    "add     r8w, bp",
    "jns     0x1400cfa03",
    "bt      r10d, 0x1f",
    "jb      0x1400cf989",
    "mov     r11d, dword [rsp+0x24 {j_2}]",
    "add     r14, 0x2",
    "sub     r15, 0x2",
    "sub     r11d, r12d",
    "cmp     r11d, ebx",
    "mov     dword [rsp+0x24 {j_2}], r11d",
    "jg      0x1400cf8d5",
    "add     word [rcx], r12w",
    "mov     dword [rcx-0x4], esi",
    "cmp     r11d, ebx",
    "je      0x1400cf903",
    "mov     ax, word [rsp+0x40 {var_98_1}]",
    "movzx   eax, r8w",
    "neg     ax",
    "movzx   edx, ax",
    "add     r8w, dx",
    "cmp     r8w, bx",
    "jg      0x1400cfa03",
    "mov     r11d, dword [rsp+0x44 {var_94}]",
    "mov     edx, r9d",
    "add     r10d, r10d",
    "shr     edx, 0x1f",
    "add     r9d, r9d",
    "mov     ecx, r11d",
    "shr     ecx, 0x1f",
    "lea     eax, [r11+r11]",
    "add     r8w, bp",
    "or      eax, edx",
    "or      r10d, ecx",
    "cmp     r8w, bx",
    "mov     dword [rsp+0x44 {var_94}], eax",
    "mov     dword [rsp+0x48 {var_90_1}], r10d",
    "mov     dword [rsp+0x40 {var_98_1}], r9d",
    "jg      0x1400cf94a",
    "movzx   eax, word [r15]",
    "movzx   r9d, word [r14]",
    "mov     r11d, ebx  {0x0}",
    "imul    r9d, eax",
    "mov     eax, dword [rcx-0x4]",
    "lea     esi, [rax+r9]",
    "cmp     esi, eax",
    "jb      0x1400cf8f4",
    "mov     eax, dword [rsp+0x42 {var_98_1+0x2}]",
    "or      r15d, 0xffffffff  {0xffffffff}",
    "mov     r11d, 0x1",
    "cmp     eax, r15d",
    "jne     0x1400cfa81",
    "and     r9d, 0x1ffff",
    "cmp     r9d, 0x18000",
    "jne     0x1400cfa8a",
    "mov     r11d, dword [rsp+0x44 {var_94}]",
    "mov     eax, r10d",
    "shr     r9d, 0x1",
    "mov     ecx, r11d",
    "shl     eax, 0x1f",
    "shr     r11d, 0x1",
    "shl     ecx, 0x1f",
    "or      r11d, eax",
    "shr     r10d, 0x1",
    "or      r9d, ecx",
    "sub     rdx, r12",
    "mov     dword [rsp+0x44 {var_94}], r11d",
    "mov     dword [rsp+0x40 {var_98_1}], r9d",
    "jne     0x1400cf9a3",
    "add     ebx, r12d",
    "add     eax, r11d",
    "mov     dword [rsp+0x42 {var_98_1+0x2}], eax",
    "jmp     0x1400cfa90",
    "mov     eax, dword [rsp+0x46 {var_94+0x2}]",
    "mov     dword [rsp+0x42 {var_98_1+0x2}], ebx  {0x0}",
    "cmp     eax, r15d",
    "jne     0x1400cfa73",
    "mov     r11d, 0x1",
    "test    byte [rsp+0x40 {var_98_1}], r12b",
    "je      0x1400cf9ad",
    "mov     dword [rsp+0x20 {var_b8_1}], ebx",
    "xor     ebx, ebx  {0x0}",
    "mov     dword [rsp+0x48 {var_90_1}], r10d",
    "mov     eax, dword [rsp+0x20 {var_b8_1}]",
    "cmp     eax, ebx",
    "je      0x1400cfa03",
    "mov     esi, dword [rsp+0x28 {var_b0_1}]",
    "mov     r9d, 0x7fff",
    "cmp     r8w, r9w",
    "jae     0x1400cfac3",
    "add     eax, r11d",
    "mov     dword [rsp+0x46 {var_94+0x2}], eax",
    "movzx   eax, word [rsp+0x4a {var_90_1+0x2}]",
    "mov     dword [rsp+0x46 {var_94+0x2}], ebx  {0x0}",
    "cmp     ax, bp",
    "jne     0x1400cfa68",
    "movzx   eax, word [rsp+0x42 {var_98_1+0x2}]",
    "or      r8w, r13w",
    "mov     dword [rsp+0x56 {var_82}], r10d",
    "mov     word [rsp+0x50 {var_88}], ax",
    "mov     eax, dword [rsp+0x44 {var_94}]",
    "mov     word [rsp+0x5a {var_80+0x2}], r8w",
    "mov     dword [rsp+0x52 {var_86}], eax",
    "jmp     0x1400cfadc",
    "movzx   eax, r9w",
    "or      ax, r12w",
    "mov     word [rsp+0x40 {var_98_1}], ax",
    "mov     r9d, dword [rsp+0x40 {var_98_1}]",
    "jmp     0x1400cfa08",
    "add     ax, r11w",
    "mov     word [rsp+0x4a {var_90_1+0x2}], ax",
    "jmp     0x1400cfa7a",
    "mov     word [rsp+0x4a {var_90_1+0x2}], r14w  {0x8000}",
    "add     r8w, r11w",
    "jmp     0x1400cfa7a",
    "mov     r12, qword [rsp+0x30 {var_a8_1}]",
    "mov     r14d, 0x8000",
    "mov     edi, 0x80000000",
    "cmp     ax, r14w",
    "ja      0x1400cfa2e",
    "mov     r10d, dword [rsp+0x48 {var_90_1}]",
    "jmp     0x1400cfa90"
  ],
  "high_level_IL": [
    "void var_d8",
    "int64_t var_48 = data_140139000 ^ &var_d8",
    "uint32_t rbx = 0",
    "void var_68",
    "void* r10 = &var_68",
    "int16_t var_ac = 0",
    "int32_t rdi = 0",
    "int32_t r13 = 0",
    "int32_t var_b4 = 1",
    "int32_t var_b8 = 0",
    "int32_t r14 = 0",
    "uint64_t rsi = 0",
    "int32_t rbp = 0",
    "int32_t rcx = 0",
    "void* r11 = arg3",
    "while (true)",
    "int64_t rax_1",
    "rax_1.b = *arg3",
    "if (rax_1.b != 0x20 && rax_1.b != 9 && rax_1.b != 0xa && rax_1.b != 0xd)",
    "int64_t r12",
    "r12.b = arg8",
    "void* j_3",
    "while (true)",
    "j_3.b = *arg3",
    "arg3 = &arg3[1]",
    "if (rcx s> 5)",
    "if (rcx == 6)",
    "r11 = &arg3[-2]",
    "if ((j_3 - 0x31).b u<= 8)",
    "label_1400cf608:",
    "rcx = 9",
    "arg3 -= 1",
    "continue",
    "if (j_3.b == 0x2b)",
    "rcx = 7",
    "label_1400cf651:",
    "if (rcx == 0xa)",
    "break",
    "continue",
    "if (j_3.b != 0x2d)",
    "goto label_1400cf612",
    "var_b4 = 0xffffffff",
    "rcx = 7",
    "continue",
    "if (rcx == 7)",
    "if ((j_3 - 0x31).b u<= 8)",
    "goto label_1400cf608",
    "label_1400cf612:",
    "if (j_3.b == 0x30)",
    "rcx = 8",
    "continue",
    "arg3 = r11",
    "break",
    "if (rcx == 8)",
    "r14 = 1",
    "while (j_3.b == 0x30)",
    "j_3.b = *arg3",
    "arg3 = &arg3[1]",
    "j_3.b -= 0x31",
    "if (j_3.b u<= 8)",
    "rcx = 9",
    "arg3 -= 1",
    "continue",
    "if (rcx == 9)",
    "r14 = 1",
    "while (j_3.b s>= 0x30)",
    "if (j_3.b s> 0x39)",
    "break",
    "rsi = zx.q(sx.d(j_3.b) + ((rsi * 5).d << 1) - 0x30)",
    "if (rsi.d s> 0x1450)",
    "rsi = 0x1451",
    "break",
    "j_3.b = *arg3",
    "arg3 = &arg3[1]",
    "while (j_3.b s>= 0x30)",
    "if (j_3.b s> 0x39)",
    "break",
    "j_3.b = *arg3",
    "arg3 = &arg3[1]",
    "if (rcx != 0xb)",
    "goto label_1400cf651",
    "if (arg7 != 0)",
    "r11 = &arg3[-1]",
    "if (j_3.b == 0x2b)",
    "rcx = 7",
    "continue",
    "if (j_3.b == 0x2d)",
    "var_b4 = 0xffffffff",
    "rcx = 7",
    "continue",
    "arg3 = r11",
    "break",
    "if (rcx == 5)",
    "j_3.b -= 0x30",
    "var_b8 = 1",
    "if (j_3.b u> 9)",
    "arg3 = r11",
    "break",
    "rcx = 4",
    "arg3 -= 1",
    "continue",
    "if (rcx == 0)",
    "if ((j_3 - 0x31).b u<= 8)",
    "label_1400cf45f:",
    "rcx = 3",
    "arg3 -= 1",
    "continue",
    "if (j_3.b == r12.b)",
    "rcx = 5",
    "continue",
    "if (j_3.b == 0x2b)",
    "rcx = 2",
    "var_ac = 0",
    "continue",
    "if (j_3.b == 0x2d)",
    "rcx = 2",
    "var_ac.d = 0x8000",
    "continue",
    "if (j_3.b == 0x30)",
    "rcx = 1",
    "continue",
    "if (rcx == 1)",
    "r13 = 1",
    "if ((j_3 - 0x31).b u<= 8)",
    "rcx = 3",
    "arg3 -= 1",
    "continue",
    "if (j_3.b == r12.b)",
    "rcx = 4",
    "continue",
    "if (j_3.b == 0x2b || j_3.b == 0x2d)",
    "label_1400cf4fe:",
    "arg3 -= 1",
    "rcx = 0xb",
    "continue",
    "if (j_3.b == 0x30)",
    "rcx = 1",
    "continue",
    "if (j_3.b s> 0x43)",
    "if (j_3.b s<= 0x45)",
    "rcx = 6",
    "continue",
    "if (j_3.b s> 0x63 && j_3.b s<= 0x65)",
    "rcx = 6",
    "continue",
    "if (rcx == 2)",
    "if ((j_3 - 0x31).b u<= 8)",
    "goto label_1400cf45f",
    "if (j_3.b != r12.b)",
    "if (j_3.b == 0x30)",
    "rcx = 1",
    "continue",
    "arg3 = r11",
    "break",
    "rcx = 5",
    "continue",
    "if (rcx == 3)",
    "r13 = 1",
    "while (j_3.b s>= 0x30)",
    "if (j_3.b s> 0x39)",
    "break",
    "if (rdi u>= 0x19)",
    "rbp += 1",
    "j_3.b -= 0x30",
    "rdi += 1",
    "*r10 = j_3.b",
    "r10 += 1",
    "j_3.b = *arg3",
    "arg3 = &arg3[1]",
    "if (j_3.b != r12.b)",
    "goto label_1400cf3e4",
    "rcx = 4",
    "continue",
    "if (rcx != 4)",
    "goto label_1400cf651",
    "r13 = 1",
    "var_b8 = 1",
    "if (rdi == 0)",
    "while (j_3.b == 0x30)",
    "j_3.b = *arg3",
    "rbp -= 1",
    "arg3 = &arg3[1]",
    "while (j_3.b s>= 0x30)",
    "if (j_3.b s> 0x39)",
    "break",
    "if (rdi u< 0x19)",
    "j_3.b -= 0x30",
    "rdi += 1",
    "*r10 = j_3.b",
    "r10 += 1",
    "rbp -= 1",
    "j_3.b = *arg3",
    "arg3 = &arg3[1]",
    "label_1400cf3e4:",
    "if (j_3.b == 0x2b || j_3.b == 0x2d)",
    "goto label_1400cf4fe",
    "if (j_3.b s> 0x43)",
    "if (j_3.b s<= 0x45)",
    "rcx = 6",
    "continue",
    "if (j_3.b s> 0x63 && j_3.b s<= 0x65)",
    "rcx = 6",
    "continue",
    "arg3 -= 1",
    "break",
    "*arg2 = arg3",
    "uint16_t rax_2",
    "uint32_t rcx_10",
    "uint32_t rdi_3",
    "if (r13 == 0)",
    "j_3.w = 0",
    "rax_2 = 0",
    "rdi_3 = 0",
    "rcx_10 = 0",
    "rbx = 4",
    "if (rdi u> 0x18)",
    "char var_51",
    "rax_2.b = var_51",
    "if (rax_2.b s>= 5)",
    "rax_2.b += 1",
    "char var_51_1 = rax_2.b",
    "rdi = 0x18",
    "r10 -= 1",
    "rbp += 1",
    "if (rdi u<= 0)",
    "j_3.w = 0",
    "rax_2 = 0",
    "rdi_3 = 0",
    "rcx_10 = 0",
    "void* r10_1 = r10 - 1",
    "while (*r10_1 == 0)",
    "rdi -= 1",
    "rbp += 1",
    "r10_1 -= 1",
    "int16_t var_88",
    "sub_1400cf0bc(&var_68, rdi, &var_88)",
    "if (var_b4 s< 0)",
    "rsi = zx.q(neg.d(rsi.d))",
    "int32_t i = rsi.d + rbp",
    "if (r14 == 0)",
    "i += arg5",
    "if (var_b8 == 0)",
    "i -= arg6",
    "if (i s> 0x1450)",
    "rcx_10 = 0",
    "j_3.w = 0",
    "rax_2 = 0x7fff",
    "rbx = 2",
    "rdi_3 = -0x80000000",
    "if (i s< 0xffffebb0)",
    "j_3 = nullptr",
    "rax_2 = 0",
    "rdi_3 = 0",
    "rcx_10 = 0",
    "rbx = 1",
    "char const (** r12_1)[0x7] = &data_140139010",
    "uint32_t var_86",
    "uint32_t var_82",
    "int32_t var_80",
    "if (i != 0)",
    "if (i s< 0)",
    "i = neg.d(i)",
    "r12_1 = &data_140139170",
    "if (arg4 == 0)",
    "var_88 = 0",
    "while (i != 0)",
    "int32_t i_1 = i",
    "r12_1 += 0x54",
    "i s>>= 3",
    "int32_t rax_9 = i_1 & 7",
    "if (rax_9 != 0)",
    "j_3 = r12_1 + sx.q(rax_9) * 0xc",
    "if (*j_3 u>= 0x8000)",
    "int64_t var_78 = *j_3",
    "int32_t rax_12 = *(j_3 + 8)",
    "j_3 = &var_78",
    "int32_t var_70_1 = rax_12",
    "var_78:2.d = (var_78 u>> 0x10).d - 1",
    "int16_t rcx_4 = *(j_3 + 0xa)",
    "uint32_t rax_16 = zx.d(var_80:2.w)",
    "int16_t r13_1 = rcx_4",
    "rcx_4 &= 0x7fff",
    "uint32_t var_98_1 = 0",
    "r13_1 ^= rax_16.w",
    "rax_16.w &= 0x7fff",
    "uint32_t var_94 = 0",
    "r13_1 &= 0x8000",
    "int16_t r8_1 = rax_16.w + rcx_4",
    "uint32_t var_90_1 = 0",
    "if (rax_16.w u>= 0x7fff || rcx_4 u>= 0x7fff || r8_1 u> 0xbffd)",
    "label_1400cfad0:",
    "var_80 = (sbb.d(rax_16, rax_16, r13_1 != 0) & 0x80000000) + 0x7fff8000",
    "var_88.d = 0",
    "var_86 = 0",
    "if (r8_1 u> 0x3fbf)",
    "if (rax_16.w == 0)",
    "r8_1 += 1",
    "if (rax_16.w != 0 || (var_80 & 0x7fffffff) != 0 || var_86 != 0 || var_88.d != 0)",
    "if (rcx_4 == 0)",
    "r8_1 += 1",
    "if (rcx_4 == 0 && (*(j_3 + 8) & 0x7fffffff) == 0 && *(j_3 + 4) == 0 && *j_3 == 0)",
    "goto label_1400cf854",
    "int32_t j = 5",
    "int32_t rbp_1 = 0",
    "uint32_t* rcx_5 = &var_94",
    "int32_t j_2 = j",
    "if (j s> 0)",
    "void* r14_1 = &var_d8 + sx.q(rbp_1 * 2) + 0x50",
    "void* r15_1 = j_3 + 8",
    "bool cond:3_1",
    "int32_t r11_1 = 0",
    "int32_t r9_11 = zx.d(*r14_1) * zx.d(*r15_1)",
    "int32_t rax_23 = rcx_5[-1]",
    "int32_t rsi_1 = rax_23 + r9_11",
    "if (rsi_1 u< rax_23 || rsi_1 u< r9_11)",
    "r11_1 = 1",
    "rcx_5[-1] = rsi_1",
    "if (r11_1 != 0)",
    "*rcx_5 += 1",
    "r14_1 += 2",
    "r15_1 -= 2",
    "cond:3_1 = j_2 - 1 s> 0",
    "j_2 -= 1",
    "do while (cond:3_1)",
    "j -= 1",
    "rcx_5 += 2",
    "rbp_1 += 1",
    "do while (j s> 0)",
    "uint32_t r10_2 = var_90_1",
    "uint32_t r9_12 = var_98_1",
    "r8_1 -= 0x3ffe",
    "if (r8_1 s<= 0)",
    "label_1400cf98f:",
    "int16_t temp8_1 = r8_1",
    "r8_1 -= 1",
    "if (temp8_1 - 1 s>= 0)",
    "rax_16.w = var_98_1.w",
    "j_3 = zx.q(neg.w(r8_1))",
    "r8_1 += j_3.w",
    "void* j_1",
    "if ((var_98_1.b & 1) != 0)",
    "rbx += 1",
    "uint32_t r11_5 = var_94",
    "uint32_t r11_7 = r11_5 u>> 1 | r10_2 << 0x1f",
    "r10_2 u>>= 1",
    "r9_12 = r9_12 u>> 1 | r11_5 << 0x1f",
    "j_1 = j_3",
    "j_3 -= 1",
    "var_94 = r11_7",
    "var_98_1 = r9_12",
    "do while (j_1 != 1)",
    "uint32_t var_b8_1 = rbx",
    "rbx = 0",
    "var_90_1 = r10_2",
    "if (var_b8_1 == 0)",
    "rax_16.w = var_98_1.w",
    "rax_16.w = r9_12.w | 1",
    "var_98_1.w = rax_16.w",
    "r9_12 = var_98_1",
    "while (not(test_bit(r10_2, 0x1f)))",
    "uint32_t r11_4 = var_94",
    "j_3 = zx.q(r9_12 u>> 0x1f)",
    "r9_12 *= 2",
    "r8_1 -= 1",
    "r10_2 = (r10_2 * 2) | r11_4 u>> 0x1f",
    "var_94 = (r11_4 * 2) | j_3.d",
    "var_90_1 = r10_2",
    "var_98_1 = r9_12",
    "if (r8_1 s<= 0)",
    "break",
    "if (r8_1 s<= 0)",
    "goto label_1400cf98f",
    "rax_16.w = var_98_1.w",
    "if (rax_16.w u> 0x8000 || (r9_12 & 0x1ffff) == 0x18000)",
    "if (var_98_1 != 0xffffffff)",
    "rax_16 = var_98_1 + 1",
    "var_98_1 = rax_16",
    "uint32_t rax_29 = var_94",
    "var_98_1 = 0",
    "if (rax_29 != 0xffffffff)",
    "rax_16 = rax_29 + 1",
    "var_94 = rax_16",
    "rax_16 = zx.d(var_90_1:2.w)",
    "var_94 = 0",
    "if (rax_16.w != 0xffff)",
    "rax_16.w += 1",
    "var_90_1:2.w = rax_16.w",
    "var_90_1:2.w = 0x8000",
    "r8_1 += 1",
    "r10_2 = var_90_1",
    "if (r8_1 u>= 0x7fff)",
    "goto label_1400cfad0",
    "var_82 = r10_2",
    "var_88 = var_98_1:2.w",
    "var_80:2.w = r8_1 | r13_1",
    "var_86 = var_94",
    "var_80:2.w = 0",
    "label_1400cf854:",
    "var_80 = 0",
    "var_88.d = 0",
    "var_86 = 0",
    "j_3.w = var_88",
    "rcx_10 = var_86",
    "rdi_3 = var_82",
    "rax_2 = (var_80 u>> 0x10).w",
    "arg1[5] = rax_2 | var_ac",
    "*arg1 = j_3.w",
    "*(arg1 + 2) = rcx_10",
    "*(arg1 + 6) = rdi_3",
    "sub_1400c9220(var_48 ^ &var_d8)",
    "return zx.q(rbx)",
    "arg3 = &arg3[1]"
  ]
}