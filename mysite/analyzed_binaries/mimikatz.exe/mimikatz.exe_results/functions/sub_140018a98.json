{
  "address": "0x140018a98",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "encrypt data using Curve25519/ba11e775237f4334901cb73b0f61e10d",
    "contain loop",
    "allocate or change RWX memory/e5d60c23edee4683a25ac882b99be25c/be08ffa5ddd942e8ab0706a663121e4b",
    "decompress data using LZO/87c7a2ec75aa43fe877541de4275123a",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/1a6c04bed22346cdaee8fbdaa0f123d3",
    "encrypt data using chaskey/7025f739e4b341df894563ee3ec22dfd",
    "encrypt data using HC-128/edc455eb75c84651ba504cec06bcd48f",
    "decompress data using aPLib/a5c76dae137d4aaa9aade786acafaa41",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "encrypt data using HC-128/dc9a54888ead410ba377a88c79e5e622"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "mov     qword [rsp+0x10], rbp",
    "mov     qword [rsp+0x18], rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "sub     rsp, 0x20",
    "mov     r13d, 0x1",
    "mov     r12b, dl",
    "mov     rbx, rcx",
    "cmp     byte [rcx+0xa], r13b",
    "je      0x140018b0c",
    "cmp     r12b, r13b",
    "jne     0x140018b20",
    "cmp     dl, r13b",
    "je      0x140018b11",
    "movsxd  rax, dword [rcx+0xc]",
    "lea     rcx, [rax+rax+0x2]",
    "and     dword [rcx+0xc], 0xfffffffe",
    "movsxd  rax, dword [rcx+0xc]",
    "lea     rcx, [rax+rax+0x1]",
    "jmp     0x140018b29",
    "call    sub_140030eb4",
    "test    eax, eax",
    "je      0x140018ada",
    "call    sub_140016870",
    "mov     rdx, rcx",
    "mov     rcx, qword [rbx+0x28]",
    "call    sub_140016c18",
    "jmp     0x140018b4e",
    "mov     rdi, qword [rbx+0x10]",
    "movsxd  rsi, dword [rbx+0xc]",
    "add     rsi, rdi",
    "cmp     qword [rbx+0x28], 0x0",
    "je      0x140018b49",
    "movsxd  r9, dword [rbx+0xc]",
    "mov     r8, qword [rbx+0x10]",
    "and     r9, 0xfffffffffffffffe",
    "add     r9, r8",
    "jmp     0x140018afe",
    "mov     eax, 0x7",
    "jmp     0x140018f20",
    "mov     r8, rax",
    "mov     al, byte [rbx+0xa]",
    "cmp     al, r13b",
    "jne     0x140018d2c",
    "mov     rbp, rax",
    "test    rax, rax",
    "je      0x140018ad0",
    "cmp     r8, r9",
    "jb      0x140018aeb",
    "mov     rbx, qword [rsp+0x40]",
    "mov     rbp, qword [rsp+0x48]",
    "mov     rsi, qword [rsp+0x50]",
    "add     rsp, 0x20",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "retn    ",
    "cmp     al, 0x2",
    "jne     0x140018e00",
    "cmp     r12b, 0x2",
    "jne     0x140018c51",
    "mov     al, byte [r8+0x1]",
    "mov     dl, byte [r8]",
    "mov     byte [r8], al",
    "mov     byte [r8+0x1], dl",
    "lea     r8, [r13+r8+0x1]",
    "mov     byte [rbx+0xa], r12b",
    "jmp     0x140018f1e",
    "cmp     rdi, rsi",
    "jae     0x140018ec7",
    "cmp     rdi, rsi",
    "jae     0x140018ec7",
    "cmp     rdi, rsi",
    "jae     0x140018d18",
    "cmp     rdi, rsi",
    "jae     0x140018d18",
    "xor     eax, eax",
    "mov     eax, r8d",
    "sub     eax, ebp",
    "mov     dword [rbx+0xc], eax",
    "mov     r10d, 0x80",
    "mov     r10d, 0x80",
    "mov     eax, r8d",
    "sub     eax, ebp",
    "mov     dword [rbx+0xc], eax",
    "mov     byte [r8], 0x0",
    "add     r8, r13",
    "jmp     0x140018ecf",
    "lea     r11, [rel data_1400d6900]",
    "mov     r10d, 0x80",
    "lea     r11, [rel data_1400d6900]",
    "mov     r10d, 0x80",
    "mov     rcx, rbx",
    "call    sub_14003118c",
    "cmp     dword [rbx+0x20], 0x0",
    "je      0x140018eef",
    "cmp     edx, r10d",
    "jb      0x140018eb8",
    "cmp     rdi, rsi",
    "jae     0x140018e5c",
    "cmp     edx, r10d",
    "jb      0x140018dec",
    "cmp     rdi, rsi",
    "jae     0x140018d90",
    "mov     byte [r8], 0x0",
    "movzx   edi, word [rbx+0x8]",
    "mov     eax, 0x2400",
    "test    ax, di",
    "jne     0x140018ee7",
    "cmp     edx, 0xffff",
    "ja      0x140018cd1",
    "lea     eax, [rdx-0xc0]",
    "movzx   edx, byte [rax+r11]",
    "jmp     0x140018c99",
    "cmp     r9d, 0xffff",
    "ja      0x140018bfe",
    "lea     eax, [r9-0xc0]",
    "movzx   r9d, byte [rax+r11]",
    "jmp     0x140018bc0",
    "mov     rcx, qword [rbx+0x28]",
    "mov     eax, 0x823f",
    "mov     rdx, rbp",
    "and     di, ax",
    "mov     eax, 0x202",
    "mov     byte [rbx+0xa], r12b",
    "or      di, ax",
    "mov     qword [rbx+0x10], rbp",
    "mov     qword [rbx+0x18], rbp",
    "mov     word [rbx+0x8], di",
    "call    sub_140016904",
    "mov     dword [rbx+0x20], eax",
    "mov     byte [r8], dl",
    "add     r8, r13",
    "cmp     rdi, rsi",
    "jb      0x140018e0f",
    "mov     eax, edx",
    "cmp     edx, 0x800",
    "jae     0x140018e74",
    "movzx   ecx, byte [rdi]",
    "add     rdi, r13",
    "movzx   eax, byte [rdi]",
    "shl     ecx, 0x8",
    "add     rdi, r13",
    "add     ecx, eax",
    "mov     eax, edx",
    "and     edx, 0x3f",
    "and     eax, 0x3c0",
    "and     ecx, 0x3ff",
    "lea     edx, [rax+rdx+0x40]",
    "shl     edx, 0xa",
    "add     edx, ecx",
    "mov     byte [r8], dl",
    "add     r8, r13",
    "cmp     rdi, rsi",
    "jb      0x140018d43",
    "mov     eax, edx",
    "cmp     edx, 0x800",
    "jae     0x140018da8",
    "movzx   ecx, byte [rdi]",
    "add     rdi, r13",
    "movzx   eax, byte [rdi]",
    "add     rdi, r13",
    "shl     eax, 0x8",
    "add     ecx, eax",
    "mov     eax, edx",
    "and     edx, 0x3f",
    "and     eax, 0x3c0",
    "and     ecx, 0x3ff",
    "lea     edx, [rax+rdx+0x40]",
    "shl     edx, 0xa",
    "add     edx, ecx",
    "lea     ecx, [rdx-0x10000]",
    "mov     eax, ecx",
    "shr     ecx, 0xa",
    "shr     eax, 0x12",
    "and     al, 0x3",
    "sub     al, 0x28",
    "mov     byte [r8], al",
    "add     r8, r13",
    "mov     eax, edx",
    "shr     eax, 0xa",
    "xor     al, cl",
    "and     al, 0x3f",
    "xor     al, cl",
    "mov     byte [r8], al",
    "mov     eax, edx",
    "add     r8, r13",
    "shr     eax, 0x8",
    "and     al, 0x3",
    "sub     al, 0x24",
    "mov     eax, edx",
    "shr     eax, 0x8",
    "jmp     0x140018d03",
    "cmp     rdi, rsi",
    "jne     0x140018c82",
    "lea     edx, [r9-0x10000]",
    "mov     eax, r9d",
    "mov     ecx, edx",
    "shr     eax, 0xa",
    "shr     edx, 0x12",
    "shr     ecx, 0xa",
    "and     dl, 0x3",
    "xor     al, cl",
    "sub     dl, 0x28",
    "and     al, 0x3f",
    "xor     al, cl",
    "mov     byte [r8], al",
    "add     r8, r13",
    "mov     byte [r8], dl",
    "add     r8, r13",
    "mov     byte [r8], r9b",
    "shr     r9d, 0x8",
    "and     r9b, 0x3",
    "sub     r9b, 0x24",
    "mov     byte [r8], r9b",
    "shr     r9d, 0x8",
    "jmp     0x140018c3a",
    "cmp     rdi, rsi",
    "jne     0x140018ba7",
    "movzx   edx, byte [rdi]",
    "add     rdi, r13",
    "movzx   eax, byte [rdi]",
    "shl     edx, 0x8",
    "add     rdi, r13",
    "add     edx, eax",
    "lea     eax, [rdx-0xd800]",
    "cmp     eax, 0x7ff",
    "ja      0x140018e5c",
    "cmp     edx, 0x10000",
    "jae     0x140018e85",
    "shr     eax, 0x6",
    "and     al, 0x1f",
    "sub     al, 0x40",
    "jmp     0x140018eac",
    "movzx   edx, byte [rdi]",
    "add     rdi, r13",
    "movzx   eax, byte [rdi]",
    "add     rdi, r13",
    "shl     eax, 0x8",
    "add     edx, eax",
    "lea     eax, [rdx-0xd800]",
    "cmp     eax, 0x7ff",
    "ja      0x140018d90",
    "jmp     0x140018ec7",
    "cmp     edx, 0x10000",
    "jae     0x140018db9",
    "shr     eax, 0x6",
    "and     al, 0x1f",
    "sub     al, 0x40",
    "jmp     0x140018de0",
    "movzx   edx, byte [rdi]",
    "add     rdi, r13",
    "cmp     edx, 0xc0",
    "jb      0x140018cc2",
    "mov     byte [r8], al",
    "add     r8, r13",
    "mov     byte [r8], dl",
    "add     r8, r13",
    "cmp     rdi, rsi",
    "jb      0x140018c67",
    "mov     al, byte [rdi]",
    "and     al, 0xc0",
    "cmp     al, r10b",
    "jne     0x140018c9e",
    "cmp     edx, r10d",
    "jb      0x140018cbd",
    "movzx   r9d, byte [rdi]",
    "add     rdi, r13",
    "cmp     r9d, 0xc0",
    "jb      0x140018bec",
    "jmp     0x140018d18",
    "add     r8, r13",
    "mov     byte [r8], r9b",
    "add     r8, r13",
    "cmp     rdi, rsi",
    "jb      0x140018b89",
    "mov     al, byte [rdi]",
    "and     al, 0xc0",
    "cmp     al, r10b",
    "jne     0x140018bc5",
    "cmp     r9d, r10d",
    "jb      0x140018be6",
    "shr     eax, 0x12",
    "and     al, 0x7",
    "sub     al, 0x10",
    "mov     byte [r8], al",
    "mov     eax, edx",
    "add     r8, r13",
    "shr     eax, 0xc",
    "and     al, 0x3f",
    "add     al, r10b",
    "shr     eax, 0xc",
    "and     al, 0xf",
    "sub     al, 0x20",
    "jmp     0x140018e9c",
    "and     dl, 0x3f",
    "mov     byte [r8], al",
    "add     r8, r13",
    "add     dl, r10b",
    "shr     eax, 0x12",
    "and     al, 0x7",
    "sub     al, 0x10",
    "mov     byte [r8], al",
    "mov     eax, edx",
    "add     r8, r13",
    "shr     eax, 0xc",
    "and     al, 0x3f",
    "add     al, r10b",
    "shr     eax, 0xc",
    "and     al, 0xf",
    "sub     al, 0x20",
    "jmp     0x140018dd0",
    "and     dl, 0x3f",
    "mov     byte [r8], al",
    "add     r8, r13",
    "add     dl, r10b",
    "movzx   ecx, byte [rdi]",
    "shl     edx, 0x6",
    "and     ecx, 0x3f",
    "add     edx, ecx",
    "add     rdi, r13",
    "mov     edx, 0xfffd",
    "mov     eax, edx",
    "and     eax, 0xfffff800",
    "cmp     eax, 0xd800",
    "je      0x140018cbd",
    "movzx   ecx, byte [rdi]",
    "shl     r9d, 0x6",
    "and     ecx, 0x3f",
    "add     r9d, ecx",
    "add     rdi, r13",
    "mov     r9d, 0xfffd",
    "mov     eax, r9d",
    "and     eax, 0xfffff800",
    "cmp     eax, 0xd800",
    "je      0x140018be6",
    "mov     byte [r8], al",
    "mov     eax, edx",
    "add     r8, r13",
    "shr     eax, 0x6",
    "and     al, 0x3f",
    "add     al, r10b",
    "mov     byte [r8], al",
    "mov     eax, edx",
    "add     r8, r13",
    "shr     eax, 0x6",
    "and     al, 0x3f",
    "add     al, r10b",
    "mov     eax, edx",
    "and     eax, 0xfffffffe",
    "cmp     eax, 0xfffe",
    "jne     0x140018cc2",
    "mov     eax, r9d",
    "and     eax, 0xfffffffe",
    "cmp     eax, 0xfffe",
    "jne     0x140018bec"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}