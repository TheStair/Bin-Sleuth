{
  "address": "0x1400cca98",
  "rules": [
    "encrypt data using HC-128/86aaff13b46c4951b9ca4e0a9171c391",
    "check for kernel debugger via shared user data structure/f02b2044f10f450f9f5b2b0d5d96cef0",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/0d7bc900a8ea48098fc469578ae14b88",
    "hash data using aphash/c01783ca846f48c3a4751b50c0c12749",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "hash data with CRC32/7620b456d97a4aaeb63e1213270df3d4",
    "hash data using aphash/53c84e7b18b64c82aa36e25c45372fcd",
    "write file on Windows/035d57bed47747649158312e9532f27d"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x60",
    "mov     rax, qword [rel data_140139000]",
    "xor     rax, rsp",
    "mov     qword [rsp+0x50], rax",
    "mov     rdi, qword [rsp+0xc0]",
    "mov     rsi, qword [rsp+0xd0]",
    "mov     r15, qword [rsp+0xe0]",
    "mov     r12, qword [rdi]",
    "mov     eax, ecx",
    "mov     r14, r9",
    "and     al, 0x8",
    "mov     qword [rsp+0x28], r8",
    "mov     qword [rsp+0x40], rdx",
    "neg     al",
    "mov     ebx, ecx",
    "mov     qword [rsp+0x38], rsi",
    "sbb     eax, eax",
    "dec     dword [r9]",
    "mov     r9d, 0xffff",
    "mov     dword [rsp+0x30], eax",
    "cmp     r9w, word [r8]",
    "je      0x1400ccb11",
    "mov     rbp, qword [rsp+0xd8]",
    "mov     r13d, ebx",
    "and     r13d, 0x10",
    "jne     0x1400ccb25",
    "movzx   ecx, word [r8]",
    "mov     rdx, rsi",
    "call    sub_1400cfffc",
    "mov     eax, ebx",
    "and     eax, 0x1",
    "xor     edx, edx",
    "mov     dword [rsp+0x20], eax",
    "jmp     0x1400ccb37",
    "dec     rbp",
    "cmp     eax, edx",
    "je      0x1400ccb55",
    "inc     dword [r14]",
    "mov     rcx, rsi",
    "call    sub_1400cfeac",
    "mov     r8, qword [rsp+0x28]",
    "mov     r9d, 0xffff",
    "xor     edx, edx",
    "mov     word [r8], ax",
    "mov     r11w, ax",
    "cmp     r9w, ax",
    "je      0x1400cccbe",
    "mov     ecx, dword [rsp+0xc8]",
    "mov     eax, ecx",
    "dec     ecx",
    "mov     dword [rsp+0xc8], ecx",
    "cmp     eax, edx",
    "je      0x1400cccd5",
    "dec     dword [r14]",
    "cmp     r9w, word [r8]",
    "je      0x1400cccd5",
    "cmp     r13d, edx",
    "jne     0x1400ccbd8",
    "cmp     r12, qword [rdi]",
    "je      0x1400ccc8e",
    "movzx   ecx, word [r8]",
    "mov     rdx, rsi",
    "call    sub_1400cfffc",
    "xor     edx, edx",
    "test    bl, 0x4",
    "jne     0x1400ccc69",
    "test    bl, 0x20",
    "je      0x1400ccb9c",
    "or      eax, 0xffffffff",
    "test    bl, 0x4",
    "jne     0x1400cccf6",
    "add     r12, 0x2",
    "cmp     rbp, rdx",
    "je      0x1400ccc76",
    "test    bl, 0x40",
    "je      0x1400cccbe",
    "cmp     ax, 0x9",
    "jb      0x1400ccb95",
    "xor     eax, eax",
    "jmp     0x1400ccc91",
    "inc     dword [r15]",
    "cmp     r13d, edx",
    "jne     0x1400cccf6",
    "call    qword [rel _errno]",
    "mov     dword [rax], 0xc",
    "xor     eax, eax",
    "test    bl, 0x2",
    "je      0x1400cccb6",
    "test    bl, 0x2",
    "je      0x1400ccbff",
    "movzx   ecx, r11w",
    "shr     cx, 0x3",
    "cmp     r11w, cx",
    "jb      0x1400cccbe",
    "cmp     r11w, 0x20",
    "jne     0x1400ccbd8",
    "cmp     ax, 0xd",
    "jbe     0x1400ccb9c",
    "mov     rcx, qword [rsp+0x50]",
    "xor     rcx, rsp",
    "call    sub_1400c9220",
    "mov     rbx, qword [rsp+0xa0]",
    "add     rsp, 0x60",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "retn    ",
    "mov     rax, qword [rdi]",
    "test    bl, 0x2",
    "je      0x1400cccf4",
    "mov     byte [r12], al",
    "jmp     0x1400ccc8e",
    "mov     word [r12], ax",
    "mov     rax, qword [rel __mb_cur_max]",
    "movzx   edx, r11w",
    "movsxd  rcx, dword [rax]",
    "cmp     rbp, rcx",
    "jb      0x1400ccc1f",
    "mov     rax, qword [rdi]",
    "mov     word [rax], r11w",
    "add     qword [rdi], 0x2",
    "dec     rbp",
    "jmp     0x1400ccc6d",
    "movzx   eax, cx",
    "mov     rcx, qword [rsp+0x40]",
    "mov     edx, r11d",
    "movsx   ecx, byte [rax+rcx]",
    "and     edx, 0x7",
    "xor     ecx, dword [rsp+0x30]",
    "bt      ecx, edx",
    "jae     0x1400cccbc",
    "mov     byte [rax], dl",
    "mov     word [rax], dx",
    "jmp     0x1400cccf6",
    "lea     rcx, [rsp+0x48]",
    "call    qword [rel wctomb]",
    "movsxd  rsi, eax",
    "test    eax, eax",
    "jle     0x1400ccc36",
    "mov     rcx, qword [rdi]",
    "call    qword [rel wctomb]",
    "mov     esi, eax",
    "jmp     0x1400ccc4b",
    "mov     eax, dword [rsp+0x20]",
    "jmp     0x1400ccb37",
    "xor     edx, edx",
    "xor     edx, edx",
    "cmp     esi, 0x5",
    "ja      0x1400ccc76",
    "cmp     rsi, rbp",
    "ja      0x1400ccc76",
    "mov     eax, dword [rsp+0x20]",
    "xor     edx, edx",
    "cmp     esi, edx",
    "jle     0x1400ccb32",
    "mov     rcx, qword [rdi]",
    "lea     rdx, [rsp+0x48]",
    "mov     r8, rsi",
    "call    memcpy",
    "mov     rsi, qword [rsp+0x38]",
    "movsxd  rax, esi",
    "mov     rsi, qword [rsp+0x38]",
    "add     qword [rdi], rax",
    "sub     rbp, rax",
    "jmp     0x1400ccc6d"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}