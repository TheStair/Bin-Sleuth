{
  "address": "0x140058c48",
  "rules": [
    "hash data using djb2/1485ed9954f84e3481d22b64bc4cfca7",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "hash data using jshash/79354a2ef36a4036b42806ea4b41f8bd",
    "encrypt data using chaskey/4b6f9d91d05f46dd9aa3662f80cb6278",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/5f4c97f31ce341008ea23885a97305d8",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/5f4855375d6b45e9bd6b2a189e856211",
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/dc118f3b61184df4a511ed4919cf656f"
  ],
  "disassembly": [
    "mov     qword [rsp+0x20], rbx",
    "mov     qword [rsp+0x10], rdx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0xa0",
    "mov     rax, qword [rcx]",
    "xor     ebx, ebx",
    "mov     r15, r9",
    "mov     r13, r8",
    "mov     rdi, rdx",
    "mov     rsi, rcx",
    "mov     qword [rsp+0x50], rax",
    "mov     rbp, rbx",
    "mov     qword [rsp+0x48], rbx",
    "mov     dword [rsp+0xf0], ebx",
    "call    sub_140065300",
    "cmp     dword [rsp+0x118], ebx",
    "mov     r12, qword [rsp+0x100]",
    "mov     r14, rax",
    "mov     qword [rsp+0x60], rax",
    "jge     0x140058cc6",
    "or      eax, 0xffffffff",
    "cmp     dword [r12+0x28], ebx",
    "mov     dword [rsp+0xe0], ebx",
    "jle     0x140058db7",
    "movzx   r8d, byte [r12+0x2c]",
    "lea     edx, [rbx+0x2e]",
    "xor     r9d, r9d",
    "mov     rcx, rax",
    "mov     dword [rsp+0x20], ebx",
    "call    sub_140032364",
    "mov     dword [rsp+0xf0], eax",
    "cmp     r13, qword [r12]",
    "jne     0x140058f2c",
    "mov     r14, qword [rsp+0x50]",
    "mov     rdi, rbx",
    "mov     rbx, qword [rsp+0x108]",
    "mov     qword [rsp+0x40], rbx",
    "xor     edx, edx",
    "lea     rcx, [rsp+0x68]",
    "lea     r8d, [rdx+0x38]",
    "call    memset",
    "xor     r13d, r13d",
    "mov     qword [rsp+0x70], rdi",
    "mov     qword [rsp+0x68], rsi",
    "cmp     rbp, r13",
    "je      0x140058f5b",
    "cmp     dword [rsp+0x118], ebx",
    "jle     0x140058f2c",
    "mov     ecx, eax",
    "mov     rax, qword [r15+0x8]",
    "mov     cx, word [rdi+rax]",
    "jmp     0x140058d01",
    "cmp     dword [rsi+0x30], r13d",
    "jne     0x140058fb2",
    "lea     rcx, [rsp+0x68]",
    "mov     rdx, rbp",
    "call    sub_140042da4",
    "test    byte [r13+0x40], 0x20",
    "jne     0x140058e33",
    "mov     cx, word [r12+0x40]",
    "mov     rcx, qword [rsp+0x40]",
    "movzx   ecx, word [rcx]",
    "jmp     0x140058d32",
    "mov     r8d, dword [rsp+0x110]",
    "movzx   r9d, cx",
    "mov     rdx, r13",
    "mov     rcx, rsi",
    "call    sub_140058b94",
    "mov     qword [rsp+0x48], rax",
    "test    rbx, rbx",
    "je      0x140058d2c",
    "cmp     rbp, r13",
    "je      0x140058fc4",
    "mov     dword [rsp+0x30], r13d",
    "xor     r9d, r9d",
    "mov     r8, rbp",
    "mov     rdx, rdi",
    "mov     rcx, rsi",
    "mov     word [rsp+0x28], r13w",
    "mov     qword [rsp+0x20], r13",
    "call    sub_140078d90",
    "movzx   r8d, byte [r12+0x2c]",
    "mov     r9d, dword [rsp+0x118]",
    "mov     edx, 0x96",
    "mov     rcx, r14",
    "mov     rbx, rax",
    "mov     dword [rsp+0x20], r13d",
    "call    sub_140032364",
    "cmp     rbx, r13",
    "je      0x140058fb2",
    "mov     r8, rbx",
    "mov     dword [rsp+0xe0], ebx",
    "cmp     bx, word [r15+0x5e]",
    "jae     0x140058f04",
    "mov     rcx, qword [rsi]",
    "xor     r8d, r8d",
    "mov     edx, 0xab",
    "call    sub_14004397c",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x140058dfb",
    "test    r15, r15",
    "je      0x140058cff",
    "mov     r14, qword [rsp+0x60]",
    "mov     rdi, qword [rsp+0xe8]",
    "mov     qword [rsp+0x48], rbp",
    "xor     ebx, ebx",
    "mov     rax, qword [r12]",
    "movsx   r8, cx",
    "mov     edx, 0x3b",
    "mov     rcx, qword [rax+0x8]",
    "shl     r8, 0x5",
    "mov     r8, qword [r8+rcx]",
    "mov     rcx, r14",
    "call    sub_14004397c",
    "mov     r8, qword [rsp+0x48]",
    "mov     edx, 0x35",
    "mov     r9, rax",
    "mov     rcx, rsi",
    "call    sub_140043a14",
    "mov     rdx, rbp",
    "mov     rcx, rsi",
    "mov     r8, rax",
    "call    sub_140043af4",
    "add     qword [rsp+0x40], 0x4",
    "add     rdi, 0x2",
    "mov     rbp, rax",
    "mov     eax, dword [rsp+0xe0]",
    "inc     eax",
    "cmp     eax, dword [r12+0x28]",
    "mov     dword [rsp+0xe0], eax",
    "mov     eax, 0xffffffff",
    "jl      0x140058cf0",
    "mov     eax, dword [rsp+0xf0]",
    "cmp     eax, r13d",
    "je      0x140058fe4",
    "mov     rcx, qword [rsp+0x50]",
    "mov     rdx, rbp",
    "call    sub_140043de4",
    "mov     rcx, rbx",
    "call    sub_1400799ec",
    "xor     r9d, r9d",
    "lea     edx, [r9+0x13]",
    "mov     r14, qword [rsp+0x50]",
    "mov     ebp, dword [rsp+0x110]",
    "mov     rcx, rbx",
    "mov     qword [rsp+0x58], rbx",
    "mov     r12, rbx",
    "mov     rcx, qword [rsp+0x50]",
    "mov     edi, dword [rdi+0x4c]",
    "xor     r8d, r8d",
    "mov     edx, 0xa2",
    "call    sub_14004397c",
    "test    rax, rax",
    "je      0x140058e23",
    "mov     eax, dword [rsp+0x110]",
    "mov     byte [rbx+0x1], 0x44",
    "mov     dword [rbx+0x28], eax",
    "mov     rbx, qword [rsp+0xf8]",
    "add     rsp, 0xa0",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "retn    ",
    "mov     edx, eax",
    "mov     rcx, r14",
    "call    sub_140032d34",
    "mov     ecx, dword [r14+0x90]",
    "mov     dword [rax+0x8], ecx",
    "mov     rax, qword [r15+0x8]",
    "mov     r8d, ebp",
    "mov     rdx, r13",
    "movsx   rbx, word [rcx+rax]",
    "mov     rcx, rsi",
    "movzx   r9d, bx",
    "call    sub_140058b94",
    "mov     r8, qword [r13+0x8]",
    "mov     rcx, rbx",
    "shl     rcx, 0x5",
    "mov     edx, 0x3b",
    "mov     rdi, rax",
    "mov     r8, qword [rcx+r8]",
    "mov     rcx, r14",
    "call    sub_14004397c",
    "mov     r8, rdi",
    "mov     edx, 0x2d",
    "mov     r9, rax",
    "mov     rcx, rsi",
    "call    sub_140043a14",
    "mov     rdx, r12",
    "mov     rcx, rsi",
    "mov     r8, rax",
    "call    sub_140043af4",
    "mov     edx, dword [rsp+0xe0]",
    "mov     rcx, qword [rsp+0x58]",
    "inc     edx",
    "add     rcx, 0x2",
    "mov     r12, rax",
    "movzx   eax, word [r15+0x5e]",
    "mov     dword [rsp+0xe0], edx",
    "mov     qword [rsp+0x58], rcx",
    "cmp     edx, eax",
    "jl      0x140058e5f",
    "mov     rbp, qword [rsp+0x48]",
    "mov     r14, qword [rsp+0x60]",
    "mov     qword [rsp+0x40], r12",
    "mov     r8, qword [rsp+0x40]",
    "mov     r12, qword [rsp+0x100]",
    "mov     r9, rax",
    "mov     r8, rbx",
    "mov     edx, 0x34",
    "jmp     0x140058f0b",
    "or      ecx, 0xffffffff",
    "mov     qword [rax+0x40], r13",
    "mov     dword [rax+0x28], edi",
    "mov     word [rax+0x2c], cx",
    "mov     rcx, rsi",
    "call    sub_140043a14",
    "mov     rdx, rbp",
    "mov     rcx, rsi",
    "mov     r8, rax",
    "call    sub_140043af4",
    "mov     rdi, qword [rsp+0xe8]",
    "mov     rbp, rax"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}