{
  "address": "0x1400662f4",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "write file on Windows/035d57bed47747649158312e9532f27d"
  ],
  "disassembly": [
    "mov     qword [rsp+0x18], rbx",
    "mov     qword [rsp+0x10], rdx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x40",
    "mov     rbp, qword [rcx+0x10]",
    "mov     r15d, dword [rsp+0xa8]",
    "mov     rsi, rcx",
    "mov     eax, dword [rbp+0x90]",
    "dec     dword [rcx+0x44]",
    "mov     ecx, dword [rcx+0x44]",
    "mov     dword [rsp+0x80], ecx",
    "mov     r13, r9",
    "mov     r12, r8",
    "mov     dword [rsp+0x30], eax",
    "mov     r14d, 0x1",
    "test    r15d, r15d",
    "je      0x140066431",
    "mov     rax, qword [rsi]",
    "xor     r15d, r15d",
    "cmp     byte [rax+0x61], r15b",
    "je      0x140066444",
    "and     dword [rsp+0x20], 0x0",
    "lea     edx, [r14+0x13]",
    "xor     r9d, r9d",
    "mov     r8d, r15d",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "mov     r14, qword [rsp+0xb0]",
    "mov     dword [rsp+0xa8], eax",
    "test    r14, r14",
    "je      0x140066376",
    "mov     r8d, dword [rdx+0x14]",
    "cmp     r8d, r15d",
    "jle     0x140066462",
    "xor     eax, eax",
    "jmp     0x1400666fd",
    "mov     eax, dword [r12+0xc]",
    "mov     r8d, dword [r12+0x8]",
    "lea     r9d, [r15+0x1]",
    "mov     edx, 0x57",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], eax",
    "call    sub_140032364",
    "mov     r9d, 0xfffffff7",
    "mov     r8, r14",
    "mov     edx, eax",
    "mov     rcx, rbp",
    "mov     ebx, eax",
    "call    sub_140032c40",
    "mov     r9d, dword [rsp+0x80]",
    "lea     r8d, [rbx+0x2]",
    "mov     edx, 0x10",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], r8d",
    "call    sub_140032364",
    "mov     edx, dword [rsp+0xa8]",
    "mov     rcx, rbp",
    "call    sub_140032d34",
    "mov     r8d, dword [r12+0x8]",
    "mov     r14d, 0x1",
    "mov     r10, rax",
    "mov     eax, dword [rbp+0x90]",
    "lea     r9d, [r15+0x1]",
    "mov     dword [r10+0x8], eax",
    "mov     eax, dword [r12+0xc]",
    "lea     edx, [r14+0x4d]",
    "sub     eax, r14d",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], eax",
    "call    sub_140032364",
    "and     dword [rsp+0x20], 0x0",
    "lea     edx, [r14+0x45]",
    "mov     r9d, r15d",
    "mov     r8d, r14d",
    "mov     rcx, rbp",
    "call    sub_140032364",
    "mov     rdx, qword [rsp+0x88]",
    "mov     ecx, dword [rsp+0x80]",
    "inc     dword [r14]",
    "movzx   ecx, byte [r13]",
    "sub     ecx, 0xa",
    "je      0x14006667d",
    "mov     r9d, ecx",
    "mov     edx, 0x2f",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], r14d",
    "call    sub_140032364",
    "mov     rbx, qword [rsp+0x90]",
    "add     rsp, 0x40",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "retn    ",
    "cmp     dword [rsi+0x30], r15d",
    "jne     0x1400666a3",
    "sub     ecx, r14d",
    "je      0x1400665e0",
    "mov     rax, qword [rsp+0x88]",
    "mov     r8d, dword [rax+0x10]",
    "cmp     r8d, r15d",
    "je      0x1400666ce",
    "mov     eax, dword [r12+0xc]",
    "mov     r9d, dword [r13+0x4]",
    "mov     rcx, qword [rsi+0x10]",
    "mov     dword [rsp+0x20], eax",
    "mov     edx, 0x4d",
    "mov     al, byte [rsi+0x1f]",
    "cmp     al, r15b",
    "jne     0x1400665f2",
    "sub     ecx, r14d",
    "je      0x1400664f2",
    "mov     edx, dword [rsp+0x80]",
    "mov     rcx, rbp",
    "call    sub_14003278c",
    "mov     r8d, dword [rsp+0xa0]",
    "xor     r9d, r9d",
    "lea     edx, [r9+0x42]",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], r15d",
    "call    sub_140032364",
    "mov     eax, dword [rsp+0x30]",
    "mov     r9d, dword [rsp+0xb8]",
    "mov     edx, 0x31",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], r15d",
    "call    sub_140032364",
    "sub     al, r14b",
    "movzx   eax, al",
    "mov     byte [rsi+0x1f], al",
    "mov     r14d, dword [rsi+rax*4+0xbc]",
    "add     dword [rsi+0x38], r14d",
    "mov     r14d, dword [rsi+0x38]",
    "jmp     0x140066603",
    "mov     al, byte [rsi+0x1f]",
    "cmp     al, r15b",
    "jne     0x140066503",
    "cmp     ecx, r14d",
    "je      0x14006649a",
    "mov     edx, 0x8",
    "cmp     byte [rsi+0x1f], dl",
    "jae     0x1400666a3",
    "mov     edi, dword [r12+0xc]",
    "mov     r8d, dword [r12+0x8]",
    "mov     rbx, qword [r13+0x10]",
    "mov     r9d, edi",
    "mov     edx, 0x5c",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], r14d",
    "call    sub_140032364",
    "mov     r9d, edi",
    "mov     r8, rbx",
    "mov     rcx, rbp",
    "mov     edx, eax",
    "call    sub_140032c40",
    "mov     r11d, dword [r12+0xc]",
    "mov     eax, dword [r12+0x8]",
    "mov     r8d, dword [r13+0x4]",
    "mov     dword [rsp+0x28], r11d",
    "mov     r9d, r14d",
    "mov     edx, 0x84",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], eax",
    "call    sub_140032678",
    "cmp     r14d, r15d",
    "je      0x1400666a3",
    "sub     al, r14b",
    "movzx   eax, al",
    "mov     byte [rsi+0x1f], al",
    "mov     edi, dword [rsi+rax*4+0xbc]",
    "add     dword [rsi+0x38], r14d",
    "mov     edi, dword [rsi+0x38]",
    "jmp     0x140066513",
    "cmp     dword [r13+0x8], r15d",
    "jne     0x1400664ba",
    "mov     r9d, dword [r12+0xc]",
    "mov     dword [rsp+0x20], r15d",
    "mov     edx, 0x51",
    "mov     rcx, rbp",
    "jmp     0x140066699",
    "movzx   eax, byte [rsi+0x1f]",
    "mov     dword [rsi+rax*4+0xbc], r14d",
    "inc     byte [rsi+0x1f]",
    "jmp     0x1400666a3",
    "sub     al, r14b",
    "movzx   eax, al",
    "mov     byte [rsi+0x1f], al",
    "mov     ebx, dword [rsi+rax*4+0xbc]",
    "add     dword [rsi+0x38], r14d",
    "mov     ebx, dword [rsi+0x38]",
    "jmp     0x140066534",
    "mov     al, byte [rsi+0x1f]",
    "cmp     al, r15b",
    "jne     0x140066524",
    "mov     eax, dword [r12+0xc]",
    "mov     r9d, dword [r13+0x8]",
    "mov     r8d, dword [r12+0x8]",
    "mov     rcx, qword [rsi+0x10]",
    "mov     edx, 0x4d",
    "mov     dword [rsp+0x20], eax",
    "call    sub_140032364",
    "mov     r8d, dword [r13+0x4]",
    "xor     r9d, r9d",
    "mov     dword [rsp+0x20], r15d",
    "mov     rcx, rbp",
    "lea     edx, [r9+0xe]",
    "jmp     0x14006669e",
    "mov     edx, dword [r12+0xc]",
    "mov     rcx, rsi",
    "call    sub_140049624",
    "mov     dword [r13+0x8], eax",
    "mov     eax, dword [r12+0xc]",
    "mov     dword [r13+0xc], eax",
    "mov     r8d, dword [r12+0x8]",
    "cmp     ebx, r15d",
    "je      0x1400665ba",
    "mov     rax, qword [rbp+0x88]",
    "lea     rcx, [r11+r11*2]",
    "mov     word [rax+rcx*8-0x16], dx",
    "mov     r9d, dword [r12+0xc]",
    "mov     r8d, dword [r12+0x8]",
    "mov     edx, 0x5c",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], edi",
    "call    sub_140032364",
    "mov     r8d, dword [r13+0x4]",
    "mov     r9d, ebx",
    "mov     edx, 0x79",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], r15d",
    "call    sub_140032364",
    "mov     r8d, dword [r13+0x4]",
    "mov     r9d, edi",
    "mov     edx, 0x7a",
    "mov     rcx, rbp",
    "mov     dword [rsp+0x20], ebx",
    "call    sub_140032364",
    "movsxd  r11, dword [rbp+0x90]",
    "mov     edx, 0x8",
    "cmp     r11d, r15d",
    "jle     0x1400665a1",
    "call    sub_140032364",
    "cmp     edi, r15d",
    "je      0x1400666a3",
    "cmp     byte [rsi+0x1f], dl",
    "jae     0x1400665ba",
    "cmp     byte [rsi+0x1f], dl",
    "jae     0x1400666a3",
    "movzx   eax, byte [rsi+0x1f]",
    "mov     dword [rsi+rax*4+0xbc], ebx",
    "add     byte [rsi+0x1f], r14b",
    "movzx   eax, byte [rsi+0x1f]",
    "mov     dword [rsi+rax*4+0xbc], edi",
    "add     byte [rsi+0x1f], r14b",
    "jmp     0x1400666a3"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}