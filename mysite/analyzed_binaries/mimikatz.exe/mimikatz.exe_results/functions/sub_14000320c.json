{
  "address": "0x14000320c",
  "rules": [
    "encrypt data using HC-128/86aaff13b46c4951b9ca4e0a9171c391",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/0d7bc900a8ea48098fc469578ae14b88",
    "hash data using aphash/c01783ca846f48c3a4751b50c0c12749",
    "encrypt data using speck/4b1f3c27d17344b39cf9dede3bcf8b4b",
    "encrypt data using AES MixColumns step/954c5d7507db4ab48ac65ac05419ca28",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "encrypt data using TEA/2e46a442f8994747bcdba3ad7ba7dd19/5f4c97f31ce341008ea23885a97305d8",
    "decrypt data using TEA/171baf30f6564bc494c3539bab277577/5f4855375d6b45e9bd6b2a189e856211",
    "encrypt data using XXTEA/031815fb14e94f2fb59fa9eb4980d745/dc118f3b61184df4a511ed4919cf656f"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "mov     qword [rsp+0x18], rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "sub     rsp, 0x20",
    "mov     edx, 0x48",
    "mov     r13, rcx",
    "lea     ecx, [rdx-0x8]",
    "call    qword [rel LocalAlloc]",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x140003370",
    "mov     rbp, qword [rsp+0x60]",
    "mov     rax, rbx",
    "mov     rbx, qword [rsp+0x50]",
    "add     rsp, 0x20",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "retn    ",
    "mov     rcx, rax",
    "mov     rdx, r13",
    "mov     r8d, 0x28",
    "call    memcpy",
    "mov     edx, dword [rbx+0x24]",
    "lea     r11, [r13+0x28]",
    "lea     rcx, [rbx+0x28]",
    "mov     qword [rcx], r11",
    "mov     eax, dword [rdx+r11]",
    "mov     dword [rbx+0x30], eax",
    "lea     rax, [rdx+r11+0x4]",
    "mov     qword [rbx+0x34], rax",
    "call    sub_1400131d0",
    "mov     edx, dword [rbx+0x30]",
    "lea     rcx, [rbx+0x34]",
    "call    sub_1400131d0",
    "mov     r11d, dword [rbx+0x30]",
    "mov     rax, 0xaaaaaaaaaaaaaaab",
    "mov     ecx, 0x40",
    "mul     r11",
    "shr     rdx, 0x3",
    "cmp     dword [rbx+0x10], 0x4",
    "mov     dword [rbx+0x3c], edx",
    "adc     edx, 0x0",
    "shl     rdx, 0x3",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rbx+0x40], rax",
    "test    rax, rax",
    "je      0x140003370",
    "mov     rdi, qword [rsp+0x58]",
    "xor     ebp, ebp",
    "cmp     dword [rbx+0x3c], ebp",
    "jbe     0x140003330",
    "test    rdi, rdi",
    "je      0x140003370",
    "xor     esi, esi",
    "xor     r12d, r12d",
    "cmp     dword [rbx+0x10], 0x4",
    "jae     0x140003370",
    "inc     ebp",
    "add     r12, 0xc",
    "add     rsi, 0x8",
    "cmp     ebp, dword [rbx+0x3c]",
    "jb      0x1400032cb",
    "mov     rax, qword [rbx+0x34]",
    "mov     edi, dword [r12+rax+0x4]",
    "mov     rax, qword [rsi+rcx]",
    "add     rdi, r13",
    "mov     rcx, rdi",
    "movdqu  xmm0, xmmword [rdi]",
    "movdqu  xmmword [rax], xmm0",
    "cmp     dword [rdi], 0x64",
    "jb      0x140003310",
    "mov     edx, 0x28",
    "lea     ecx, [rdx+0x18]",
    "call    qword [rel LocalAlloc]",
    "mov     rcx, qword [rbx+0x40]",
    "mov     qword [rcx+rbp*8], rax",
    "mov     rdx, qword [rbx+0x40]",
    "cmp     qword [rdx+rbp*8], 0x0",
    "je      0x140003370",
    "mov     edx, 0x28",
    "lea     ecx, [rdx+0x18]",
    "call    qword [rel LocalAlloc]",
    "mov     rcx, qword [rbx+0x40]",
    "mov     qword [rsi+rcx], rax",
    "mov     rcx, qword [rbx+0x40]",
    "cmp     qword [rsi+rcx], 0x0",
    "je      0x140003321",
    "mov     rdx, qword [rbx+0x40]",
    "add     rcx, 0x10",
    "mov     rdx, qword [rsi+rdx]",
    "call    sub_14000338c",
    "lea     rcx, [rdi+0x4]",
    "mov     eax, dword [rdi+0x10]",
    "mov     rdx, qword [rdx+rbp*8]",
    "lea     rcx, [rax+rdi+0x16]",
    "call    sub_14000338c",
    "inc     dword [rbx+0x3c]"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}