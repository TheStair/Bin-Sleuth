{
  "address": "0x14002c288",
  "rules": [
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "inject DLL reflectively/b607069806754d328a539a309fa49b81",
    "hash data using murmur3/aeb1a4346751469b809f4261bcfbbb07/dbb00f9448c04dc1b720ac16935c1891",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "encrypt data using chaskey/7025f739e4b341df894563ee3ec22dfd",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "decompress data using aPLib/a5c76dae137d4aaa9aade786acafaa41",
    "contain loop"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0xc0",
    "mov     r12, qword [rdx+0x48]",
    "xor     edi, edi",
    "mov     r15, r8",
    "mov     rsi, rdx",
    "mov     r13, rcx",
    "cmp     word [rdx+0x18], di",
    "jne     0x14002c2c3",
    "lea     r8, [rsp+0x48]",
    "lea     rdx, [rsp+0x118]",
    "xor     r9d, r9d",
    "mov     rcx, r12",
    "mov     byte [rsp+0x20], dil",
    "call    sub_14002a71c",
    "mov     ebx, eax",
    "cmp     eax, edi",
    "jne     0x14002c4de",
    "mov     ecx, 0x113e9",
    "call    sub_140084e38",
    "jmp     0x14002c4e0",
    "mov     eax, ebx",
    "mov     rdx, qword [rsi+0x28]",
    "mov     rcx, rsi",
    "lea     r14, [r15+0x4]",
    "mov     qword [rsp+0x40], rdx",
    "call    qword [rsi+0x78]",
    "mov     rdi, qword [rsp+0x118]",
    "mov     rcx, rdi",
    "mov     edx, 0xd",
    "mov     word [rsp+0x108], ax",
    "call    sub_1400276c8",
    "lea     rax, [rsp+0x40]",
    "xor     edx, edx",
    "mov     qword [rsp+0x60], rax",
    "lea     rax, [rsp+0x108]",
    "lea     rcx, [rsp+0x50]",
    "mov     qword [rsp+0x68], rax",
    "mov     rax, qword [rsi+0x58]",
    "lea     r8d, [rdx+0x1]",
    "mov     r9, rdi",
    "mov     dword [rsp+0x50], 0x1",
    "mov     qword [rsp+0x58], rsi",
    "mov     qword [rsp+0x70], rax",
    "mov     dword [rsp+0xa0], 0x2",
    "call    sub_14002ba7c",
    "xor     r9d, r9d",
    "mov     ebx, eax",
    "mov     dword [rsp+0x118], eax",
    "cmp     eax, r9d",
    "je      0x14002c384",
    "mov     rbx, qword [rsp+0x100]",
    "add     rsp, 0xc0",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "retn    ",
    "movzx   eax, word [rdi+0x12]",
    "mov     edx, dword [r12+0x34]",
    "mov     ebp, dword [rsp+0x48]",
    "sub     edx, eax",
    "movzx   eax, word [rsp+0x108]",
    "sub     edx, eax",
    "sub     edx, 0x2",
    "mov     dword [rdi+0x14], edx",
    "cmp     byte [r12+0x21], r9b",
    "je      0x14002c409",
    "cmp     rdi, r9",
    "je      0x14002c4de",
    "mov     rcx, qword [rsi+0x60]",
    "movzx   edx, word [rsi+0x18]",
    "movzx   eax, byte [rcx+rdx*2-0x2]",
    "shl     eax, 0x8",
    "movsxd  r8, eax",
    "movzx   eax, byte [rcx+rdx*2-0x1]",
    "or      r8, rax",
    "movzx   eax, word [rsi+0x1a]",
    "and     r8, rax",
    "add     r8, qword [rsi+0x50]",
    "mov     qword [rsp+0x40], r8",
    "lea     rcx, [r8+0x9]",
    "mov     r9d, dword [r13+0x4]",
    "lea     rax, [rsp+0x118]",
    "mov     r8b, 0x5",
    "mov     edx, ebp",
    "mov     rcx, r12",
    "mov     qword [rsp+0x20], rax",
    "call    sub_14002650c",
    "movzx   r11d, word [rdi+0x10]",
    "mov     ebx, dword [rsp+0x118]",
    "xor     r9d, r9d",
    "cmp     word [rsp+0x108], r11w",
    "jbe     0x14002c409",
    "jmp     0x14002c4d5",
    "lea     rcx, [r8+0x9]",
    "cmp     r8, rcx",
    "jb      0x14002c438",
    "cmp     ebx, r9d",
    "jne     0x14002c409",
    "mov     rcx, qword [rdi+0x70]",
    "call    sub_14002242c",
    "cmp     ebx, r9d",
    "jne     0x14002c4ab",
    "cmp     r8, rcx",
    "jb      0x14002c453",
    "mov     al, byte [r8]",
    "inc     r8",
    "and     al, 0x80",
    "mov     qword [rsp+0x40], r8",
    "cmp     al, r9b",
    "je      0x14002c44f",
    "mov     r8, qword [rsp+0x40]",
    "lea     r9, [rsp+0x118]",
    "mov     rdx, rdi",
    "mov     rcx, rdi",
    "call    sub_140026a3c",
    "mov     ebx, dword [rsp+0x118]",
    "xor     r9d, r9d",
    "movzx   eax, byte [r13+0x9]",
    "add     eax, 0x8",
    "movsxd  rcx, eax",
    "mov     eax, ebp",
    "add     rcx, qword [r13+0x50]",
    "shr     eax, 0x18",
    "mov     byte [rcx], al",
    "mov     eax, ebp",
    "mov     byte [rcx+0x3], bpl",
    "shr     eax, 0x10",
    "mov     byte [rcx+0x1], al",
    "mov     eax, ebp",
    "shr     eax, 0x8",
    "mov     byte [rcx+0x2], al",
    "movzx   edx, word [r13+0x18]",
    "lea     rax, [rsp+0x118]",
    "sub     r14d, r15d",
    "mov     qword [rsp+0x30], rax",
    "mov     eax, dword [rsi+0x4]",
    "mov     r8, r15",
    "mov     dword [rsp+0x28], eax",
    "mov     qword [rsp+0x20], r9",
    "mov     r9d, r14d",
    "mov     rcx, r13",
    "call    sub_14002b88c",
    "mov     ebx, dword [rsp+0x118]",
    "mov     al, byte [r8]",
    "inc     r8",
    "mov     byte [r14], al",
    "and     al, 0x80",
    "inc     r14",
    "mov     qword [rsp+0x40], r8",
    "cmp     al, r9b",
    "je      0x14002c470"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}