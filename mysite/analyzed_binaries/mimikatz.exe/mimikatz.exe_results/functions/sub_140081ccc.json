{
  "address": "0x140081ccc",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     qword [rsp+0x18 {__saved_rbx}], rbx",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x9c0",
    "mov     rbx, rcx",
    "xor     ecx, ecx  {0x0}",
    "or      r12d, 0xffffffff  {0xffffffff}",
    "mov     rdi, qword [rbx]",
    "mov     r15, r8",
    "mov     rbp, rdx",
    "mov     r14d, dword [rdi+0x80]",
    "mov     dword [rsp+0xa08 {arg_10}], ecx  {0x0}",
    "cmp     dword [rdi+0xc8], ecx",
    "jne     0x140081d11",
    "lea     rax, [rsp+0x50 {var_9a8}]",
    "mov     dword [rbx+0x18], ecx  {0x0}",
    "mov     qword [rbx+0x128], rdx",
    "mov     qword [rsp+0x40 {i_1}], rax {var_9a8}",
    "lea     rax, [rsp+0x998 {var_60}]",
    "mov     qword [rsp+0x48 {var_9b0}], rbx",
    "mov     word [rsp+0x50 {var_9a8}], cx  {0x0}",
    "mov     word [rsp+0x52 {var_9a6}], cx  {0x0}",
    "mov     qword [rsp+0x9b0 {var_48}], rax {var_60}",
    "mov     rax, qword [rdi+0x128]",
    "mov     qword [rbx+0xa0], rax",
    "mov     qword [rdi+0x128], rbx",
    "mov     dword [rdi+0x160], ecx  {0x0}",
    "mov     dword [rbx+0x18], 0x12",
    "mov     esi, dword [rsp+0xa00 {arg_8}]",
    "cmp     esi, 0x9f",
    "jl      0x140081e94",
    "cmp     byte [rdi+0x61], r13b",
    "je      0x140081f4b",
    "mov     rax, rcx",
    "sub     rcx, 0x18",
    "mov     qword [rsp+0x40 {i_1}], rcx",
    "movzx   edx, word [rax+0x2]",
    "lea     r8, [rax+0x8]",
    "lea     rcx, [rsp+0x40 {i_1}]",
    "call    sub_14007dfdc",
    "mov     rcx, qword [rsp+0x40 {i_1}]",
    "lea     r11, [rsp+0x50 {var_9a8}]",
    "cmp     rcx, r11 {var_9a8}",
    "ja      0x140081f11",
    "mov     qword [rbx+0xf0], rbp",
    "mov     dword [rbx+0xf8], r13d",
    "movdqu  xmm0, xmmword [rbx+0xf0]",
    "lea     r8, [rsp+0x30 {var_9c8}]",
    "lea     rcx, [rsp+0x40 {i_1}]",
    "mov     edx, esi",
    "movdqu  xmmword [rsp+0x30 {var_9c8}], xmm0",
    "call    sub_14008127c",
    "movsxd  rax, r13d",
    "xor     r13d, r13d  {0x0}",
    "add     rbp, rax",
    "mov     r12d, esi",
    "cmp     dword [rbx+0x18], r13d",
    "jne     0x140081f02",
    "mov     eax, dword [rdi+0x160]",
    "test    eax, eax",
    "jne     0x140081eef",
    "mov     ecx, dword [rbx+0x18]",
    "cmp     ecx, r13d",
    "je      0x140081f79",
    "mov     dword [rbx+0x18], 0x7",
    "mov     rcx, qword [rsp+0x40 {i_1}]",
    "lea     rax, [rsp+0x50 {var_9a8}]",
    "cmp     rcx, rax {var_9a8}",
    "jbe     0x140081f3e",
    "jmp     0x140081d59",
    "mov     dword [rbx+0x18], 0x9",
    "jmp     0x140081eff",
    "mov     eax, dword [rsp+0xa00 {arg_8}]",
    "cmp     eax, 0xb1",
    "jne     0x140081dac",
    "mov     r8, qword [rbx+0x8]",
    "cmp     r8, r13",
    "je      0x140081fa6",
    "cmp     ecx, 0x65",
    "je      0x140081f79",
    "lea     rdx, [rsp+0xa00 {arg_8}]",
    "mov     rcx, rbp",
    "call    sub_14008164c",
    "sub     r14d, eax",
    "mov     r13d, eax",
    "js      0x140081ef8",
    "xor     r13d, r13d  {0x0}",
    "cmp     byte [rbp], 0x0",
    "jne     0x140081dde",
    "movsxd  rax, r13d",
    "add     rbp, rax",
    "jmp     0x140081d59",
    "mov     esi, dword [rsp+0xa08 {arg_10}]",
    "mov     r9, qword [rbx+0x128]",
    "mov     ecx, dword [rbx+0x18]",
    "lea     rdx, [rel data_1400f79f0]  {\"%s in \"%s\"\"}",
    "mov     qword [r15], r8",
    "call    sub_1400187fc",
    "mov     qword [rbx+0x8], r13  {0x0}",
    "mov     esi, 0x1",
    "jmp     0x140081fad",
    "cmp     qword [rbx+0x8], r13",
    "jne     0x140081f79",
    "cmp     eax, 0x9f",
    "jne     0x140081e29",
    "xor     r13d, r13d  {0x0}",
    "cmp     r12d, 0x1",
    "jne     0x140081dcb",
    "mov     rcx, qword [rbx+0x160]",
    "call    sub_140016950",
    "or      ebp, 0xffffffff  {0xffffffff}",
    "cmp     byte [rbx+0x104], r13b",
    "jne     0x14008200c",
    "cmp     dword [rbx+0x30], r13d",
    "jle     0x140081fd2",
    "mov     rcx, qword [rbx+0x10]",
    "mov     qword [rbx+0x128], rbp",
    "cmp     rcx, r13",
    "je      0x140081fd2",
    "call    sub_14008335c",
    "lea     rdx, [rel data_1400f38e8]",
    "mov     rcx, rdi",
    "mov     r8, rax",
    "call    _printf_p_l",
    "mov     qword [rbx+0x8], rax",
    "cmp     eax, 0xa0",
    "jne     0x140081e5e",
    "lea     rax, [rbp+0x6]",
    "lea     rcx, [rsp+0xa18 {arg_20}]",
    "mov     qword [rsp+0xa18 {arg_20}], rax",
    "call    sub_1400815d4",
    "mov     r12d, 0x3b",
    "cmp     eax, r12d",
    "je      0x140081e0e",
    "cmp     r12d, r13d",
    "je      0x140081f02",
    "mov     esi, r13d  {0x0}",
    "mov     dword [rsp+0xa00 {arg_8}], r13d  {0x0}",
    "jmp     0x140081e94",
    "cmp     byte [rbx+0x104], 0x2",
    "jae     0x140082024",
    "mov     rdx, qword [rbx+0x130]",
    "cmp     rdx, r13",
    "je      0x14008200c",
    "cmp     byte [rbx+0x1e], r13b",
    "jne     0x140081fd2",
    "cmp     eax, 0xa1",
    "jne     0x140081ed8",
    "lea     rax, [rbp+0x4]",
    "mov     qword [rsp+0x28 {var_9d0}], rax",
    "cmp     r12d, 0x17",
    "jne     0x140081e88",
    "lea     rcx, [rsp+0xa18 {arg_20}]",
    "call    sub_1400815d4",
    "mov     esi, 0x9f",
    "cmp     eax, 0x18",
    "cmovne  esi, r12d  {0x3b}",
    "jmp     0x140081e8d",
    "mov     esi, r12d  {0x3b}",
    "jmp     0x140081e8d",
    "mov     esi, 0x1",
    "jmp     0x140081e8d",
    "mov     rdx, qword [rbx+0x180]",
    "cmp     rdx, r13",
    "je      0x140082038",
    "mov     rdx, qword [rbx+0x140]",
    "mov     rcx, rdi",
    "call    sub_14006bfac",
    "cmp     qword [rdi+0x298], r13",
    "jne     0x140082004",
    "call    sub_1400348b0",
    "mov     qword [rbx+0x10], r13  {0x0}",
    "lea     rdx, [rel data_1400f79d0]  {\"unrecognized token: \"%.*s\"\"}",
    "mov     r9, rbp",
    "mov     r8d, r13d",
    "mov     rcx, rbx",
    "call    sub_1400191b8",
    "jmp     0x140081eff",
    "lea     rax, [rbp+0x6]",
    "mov     qword [rsp+0x20 {var_9d8}], rax",
    "cmp     r12d, 0x17",
    "jne     0x140081e88",
    "mov     esi, 0x3b",
    "lea     rcx, [rsp+0x28 {var_9d0}]",
    "call    sub_1400815d4",
    "cmp     eax, 0x16",
    "je      0x140081e57",
    "mov     dword [rsp+0xa00 {arg_8}], esi",
    "mov     rdx, qword [rbx+0x118]",
    "cmp     rdx, r13",
    "je      0x14008205f",
    "mov     rcx, rdi",
    "call    sub_140054184",
    "mov     rcx, rdi",
    "call    sub_14004e45c",
    "add     dword [rdx+0x3c], ebp",
    "jne     0x14008200c",
    "lea     rcx, [rsp+0x20 {var_9d8}]",
    "call    sub_1400815d4",
    "mov     esi, 0xa1",
    "cmp     eax, 0x16",
    "je      0x140081e8d",
    "mov     esi, 0xa0",
    "jmp     0x140081e8d",
    "lea     ecx, [r12+0x24]",
    "cmp     eax, ecx",
    "jne     0x140081e88",
    "cmp     qword [rbx+0x88], r13",
    "jne     0x140082046",
    "jmp     0x140082057",
    "mov     rdx, qword [rbx+0x88]",
    "mov     rax, qword [rdx]",
    "mov     qword [rbx+0x88], rax",
    "jmp     0x140082092",
    "mov     rcx, rdi",
    "call    sub_1400169a8",
    "cmp     qword [rbx+0x168], r13",
    "jne     0x14008206a",
    "mov     rdx, qword [rbx+0x168]",
    "mov     rax, qword [rdx+0x78]",
    "mov     qword [rbx+0x168], rax",
    "cmp     qword [rdi+0x298], r13",
    "jne     0x14008208a",
    "mov     rcx, qword [rbx+0xa0]",
    "mov     eax, esi",
    "mov     qword [rdi+0x128], rcx",
    "mov     qword [rbx+0xa0], r13  {0x0}",
    "mov     rbx, qword [rsp+0xa10 {__saved_rbx}]",
    "add     rsp, 0x9c0",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     rcx, rdi",
    "call    sub_14004e45c",
    "add     dword [rdx+0x3c], ebp",
    "jne     0x140082092"
  ],
  "high_level_IL": [
    "int32_t r12 = -1",
    "void* rdi = *arg1",
    "char* rbp = arg2",
    "int32_t r14 = *(rdi + 0x80)",
    "arg_10 = 0",
    "if (*(rdi + 0xc8) == 0)",
    "*(rdi + 0x160) = 0",
    "arg1[3].d = 0",
    "arg1[0x25] = arg2",
    "int16_t var_9a8",
    "int16_t* i_1 = &var_9a8",
    "int64_t* var_9b0 = arg1",
    "var_9a8 = 0",
    "int16_t var_9a6 = 0",
    "void var_60",
    "void* var_48 = &var_60",
    "arg1[0x14] = *(rdi + 0x128)",
    "*(rdi + 0x128) = arg1",
    "while (true)",
    "int32_t rax_1 = sub_14008164c(rbp, &arg_8)",
    "int32_t temp0_1 = r14",
    "r14 -= rax_1",
    "int32_t r13_1 = rax_1",
    "if (temp0_1 - rax_1 s< 0)",
    "arg1[3].d = 0x12",
    "break",
    "int32_t rsi_1 = arg_8",
    "if (rsi_1 s>= 0x9f)",
    "if (*(rdi + 0x160) != 0)",
    "arg1[3].d = 9",
    "break",
    "int32_t rax_3 = arg_8",
    "if (rax_3 == 0xb1)",
    "rbp = &rbp[sx.q(r13_1)]",
    "continue",
    "if (*rbp != 0)",
    "if (rax_3 == 0x9f)",
    "arg_20 = &rbp[6]",
    "if (sub_1400815d4(&arg_20) == 0x3b)",
    "rsi_1 = 0x9f",
    "if (sub_1400815d4(&arg_20) != 0x18)",
    "rsi_1 = 0x3b",
    "rsi_1 = 0x3b",
    "if (rax_3 != 0xa0)",
    "if (rax_3 != 0xa1)",
    "arg4 = sub_1400191b8(arg1, \"unrecognized token: \"%.*s\"\", zx.q(r13_1), arg4)",
    "break",
    "void* var_9d8 = &rbp[6]",
    "if (r12 != 0x17)",
    "rsi_1 = 0x3b",
    "rsi_1 = 0xa1",
    "if (sub_1400815d4(&var_9d8) != 0x16)",
    "rsi_1 = 0x3b",
    "void* var_9d0 = &rbp[4]",
    "if (r12 != 0x17)",
    "rsi_1 = 0x3b",
    "int32_t rax_9 = sub_1400815d4(&var_9d0)",
    "if (rax_9 == 0x16 || rax_9 == r12 + 0x24)",
    "rsi_1 = 0xa0",
    "rsi_1 = 0x3b",
    "arg_8 = rsi_1",
    "r13_1 = 0",
    "if (r12 != 1)",
    "if (r12 == 0)",
    "break",
    "rsi_1 = 1",
    "arg_8 = rsi_1",
    "rsi_1 = 0",
    "arg_8 = 0",
    "arg1[0x1e] = rbp",
    "arg1[0x1f].d = r13_1",
    "arg4.o = *(arg1 + 0xf0)",
    "int128_t var_9c8 = arg4.o",
    "arg4, arg5 = sub_14008127c(&i_1, rsi_1, &var_9c8, arg5)",
    "rbp = &rbp[sx.q(r13_1)]",
    "r12 = rsi_1",
    "if (arg1[3].d != 0)",
    "break",
    "int16_t* i = i_1",
    "while (i u> &var_9a8)",
    "i_1 = i - 0x18",
    "arg4 = sub_14007dfdc(&i_1, i[1], &i[4])",
    "i = i_1",
    "if (*(rdi + 0x61) != 0)",
    "arg1[3].d = 7",
    "int32_t rcx_10 = arg1[3].d",
    "if (rcx_10 != 0 && rcx_10 != 0x65 && arg1[1] == 0)",
    "int64_t* rax_15",
    "rax_15, arg4 = _printf_p_l(rdi, \"%s\", sub_14008335c(rcx_10), arg4)",
    "arg1[1] = rax_15",
    "int64_t r8_4 = arg1[1]",
    "int32_t rsi_2",
    "if (r8_4 == 0)",
    "rsi_2 = arg_10",
    "arg1[0x25]",
    "int32_t rcx_12 = arg1[3].d",
    "*arg3 = r8_4",
    "sub_1400187fc(rcx_12, \"%s in \"%s\"\", r8_4, arg4)",
    "arg1[1] = 0",
    "rsi_2 = 1",
    "int64_t* rcx_13 = arg1[2]",
    "arg1[0x25] = rbp",
    "if (rcx_13 != 0 && arg1[6].d s> 0 && *(arg1 + 0x1e) == 0)",
    "sub_1400348b0(rcx_13)",
    "arg1[2] = 0",
    "sub_140016950(arg1[0x2c])",
    "if (*(arg1 + 0x104) == 0)",
    "int64_t* rdx_3 = arg1[0x26]",
    "if (rdx_3 != 0)",
    "int32_t temp1_1",
    "if (*(rdi + 0x298) == 0)",
    "temp1_1 = *(rdx_3 + 0x3c)",
    "*(rdx_3 + 0x3c) -= 1",
    "if (*(rdi + 0x298) != 0 || temp1_1 == 1)",
    "sub_14004e45c(rdi, rdx_3)",
    "if (*(arg1 + 0x104) u< 2)",
    "sub_14006bfac(rdi, arg1[0x28])",
    "int32_t* rdx_5 = arg1[0x30]",
    "if (rdx_5 != 0)",
    "sub_140054184(rdi, rdx_5)",
    "int64_t* rdx_6 = arg1[0x23]",
    "if (rdx_6 != 0)",
    "goto label_14008205a",
    "while (arg1[0x11] != 0)",
    "rdx_6 = arg1[0x11]",
    "arg1[0x11] = *rdx_6",
    "label_14008205a:",
    "sub_1400169a8(rdi, rdx_6)",
    "while (arg1[0x2d] != 0)",
    "int64_t* rdx_7 = arg1[0x2d]",
    "arg1[0x2d] = rdx_7[0xf]",
    "if (*(rdi + 0x298) == 0)",
    "int32_t temp2_1 = *(rdx_7 + 0x3c)",
    "*(rdx_7 + 0x3c) -= 1",
    "if (temp2_1 != 1)",
    "continue",
    "sub_14004e45c(rdi, rdx_7)",
    "*(rdi + 0x128) = arg1[0x14]",
    "arg1[0x14] = 0",
    "return zx.q(rsi_2)"
  ]
}