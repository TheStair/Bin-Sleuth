{
  "address": "0x14000c234",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "allocate or change RWX memory/e5d60c23edee4683a25ac882b99be25c/be08ffa5ddd942e8ab0706a663121e4b",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e"
  ],
  "disassembly": [
    "mov     qword [rsp+0x10], rbx",
    "mov     qword [rsp+0x18], rbp",
    "push    rsi",
    "push    rdi",
    "push    r13",
    "sub     rsp, 0x70",
    "mov     rax, qword [rcx+0x8]",
    "xor     edi, edi",
    "mov     r10, r8",
    "mov     r11, rdx",
    "xor     ebp, ebp",
    "cmp     qword [rsp+0xc0], rdi",
    "sete    bpl",
    "and     qword [rsp+0x20], rdi",
    "and     qword [rsp+0x30], rdi",
    "mov     qword [rsp+0x28], rax",
    "mov     r13, r9",
    "lea     rax, [rel data_140140240]",
    "mov     rbx, rcx",
    "mov     r8, rcx",
    "lea     r9d, [rdi+0x1]",
    "xor     esi, esi",
    "mov     rdx, r10",
    "mov     rcx, r11",
    "mov     dword [rsp+0x90], esi",
    "mov     qword [rsp+0x38], rax",
    "call    sub_14000b910",
    "test    eax, eax",
    "je      0x14000c414",
    "lea     r11, [rsp+0x70]",
    "mov     eax, edi",
    "mov     rbx, qword [r11+0x28]",
    "mov     rbp, qword [r11+0x30]",
    "mov     rsp, r11",
    "pop     r13",
    "pop     rdi",
    "pop     rsi",
    "retn    ",
    "movsxd  r10, dword [rsp+0xb8]",
    "add     r10, qword [rbx+0x18]",
    "mov     rbx, qword [rsp+0xb0]",
    "mov     qword [rsp+0x20], r10",
    "test    ebp, ebp",
    "jne     0x14000c2fa",
    "mov     rdx, qword [rsp+0x28]",
    "mov     ecx, dword [rdx]",
    "test    ecx, ecx",
    "je      0x14000c32b",
    "lea     ecx, [rdi+0x40]",
    "mov     rdx, rbx",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rsp+0x30], rax",
    "test    rax, rax",
    "je      0x14000c414",
    "lea     rdx, [rsp+0x40]",
    "mov     r8d, 0x30",
    "mov     rcx, r10",
    "call    qword [rel VirtualQuery]",
    "cmp     ecx, 0x1",
    "jne     0x14000c404",
    "lea     rdx, [rsp+0x20]",
    "lea     rcx, [rsp+0x30]",
    "mov     r8, rbx",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x14000c414",
    "mov     rcx, qword [rsp+0x30]",
    "test    rcx, rcx",
    "je      0x14000c414",
    "mov     eax, dword [rsp+0x64]",
    "mov     r8d, eax",
    "mov     edx, eax",
    "and     r8d, 0xffffff00",
    "and     edx, 0xf",
    "je      0x14000c36e",
    "mov     rcx, qword [rdx+0x8]",
    "lea     r8, [rsp+0x40]",
    "mov     r9d, 0x30",
    "mov     rcx, qword [rcx]",
    "mov     rdx, r10",
    "call    qword [rel VirtualQueryEx]",
    "jmp     0x14000c33f",
    "mov     r10, qword [rsp+0x20]",
    "call    qword [rel LocalFree]",
    "and     eax, 0xf0",
    "je      0x14000c3a2",
    "mov     ecx, 0x4",
    "cmp     edx, ecx",
    "jb      0x14000c37f",
    "xor     ecx, ecx",
    "cmp     rax, 0x30",
    "sete    cl",
    "test    ecx, ecx",
    "je      0x14000c404",
    "lea     rcx, [rsp+0x20]",
    "mov     r8, rbx",
    "mov     rdx, r13",
    "call    sub_14000b6d8",
    "mov     edi, eax",
    "test    eax, eax",
    "je      0x14000c3ed",
    "cmp     eax, 0x40",
    "jae     0x14000c3a2",
    "or      r8d, ecx",
    "lea     r9, [rsp+0x90]",
    "lea     rcx, [rsp+0x20]",
    "mov     rdx, rbx",
    "call    sub_14000bbe8",
    "test    eax, eax",
    "je      0x14000c404",
    "test    esi, esi",
    "je      0x14000c404",
    "cmp     qword [rsp+0xc0], 0x0",
    "je      0x14000c3ed",
    "mov     ecx, 0x40",
    "mov     esi, dword [rsp+0x90]",
    "lea     rcx, [rsp+0x20]",
    "xor     r9d, r9d",
    "mov     r8d, esi",
    "mov     rdx, rbx",
    "call    sub_14000bbe8",
    "mov     rdx, qword [rsp+0xd0]",
    "mov     ecx, dword [rsp+0xc8]",
    "call    qword [rsp+0xc0]",
    "lea     rdx, [rsp+0x30]",
    "lea     rcx, [rsp+0x20]",
    "mov     r8, rbx",
    "call    sub_14000b6d8",
    "mov     edi, eax"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}