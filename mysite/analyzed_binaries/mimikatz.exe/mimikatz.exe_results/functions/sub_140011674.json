{
  "address": "0x140011674",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/a3c4a1cc0982489686093c2de66a39c8",
    "contain loop",
    "decrypt data using TEA/b1609112b4574d7d84a6736fb833fd96/bfe99336573d4b5189dbca2cbd3ed1f2",
    "encrypt data using TEA/a99f0fb4fab7434084917883a6622883/6cf0dbdc06cf4e518b05ed91d6a55995",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/b698edc3bfd142ebb8f43c55408819b5",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8 {__saved_rbx}], rbx",
    "mov     qword [rsp+0x10 {__saved_rbp}], rbp",
    "mov     qword [rsp+0x18 {__saved_rsi}], rsi",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "sub     rsp, 0x40",
    "lea     r12, [rel data_14013f750]",
    "mov     rbx, rdx",
    "mov     rbp, rcx",
    "mov     rsi, r12  {data_14013f750}",
    "xor     edi, edi  {0x0}",
    "mov     rdx, qword [r12+rdi*8]",
    "lea     rcx, [rel data_1400ef830]  {u\"ERROR kull_m_rpc_drsr_ProcessGet\u2026\"}",
    "call    sub_14000c030",
    "inc     edi",
    "add     rsi, 0x8",
    "cmp     edi, 0x8",
    "jb      0x14001169e",
    "mov     rdx, qword [rsi]",
    "lea     r8, [rsp+rdi*4+0x20] {var_58}",
    "xor     r9d, r9d  {0x0}",
    "mov     rcx, rbp",
    "call    sub_140011a94",
    "test    eax, eax",
    "je      0x140011763",
    "test    rbx, rbx",
    "mov     eax, 0x1",
    "jmp     0x140011775",
    "mov     rax, qword [rbx+0x20]",
    "mov     r13, qword [rbx]",
    "test    rax, rax",
    "je      0x140011751",
    "mov     rbx, qword [rsp+0x60 {__saved_rbx}]",
    "mov     rbp, qword [rsp+0x68 {__saved_rbp}]",
    "mov     rsi, qword [rsp+0x70 {__saved_rsi}]",
    "add     rsp, 0x40",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "retn     {__return_addr}",
    "mov     rbx, r13",
    "test    r13, r13",
    "jmp     0x1400116c7",
    "xor     r12d, r12d  {0x0}",
    "cmp     dword [rbx+0x18], r12d",
    "jbe     0x140011751",
    "je      0x14001175c",
    "xor     edi, edi  {0x0}",
    "cmp     qword [rdi+rax+0x10], 0x0",
    "je      0x140011744",
    "inc     edx",
    "add     rcx, 0x4",
    "cmp     edx, 0x8",
    "jb      0x1400116ef",
    "inc     r12d",
    "add     rdi, 0x18",
    "cmp     r12d, dword [rbx+0x18]",
    "jb      0x1400116e4",
    "xor     esi, esi  {0x0}",
    "cmp     dword [rdi+rax+0x8], esi",
    "jbe     0x140011744",
    "cmp     dword [rcx], r8d",
    "je      0x140011701",
    "jmp     0x140011744",
    "mov     r8d, dword [rdi+rax]",
    "xor     edx, edx  {0x0}",
    "lea     rcx, [rsp+0x20 {var_38}]",
    "xor     ebp, ebp  {0x0}",
    "mov     rax, qword [rbx+0x20]",
    "inc     esi",
    "add     rbp, 0x10",
    "cmp     esi, dword [rdi+rax+0x8]",
    "jb      0x140011713",
    "mov     ecx, esi",
    "shl     rcx, 0x4",
    "add     rcx, rdx",
    "xor     edx, edx  {0x0}",
    "call    sub_140011790",
    "test    eax, eax",
    "je      0x140011773",
    "mov     rdx, qword [rdi+rax+0x10]",
    "cmp     qword [rdx+rbp+0x8], 0x0",
    "je      0x140011734",
    "xor     eax, eax  {0x0}"
  ],
  "high_level_IL": [
    "int64_t* rbx = arg2",
    "char const (** rsi)[0x16] = &data_14013f750",
    "uint64_t rdi = 0",
    "void var_58",
    "if (sub_140011a94(arg1, *rsi, &var_58 + (rdi << 2) + 0x20, 0) == 0)",
    "sub_14000c030(u\"ERROR kull_m_rpc_drsr_ProcessGet\u2026\", (&data_14013f750)[rdi])",
    "return 0",
    "rdi = zx.q(rdi.d + 1)",
    "rsi = &rsi[1]",
    "do while (rdi.d u< 8)",
    "int64_t* r13_1",
    "bool cond:0_1 = rbx == 0",
    "while (not(cond:0_1))",
    "int64_t rax_2 = rbx[4]",
    "r13_1 = *rbx",
    "if (rax_2 != 0)",
    "int32_t i = 0",
    "if (rbx[3].d u> 0)",
    "int32_t* rdi_1 = nullptr",
    "int32_t j = 0",
    "void var_38",
    "void* rcx_1 = &var_38",
    "if (*rcx_1 == *(rdi_1 + rax_2))",
    "if (*(rdi_1 + rax_2 + 0x10) != 0)",
    "int32_t k = 0",
    "if (*(rdi_1 + rax_2 + 8) u> 0)",
    "int64_t rbp_1 = 0",
    "int64_t rdx_1 = *(rdi_1 + rax_2 + 0x10)",
    "if (*(rdx_1 + rbp_1 + 8) != 0 && sub_140011790((zx.q(k) << 4) + rdx_1, 0) == 0)",
    "return 0",
    "rax_2 = rbx[4]",
    "k += 1",
    "rbp_1 += 0x10",
    "do while (k u< *(rdi_1 + rax_2 + 8))",
    "break",
    "j += 1",
    "rcx_1 += 4",
    "do while (j u< 8)",
    "i += 1",
    "rdi_1 = &rdi_1[6]",
    "do while (i u< rbx[3].d)",
    "rbx = r13_1",
    "cond:0_1 = r13_1 == 0",
    "return 1"
  ]
}