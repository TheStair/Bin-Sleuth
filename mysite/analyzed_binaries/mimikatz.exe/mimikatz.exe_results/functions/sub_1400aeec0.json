{
  "address": "0x1400aeec0",
  "rules": [
    "encrypt data using HC-128/3a1d071efde74eee81bac1a6e203b6af",
    "hash data using murmur3/aeb1a4346751469b809f4261bcfbbb07/dbb00f9448c04dc1b720ac16935c1891",
    "encode data using XOR",
    "contain loop",
    "check for kernel debugger via shared user data structure/f02b2044f10f450f9f5b2b0d5d96cef0",
    "hash data with CRC32/7620b456d97a4aaeb63e1213270df3d4",
    "decompress data using aPLib/a5c76dae137d4aaa9aade786acafaa41",
    "encrypt data using chaskey/7025f739e4b341df894563ee3ec22dfd",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "hash data using aphash/53c84e7b18b64c82aa36e25c45372fcd",
    "compute adler32 checksum/aded99c950db4d9b8d119cbfc64de8e4"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "mov     qword [rsp+0x10], rsi",
    "push    rdi",
    "sub     rsp, 0x20",
    "movzx   eax, r8w",
    "movzx   r10d, dl",
    "mov     r11, r9",
    "shl     r10d, 0x10",
    "xor     r9b, r9b",
    "mov     rsi, rcx",
    "or      r10d, eax",
    "mov     rax, 0x2004000000",
    "add     r10d, r10d",
    "movsxd  rdi, r10d",
    "xor     r10b, r10b",
    "or      rdi, rax",
    "xor     r8b, r8b",
    "movzx   edx, r8b",
    "mov     rax, rdi",
    "inc     r8b",
    "lea     ecx, [rdx+0xd]",
    "shr     rax, cl",
    "lea     ecx, [rdx+0x1]",
    "and     al, 0x1",
    "xor     r10b, al",
    "mov     rax, rdi",
    "shr     rax, cl",
    "and     al, 0x1",
    "xor     r9b, al",
    "cmp     r8b, 0xc",
    "jb      0x1400aef00",
    "movzx   eax, r10b",
    "and     eax, 0x1",
    "shl     eax, 0x19",
    "movsxd  rcx, eax",
    "xor     eax, eax",
    "test    r9b, r9b",
    "sete    al",
    "and     eax, 0x1",
    "or      rcx, rax",
    "or      rdi, rcx",
    "test    r11, r11",
    "je      0x1400aef4f",
    "mov     rcx, rdi",
    "mov     dword [rsi], 0x90625062",
    "shr     rcx, 0x28",
    "call    sub_1400aee88",
    "mov     rcx, rdi",
    "movzx   ebx, al",
    "shr     rcx, 0x24",
    "or      ebx, 0x1d00",
    "shl     ebx, 0x8",
    "call    sub_1400aee88",
    "mov     rcx, rdi",
    "movzx   r11d, al",
    "shr     rcx, 0x20",
    "or      ebx, r11d",
    "shl     ebx, 0x8",
    "call    sub_1400aee88",
    "mov     rcx, rdi",
    "movzx   r11d, al",
    "shr     rcx, 0x1c",
    "or      ebx, r11d",
    "mov     dword [rsi+0x4], ebx",
    "call    sub_1400aee88",
    "mov     rcx, rdi",
    "movzx   ebx, al",
    "shr     rcx, 0x18",
    "shl     ebx, 0x8",
    "call    sub_1400aee88",
    "mov     rcx, rdi",
    "movzx   r11d, al",
    "shr     rcx, 0x14",
    "or      ebx, r11d",
    "shl     ebx, 0x8",
    "call    sub_1400aee88",
    "mov     rcx, rdi",
    "movzx   r11d, al",
    "shr     rcx, 0x10",
    "or      ebx, r11d",
    "shl     ebx, 0x8",
    "call    sub_1400aee88",
    "mov     rcx, rdi",
    "movzx   r11d, al",
    "shr     rcx, 0xc",
    "or      ebx, r11d",
    "mov     dword [rsi+0x8], ebx",
    "call    sub_1400aee88",
    "mov     rcx, rdi",
    "movzx   ebx, al",
    "shr     rcx, 0x8",
    "shl     ebx, 0x8",
    "call    sub_1400aee88",
    "mov     rcx, rdi",
    "movzx   r11d, al",
    "shr     rcx, 0x4",
    "or      ebx, r11d",
    "shl     ebx, 0x8",
    "call    sub_1400aee88",
    "mov     cl, dil",
    "movzx   r11d, al",
    "or      ebx, r11d",
    "shl     ebx, 0x8",
    "call    sub_1400aee88",
    "movzx   r11d, al",
    "or      ebx, r11d",
    "mov     dword [rsi+0xc], ebx",
    "mov     rbx, qword [rsp+0x30]",
    "mov     rsi, qword [rsp+0x38]",
    "add     rsp, 0x20",
    "pop     rdi",
    "retn    ",
    "mov     qword [r11], rdi"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}