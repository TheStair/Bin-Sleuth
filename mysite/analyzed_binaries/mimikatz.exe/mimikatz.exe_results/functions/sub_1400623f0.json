{
  "address": "0x1400623f0",
  "rules": [
    "check for kernel debugger via shared user data structure/f02b2044f10f450f9f5b2b0d5d96cef0",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "empty recycle bin quietly/a401764de4c44240956dc7f3c78baebd",
    "hash data with CRC32/7620b456d97a4aaeb63e1213270df3d4",
    "hash data using aphash/53c84e7b18b64c82aa36e25c45372fcd",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "decompress data using LZO/4cde8899b401464e87ec185666d6508a",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "hash data using jshash/f142a7a7597843a791ba4ccc676b6fb1"
  ],
  "disassembly": [
    "mov     rax, rsp {__return_addr}",
    "mov     qword [rax+0x10 {__saved_rbx}], rbx",
    "mov     dword [rax+0x20 {arg_20}], r9d",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x1c0",
    "mov     rsi, rcx",
    "movsxd  rbx, r8d",
    "mov     r14, rdx",
    "lea     rcx, [rsp+0x30 {var_1c8}]",
    "xor     r15d, r15d  {0x0}",
    "xor     edx, edx  {0x0}",
    "mov     r8d, 0xbc",
    "mov     r13d, r9d",
    "mov     qword [rax+0x8 {arg_8}], r15  {0x0}",
    "call    memset",
    "lea     rcx, [rsp+0x120 {var_d8}]",
    "xor     edx, edx  {0x0}",
    "mov     r8d, 0xa0",
    "call    memset",
    "mov     r11, qword [rsp+0x220 {arg_28}]",
    "mov     qword [rsp+0x150 {var_a8}], r11",
    "test    r13b, 0x1",
    "je      0x140062467",
    "mov     eax, r13d",
    "mov     rcx, rsi",
    "shr     eax, 0x2",
    "and     al, 0x1",
    "mov     byte [rsp+0x55 {var_1a3}], al",
    "call    sub_14006fa6c",
    "cmp     ebx, r15d",
    "mov     qword [rsp+0x30 {var_1c8}], rsi",
    "jl      0x140062526",
    "inc     byte [rsp+0x54 {var_1a4_1} {var_1a4}]",
    "inc     dword [rsi+0x168]",
    "lea     r8, [rsp+0x200 {arg_8}]",
    "lea     rcx, [rsp+0x30 {var_1c8}]",
    "mov     rdx, r14",
    "call    sub_140081ccc",
    "je      0x140062496",
    "mov     ebx, dword [rsp+0x48 {var_1b0_1}]",
    "cmp     byte [rsi+0x61], r15b",
    "mov     rcx, qword [rsp+0x230 {arg7}]",
    "cmovne  ebx, eax  {0x7}",
    "mov     dword [rsp+0x48 {var_1b0_2}], ebx",
    "cmp     rcx, r15",
    "je      0x1400626de",
    "mov     r12, qword [rsp+0x30 {var_1c8}]",
    "mov     r13d, r15d  {0x0}",
    "cmp     dword [r12+0x28], r15d",
    "jle     0x1400626af",
    "cmp     ebx, dword [rsi+0x80]",
    "mov     rcx, rsi",
    "jle     0x1400624d2",
    "cmp     byte [rbx+r14-0x1], r15b",
    "je      0x140062526",
    "mov     al, byte [rsp+0x133 {var_c5}]",
    "cmp     al, r15b",
    "je      0x14006275a",
    "mov     rax, qword [rsp+0x158 {var_a0}]",
    "mov     qword [rcx], rax",
    "mov     r13d, dword [rsp+0x218 {arg_20}]",
    "mov     rax, qword [r12+0x20]",
    "xor     ebx, ebx  {0x0}",
    "mov     rbp, qword [r15+rax+0x8]",
    "test    rbp, rbp",
    "je      0x140062696",
    "mov     r8, rbx",
    "mov     rdx, r14",
    "mov     rdi, rbx",
    "call    sub_140016e18",
    "mov     rbx, rax",
    "cmp     rax, r15",
    "je      0x140062518",
    "lea     r8, [rel data_1400f6768]  {\"statement too long\"}",
    "mov     edx, 0x12",
    "call    sub_140019114",
    "cmp     byte [rsi+0x61], r15b",
    "jne     0x1400624c3",
    "mov     rdi, qword [rsp+0x40 {var_1b8}]",
    "cmp     ebx, r15d",
    "jne     0x14006275a",
    "inc     r13d",
    "add     r15, 0x20",
    "cmp     r13d, dword [r12+0x28]",
    "jl      0x14006256d",
    "cmp     byte [rbp+0x10], bl",
    "jne     0x14006263d",
    "lea     rax, [rdi+r14]",
    "mov     qword [rsp+0x158 {var_a0}], rax",
    "jmp     0x14006253b",
    "lea     r8, [rsp+0x200 {arg_8}]",
    "lea     rcx, [rsp+0x30 {var_1c8}]",
    "mov     rdx, rax",
    "call    sub_140081ccc",
    "mov     r11, r14",
    "mov     rdx, rbx",
    "sub     r11, rbx",
    "mov     rcx, rsi",
    "add     qword [rsp+0x158 {var_a0}], r11",
    "call    sub_1400169a8",
    "jmp     0x14006253b",
    "mov     rcx, rsi",
    "call    sub_140016f38",
    "mov     ebx, eax  {0x7}",
    "jmp     0x140062830",
    "mov     ebx, dword [rsi+0x54]",
    "and     ebx, 0x12",
    "jmp     0x140062830",
    "cmp     ebx, r15d",
    "jne     0x1400627bc",
    "mov     eax, dword [rsp+0x158 {var_a0}]",
    "sub     eax, r14d",
    "cmp     rdi, r15",
    "je      0x1400627a4",
    "mov     rdi, qword [rsp+0x40 {var_1b8}]",
    "cmp     rdi, r15",
    "je      0x14006275f",
    "xor     r15d, r15d",
    "lea     eax, [r15+0x7]",
    "lea     r8, [rsp+0x220 {arg_28}]",
    "mov     edx, 0x1",
    "mov     rcx, rbp",
    "call    sub_14002efb0",
    "mov     r8, qword [r12+0x20]",
    "mov     rax, qword [r15+r8+0x18]",
    "mov     ecx, dword [rax]",
    "cmp     dword [rsp+0x220 {arg_28}], ecx",
    "je      0x14006267a",
    "mov     rax, qword [rbp]",
    "mov     rbx, qword [rbp+0x8]",
    "mov     ecx, dword [rax+0x30]",
    "bt      rcx, 0x19",
    "jae     0x1400625af",
    "mov     eax, dword [rsp+0x48 {var_1b0}]",
    "cmp     eax, 0x65",
    "cmove   eax, r15d  {0x0}",
    "mov     dword [rsp+0x48 {var_1b0_1}], eax",
    "mov     eax, 0x7",
    "cmp     byte [rsp+0x4d {var_1ab}], r15b",
    "je      0x1400626b7",
    "lea     rcx, [rsp+0x30 {var_1c8}]",
    "call    sub_1400623a0",
    "mov     eax, ebx",
    "mov     rbx, qword [rsp+0x208 {__saved_rbx}]",
    "add     rsp, 0x1c0",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "cmp     rdi, r15",
    "je      0x1400627c9",
    "cmp     byte [rsi+0x61], r15b",
    "jne     0x1400627bc",
    "mov     byte [rdi+0xc4], r13b",
    "test    r13b, r13b",
    "js      0x14006278a",
    "cmp     byte [rsi+0xb5], r15b",
    "jne     0x1400627a4",
    "mov     rcx, rdi",
    "cmp     al, 0x2",
    "jne     0x140062714",
    "test    ebx, ebx",
    "je      0x140062696",
    "mov     edx, r13d",
    "mov     rcx, r12",
    "call    sub_14004e2cc",
    "mov     dword [rsp+0x48 {var_1b0_1}], 0x11",
    "mov     eax, 0xffef",
    "xor     edi, edi  {0x0}",
    "and     word [rbx+0x26], ax",
    "movzx   eax, word [rbx+0x26]",
    "cmp     dword [rbx+0x3c], edi",
    "jne     0x1400625cb",
    "mov     rax, qword [rbx]",
    "cmp     byte [rax+0x12], 0x0",
    "jne     0x1400625af",
    "mov     rdi, qword [rsp+0x200 {arg_8}]",
    "cmp     rdi, r15",
    "je      0x1400627ef",
    "mov     rcx, rdi",
    "call    sub_1400346ec",
    "mov     rax, qword [rsp+0x228 {arg6}]",
    "mov     qword [rax], rdi",
    "jmp     0x1400627c9",
    "mov     rcx, qword [rdi]",
    "movsxd  r8, eax",
    "mov     rdx, r14",
    "call    sub_140016e18",
    "mov     qword [rdi+0xf0], rax",
    "mov     rdi, qword [rsp+0x40 {var_1b8}]",
    "mov     dword [rdi+0x114], r15d  {0x0}",
    "mov     ebp, 0x8",
    "mov     edx, ebp  {0x8}",
    "call    sub_140033bb0",
    "mov     eax, r15d  {0x0}",
    "mov     edx, 0x4",
    "call    sub_140033bb0",
    "mov     eax, 0x8",
    "lea     ebp, [rax+0x4]  {0xc}",
    "jmp     0x140062723",
    "xor     edx, edx  {0x0}",
    "mov     rcx, rbp",
    "call    sub_140029190",
    "test    eax, eax",
    "jne     0x140062696",
    "cmp     qword [rbx+0x18], 0x0",
    "jne     0x1400625e0",
    "or      ax, 0x10",
    "mov     word [rbx+0x26], ax",
    "mov     eax, 0xfffe",
    "and     word [rbx+0x26], ax",
    "mov     dword [rsi+0x50], ebx",
    "cmp     ebx, r15d",
    "jne     0x140062800",
    "lea     r8, [rel data_1400f38e8]",
    "mov     r9, rdi",
    "mov     edx, ebx",
    "mov     rcx, rsi",
    "call    sub_140019114",
    "mov     rdx, rdi",
    "jmp     0x14006281b",
    "mov     ebp, r15d  {0x0}",
    "movsxd  rdi, eax",
    "movsxd  r12, ebp",
    "cmp     rdi, r12",
    "jge     0x14006275a",
    "xor     edx, edx  {0x0}",
    "mov     rcx, rbp",
    "call    sub_140029240",
    "test    edi, edi",
    "je      0x1400625ec",
    "mov     rcx, rbx",
    "call    sub_1400280b8",
    "mov     edi, eax",
    "test    eax, eax",
    "je      0x1400625cb",
    "mov     edx, ebx",
    "mov     rcx, rsi",
    "call    sub_1400190a0",
    "jmp     0x140062823",
    "cmp     qword [rsi+0x158], r15",
    "je      0x140062823",
    "mov     rcx, rsi",
    "call    sub_1400169a8",
    "mov     rcx, qword [rsp+0x40 {var_1b8}]",
    "lea     r9, [rel data_1400d86a0]",
    "xor     r8d, r8d  {0x0}",
    "mov     r9, qword [r9+rdi*8]",
    "mov     edx, ebp",
    "mov     qword [rsp+0x20 {var_1d8}], r15  {0x0}",
    "call    sub_140033c58",
    "inc     rdi",
    "inc     ebp",
    "cmp     rdi, r12",
    "jl      0x140062731",
    "cmp     dil, 0x5",
    "jne     0x140062604",
    "mov     rcx, rbx",
    "call    sub_140028404",
    "mov     rcx, qword [rsp+0x1a0 {var_58}]",
    "cmp     rcx, r15",
    "jne     0x14006280c",
    "mov     rax, qword [rcx+0x8]",
    "mov     rdx, rcx",
    "mov     qword [rsp+0x1a0 {var_58}], rax",
    "test    edi, edi",
    "jne     0x14006261f",
    "cmp     byte [rbx+0x24], 0x0",
    "jne     0x140062604",
    "cmp     edi, 0x7",
    "je      0x14006262c",
    "cmp     byte [rbp+0x10], dil",
    "jne     0x140062611",
    "mov     rcx, rbx",
    "call    sub_140027a28",
    "test    eax, eax",
    "jne     0x1400625cb",
    "mov     rcx, r12",
    "call    sub_140016efc",
    "cmp     edi, 0xc0a",
    "jne     0x140062634",
    "mov     byte [rbp+0x10], 0x1",
    "cmp     byte [rbx+0x24], 0x1",
    "jae     0x140062638",
    "inc     dword [rbx+0x38]",
    "mov     ebx, 0x1",
    "test    edi, edi",
    "jne     0x1400626a8",
    "mov     byte [rbx+0x24], 0x1"
  ],
  "high_level_IL": [
    "int64_t rbx = sx.q(arg3)",
    "int64_t r15 = 0",
    "int32_t r13 = arg4",
    "arg_8 = nullptr",
    "int64_t* var_1c8",
    "memset(&var_1c8, 0, 0xbc)",
    "void var_d8",
    "int512_t zmm0 = memset(&var_d8, 0, 0xa0)",
    "int64_t var_a8 = arg_28",
    "if ((r13.b & 1) != 0)",
    "char var_1a4",
    "char var_1a4_1 = var_1a4 + 1",
    "arg1[0x2d].d += 1",
    "uint8_t var_1a3 = (r13 u>> 2).b & 1",
    "int64_t r9 = sub_14006fa6c(arg1)",
    "var_1c8 = arg1",
    "int32_t rbx_2",
    "void* var_a0",
    "int512_t zmm0_1",
    "if (rbx.d s< 0 || (rbx.d != 0 && arg2[rbx - 1] == 0))",
    "zmm0_1, arg5 = sub_140081ccc(&var_1c8, arg2, &arg_8, zmm0, arg5)",
    "label_14006253b:",
    "int32_t var_1b0",
    "int32_t rax_4 = var_1b0",
    "if (rax_4 == 0x65)",
    "rax_4 = 0",
    "int32_t var_1b0_1 = rax_4",
    "char var_1ab",
    "if (var_1ab != 0)",
    "int64_t* r12_1 = var_1c8",
    "int32_t r13_1 = 0",
    "if (r12_1[5].d s> 0)",
    "while (true)",
    "int32_t rbx_4 = 0",
    "int64_t* rbp_1 = *(r15 + r12_1[4] + 8)",
    "if (rbp_1 != 0)",
    "if (rbp_1[2].b == 0)",
    "int64_t* rbx_5 = rbp_1[1]",
    "if (test_bit(zx.q(*(*rbp_1 + 0x30)), 0x19) && *(*rbx_5 + 0x12) == 0)",
    "*(rbx_5 + 0x26) &= 0xfffe",
    "int32_t rdi_2 = 0",
    "*(rbx_5 + 0x26) &= 0xffef",
    "if (*(rbx_5 + 0x3c) == 0)",
    "*(rbx_5 + 0x26) |= 0x10",
    "while (true)",
    "if (rbx_5[3] == 0)",
    "int32_t rax_10",
    "rax_10, zmm0_1, arg5 = sub_1400280b8(rbx_5)",
    "rdi_2 = rax_10",
    "if (rax_10 == 0)",
    "continue",
    "if (rdi_2 != 0)",
    "zmm0_1, arg5 = sub_140028404(rbx_5)",
    "if (rdi_2.b != 5)",
    "break",
    "if (*(rbx_5 + 0x24) != 0)",
    "break",
    "if (sub_140027a28(rbx_5) == 0)",
    "break",
    "if (rdi_2 != 0)",
    "goto label_14006262a",
    "if (rbp_1[2].b == rdi_2.b)",
    "rbx_5[7].d += 1",
    "rbp_1[2].b = 1",
    "if (*(rbx_5 + 0x24) u< 1)",
    "*(rbx_5 + 0x24) = 1",
    "label_14006262a:",
    "if (rdi_2 == 7 || rdi_2 == 0xc0a)",
    "sub_140016efc(r12_1)",
    "if (rdi_2 != 0)",
    "break",
    "rbx_4 = 1",
    "sub_14002efb0(rbp_1, 1, &arg_28)",
    "if (arg_28.d != **(r15 + r12_1[4] + 0x18))",
    "zmm0_1 = sub_14004e2cc(r12_1, r13_1)",
    "var_1b0_1 = 0x11",
    "if (rbx_4 != 0)",
    "int32_t rax_13",
    "rax_13, zmm0_1, arg5 = sub_140029190(rbp_1, nullptr)",
    "if (rax_13 == 0)",
    "zmm0_1, arg5 = sub_140029240(rbp_1, 0)",
    "r13_1 += 1",
    "r15 += 0x20",
    "if (r13_1 s>= r12_1[5].d)",
    "break",
    "r13 = arg4",
    "rbx_2 = var_1b0_1",
    "if (*(arg1 + 0x61) != 0)",
    "rbx_2 = 7",
    "int32_t var_1b0_2 = rbx_2",
    "if (arg7 != 0)",
    "*arg7 = var_a0",
    "char var_c5",
    "void* rax_5",
    "rax_5.b = var_c5",
    "void** var_1b8",
    "void** rdi_3",
    "if (rax_5.b == 0 || rbx_2 != 0)",
    "rdi_3 = var_1b8",
    "rdi_3 = var_1b8",
    "if (rdi_3 != 0)",
    "int32_t rax_14",
    "int32_t rbp_2",
    "if (rax_5.b != 2)",
    "rbp_2 = 8",
    "zmm0_1 = sub_140033bb0(rdi_3, 8, arg5)",
    "rax_14 = 0",
    "zmm0_1 = sub_140033bb0(rdi_3, 4, arg5)",
    "rax_14 = 8",
    "rbp_2 = 0xc",
    "int64_t rdi_4 = sx.q(rax_14)",
    "int64_t r12_2 = sx.q(rbp_2)",
    "if (rdi_4 s< r12_2)",
    "int32_t rbp_3 = 0",
    "zmm0_1, arg5 = sub_140033c58(var_1b8, rbp_3, 0, (&data_1400d86a0)[rdi_4], arg5, 0)",
    "rdi_4 += 1",
    "rbp_3 += 1",
    "do while (rdi_4 s< r12_2)",
    "rdi_3 = var_1b8",
    "if (*(arg1 + 0xb5) == 0 && rdi_3 != 0)",
    "*(rdi_3 + 0xc4) = r13.b",
    "if (r13.b s>= 0)",
    "*(rdi_3 + 0x114) = 0",
    "int64_t* rax_17",
    "rax_17, zmm0_1 = sub_140016e18(*rdi_3, arg2, sx.q(var_a0.d - arg2.d), arg5)",
    "rdi_3[0x1e] = rax_17",
    "rdi_3 = var_1b8",
    "if (rbx_2 == 0 && *(arg1 + 0x61) == 0)",
    "*arg6 = rdi_3",
    "if (rdi_3 != 0)",
    "zmm0_1 = sub_1400346ec(rdi_3)",
    "int64_t* rdi_5 = arg_8",
    "if (rdi_5 == 0)",
    "arg1[0xa].d = rbx_2",
    "if (rbx_2 == 0 && arg1[0x2b] == 0)",
    "goto label_14006282b",
    "sub_1400190a0(arg1, rbx_2)",
    "goto label_14006282b",
    "sub_140019114(arg1, rbx_2, \"%s\", rdi_5, zmm0_1)",
    "int64_t* rdx_8 = rdi_5",
    "while (true)",
    "sub_1400169a8(arg1, rdx_8)",
    "label_14006282b:",
    "int64_t* var_58",
    "if (var_58 == 0)",
    "break",
    "rdx_8 = var_58",
    "var_58 = var_58[1]",
    "if (rbx.d s<= arg1[0x10].d)",
    "int64_t* rax_2",
    "rax_2, zmm0_1 = sub_140016e18(arg1, arg2, rbx, arg5)",
    "if (rax_2 == 0)",
    "var_a0 = &arg2[rbx]",
    "zmm0_1, arg5 = sub_140081ccc(&var_1c8, rax_2, &arg_8, zmm0_1, arg5)",
    "var_a0 += arg2 - rax_2",
    "sub_1400169a8(arg1, rax_2)",
    "goto label_14006253b",
    "sub_140019114(arg1, 0x12, \"statement too long\", r9, zmm0)",
    "if (*(arg1 + 0x61) != 0)",
    "sub_140016f38(arg1)",
    "rbx_2 = 7",
    "rbx_2 = *(arg1 + 0x54) & 0x12",
    "sub_1400623a0(&var_1c8)",
    "return zx.q(rbx_2)"
  ]
}