{
  "address": "0x14008611c",
  "rules": [
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/0d7bc900a8ea48098fc469578ae14b88",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "hash data with CRC32/dc8063c9cb1c41b9a5bafe66f5117ac4",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "empty recycle bin quietly/a401764de4c44240956dc7f3c78baebd",
    "encrypt data using HC-128/86aaff13b46c4951b9ca4e0a9171c391",
    "hash data using aphash/c01783ca846f48c3a4751b50c0c12749",
    "decompress data using aPLib/88da69e00a6e49ce8c080be3a0beeb89"
  ],
  "disassembly": [
    "mov     rax, rsp {__return_addr}",
    "mov     qword [rax+0x8 {__saved_rbx}], rbx",
    "mov     qword [rax+0x20 {__saved_rbp}], rbp",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "sub     rsp, 0x150",
    "lea     rax, [rax-0x78 {var_78}]",
    "mov     rbx, rcx",
    "mov     rdx, rcx",
    "mov     qword [rsp+0x20 {hMem}], rax {var_78}",
    "lea     rax, [rel data_140140240]",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8d, 0x60",
    "mov     qword [rsp+0x28 {var_140}], rax  {data_140140240}",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086512",
    "lea     r11, [rsp+0x150 {__saved_r12}]",
    "mov     rbx, qword [r11+0x20 {__saved_rbx}]",
    "mov     rbp, qword [r11+0x38 {__saved_rbp}]",
    "mov     rsp, r11",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "retn     {__return_addr}",
    "mov     rax, qword [rsp+0x148 {var_20}]",
    "mov     r12, 0xe35a172cd96214a0",
    "xor     rax, r12",
    "mov     qword [rbx], rax",
    "je      0x140086512",
    "lea     rax, [rsp+0x30 {result_1}]",
    "mov     esi, 0x10",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8, rsi  {0x10}",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x20 {hMem}], rax {result_1}",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086512",
    "mov     eax, dword [rsp+0x38 {var_130}]",
    "add     eax, 0xfffffffe",
    "cmp     eax, 0x2",
    "ja      0x140086512",
    "mov     rax, qword [rsp+0x30 {result_1}]",
    "mov     qword [rbx], rax",
    "test    rax, rax",
    "je      0x140086512",
    "lea     rax, [rsp+0x50 {var_118}]",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8d, 0x98",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x20 {hMem}], rax {var_118}",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086512",
    "mov     r8d, dword [rsp+0x58 {var_110}]",
    "test    r8d, r8d",
    "je      0x140086512",
    "cmp     r8d, 0xffff",
    "ja      0x140086512",
    "cmp     dword [rsp+0x60 {var_108}], 0x8000",
    "ja      0x140086512",
    "mov     ecx, r8d",
    "call    sub_140005694",
    "lea     rcx, [rel data_1400f8370]  {u\"\\nAlgid     : %s (0x%x)\\n\"}",
    "mov     rdx, rax",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0x60 {var_108}]",
    "lea     rcx, [rel data_1400f83a0]  {u\"Key (%3u) : \"}",
    "call    sub_14000c030",
    "mov     r11, qword [rsp+0x68 {var_100}]",
    "mov     qword [rbx], r11",
    "test    r11, r11",
    "je      0x1400862a7",
    "lea     rdi, [rel data_1400d27a8]",
    "mov     rcx, rdi  {data_1400d27a8}",
    "call    sub_14000c030",
    "mov     r11d, dword [rsp+0x58 {var_110}]",
    "mov     ebp, 0x1e00",
    "and     r11d, ebp",
    "cmp     r11d, 0x600",
    "jne     0x140086354",
    "mov     edx, dword [rsp+0x60 {var_108}]",
    "lea     ecx, [rsi+0x30]  {0x40}",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rsp+0x20 {hMem}], rax",
    "test    rax, rax",
    "je      0x1400862a7",
    "cmp     dword [rsp+0xa8 {var_c0}], 0x0",
    "je      0x140086389",
    "mov     r8d, dword [rsp+0xc8 {var_a0}]",
    "test    r8d, r8d",
    "je      0x1400862f4",
    "mov     r8d, dword [rsp+0x60 {var_108}]",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     rdx, rbx",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x14008628d",
    "mov     eax, dword [rsp+0x58 {var_110}]",
    "and     eax, ebp",
    "cmp     eax, 0x400",
    "jne     0x140086512",
    "lea     rcx, [rel data_1400f8490]  {u\"Salt      : \"}",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0xa8 {var_c0}]",
    "lea     rcx, [rsp+0xac {var_bc}]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "mov     rcx, rdi  {data_1400d27a8}",
    "call    sub_14000c030",
    "xor     edx, edx  {0x0}",
    "cmp     r8d, 0x5",
    "ja      0x1400862f4",
    "mov     rdx, qword [rbx]",
    "lea     rcx, [rel data_1400f8550]  {u\"ERROR kuhl_m_crypto_extractor_ca\u2026\"}",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0x60 {var_108}]",
    "mov     rcx, qword [rsp+0x20 {hMem}]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "jmp     0x14008629c",
    "mov     eax, dword [rel data_14014084c]",
    "cmp     eax, 0x1db0",
    "jae     0x1400863ae",
    "test    al, al",
    "je      0x140086354",
    "or      al, byte [rcx]",
    "inc     r11d",
    "inc     rcx",
    "test    al, al",
    "je      0x14008630f",
    "lea     eax, [r8-0x1]",
    "lea     rdx, [rel data_1400de808]",
    "mov     rdx, qword [rdx+rax*8]",
    "jmp     0x1400862f6",
    "mov     rcx, qword [rsp+0x20 {hMem}]",
    "call    qword [rel LocalFree]",
    "cmp     eax, 0x23f0",
    "sbb     edi, edi",
    "and     edi, 0xffffffc0",
    "add     edi, 0x1b0",
    "mov     edi, 0x180",
    "jmp     0x1400863be",
    "lea     rcx, [rel data_1400f8470]  {u\"IV        : \"}",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0xe4 {var_84}]",
    "lea     rcx, [rsp+0x84 {var_e4}]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "mov     rcx, rdi  {data_1400d27a8}",
    "call    sub_14000c030",
    "cmp     r11d, dword [rsp+0xe4 {var_84}]",
    "jae     0x140086325",
    "lea     rcx, [rel data_1400f8440]  {u\"Mode      : %s (0x%x)\\n\"}",
    "call    sub_14000c030",
    "xor     r11d, r11d  {0x0}",
    "xor     al, al  {0x0}",
    "lea     rcx, [rsp+0x84 {var_e4}]",
    "lea     rax, [rsp+0x178 {result_2}]",
    "mov     ebp, 0x8",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8, rbp  {0x8}",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x20 {hMem}], rax {result_2}",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086512",
    "mov     rax, qword [rsp+0x50 {var_118}]",
    "xor     rax, r12",
    "mov     qword [rbx], rax",
    "je      0x140086512",
    "mov     rax, qword [rsp+0x178 {result_2}]",
    "test    rax, rax",
    "je      0x140086512",
    "lea     rcx, [rsp+0x180 {result_3}]",
    "mov     r8, rbp  {0x8}",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x20 {hMem}], rcx {result_3}",
    "mov     ecx, edi",
    "add     rcx, rax",
    "mov     qword [rbx], rcx",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086512",
    "mov     rax, qword [rsp+0x180 {result_3}]",
    "mov     qword [rbx], rax",
    "test    rax, rax",
    "je      0x140086512",
    "lea     rax, [rsp+0x40 {var_128}]",
    "lea     r8d, [rbp+0x4]  {0xc}",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x20 {hMem}], rax {var_128}",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086512",
    "mov     eax, dword [rsp+0x48 {var_120}]",
    "lea     ecx, [rax+0x7]",
    "lea     edx, [rax+0xf]",
    "mov     eax, ebp  {0x8}",
    "shr     ecx, 0x3",
    "shr     edx, 0x4",
    "and     ecx, 0x7",
    "sub     eax, ecx",
    "test    ecx, ecx",
    "je      0x14008648b",
    "shr     eax, 0x1",
    "lea     eax, [rax+rdx+0x2]",
    "lea     ecx, [rax+rax*4]",
    "add     ecx, ecx",
    "movzx   r8d, cl",
    "lea     edx, [rcx-0x14]",
    "lea     eax, [r8-0x4]",
    "test    al, 0xf",
    "je      0x1400864b0",
    "add     eax, ebp",
    "lea     edi, [rdx+0x14]",
    "mov     ecx, 0x40",
    "mov     edx, edi",
    "mov     esi, edi",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rsp+0x20 {hMem}], rax",
    "test    rax, rax",
    "je      0x140086512",
    "lea     eax, [r8-0x4]",
    "and     eax, 0xf",
    "sub     esi, eax",
    "add     edx, esi",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8, rsi",
    "mov     rdx, rbx",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086507",
    "mov     rcx, qword [rsp+0x20 {hMem}]",
    "call    qword [rel LocalFree]",
    "lea     rcx, [rel data_1400f84b0]  {u\"PrivKey   : \"}",
    "call    sub_14000c030",
    "mov     rcx, qword [rsp+0x20 {hMem}]",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, edi",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400f84d0]  {u\"\\n!!! parts after public exponen\u2026\"}",
    "call    sub_14000c030"
  ],
  "high_level_IL": [
    "void var_78",
    "void* hMem = &var_78",
    "void* var_140 = &data_140140240",
    "uint64_t result = sub_14000b6d8(&hMem, arg1, 0x60)",
    "if (result.d != 0)",
    "int64_t var_20",
    "result = var_20 ^ 0xe35a172cd96214a0",
    "*arg1 = result",
    "if (result != 0)",
    "uint64_t result_1",
    "hMem = &result_1",
    "result = sub_14000b6d8(&hMem, arg1, 0x10)",
    "if (result.d != 0)",
    "int32_t var_130",
    "result = zx.q(var_130 - 2)",
    "if (result.d u<= 2)",
    "result = result_1",
    "*arg1 = result",
    "if (result != 0)",
    "int64_t var_118",
    "hMem = &var_118",
    "result = sub_14000b6d8(&hMem, arg1, 0x98)",
    "int32_t var_110",
    "int32_t var_108",
    "if (result.d != 0 && var_110 != 0 && var_110 u<= 0xffff && var_108 u<= 0x8000)",
    "sub_14000c030(u\"\\nAlgid     : %s (0x%x)\\n\", sub_140005694(var_110))",
    "int64_t rdx_5 = sub_14000c030(u\"Key (%3u) : \", zx.q(var_108))",
    "uint64_t var_100",
    "*arg1 = var_100",
    "if (var_100 != 0)",
    "HLOCAL hMem_1",
    "hMem_1, rdx_5 = LocalAlloc(LMEM_ZEROINIT, zx.q(var_108))",
    "hMem = hMem_1",
    "if (hMem_1 != 0)",
    "if (sub_14000b6d8(&hMem, arg1, zx.q(var_108)) == 0)",
    "sub_14000c030(u\"ERROR kuhl_m_crypto_extractor_ca\u2026\", *arg1)",
    "sub_140012f68(hMem, zx.q(var_108), 0)",
    "rdx_5 = LocalFree(hMem)",
    "int64_t rdx_10 = sub_14000c030(U\"\\n\", rdx_5)",
    "if ((var_110 & 0x1e00) == 0x600)",
    "int32_t var_a0",
    "int64_t rdx_11",
    "if (var_a0 == 0 || var_a0 u> 5)",
    "rdx_11 = 0",
    "rdx_11 = (&data_1400de808)[zx.q(var_a0 - 1)]",
    "rdx_10 = sub_14000c030(u\"Mode      : %s (0x%x)\\n\", rdx_11)",
    "int32_t r11_4 = 0",
    "char rax_5 = 0",
    "void var_e4",
    "void* rcx_7 = &var_e4",
    "int32_t var_84",
    "while (r11_4 u< var_84)",
    "rax_5 |= *rcx_7",
    "r11_4 += 1",
    "rcx_7 += 1",
    "if (rax_5 != 0)",
    "break",
    "if (rax_5 != 0)",
    "sub_14000c030(u\"IV        : \", rdx_10)",
    "rdx_10 = sub_14000c030(U\"\\n\", sub_140012f68(&var_e4, zx.q(var_84), 0))",
    "int32_t var_c0",
    "if (var_c0 != 0)",
    "sub_14000c030(u\"Salt      : \", rdx_10)",
    "void var_bc",
    "sub_14000c030(U\"\\n\", sub_140012f68(&var_bc, zx.q(var_c0), 0))",
    "result = zx.q(var_110) & 0x1e00",
    "if (result.d == 0x400)",
    "int32_t rax_7 = data_14014084c",
    "int32_t rdi_1",
    "if (rax_7 u>= 0x1db0)",
    "rdi_1 = (sbb.d(0x400d27a8, 0x400d27a8, rax_7 u< 0x23f0) & 0xffffffc0) + 0x1b0",
    "rdi_1 = 0x180",
    "result = var_118 ^ 0xe35a172cd96214a0",
    "*arg1 = result",
    "if (result != 0)",
    "hMem = &result_2",
    "result = sub_14000b6d8(&hMem, arg1, 8)",
    "if (result.d != 0)",
    "result = result_2",
    "if (result != 0)",
    "hMem = &result_3",
    "*arg1 = zx.q(rdi_1) + result",
    "result = sub_14000b6d8(&hMem, arg1, 8)",
    "if (result.d != 0)",
    "result = result_3",
    "*arg1 = result",
    "if (result != 0)",
    "void var_128",
    "hMem = &var_128",
    "result = sub_14000b6d8(&hMem, arg1, 0xc)",
    "if (result.d != 0)",
    "int32_t var_120",
    "int32_t rcx_17 = (var_120 + 7) u>> 3 & 7",
    "int32_t rax_10 = 8 - rcx_17",
    "if (rcx_17 != 0)",
    "rax_10 += 8",
    "uint32_t rcx_19 = ((rax_10 u>> 1) + ((var_120 + 0xf) u>> 4) + 2) * 0xa",
    "uint32_t r8_4 = zx.d(rcx_19.b)",
    "int32_t rdx_21 = rcx_19 - 0x14",
    "if (((r8_4.b - 4) & 0xf) != 0)",
    "rdx_21 += 0x10 - ((r8_4 - 4) & 0xf)",
    "result = LocalAlloc(LMEM_ZEROINIT, zx.q(rdx_21 + 0x14))",
    "hMem = result",
    "if (result != 0)",
    "int32_t rax_16",
    "int64_t rdx_24",
    "rax_16, rdx_24 = sub_14000b6d8(&hMem, arg1, zx.q(rdx_21 + 0x14))",
    "if (rax_16 != 0)",
    "sub_14000c030(u\"PrivKey   : \", rdx_24)",
    "sub_14000c030(u\"\\n!!! parts after public exponen\u2026\", sub_140012f68(hMem, zx.q(rdx_21 + 0x14), 0))",
    "return LocalFree(hMem)",
    "return result"
  ]
}