{
  "address": "0x140061998",
  "rules": [
    "decrypt data using TEA/b1609112b4574d7d84a6736fb833fd96/7a997b34591146dbbd4411d920ff141c",
    "check for kernel debugger via shared user data structure/f02b2044f10f450f9f5b2b0d5d96cef0",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/2ee106c7c5d34df799b377fb04fb2ee1",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "hash data with CRC32/7620b456d97a4aaeb63e1213270df3d4",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/14b9db6dcaf34a3e86e9217d3cc476a8",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "hash data using aphash/53c84e7b18b64c82aa36e25c45372fcd",
    "encrypt data using TEA/a99f0fb4fab7434084917883a6622883/5d37b64795ca4da78dcc19574a757de4",
    "hash data using aphash/98bdcb90423346b7a1fc9c166925c881",
    "contain loop"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8 {__saved_rbx}], rbx",
    "mov     qword [rsp+0x10 {__saved_rbp}], rbp",
    "mov     qword [rsp+0x18 {__saved_rsi}], rsi",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "sub     rsp, 0x60",
    "mov     rbp, qword [rcx]",
    "movsxd  rbx, r9d",
    "mov     rdi, rcx",
    "call    sub_1400618e8",
    "mov     rax, qword [rbp+0x20]",
    "xor     esi, esi  {0x0}",
    "movzx   eax, byte [rax+0x9]",
    "mov     r13, rbx",
    "shr     eax, 0x5",
    "not     eax",
    "and     eax, 0x1",
    "cdqe    ",
    "test    ebx, ebx",
    "jle     0x140061a1d",
    "mov     rax, qword [rbp+0x18]",
    "and     qword [rsp+0x48], 0x0",
    "and     qword [rsp+0x40 {s}], 0x0",
    "mov     ecx, dword [rax+0x80]",
    "and     dword [rsp+0x50 {var_28}], 0x0",
    "and     dword [rsp+0x58 {var_20_1}], 0x0",
    "mov     dword [rsp+0x54 {var_24_1}], ecx",
    "lea     rdx, [rel data_1400f6680]  {\"PRAGMA \"}",
    "mov     byte [rsp+0x5c {var_1c_1}], 0x0",
    "mov     rcx, rdx  {data_1400f6680, \"PRAGMA \"}",
    "mov     byte [rsp+0x5d {var_1b_1}], 0x0",
    "call    sub_140019074",
    "lea     rcx, [rsp+0x40 {s}]",
    "mov     r8d, eax",
    "call    sub_140018414",
    "mov     r8, qword [rdi+0x20]",
    "test    r8, r8",
    "je      0x140061a81",
    "mov     r12, qword [rsp+0xa0 {arg5}]",
    "lea     rbx, [rdi+rax*8+0x18]",
    "mov     rax, qword [rbp+0x20]",
    "mov     rdx, qword [rax]",
    "mov     rcx, rdx",
    "call    sub_140019074",
    "lea     rcx, [rsp+0x40 {s}]",
    "mov     r8d, eax",
    "call    sub_140018414",
    "mov     r8, qword [rdi+0x18]",
    "test    r8, r8",
    "je      0x140061ab7",
    "lea     rdx, [rel data_1400f6688]",
    "lea     rcx, [rsp+0x40 {s}]",
    "call    sub_140018888",
    "inc     rsi",
    "add     rbx, 0x8",
    "cmp     rsi, r13",
    "jl      0x1400619e6",
    "lea     rcx, [rel data_1400f38e8]",
    "mov     rdx, rax",
    "call    sub_14001874c",
    "mov     qword [rbx], rax",
    "test    rax, rax",
    "je      0x140061ace",
    "cmp     qword [rsp+0x48 {var_30}], 0x0",
    "je      0x140061ad5",
    "lea     rdx, [rel data_1400f668c]",
    "lea     rcx, [rsp+0x40 {s}]",
    "call    sub_140018888",
    "mov     rcx, qword [r12+rsi*8]",
    "mov     dl, 0x1",
    "call    sub_140031c84",
    "test    rax, rax",
    "je      0x140061a11",
    "mov     eax, 0x7",
    "jmp     0x140061b3d",
    "xor     ebx, ebx  {0x0}",
    "lea     rcx, [rsp+0x40 {s}]",
    "call    sub_1400184e8",
    "mov     rbx, rax",
    "jmp     0x140061ad7",
    "lea     r11, [rsp+0x60 {__saved_r13}]",
    "mov     rbx, qword [r11+0x20 {__saved_rbx}]",
    "mov     rbp, qword [r11+0x28 {__saved_rbp}]",
    "mov     rsi, qword [r11+0x30 {__saved_rsi}]",
    "mov     rsp, r11",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "retn     {__return_addr}",
    "and     qword [rsp+0x30 {var_48}], 0x0",
    "mov     rcx, qword [rbp+0x18]",
    "lea     rax, [rdi+0x8]",
    "mov     qword [rsp+0x28 {var_50_1}], rax",
    "and     qword [rsp+0x20 {var_58}], 0x0",
    "mov     r9d, 0x80",
    "or      r8d, 0xffffffff  {0xffffffff}",
    "mov     rdx, rbx",
    "call    sub_140062858",
    "mov     rcx, rbx",
    "mov     esi, eax",
    "call    sub_140016950",
    "test    esi, esi",
    "je      0x140061b35",
    "test    rbx, rbx",
    "je      0x140061ace",
    "mov     rcx, rdi",
    "call    sub_140061950",
    "mov     rcx, qword [rbp+0x18]",
    "call    sub_140083ee4",
    "lea     rcx, [rel data_1400f38e8]",
    "mov     rdx, rax",
    "call    sub_14001874c",
    "mov     qword [rbp+0x10], rax",
    "mov     eax, esi",
    "jmp     0x140061b3d"
  ],
  "high_level_IL": [
    "void* rbp = *arg1",
    "int64_t rbx = sx.q(arg4)",
    "int512_t zmm0 = sub_1400618e8(arg1)",
    "int64_t rsi = 0",
    "if (rbx.d s> 0)",
    "void* rbx_1 = &arg1[sx.q(not.d(zx.d(*(*(rbp + 0x20) + 9)) u>> 5) & 1) + 3]",
    "int64_t rax_6",
    "rax_6, zmm0 = sub_140031c84(*(arg5 + (rsi << 3)), 1, zmm0)",
    "if (rax_6 != 0)",
    "int64_t* rax_7",
    "rax_7, zmm0 = sub_14001874c(\"%s\", rax_6)",
    "*rbx_1 = rax_7",
    "if (rax_7 == 0)",
    "return 7",
    "rsi += 1",
    "rbx_1 += 8",
    "do while (rsi s< rbx)",
    "void* rax_8 = *(rbp + 0x18)",
    "int64_t s",
    "__builtin_memset(&s, 0, 0x14)",
    "int32_t var_20_1 = 0",
    "int32_t var_24_1 = *(rax_8 + 0x80)",
    "char var_1c_1 = 0",
    "char var_1b_1 = 0",
    "int512_t zmm0_1 = sub_140018414(&s, \"PRAGMA \", sub_140019074(\"PRAGMA \"))",
    "int64_t r8_1 = arg1[4]",
    "if (r8_1 != 0)",
    "sub_140018888(&s, \"%Q.\", r8_1, zmm0_1)",
    "int64_t rdx_2 = **(rbp + 0x20)",
    "int512_t zmm0_2 = sub_140018414(&s, rdx_2, sub_140019074(rdx_2))",
    "int64_t r8_3 = arg1[3]",
    "if (r8_3 != 0)",
    "sub_140018888(&s, \"=%Q\", r8_3, zmm0_2)",
    "int64_t var_30",
    "char* rbx_2",
    "if (var_30 == 0)",
    "rbx_2 = nullptr",
    "rbx_2 = sub_1400184e8(&s)",
    "if (rbx_2 == 0)",
    "return 7",
    "int32_t rax_14 = sub_140062858(*(rbp + 0x18), rbx_2, 0xffffffff, 0x80, nullptr, &arg1[1], 0)",
    "sub_140016950(rbx_2)",
    "if (rax_14 == 0)",
    "return sub_140061950(arg1)",
    "*(rbp + 0x10) = sub_14001874c(\"%s\", sub_140083ee4(*(rbp + 0x18)))",
    "return zx.q(rax_14)"
  ]
}