{
  "address": "0x14009bc34",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "decompress data using aPLib/88da69e00a6e49ce8c080be3a0beeb89",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "hash data with CRC32/dc8063c9cb1c41b9a5bafe66f5117ac4",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8 {__saved_rbx}], rbx",
    "mov     qword [rsp+0x10 {__saved_rbp}], rbp",
    "mov     qword [rsp+0x18 {__saved_rsi}], rsi",
    "push    rdi {__saved_rdi}",
    "sub     rsp, 0x20",
    "mov     edi, edx",
    "mov     esi, r9d",
    "mov     rbp, r8",
    "add     rdi, rcx",
    "mov     rbx, rcx",
    "cmp     rcx, rdi",
    "jae     0x14009be91",
    "mov     rbx, qword [rsp+0x30 {__saved_rbx}]",
    "mov     rbp, qword [rsp+0x38 {__saved_rbp}]",
    "mov     rsi, qword [rsp+0x40 {__saved_rsi}]",
    "xor     eax, eax  {0x0}",
    "add     rsp, 0x20",
    "pop     rdi {__saved_rdi}",
    "retn     {__return_addr}",
    "mov     r10d, dword [rbx]",
    "xor     edx, edx  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "xor     eax, eax  {0x0}",
    "lea     rcx, [rel data_1400dfe88]",
    "add     rax, rax",
    "lea     rdx, [rel data_1400dfe80]",
    "mov     rdx, qword [rdx+rax*8]",
    "test    rdx, rdx",
    "jne     0x14009bce9",
    "inc     r8d",
    "inc     rax",
    "add     rcx, 0x10",
    "cmp     r8d, 0x60",
    "jb      0x14009bc70",
    "mov     r8d, dword [rbx+0x4]",
    "lea     rax, [rdx+0xa]",
    "lea     r9, [rel data_1400e17c8]",
    "test    rax, rax",
    "lea     rcx, [rel data_140108e18]  {u\"[%04x/%x] %s\\n\"}",
    "mov     edx, r10d",
    "cmovne  r9, rax",
    "call    sub_14000c030",
    "cmp     dword [rbx+0x8], 0x0",
    "je      0x14009be80",
    "lea     eax, [r10-0x24]",
    "cmp     eax, 0x1a",
    "ja      0x14009bcac",
    "cmp     dword [rcx], r10d",
    "je      0x14009bc87",
    "jmp     0x14009bc9a",
    "mov     eax, dword [rbx+0x8]",
    "lea     rbx, [rbx+rax+0xc]",
    "cmp     rbx, rdi",
    "jb      0x14009bc5f",
    "lea     rcx, [rel data_140108e34]",
    "call    sub_14000c030",
    "cmp     dword [rbx], 0x2",
    "je      0x14009bda8",
    "cmp     r10d, 0x3f",
    "jne     0x14009bcbb",
    "lea     rdx, [rel data_1400e6908]  {u\"CERT_unk_future_use\"}",
    "jmp     0x14009bce9",
    "lea     rcx, [rel data_140108e40]  {u\"Provider info:\\n\"}",
    "call    sub_14000c030",
    "cmp     dword [rbx+0xc], 0x0",
    "je      0x14009bdce",
    "cmp     dword [rbx], 0xb",
    "je      0x14009bd8d",
    "lea     eax, [r10-0x74]",
    "cmp     eax, 0x7f8b",
    "ja      0x14009bccf",
    "lea     rdx, [rel data_1400e6930]  {u\"CERT_unk_63_maybe_future_use\"}",
    "jmp     0x14009bce9",
    "cmp     dword [rbx+0x10], 0x0",
    "je      0x14009bde8",
    "mov     eax, dword [rbx+0xc]",
    "lea     rcx, [rel data_140108298]  {u\"\\tKey Container  : %s\\n\"}",
    "lea     rdx, [rax+rbx+0xc]",
    "call    sub_14000c030",
    "mov     edx, dword [rbx+0x8]",
    "lea     r8, [rbx+0xc]",
    "lea     rcx, [rel data_140103208]  {u\"%.*s\"}",
    "shr     rdx, 0x1",
    "call    sub_14000c030",
    "jmp     0x14009be74",
    "cmp     dword [rbx], 0x1f",
    "jbe     0x14009bd79",
    "lea     eax, [r10-0x8000]",
    "lea     rcx, [rel data_1400e69a0]  {u\"CERT_user_prop_id\"}",
    "cmp     eax, 0x7fff",
    "cmova   rcx, rdx",
    "mov     rdx, rcx",
    "lea     rdx, [rel data_1400e6970]  {u\"CERT_reserved_prop_id\"}",
    "jmp     0x14009bce9",
    "mov     r8d, dword [rbx+0x14]",
    "mov     ecx, r8d",
    "call    sub_140005658",
    "lea     rdx, [rel data_1400e17c8]",
    "lea     rcx, [rel data_140108e90]  {u\"\\tProvider type  : %s (%u)\\n\"}",
    "test    rax, rax",
    "cmovne  rdx, rax",
    "call    sub_14000c030",
    "mov     r8d, dword [rbx+0x24]",
    "cmp     r8d, 0x1",
    "je      0x14009be3f",
    "mov     eax, dword [rbx+0x10]",
    "lea     rcx, [rel data_140108e60]  {u\"\\tProvider       : %s\\n\"}",
    "lea     rdx, [rax+rbx+0xc]",
    "call    sub_14000c030",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "mov     edx, dword [rbx+0x8]",
    "lea     rcx, [rbx+0xc]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "jmp     0x14009be74",
    "cmp     dword [rbx], 0x23",
    "jbe     0x14009bd66",
    "lea     rdx, [rel data_1400e68b8]  {u\"AT_KEYEXCHANGE\"}",
    "cmp     r8d, 0x2",
    "je      0x14009be36",
    "mov     r8d, esi",
    "mov     rdx, rbp",
    "mov     rcx, rbx",
    "call    sub_14009bfe4",
    "jmp     0x14009be74",
    "cmp     dword [rbx], 0x4b",
    "je      0x14009bd8d",
    "lea     rdx, [rel data_1400e68d8]  {u\"AT_SIGNATURE\"}",
    "jmp     0x14009be46",
    "lea     rdx, [rel data_1400e17c8]",
    "lea     rax, [rel data_1400e68f8]",
    "cmp     r8d, 0xffffffff",
    "cmove   rdx, rax  {data_1400e68f8, u\"CNG Key\"}",
    "jmp     0x14009be46",
    "cmp     dword [rbx], 0x65",
    "je      0x14009bd8d",
    "lea     rcx, [rel data_1401078e0]  {u\"\\tType           : %s (0x%08x)\\n\"}",
    "call    sub_14000c030",
    "mov     edx, dword [rbx+0x18]",
    "lea     rcx, [rel data_140108ec8]  {u\"\\tFlags          : %08x\\n\"}",
    "call    sub_14000c030",
    "mov     r8d, dword [rbx+0x20]",
    "mov     edx, dword [rbx+0x1c]",
    "lea     rcx, [rel data_140108ef8]  {u\"\\tParam (todo)   : %08x / %08x\\n\"}",
    "call    sub_14000c030",
    "cmp     dword [rbx], 0x76",
    "jne     0x14009bd79",
    "lea     rcx, [rbx+0xc]",
    "xor     r8d, r8d  {0x0}",
    "xor     edx, edx  {0x0}",
    "call    sub_1400c52e4",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "jmp     0x14009be74"
  ],
  "high_level_IL": [
    "void* rdi_1 = zx.q(arg2) + arg1",
    "int32_t* rbx = arg1",
    "if (arg1 u< rdi_1)",
    "while (true)",
    "int32_t r10_1 = *rbx",
    "int32_t r8 = 0",
    "int64_t rax_1 = 0",
    "void* const rcx = &data_1400dfe88",
    "while (true)",
    "if (*rcx == r10_1)",
    "if ((&data_1400dfe80)[rax_1 * 2] != 0)",
    "break",
    "r8 += 1",
    "rax_1 += 1",
    "rcx += 0x10",
    "if (r8 u< 0x60)",
    "continue",
    "if (r10_1 - 0x24 u<= 0x1a)",
    "break",
    "break",
    "rbx[1]",
    "int64_t rdx_2 = sub_14000c030(u\"[%04x/%x] %s\\n\", zx.q(r10_1))",
    "if (rbx[2] != 0)",
    "int64_t rdx_3 = sub_14000c030(u\"  \", rdx_2)",
    "int64_t rdx_5",
    "if (*rbx == 2)",
    "sub_14000c030(u\"Provider info:\\n\", rdx_3)",
    "if (rbx[3] != 0)",
    "sub_14000c030(u\"\\tKey Container  : %s\\n\", zx.q(rbx[3]) + rbx + 0xc)",
    "if (rbx[4] != 0)",
    "sub_14000c030(u\"\\tProvider       : %s\\n\", zx.q(rbx[4]) + rbx + 0xc)",
    "void* rax_9 = sub_140005658(rbx[5])",
    "void* const rdx_12 = &data_1400e17c8",
    "if (rax_9 != 0)",
    "rdx_12 = rax_9",
    "sub_14000c030(u\"\\tProvider type  : %s (%u)\\n\", rdx_12)",
    "int32_t r8_5 = rbx[9]",
    "void* const rdx_13",
    "if (r8_5 == 1)",
    "rdx_13 = u\"AT_KEYEXCHANGE\"",
    "if (r8_5 == 2)",
    "rdx_13 = u\"AT_SIGNATURE\"",
    "rdx_13 = &data_1400e17c8",
    "if (r8_5 == 0xffffffff)",
    "rdx_13 = u\"CNG Key\"",
    "sub_14000c030(u\"\\tType           : %s (0x%08x)\\n\", rdx_13)",
    "sub_14000c030(u\"\\tFlags          : %08x\\n\", zx.q(rbx[6]))",
    "rbx[8]",
    "rdx_5 = sub_14000c030(u\"\\tParam (todo)   : %08x / %08x\\n\", zx.q(rbx[7]))",
    "if (*rbx == 0xb)",
    "rdx_5 = sub_14000c030(u\"%.*s\", zx.q(rbx[2]) u>> 1)",
    "if (*rbx u<= 0x1f)",
    "rdx_5 = sub_140012f68(&rbx[3], zx.q(rbx[2]), 0)",
    "if (*rbx u<= 0x23)",
    "rdx_5 = sub_14009bfe4(rbx, arg3, arg4)",
    "if (*rbx == 0x4b || *rbx == 0x65)",
    "rdx_5 = sub_14000c030(u\"%.*s\", zx.q(rbx[2]) u>> 1)",
    "if (*rbx != 0x76)",
    "rdx_5 = sub_140012f68(&rbx[3], zx.q(rbx[2]), 0)",
    "rdx_5 = sub_14000c030(U\"\\n\", sub_1400c52e4(&rbx[3], nullptr, nullptr))",
    "sub_14000c030(U\"\\n\", rdx_5)",
    "rbx = rbx + zx.q(rbx[2]) + 0xc",
    "if (rbx u>= rdi_1)",
    "break",
    "return 0"
  ]
}