{
  "address": "0x1400bf4a0",
  "rules": [
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "contain loop",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8 {__saved_rbx}], rbx",
    "mov     qword [rsp+0x10 {__saved_rsi}], rsi",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "sub     rsp, 0x30",
    "and     qword [rsp+0x68 {arg_20}], 0x0",
    "mov     rbx, r8",
    "mov     edi, edx",
    "lea     r12, [rel data_1400e17cc]",
    "lea     rcx, [rel data_14012aa28]  {u\"%*s[OP_CERT_PART]\"}",
    "mov     edx, 0x10",
    "mov     r8, r12  {data_1400e17cc}",
    "call    sub_14000c030",
    "test    edi, edi",
    "je      0x1400bf6ab",
    "lea     rcx, [rel data_140129f40]  {u\" <empty>\\n\"}",
    "call    sub_14000c030",
    "test    rbx, rbx",
    "je      0x1400bf6ab",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "lea     r9, [rel sub_1400124d4]",
    "lea     r8, [rsp+0x68 {arg_20}]",
    "mov     edx, edi",
    "mov     rcx, rbx",
    "call    sub_140010970",
    "test    eax, eax",
    "je      0x1400bf6b7",
    "mov     rbx, qword [rsp+0x50 {__saved_rbx}]",
    "mov     rsi, qword [rsp+0x58 {__saved_rsi}]",
    "add     rsp, 0x30",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "retn     {__return_addr}",
    "mov     rax, qword [rsp+0x68 {arg_20}]",
    "mov     r13d, 0x12",
    "lea     rcx, [rel data_14012aa50]  {u\"%*scPfxStores: %u\\n\"}",
    "mov     r9d, dword [rax]",
    "mov     r8, r12  {data_1400e17cc}",
    "mov     edx, r13d  {0x12}",
    "call    sub_14000c030",
    "mov     rax, qword [rsp+0x68 {arg_20}]",
    "xor     ebx, ebx  {0x0}",
    "cmp     dword [rax], ebx",
    "jbe     0x1400bf578",
    "mov     r9d, dword [rax+0x10]",
    "lea     rcx, [rel data_14012aaa0]  {u\"%*scSstStores: %u\\n\"}",
    "mov     r8, r12  {data_1400e17cc}",
    "mov     edx, r13d  {0x12}",
    "call    sub_14000c030",
    "mov     r9, qword [rsp+0x68 {arg_20}]",
    "xor     edi, edi  {0x0}",
    "cmp     dword [r9+0x10], edi",
    "jbe     0x1400bf67a",
    "lea     rcx, [rel data_14012aa78]  {u\"%*s[%u] PfxStore\\n\"}",
    "mov     r9d, ebx",
    "mov     r8, r12  {data_1400e17cc}",
    "mov     edx, r13d  {0x12}",
    "call    sub_14000c030",
    "mov     rax, qword [rsp+0x68 {arg_20}]",
    "mov     edx, ebx",
    "imul    rdx, rdx, 0x38",
    "add     rdx, qword [rax+0x8]",
    "mov     ecx, 0xa",
    "call    sub_1400bf6cc",
    "mov     rax, qword [rsp+0x68 {arg_20}]",
    "inc     ebx",
    "cmp     ebx, dword [rax]",
    "jb      0x1400bf53f",
    "mov     eax, dword [r9+0x20]",
    "mov     r9, qword [r9+0x28]",
    "lea     rcx, [rel data_14012a698]  {u\"%*sExtension: 0x%p (%u)\\n\"}",
    "mov     r8, r12  {data_1400e17cc}",
    "mov     edx, r13d  {0x12}",
    "mov     dword [rsp+0x20 {var_28_1}], eax",
    "call    sub_14000c030",
    "lea     rdx, [rel sub_1400124fc]",
    "lea     rcx, [rsp+0x68 {arg_20}]",
    "call    sub_140010a8c",
    "jmp     0x1400bf6b7",
    "xor     ebx, ebx  {0x0}",
    "add     rax, rax",
    "lea     r11, [rel data_1400df940]",
    "mov     r11, qword [r11+rax*8]",
    "add     r11, 0x24",
    "inc     edx",
    "inc     rax",
    "add     rcx, 0x10",
    "cmp     edx, 0x8",
    "jb      0x1400bf5e9",
    "lea     rcx, [rel data_14012aac8]  {u\"%*s[%u] SstStore\\n\"}",
    "mov     r9d, edi",
    "mov     r8, r12  {data_1400e17cc}",
    "mov     edx, r13d  {0x12}",
    "call    sub_14000c030",
    "mov     r11, qword [rsp+0x68 {arg_20}]",
    "lea     rcx, [rel data_14012ace0]  {u\"%*s[OP_CERT_SST_STORE]\\n\"}",
    "mov     rsi, qword [r11+0x18]",
    "mov     r8, r12  {data_1400e17cc}",
    "mov     edx, 0x14",
    "call    sub_14000c030",
    "mov     r9d, dword [rbx+rsi]",
    "xor     edx, edx  {0x0}",
    "xor     eax, eax  {0x0}",
    "lea     r11, [rel data_1400e17c8]",
    "lea     rcx, [rel data_1400df948]",
    "cmp     dword [rcx], r9d",
    "je      0x1400bf5fe",
    "jmp     0x1400bf610",
    "lea     rcx, [rel data_14012ad10]  {u\"%*sStoreLocation: 0x%08x (%s)\\n\"}",
    "mov     r8, r12  {data_1400e17cc}",
    "mov     edx, 0x16",
    "mov     qword [rsp+0x20 {var_28}], r11",
    "call    sub_14000c030",
    "mov     r9, qword [rbx+rsi+0x8]",
    "lea     rcx, [rel data_14012ad50]  {u\"%*spStoreName   : %s\\n\"}",
    "mov     r8, r12  {data_1400e17cc}",
    "mov     edx, 0x16",
    "call    sub_14000c030",
    "mov     r11d, dword [rbx+rsi+0x10]",
    "mov     r9, qword [rbx+rsi+0x18]",
    "lea     rcx, [rel data_14012ad80]  {u\"%*ssst          : %p (%u)\\n\"}",
    "mov     r8, r12  {data_1400e17cc}",
    "mov     edx, 0x16",
    "mov     dword [rsp+0x20 {var_28}], r11d",
    "call    sub_14000c030",
    "mov     r9, qword [rsp+0x68 {arg_20}]",
    "inc     edi",
    "add     rbx, 0x20",
    "cmp     edi, dword [r9+0x10]",
    "jb      0x1400bf5a1"
  ],
  "high_level_IL": [
    "arg_20 = nullptr",
    "int64_t rdx = sub_14000c030(u\"%*s[OP_CERT_PART]\", 0x10)",
    "if (arg2 == 0 || arg3 == 0)",
    "return sub_14000c030(u\" <empty>\\n\", rdx)",
    "sub_14000c030(U\"\\n\", rdx)",
    "int32_t result = sub_140010970(arg3, arg2, &arg_20, sub_1400124d4)",
    "if (result == 0)",
    "return result",
    "*arg_20",
    "sub_14000c030(u\"%*scPfxStores: %u\\n\", 0x12)",
    "int32_t* rax_1 = arg_20",
    "int32_t i = 0",
    "if (*rax_1 u> 0)",
    "sub_14000c030(u\"%*s[%u] PfxStore\\n\", 0x12)",
    "sub_1400bf6cc(0xa, zx.q(i) * 0x38 + *(arg_20 + 8))",
    "rax_1 = arg_20",
    "i += 1",
    "do while (i u< *rax_1)",
    "rax_1[4]",
    "sub_14000c030(u\"%*scSstStores: %u\\n\", 0x12)",
    "int32_t* r9_4 = arg_20",
    "int32_t i_1 = 0",
    "if (r9_4[4] u> 0)",
    "int32_t* rbx_1 = nullptr",
    "sub_14000c030(u\"%*s[%u] SstStore\\n\", 0x12)",
    "int64_t rsi_1 = *(arg_20 + 0x18)",
    "sub_14000c030(u\"%*s[OP_CERT_SST_STORE]\\n\", 0x14)",
    "int32_t j = 0",
    "int64_t rax_3 = 0",
    "void* const r11_2 = &data_1400e17c8",
    "void* const rcx_1 = &data_1400df948",
    "if (*rcx_1 == *(rbx_1 + rsi_1))",
    "r11_2 = &(*(&data_1400df940)[rax_3 * 2])[0x12]",
    "break",
    "j += 1",
    "rax_3 += 1",
    "rcx_1 += 0x10",
    "do while (j u< 8)",
    "int32_t var_28",
    "var_28.q = r11_2",
    "sub_14000c030(u\"%*sStoreLocation: 0x%08x (%s)\\n\", 0x16)",
    "*(rbx_1 + rsi_1 + 8)",
    "sub_14000c030(u\"%*spStoreName   : %s\\n\", 0x16)",
    "*(rbx_1 + rsi_1 + 0x18)",
    "var_28 = *(rbx_1 + rsi_1 + 0x10)",
    "sub_14000c030(u\"%*ssst          : %p (%u)\\n\", 0x16)",
    "r9_4 = arg_20",
    "i_1 += 1",
    "rbx_1 = &rbx_1[8]",
    "do while (i_1 u< r9_4[4])",
    "*(r9_4 + 0x28)",
    "int32_t var_28_1 = r9_4[8]",
    "sub_14000c030(u\"%*sExtension: 0x%p (%u)\\n\", 0x12)",
    "return sub_140010a8c(&arg_20, sub_1400124fc)"
  ]
}