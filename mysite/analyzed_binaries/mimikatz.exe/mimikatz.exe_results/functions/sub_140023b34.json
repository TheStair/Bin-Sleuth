{
  "address": "0x140023b34",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "check for kernel debugger via shared user data structure/f02b2044f10f450f9f5b2b0d5d96cef0",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "hash data with CRC32/7620b456d97a4aaeb63e1213270df3d4",
    "encrypt data using chaskey/7025f739e4b341df894563ee3ec22dfd",
    "empty recycle bin quietly/a401764de4c44240956dc7f3c78baebd",
    "hash data using aphash/53c84e7b18b64c82aa36e25c45372fcd",
    "decompress data using aPLib/a5c76dae137d4aaa9aade786acafaa41"
  ],
  "disassembly": [
    "push    rbx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x68",
    "movzx   ebp, byte [rcx+0x41]",
    "xor     esi, esi",
    "xor     r14d, r14d",
    "inc     ebp",
    "mov     rbx, rcx",
    "mov     dword [rsp+0xb0], esi",
    "mov     dword [rsp+0xb8], r14d",
    "lea     r12d, [rsi+0x3]",
    "lea     r13d, [rsi+0xa]",
    "mov     dword [rsp+0x30], ebp",
    "cmp     byte [rcx+0x3f], sil",
    "jne     0x140023b93",
    "cmp     byte [rbx+0x3f], sil",
    "jne     0x140023bcb",
    "mov     rcx, qword [rcx+0x8]",
    "mov     r8d, r12d",
    "mov     r9d, r13d",
    "mov     rax, qword [rcx]",
    "sub     r8d, ebp",
    "mov     edx, ebp",
    "call    qword [rax+0x70]",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x140023e2d",
    "xor     edx, edx",
    "lea     rcx, [rbx+0x48]",
    "lea     r8d, [rdx+0x30]",
    "call    memset",
    "mov     rcx, qword [rbx+0x10]",
    "lea     rdx, [rsp+0x38]",
    "mov     rax, qword [rcx]",
    "call    qword [rax+0x30]",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x140023df1",
    "mov     rcx, qword [rbx+0x8]",
    "mov     edx, 0x4",
    "mov     r9d, r13d",
    "mov     rax, qword [rcx]",
    "mov     r8d, edx",
    "call    qword [rax+0x70]",
    "mov     edi, eax",
    "test    eax, eax",
    "je      0x140023bcb",
    "mov     eax, edi",
    "add     rsp, 0x68",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "pop     rbx",
    "retn    ",
    "cmp     byte [rbx+0x3f], 0x0",
    "jne     0x140023e2d",
    "lea     r13d, [rax+0x20]",
    "cmp     qword [rsp+0x38], r13",
    "jle     0x140023d83",
    "cmp     byte [rbx+0x3f], sil",
    "jne     0x140023e2d",
    "mov     rcx, qword [rbx+0x8]",
    "sub     r12d, ebp",
    "mov     r9d, 0x9",
    "mov     rax, qword [rcx]",
    "mov     r8d, r12d",
    "mov     edx, ebp",
    "call    qword [rax+0x70]",
    "cmp     byte [rbx+0x3f], 0x0",
    "jne     0x140023e2d",
    "test    edi, edi",
    "jne     0x140023df1",
    "mov     rcx, qword [rbx+0x10]",
    "lea     rdx, [rsp+0x40]",
    "xor     r9d, r9d",
    "mov     rax, qword [rcx]",
    "mov     r8d, r13d",
    "call    qword [rax+0x10]",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x140023df1",
    "sub     r12d, ebp",
    "mov     edx, ebp",
    "mov     r8d, r12d",
    "jmp     0x140023e1d",
    "mov     edx, 0x4",
    "mov     r8d, edx",
    "mov     rcx, rbx",
    "mov     dword [rbx+0x60], esi",
    "mov     dword [rbx+0x64], r14d",
    "call    sub_14002363c",
    "mov     r11, qword [rbx+0x30]",
    "mov     rcx, qword [r11]",
    "mov     dword [rcx+0x60], edi",
    "mov     eax, dword [rbx+0x58]",
    "lea     rdx, [rcx+0x68]",
    "mov     dword [rcx+0x80], eax",
    "mov     dword [rcx+0x64], edi",
    "lea     ecx, [rdi+0x4]",
    "mov     rax, rdx",
    "movzx   eax, byte [rsp+0x42]",
    "movzx   edx, byte [rsp+0x41]",
    "movzx   esi, byte [rsp+0x49]",
    "shl     edx, 0x8",
    "shl     esi, 0x8",
    "or      edx, eax",
    "movzx   eax, byte [rsp+0x40]",
    "shl     eax, 0x18",
    "shl     edx, 0x8",
    "or      edx, eax",
    "movzx   eax, byte [rsp+0x43]",
    "or      edx, eax",
    "movzx   eax, byte [rsp+0x4a]",
    "or      esi, eax",
    "movzx   eax, byte [rsp+0x48]",
    "shl     eax, 0x18",
    "shl     esi, 0x8",
    "or      esi, eax",
    "movzx   eax, byte [rsp+0x4b]",
    "or      esi, eax",
    "mov     eax, edx",
    "and     eax, 0xfffffffe",
    "cmp     eax, 0x377f0682",
    "jne     0x140023d80",
    "mov     rcx, qword [rbx+0x8]",
    "mov     r9d, 0x9",
    "mov     rax, qword [rcx]",
    "call    qword [rax+0x70]",
    "mov     dword [rax], 0xffffffff",
    "add     rax, 0x4",
    "sub     rcx, 0x1",
    "jne     0x140023db6",
    "mov     eax, dword [rbx+0x58]",
    "test    eax, eax",
    "je      0x140023dcf",
    "mov     esi, r14d",
    "lea     eax, [rsi-0x1]",
    "test    esi, eax",
    "jne     0x140023d80",
    "cmp     dword [rbx+0x5c], 0x0",
    "je      0x140023df1",
    "mov     dword [rdx], eax",
    "lea     eax, [rsi-0x200]",
    "cmp     eax, 0xfe00",
    "ja      0x140023d80",
    "mov     r9, qword [rbx+0x80]",
    "mov     r8d, dword [rbx+0x58]",
    "lea     rdx, [rel data_1400f3c10]  {\"recovered %d frames from WAL fil\u2026\"}",
    "mov     ecx, 0x11b",
    "call    sub_1400187fc",
    "movzx   eax, byte [rsp+0x4e]",
    "movzx   ecx, byte [rsp+0x4d]",
    "and     dl, 0x1",
    "shl     ecx, 0x8",
    "mov     byte [rbx+0x55], dl",
    "lea     r15, [rbx+0x60]",
    "or      ecx, eax",
    "movzx   eax, byte [rsp+0x4c]",
    "lea     r8d, [r13-0x8]",
    "shl     ecx, 0x8",
    "shl     eax, 0x18",
    "mov     dword [rbx+0x38], esi",
    "or      ecx, eax",
    "movzx   eax, byte [rsp+0x4f]",
    "mov     qword [rsp+0x20], r15",
    "or      ecx, eax",
    "mov     rax, qword [rsp+0x50]",
    "mov     dword [rbx+0x88], ecx",
    "xor     ecx, ecx",
    "test    dl, dl",
    "sete    cl",
    "lea     rdx, [rsp+0x40]",
    "xor     r9d, r9d",
    "mov     qword [rbx+0x68], rax",
    "call    sub_140023588",
    "movzx   eax, byte [rsp+0x5a]",
    "movzx   r11d, byte [rsp+0x59]",
    "shl     r11d, 0x8",
    "or      r11d, eax",
    "movzx   eax, byte [rsp+0x58]",
    "shl     eax, 0x18",
    "shl     r11d, 0x8",
    "or      r11d, eax",
    "movzx   eax, byte [rsp+0x5b]",
    "or      r11d, eax",
    "cmp     dword [r15], r11d",
    "jne     0x140023d80",
    "movzx   eax, byte [rsp+0x5e]",
    "movzx   ecx, byte [rsp+0x5d]",
    "shl     ecx, 0x8",
    "or      ecx, eax",
    "movzx   eax, byte [rsp+0x5c]",
    "shl     eax, 0x18",
    "shl     ecx, 0x8",
    "or      ecx, eax",
    "movzx   eax, byte [rsp+0x5f]",
    "or      ecx, eax",
    "cmp     dword [rbx+0x64], ecx",
    "jne     0x140023d80",
    "movzx   eax, byte [rsp+0x46]",
    "movzx   ecx, byte [rsp+0x45]",
    "shl     ecx, 0x8",
    "or      ecx, eax",
    "movzx   eax, byte [rsp+0x44]",
    "shl     eax, 0x18",
    "shl     ecx, 0x8",
    "or      ecx, eax",
    "movzx   eax, byte [rsp+0x47]",
    "or      ecx, eax",
    "cmp     ecx, 0x2de218",
    "je      0x140023e40",
    "lea     eax, [rsi+0x18]",
    "movsxd  r15, eax",
    "mov     rcx, r15",
    "call    sub_1400168d8",
    "mov     r14, rax",
    "test    rax, rax",
    "jne     0x140023e5b",
    "mov     ecx, 0xe965",
    "call    sub_140084ea8",
    "mov     edi, eax",
    "and     dword [rsp+0xc0], 0x0",
    "lea     rax, [r15+0x20]",
    "cmp     rax, qword [rsp+0x38]",
    "jg      0x140023f28",
    "lea     edi, [rax+0x7]",
    "jmp     0x140023df1",
    "mov     rcx, r14",
    "call    sub_140016950",
    "mov     esi, dword [rsp+0xb0]",
    "mov     r14d, dword [rsp+0xb8]",
    "jmp     0x140023d83",
    "mov     ebp, dword [rsp+0xc0]",
    "mov     ebp, dword [rsp+0x30]",
    "lea     r9, [r14+0x18]",
    "lea     r8, [rsp+0xc8]",
    "lea     rdx, [rsp+0xc0]",
    "mov     rcx, rbx",
    "mov     qword [rsp+0x20], r14",
    "call    sub_1400237e4",
    "test    eax, eax",
    "je      0x140023f24",
    "mov     r8d, dword [rsp+0xc0]",
    "mov     edx, ebp",
    "mov     rcx, rbx",
    "call    sub_140023a34",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x140023f24",
    "mov     eax, dword [rsp+0xc8]",
    "test    eax, eax",
    "je      0x140023f12",
    "add     r13, r15",
    "lea     rax, [r15+r13]",
    "cmp     rax, qword [rsp+0x38]",
    "jle     0x140023e79",
    "mov     dword [rbx+0x5c], eax",
    "movzx   eax, si",
    "mov     ecx, esi",
    "sar     ecx, 0x10",
    "mov     edx, 0xff00",
    "mov     dword [rbx+0x58], ebp",
    "and     ax, dx",
    "or      cx, ax",
    "mov     eax, dword [rbx+0x60]",
    "mov     word [rbx+0x56], cx",
    "mov     ecx, dword [rbx+0x64]",
    "mov     dword [rsp+0xb0], eax",
    "mov     dword [rsp+0xb8], ecx",
    "mov     rcx, qword [rbx+0x10]",
    "lea     r8d, [rsi+0x18]",
    "mov     r9, r13",
    "mov     rax, qword [rcx]",
    "mov     rdx, r14",
    "inc     ebp",
    "call    qword [rax+0x10]",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x140023f24"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}