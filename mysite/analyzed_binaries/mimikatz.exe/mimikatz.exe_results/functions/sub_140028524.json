{
  "address": "0x140028524",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "hash data using murmur3/aeb1a4346751469b809f4261bcfbbb07/dbb00f9448c04dc1b720ac16935c1891",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "encrypt data using chaskey/7025f739e4b341df894563ee3ec22dfd",
    "decompress data using aPLib/a5c76dae137d4aaa9aade786acafaa41",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "mov     qword [rsp+0x10], rbp",
    "mov     qword [rsp+0x18], rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "sub     rsp, 0x20",
    "mov     al, byte [rcx+0x10]",
    "mov     rbx, qword [rcx+0x8]",
    "xor     edi, edi",
    "mov     r13, r8",
    "mov     esi, edx",
    "mov     rbp, rcx",
    "cmp     al, 0x2",
    "je      0x1400286d3",
    "test    r13, r13",
    "je      0x140028703",
    "lea     r12d, [rdi+0x1]",
    "cmp     al, r12b",
    "jne     0x140028566",
    "test    esi, esi",
    "je      0x14002872d",
    "mov     rax, qword [rbx+0x18]",
    "mov     rcx, qword [rax+0x50]",
    "movzx   eax, byte [rcx+0x2a]",
    "movzx   edx, byte [rcx+0x29]",
    "shl     edx, 0x8",
    "or      edx, eax",
    "movzx   eax, byte [rcx+0x28]",
    "shl     eax, 0x18",
    "shl     edx, 0x8",
    "or      edx, eax",
    "movzx   eax, byte [rcx+0x2b]",
    "or      edx, eax",
    "mov     dword [r13], edx",
    "mov     rax, qword [rcx]",
    "mov     ecx, dword [rax+0x30]",
    "bt      rcx, 0x19",
    "jae     0x140028585",
    "test    edx, edx",
    "je      0x1400286d3",
    "mov     rbx, qword [rsp+0x40]",
    "mov     rbp, qword [rsp+0x48]",
    "mov     rsi, qword [rsp+0x50]",
    "mov     eax, edi",
    "add     rsp, 0x20",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "retn    ",
    "mov     rax, qword [rbp]",
    "mov     rcx, qword [rbx]",
    "mov     edx, dword [rax+0x27c]",
    "cmp     edx, dword [rcx+0x80]",
    "jle     0x14002872b",
    "movzx   eax, word [rbx+0x26]",
    "test    r12b, al",
    "je      0x14002859c",
    "mov     rax, qword [rbx]",
    "cmp     byte [rax+0x12], dil",
    "jne     0x140028585",
    "xor     edi, edi",
    "cmp     byte [rcx+0xa], 0x0",
    "je      0x14002872b",
    "mov     ecx, 0xffef",
    "and     ax, cx",
    "mov     word [rbx+0x26], ax",
    "cmp     dword [rbx+0x3c], edi",
    "jne     0x1400285b5",
    "test    edx, edx",
    "je      0x14002859c",
    "mov     eax, 0xfffe",
    "and     word [rbx+0x26], ax",
    "call    sub_140022dc0",
    "mov     edi, eax",
    "jmp     0x14002872d",
    "cmp     qword [rbx+0x18], 0x0",
    "jne     0x1400285ca",
    "or      ax, 0x10",
    "mov     word [rbx+0x26], ax",
    "mov     edi, 0x8",
    "jmp     0x14002872d",
    "test    edi, edi",
    "jne     0x140028626",
    "mov     rcx, rbx",
    "call    sub_1400280b8",
    "mov     edi, eax",
    "test    eax, eax",
    "je      0x1400285b5",
    "mov     rcx, rbx",
    "call    sub_140028404",
    "test    esi, esi",
    "je      0x14002862e",
    "test    edi, edi",
    "jne     0x14002872d",
    "cmp     byte [rbx+0x24], 0x0",
    "jne     0x14002864a",
    "cmp     dil, 0x5",
    "jne     0x14002864a",
    "test    byte [rbx+0x26], r12b",
    "je      0x1400285df",
    "cmp     byte [rbp+0x10], dil",
    "jne     0x14002865c",
    "mov     rcx, rbx",
    "call    sub_140027a28",
    "test    eax, eax",
    "jne     0x1400285b5",
    "mov     rax, qword [rbp]",
    "mov     rcx, qword [rbx]",
    "xor     r8d, r8d",
    "cmp     byte [rax+0x60], 0x2",
    "sete    r8b",
    "xor     edx, edx",
    "cmp     esi, r12d",
    "setg    dl",
    "call    sub_1400225d4",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x140028610",
    "mov     edi, 0x8",
    "jmp     0x140028626",
    "test    esi, esi",
    "setne   al",
    "add     al, r12b",
    "mov     byte [rbp+0x10], al",
    "cmp     al, byte [rbx+0x24]",
    "jbe     0x14002866f",
    "add     dword [rbx+0x38], r12d",
    "cmp     eax, 0x205",
    "jne     0x140028622",
    "mov     rcx, rbx",
    "call    sub_14002843c",
    "mov     edi, eax",
    "jmp     0x140028622",
    "test    esi, esi",
    "je      0x1400286d3",
    "mov     byte [rbx+0x24], al",
    "test    edi, edi",
    "je      0x14002862e",
    "cmp     byte [rbx+0x24], 0x0",
    "jne     0x140028626",
    "mov     r12, qword [rbx+0x18]",
    "mov     rdx, qword [r12+0x50]",
    "movzx   eax, byte [rdx+0x1e]",
    "movzx   ecx, byte [rdx+0x1d]",
    "shl     ecx, 0x8",
    "or      ecx, eax",
    "movzx   eax, byte [rdx+0x1c]",
    "shl     eax, 0x18",
    "shl     ecx, 0x8",
    "or      ecx, eax",
    "movzx   eax, byte [rdx+0x1f]",
    "or      ecx, eax",
    "cmp     dword [rbx+0x3c], ecx",
    "je      0x1400286d3",
    "mov     edi, 0x5",
    "mov     rcx, qword [r12+0x70]",
    "call    sub_140022a44",
    "mov     edi, eax",
    "test    eax, eax",
    "jne     0x14002872d",
    "mov     edx, dword [rbx+0x3c]",
    "mov     rcx, qword [r12+0x50]",
    "mov     eax, edx",
    "mov     byte [rcx+0x1f], dl",
    "shr     eax, 0x18",
    "mov     byte [rcx+0x1c], al",
    "mov     eax, edx",
    "shr     eax, 0x10",
    "mov     byte [rcx+0x1d], al",
    "mov     eax, edx",
    "shr     eax, 0x8",
    "mov     byte [rcx+0x1e], al"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}