{
  "address": "0x1400af324",
  "rules": [
    "encode data using XOR",
    "hash data with CRC32/7620b456d97a4aaeb63e1213270df3d4",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "inject pe/0fa951270c554b5eb43a556aa3ef2963",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/0d7bc900a8ea48098fc469578ae14b88",
    "contain loop",
    "encrypt data using TEA/a99f0fb4fab7434084917883a6622883/6cf0dbdc06cf4e518b05ed91d6a55995",
    "hash data using murmur3/aeb1a4346751469b809f4261bcfbbb07/dbb00f9448c04dc1b720ac16935c1891",
    "hash data using murmur3/aeb1a4346751469b809f4261bcfbbb07/78dd62a826fd49a8adcf1437b7124536",
    "decrypt data using TEA/b1609112b4574d7d84a6736fb833fd96/bfe99336573d4b5189dbca2cbd3ed1f2",
    "validate payment card number using luhn algorithm with lookup table/5e9acea40b204a02abcbd59151126b4e",
    "encrypt data using HC-128/86aaff13b46c4951b9ca4e0a9171c391",
    "check for kernel debugger via shared user data structure/f02b2044f10f450f9f5b2b0d5d96cef0",
    "hash data using aphash/53c84e7b18b64c82aa36e25c45372fcd",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/b698edc3bfd142ebb8f43c55408819b5",
    "encrypt data using TEA/a99f0fb4fab7434084917883a6622883/5d37b64795ca4da78dcc19574a757de4",
    "hash data using aphash/98bdcb90423346b7a1fc9c166925c881",
    "decompress data using aPLib/a5c76dae137d4aaa9aade786acafaa41",
    "decrypt data using TEA/b1609112b4574d7d84a6736fb833fd96/7a997b34591146dbbd4411d920ff141c",
    "hash data using aphash/c01783ca846f48c3a4751b50c0c12749",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/14b9db6dcaf34a3e86e9217d3cc476a8",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/a3c4a1cc0982489686093c2de66a39c8",
    "encrypt data using chaskey/7025f739e4b341df894563ee3ec22dfd",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/2ee106c7c5d34df799b377fb04fb2ee1",
    "compute adler32 checksum/aded99c950db4d9b8d119cbfc64de8e4",
    "compress data via ZLIB inflate or deflate/b4331930fe164eaaa33c054d9962358d/96f49d00dc4240378bbb70bf9dd561cc",
    "validate payment card number using luhn algorithm with no lookup table/ff3a55a4b15546c7a97ddde67de4aa42"
  ],
  "disassembly": [
    "mov     qword [rsp+0x18], rbx",
    "mov     qword [rsp+0x20], rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "mov     r14d, dword [rsp+0x58]",
    "mov     r15b, dl",
    "mov     rbp, rcx",
    "movzx   edi, r8b",
    "mov     ecx, 0x10624dd3",
    "movzx   esi, r9w",
    "mov     r9d, 0x51eb851f",
    "mov     r10d, r14d",
    "mov     eax, 0xd1b71759",
    "mov     r11d, 0xcccccccd",
    "mul     r14d",
    "mov     ebx, edx",
    "shr     ebx, 0xd",
    "mov     eax, ebx",
    "imul    eax, eax, 0x2710",
    "sub     r10d, eax",
    "mov     eax, ecx",
    "mul     r10d",
    "mov     eax, ecx",
    "mov     ecx, r14d",
    "mov     r8d, edx",
    "shr     r8d, 0x6",
    "movzx   r13d, r8b",
    "mov     r8d, 0x66666667",
    "mul     r14d",
    "shr     edx, 0x6",
    "mov     eax, r9d",
    "imul    edx, edx, 0x3e8",
    "sub     ecx, edx",
    "mul     ecx",
    "mov     eax, r9d",
    "mov     ecx, r14d",
    "mov     r10d, edx",
    "mul     r14d",
    "mov     eax, r11d",
    "shr     edx, 0x5",
    "shr     r10d, 0x5",
    "mov     dword [rsp+0x40], r10d",
    "imul    edx, edx, 0x64",
    "sub     ecx, edx",
    "mul     ecx",
    "mov     eax, r11d",
    "mov     r9d, edx",
    "mul     r14d",
    "shr     r9d, 0x3",
    "shr     edx, 0x3",
    "movzx   r12d, r9b",
    "mov     al, dl",
    "shl     al, 0x2",
    "add     dl, al",
    "movzx   eax, bl",
    "lea     r11d, [rax+r13+0x1]",
    "add     dl, dl",
    "mov     eax, r8d",
    "sub     r14b, dl",
    "imul    r11d",
    "sar     edx, 0x2",
    "mov     eax, edx",
    "shr     eax, 0x1f",
    "add     edx, eax",
    "lea     eax, [rdx+rdx*4]",
    "add     eax, eax",
    "sub     r11d, eax",
    "movzx   eax, r10b",
    "movzx   ecx, r11b",
    "lea     r10d, [rcx+rax+0x1]",
    "mov     eax, r8d",
    "imul    r10d",
    "sar     edx, 0x2",
    "mov     eax, edx",
    "shr     eax, 0x1f",
    "add     edx, eax",
    "lea     eax, [rdx+rdx*4]",
    "add     eax, eax",
    "sub     r10d, eax",
    "movzx   eax, r10b",
    "lea     r8d, [rax+r12+0x1]",
    "mov     eax, 0x66666667",
    "imul    r8d",
    "sar     edx, 0x2",
    "mov     eax, edx",
    "shr     eax, 0x1f",
    "mov     r9, rdi",
    "lea     rdi, [rel data_1400d4b08]",
    "add     edx, eax",
    "and     r9d, 0xf",
    "movzx   ebx, bl",
    "or      r9, 0xc0",
    "lea     eax, [rdx+rdx*4]",
    "add     eax, eax",
    "shl     r9, 0xc",
    "sub     r8d, eax",
    "mov     rax, rsi",
    "and     eax, 0xfff",
    "or      r9, rax",
    "movzx   eax, byte [rbx+rdi]",
    "shl     r9, 0x4",
    "or      r9, rax",
    "movzx   eax, r11b",
    "movzx   ecx, byte [rax+rdi]",
    "shl     r9, 0x4",
    "movzx   eax, r10b",
    "or      r9, rcx",
    "movzx   ecx, byte [rax+rdi]",
    "mov     eax, 0x66666667",
    "shl     r9, 0x4",
    "or      r9, rcx",
    "movzx   ecx, r8b",
    "movzx   edx, byte [rcx+rdi]",
    "shl     r9, 0x4",
    "movzx   ecx, r14b",
    "or      r9, rdx",
    "movzx   edx, r8b",
    "lea     r8d, [rdx+rcx+0x1]",
    "shl     r9, 0x4",
    "imul    r8d",
    "sar     edx, 0x2",
    "mov     eax, edx",
    "shr     eax, 0x1f",
    "add     edx, eax",
    "lea     eax, [rdx+rdx*4]",
    "add     eax, eax",
    "sub     r8d, eax",
    "movzx   eax, r8b",
    "movzx   ecx, byte [rax+rdi]",
    "or      r9, rcx",
    "lea     rcx, [rsp+0x38]",
    "mov     rax, r9",
    "bswap   rax",
    "shr     rax, 0x18",
    "xor     r8d, r8d",
    "lea     r10d, [r8+0x5]",
    "mov     qword [rsp+0x38], rax",
    "mov     edx, r8d",
    "add     edx, edx",
    "add     edx, edx",
    "xor     edx, 0x1021",
    "jmp     0x1400af524",
    "bt      edx, 0xf",
    "jae     0x1400af522",
    "inc     rcx",
    "sub     r10, 0x1",
    "jne     0x1400af502",
    "sub     rax, 0x1",
    "jne     0x1400af512",
    "movzx   eax, byte [rcx]",
    "shl     eax, 0x8",
    "xor     eax, edx",
    "movzx   edx, ax",
    "mov     eax, 0x8",
    "shl     r9, 0x10",
    "mov     al, dl",
    "mov     cl, dl",
    "shl     al, 0x4",
    "mov     qword [rsp+0x38], r9",
    "shr     cl, 0x4",
    "shr     r9, 0x10",
    "and     r9b, 0xf",
    "or      r9b, al",
    "mov     byte [rsp+0x38], r9b",
    "mov     rax, qword [rsp+0x38]",
    "mov     r9b, 0x1",
    "shr     rax, 0x14",
    "xor     al, dl",
    "and     al, 0xf",
    "xor     al, dl",
    "mov     byte [rsp+0x39], al",
    "mov     rax, qword [rsp+0x38]",
    "shr     rax, 0x18",
    "xor     cl, al",
    "movzx   eax, dx",
    "and     cl, 0xf",
    "shr     ax, 0x4",
    "xor     cl, al",
    "mov     byte [rsp+0x3a], cl",
    "mov     rax, qword [rsp+0x38]",
    "movzx   ecx, dx",
    "shr     cx, 0x8",
    "shr     rax, 0x1c",
    "shr     dx, 0x8",
    "xor     cl, al",
    "and     cl, 0xf",
    "xor     cl, dl",
    "mov     byte [rsp+0x3b], cl",
    "mov     rdx, qword [rsp+0x38]",
    "mov     cl, r8b",
    "mov     rax, rdx",
    "shr     rax, cl",
    "inc     cl",
    "and     al, 0x1",
    "xor     r9b, al",
    "cmp     cl, 0x38",
    "jb      0x1400af5ae",
    "mov     rax, 0xff00000000000000",
    "or      rdx, rax",
    "movzx   eax, r9b",
    "add     rdx, rdx",
    "or      rdx, rax",
    "mov     qword [rsp+0x38], rdx",
    "mov     eax, dword [rsp+0x38]",
    "shr     rdx, 0x20",
    "mov     dword [rbp+0x4], edx",
    "mov     dword [rbp+0x8], eax",
    "cmp     r15b, r8b",
    "je      0x1400af662",
    "mov     dword [rbp], 0x907f0042",
    "shl     r12d, 0x4",
    "movzx   eax, r14b",
    "shl     r13d, 0x4",
    "movsxd  rdx, r12d",
    "mov     cl, 0x1",
    "or      rdx, rax",
    "movsxd  rax, r13d",
    "shl     rdx, 0x9",
    "or      rdx, rax",
    "movzx   eax, byte [rsp+0x40]",
    "or      rdx, rax",
    "mov     rax, 0x712000000",
    "shl     rdx, 0x9",
    "or      rdx, rbx",
    "shl     rdx, 0x25",
    "or      rdx, rax",
    "mov     rax, rdx",
    "shr     rax, cl",
    "inc     cl",
    "and     al, 0x1",
    "xor     r8b, al",
    "cmp     cl, 0x40",
    "jb      0x1400af62d",
    "movzx   eax, r8b",
    "mov     dword [rbp], 0x907f0082",
    "or      rdx, rax",
    "mov     qword [rsp+0x38], rdx",
    "mov     eax, dword [rsp+0x38]",
    "shr     rdx, 0x20",
    "mov     dword [rbp+0x10], eax",
    "mov     dword [rbp+0xc], edx",
    "jmp     0x1400af669",
    "mov     rbx, qword [rsp+0x48]",
    "mov     rbp, qword [rsp+0x50]",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "retn    "
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}