{
  "address": "0x140085c60",
  "rules": [
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/0d7bc900a8ea48098fc469578ae14b88",
    "decompress data using LZO/368a268678dc46ccbe6ee697869692a3",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "hash data with CRC32/dc8063c9cb1c41b9a5bafe66f5117ac4",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "empty recycle bin quietly/a401764de4c44240956dc7f3c78baebd",
    "encrypt data using HC-128/86aaff13b46c4951b9ca4e0a9171c391",
    "hash data using aphash/c01783ca846f48c3a4751b50c0c12749",
    "decompress data using aPLib/88da69e00a6e49ce8c080be3a0beeb89"
  ],
  "disassembly": [
    "mov     rax, rsp {__return_addr}",
    "mov     qword [rax+0x8 {__saved_rbx}], rbx",
    "push    rsi {__saved_rsi}",
    "push    rdi {var_10}",
    "push    r12 {__saved_r12}",
    "sub     rsp, 0x100",
    "lea     rax, [rax-0x48 {var_48}]",
    "mov     rbx, rcx",
    "mov     rdx, rcx",
    "mov     qword [rsp+0x20 {hMem}], rax {var_48}",
    "lea     rax, [rel data_140140240]",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8d, 0x30",
    "mov     qword [rsp+0x28 {var_f0}], rax  {data_140140240}",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086108",
    "mov     rbx, qword [rsp+0x120 {__saved_rbx}]",
    "add     rsp, 0x100",
    "pop     r12 {__saved_r12}",
    "pop     rdi {var_10}",
    "pop     rsi {__saved_rsi}",
    "retn     {__return_addr}",
    "mov     eax, dword [rsp+0xfc {var_1c}]",
    "mov     r12d, 0xe35a172c",
    "xor     rax, r12",
    "mov     qword [rbx], rax",
    "je      0x140086108",
    "lea     rax, [rsp+0x130 {result_2}]",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8d, 0x8",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x20 {hMem}], rax {result_2}",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086108",
    "mov     eax, dword [rsp+0x134 {arg3}]",
    "add     eax, 0xfffffffe",
    "cmp     eax, 0x2",
    "ja      0x140086108",
    "mov     eax, dword [rsp+0x130 {result_2}]",
    "mov     qword [rbx], rax",
    "test    rax, rax",
    "je      0x140086108",
    "lea     rax, [rsp+0x30 {var_e8}]",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8d, 0x84",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x20 {hMem}], rax {var_e8}",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086108",
    "mov     r8d, dword [rsp+0x34 {var_e4}]",
    "mov     esi, 0x1e00",
    "test    r8d, r8d",
    "je      0x140085f6f",
    "mov     eax, dword [rsp+0x34 {var_e4}]",
    "and     eax, esi",
    "cmp     eax, 0x400",
    "jne     0x140086108",
    "cmp     r8d, 0xffff",
    "ja      0x140085f6f",
    "cmp     dword [rel data_14014084c], 0x1db0",
    "jae     0x140085f93  {data_14014084c}",
    "cmp     dword [rsp+0x3c {var_dc}], 0x8000",
    "ja      0x140085f6f",
    "cmp     dword [rel data_14014084c], 0x23f0",
    "sbb     edi, edi",
    "and     edi, 0xffffffc8",
    "add     edi, 0x164",
    "mov     edi, 0x134",
    "jmp     0x140085fa8",
    "mov     ecx, r8d",
    "call    sub_140005694",
    "lea     rcx, [rel data_1400f8370]  {u\"\\nAlgid     : %s (0x%x)\\n\"}",
    "mov     rdx, rax",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0x3c {var_dc}]",
    "lea     rcx, [rel data_1400f83a0]  {u\"Key (%3u) : \"}",
    "call    sub_14000c030",
    "mov     r11d, dword [rsp+0x40 {var_d8}]",
    "mov     qword [rbx], r11",
    "test    r11, r11",
    "je      0x140085def",
    "lea     rax, [rsp+0x128 {result_1}]",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8d, 0x4",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x20 {hMem}], rax {result_1}",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086108",
    "mov     eax, dword [rsp+0x30 {var_e8}]",
    "xor     rax, r12",
    "mov     qword [rbx], rax",
    "je      0x140086108",
    "lea     rdi, [rel data_1400d27a8]",
    "mov     rcx, rdi  {data_1400d27a8}",
    "call    sub_14000c030",
    "mov     eax, dword [rsp+0x34 {var_e4}]",
    "and     eax, esi",
    "cmp     dword [rel data_14014084c], 0xbb8",
    "jae     0x140085ebe  {data_14014084c}",
    "mov     edx, dword [rsp+0x3c {var_dc}]",
    "mov     ecx, 0x40",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rsp+0x20 {hMem}], rax",
    "test    rax, rax",
    "je      0x140085def",
    "mov     eax, dword [rsp+0x128 {result_1}]",
    "test    eax, eax",
    "je      0x140086108",
    "cmp     eax, 0x600",
    "jne     0x140085f43",
    "cmp     eax, 0x600",
    "jne     0x140085e99",
    "mov     r8d, dword [rsp+0x3c {var_dc}]",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     rdx, rbx",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140085dd5",
    "lea     rcx, [rsp+0x138 {result_3}]",
    "add     eax, edi",
    "mov     r8d, 0x8",
    "mov     qword [rsp+0x20 {hMem}], rcx {result_3}",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     rdx, rbx",
    "mov     qword [rbx], rax",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086108",
    "cmp     dword [rsp+0x78 {var_a0}], 0x0",
    "je      0x140085f6f",
    "mov     r8d, dword [rsp+0x98 {var_80}]",
    "test    r8d, r8d",
    "je      0x140085ee9",
    "cmp     dword [rsp+0x70 {var_a8}], 0x0",
    "je      0x140085f6f",
    "mov     r8d, dword [rsp+0x90 {var_88}]",
    "test    r8d, r8d",
    "je      0x140085e3f",
    "mov     rdx, qword [rbx]",
    "lea     rcx, [rel data_1400f83c0]  {u\"ERROR kuhl_m_crypto_extractor_ca\u2026\"}",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0x3c {var_dc}]",
    "mov     rcx, qword [rsp+0x20 {hMem}]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "jmp     0x140085de4",
    "mov     rax, qword [rsp+0x138 {result_3}]",
    "mov     qword [rbx], rax",
    "test    rax, rax",
    "je      0x140086108",
    "lea     rcx, [rel data_1400f8490]  {u\"Salt      : \"}",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0x78 {var_a0}]",
    "lea     rcx, [rsp+0x7c {var_9c}]",
    "xor     edx, edx  {0x0}",
    "cmp     r8d, 0x5",
    "ja      0x140085ee9",
    "lea     rcx, [rel data_1400f8490]  {u\"Salt      : \"}",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0x70 {var_a8}]",
    "lea     rcx, [rsp+0x74 {var_a4}]",
    "jmp     0x140085f5f",
    "xor     edx, edx  {0x0}",
    "cmp     r8d, 0x5",
    "ja      0x140085e3f",
    "mov     rcx, qword [rsp+0x20 {hMem}]",
    "call    qword [rel LocalFree]",
    "lea     rax, [rsp+0xc0 {var_58}]",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8d, 0xc",
    "mov     rdx, rbx",
    "mov     qword [rsp+0x20 {hMem}], rax {var_58}",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x140086108",
    "test    al, al",
    "je      0x140085f43",
    "or      al, byte [rcx]",
    "inc     r11d",
    "inc     rcx",
    "test    al, al",
    "je      0x140085f01",
    "lea     ecx, [r8-0x1]",
    "lea     rax, [rel data_1400de808]",
    "mov     rdx, qword [rax+rcx*8]",
    "jmp     0x140085eeb",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "mov     rcx, rdi  {data_1400d27a8}",
    "call    sub_14000c030",
    "test    al, al",
    "je      0x140085e99",
    "or      al, byte [rcx]",
    "inc     r11d",
    "inc     rcx",
    "test    al, al",
    "je      0x140085e57",
    "lea     ecx, [r8-0x1]",
    "lea     rax, [rel data_1400de808]",
    "mov     rdx, qword [rax+rcx*8]",
    "jmp     0x140085e41",
    "mov     eax, dword [rsp+0xc8 {var_50}]",
    "lea     ecx, [rax+0x7]",
    "lea     edx, [rax+0xf]",
    "mov     eax, 0x8",
    "shr     ecx, 0x3",
    "shr     edx, 0x4",
    "and     ecx, 0x7",
    "sub     eax, ecx",
    "test    ecx, ecx",
    "je      0x14008607c",
    "lea     rcx, [rel data_1400f8470]  {u\"IV        : \"}",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0xb0 {var_68}]",
    "lea     rcx, [rsp+0x54 {var_c4}]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "mov     rcx, rdi  {data_1400d27a8}",
    "call    sub_14000c030",
    "cmp     r11d, dword [rsp+0xb0 {var_68}]",
    "jae     0x140085f17",
    "lea     rcx, [rel data_1400f8440]  {u\"Mode      : %s (0x%x)\\n\"}",
    "call    sub_14000c030",
    "xor     r11d, r11d  {0x0}",
    "xor     al, al  {0x0}",
    "lea     rcx, [rsp+0x54 {var_c4}]",
    "lea     rcx, [rel data_1400f8470]  {u\"IV        : \"}",
    "call    sub_14000c030",
    "mov     edx, dword [rsp+0xa8 {var_70}]",
    "lea     rcx, [rsp+0x4c {var_cc}]",
    "xor     r8d, r8d  {0x0}",
    "call    sub_140012f68",
    "mov     rcx, rdi  {data_1400d27a8}",
    "call    sub_14000c030",
    "cmp     r11d, dword [rsp+0xa8 {var_70}]",
    "jae     0x140085e6d",
    "lea     rcx, [rel data_1400f8440]  {u\"Mode      : %s (0x%x)\\n\"}",
    "call    sub_14000c030",
    "xor     r11d, r11d  {0x0}",
    "xor     al, al  {0x0}",
    "lea     rcx, [rsp+0x4c {var_cc}]",
    "shr     eax, 0x1",
    "lea     eax, [rax+rdx+0x2]",
    "lea     ecx, [rax+rax*4]",
    "add     ecx, ecx",
    "movzx   edx, cl",
    "lea     r8d, [rcx-0x14]",
    "lea     eax, [rdx-0x4]",
    "test    al, 0xf",
    "je      0x1400860a5",
    "add     eax, 0x8",
    "lea     edi, [r8+0x14]",
    "mov     ecx, 0x40",
    "mov     edx, edi",
    "mov     esi, edi",
    "call    qword [rel LocalAlloc]",
    "mov     qword [rsp+0x20 {hMem}], rax",
    "test    rax, rax",
    "je      0x140086108",
    "add     edx, 0xfffffffc",
    "mov     eax, 0x10",
    "and     edx, 0xf",
    "sub     eax, edx",
    "add     r8d, eax",
    "lea     rcx, [rsp+0x20 {hMem}]",
    "mov     r8, rsi",
    "mov     rdx, rbx",
    "call    sub_14000b6d8",
    "test    eax, eax",
    "je      0x1400860fd",
    "mov     rcx, qword [rsp+0x20 {hMem}]",
    "call    qword [rel LocalFree]",
    "lea     rcx, [rel data_1400f84b0]  {u\"PrivKey   : \"}",
    "call    sub_14000c030",
    "mov     rcx, qword [rsp+0x20 {hMem}]",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, edi",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400f84d0]  {u\"\\n!!! parts after public exponen\u2026\"}",
    "call    sub_14000c030"
  ],
  "high_level_IL": [
    "void* const var_10 = arg2",
    "void var_48",
    "void* hMem = &var_48",
    "void* var_f0 = &data_140140240",
    "uint64_t result = sub_14000b6d8(&hMem, arg1, 0x30)",
    "if (result.d != 0)",
    "int32_t var_1c",
    "result = zx.q(var_1c) ^ 0xe35a172c",
    "*arg1 = result",
    "if (result != 0)",
    "hMem = &result_2",
    "result = sub_14000b6d8(&hMem, arg1, 8)",
    "if (result.d != 0)",
    "result = zx.q(arg3 - 2)",
    "if (result.d u<= 2)",
    "result = zx.q(result_2)",
    "*arg1 = result",
    "if (result != 0)",
    "int32_t var_e8",
    "hMem = &var_e8",
    "result = sub_14000b6d8(&hMem, arg1, 0x84)",
    "if (result.d != 0)",
    "int32_t var_e4",
    "int32_t var_dc",
    "if (var_e4 != 0 && var_e4 u<= 0xffff && var_dc u<= 0x8000)",
    "sub_14000c030(u\"\\nAlgid     : %s (0x%x)\\n\", sub_140005694(var_e4))",
    "int64_t rdx_5 = sub_14000c030(u\"Key (%3u) : \", zx.q(var_dc))",
    "int32_t var_d8",
    "uint64_t r11_1 = zx.q(var_d8)",
    "*arg1 = r11_1",
    "if (r11_1 != 0)",
    "HLOCAL hMem_1",
    "hMem_1, rdx_5 = LocalAlloc(LMEM_ZEROINIT, zx.q(var_dc))",
    "hMem = hMem_1",
    "if (hMem_1 != 0)",
    "if (sub_14000b6d8(&hMem, arg1, zx.q(var_dc)) == 0)",
    "sub_14000c030(u\"ERROR kuhl_m_crypto_extractor_ca\u2026\", *arg1)",
    "sub_140012f68(hMem, zx.q(var_dc), 0)",
    "rdx_5 = LocalFree(hMem)",
    "arg2 = &data_1400d27a8",
    "int64_t rdx_10 = sub_14000c030(U\"\\n\", rdx_5)",
    "int32_t rax_5 = var_e4 & 0x1e00",
    "if (data_14014084c u>= 0xbb8)",
    "if (rax_5 == 0x600)",
    "int32_t var_80",
    "int64_t rdx_15",
    "if (var_80 == 0 || var_80 u> 5)",
    "rdx_15 = 0",
    "rdx_15 = (&data_1400de808)[zx.q(var_80 - 1)]",
    "rdx_10 = sub_14000c030(u\"Mode      : %s (0x%x)\\n\", rdx_15)",
    "int32_t r11_3 = 0",
    "char rax_7 = 0",
    "void var_c4",
    "void* rcx_12 = &var_c4",
    "int32_t var_68",
    "while (r11_3 u< var_68)",
    "rax_7 |= *rcx_12",
    "r11_3 += 1",
    "rcx_12 += 1",
    "if (rax_7 != 0)",
    "break",
    "if (rax_7 != 0)",
    "sub_14000c030(u\"IV        : \", rdx_10)",
    "rdx_10 = sub_14000c030(U\"\\n\", sub_140012f68(&var_c4, zx.q(var_68), 0))",
    "int32_t var_a0",
    "if (var_a0 != 0)",
    "sub_14000c030(u\"Salt      : \", rdx_10)",
    "void var_9c",
    "sub_14000c030(U\"\\n\", sub_140012f68(&var_9c, zx.q(var_a0), 0))",
    "if (rax_5 == 0x600)",
    "int32_t var_88",
    "int64_t rdx_11",
    "if (var_88 == 0 || var_88 u> 5)",
    "rdx_11 = 0",
    "rdx_11 = (&data_1400de808)[zx.q(var_88 - 1)]",
    "rdx_10 = sub_14000c030(u\"Mode      : %s (0x%x)\\n\", rdx_11)",
    "int32_t r11_2 = 0",
    "char rax_6 = 0",
    "void var_cc",
    "void* rcx_8 = &var_cc",
    "int32_t var_70",
    "while (r11_2 u< var_70)",
    "rax_6 |= *rcx_8",
    "r11_2 += 1",
    "rcx_8 += 1",
    "if (rax_6 != 0)",
    "break",
    "if (rax_6 != 0)",
    "sub_14000c030(u\"IV        : \", rdx_10)",
    "rdx_10 = sub_14000c030(U\"\\n\", sub_140012f68(&var_cc, zx.q(var_70), 0))",
    "int32_t var_a8",
    "if (var_a8 != 0)",
    "sub_14000c030(u\"Salt      : \", rdx_10)",
    "void var_a4",
    "sub_14000c030(U\"\\n\", sub_140012f68(&var_a4, zx.q(var_a8), 0))",
    "result = zx.q(var_e4) & 0x1e00",
    "if (result.d == 0x400)",
    "int32_t rdi",
    "if (data_14014084c u>= 0x1db0)",
    "rdi = (sbb.d(arg2.d, arg2.d, data_14014084c u< 0x23f0) & 0xffffffc8) + 0x164",
    "rdi = 0x134",
    "result = zx.q(var_e8) ^ 0xe35a172c",
    "*arg1 = result",
    "if (result != 0)",
    "hMem = &result_1",
    "result = sub_14000b6d8(&hMem, arg1, 4)",
    "if (result.d != 0)",
    "result = zx.q(result_1)",
    "if (result.d != 0)",
    "hMem = &result_3",
    "*arg1 = zx.q(result.d + rdi)",
    "result = sub_14000b6d8(&hMem, arg1, 8)",
    "if (result.d != 0)",
    "result = result_3",
    "*arg1 = result",
    "if (result != 0)",
    "void var_58",
    "hMem = &var_58",
    "result = sub_14000b6d8(&hMem, arg1, 0xc)",
    "if (result.d != 0)",
    "int32_t var_50",
    "int32_t rcx_19 = (var_50 + 7) u>> 3 & 7",
    "int32_t rax_12 = 8 - rcx_19",
    "if (rcx_19 != 0)",
    "rax_12 += 8",
    "uint32_t rcx_21 = ((rax_12 u>> 1) + ((var_50 + 0xf) u>> 4) + 2) * 0xa",
    "uint32_t rdx_24 = zx.d(rcx_21.b)",
    "int32_t r8_5 = rcx_21 - 0x14",
    "if (((rdx_24.b - 4) & 0xf) != 0)",
    "r8_5 += 0x10 - ((rdx_24 - 4) & 0xf)",
    "result = LocalAlloc(LMEM_ZEROINIT, zx.q(r8_5 + 0x14))",
    "hMem = result",
    "if (result != 0)",
    "int32_t rax_17",
    "int64_t rdx_29",
    "rax_17, rdx_29 = sub_14000b6d8(&hMem, arg1, zx.q(r8_5 + 0x14))",
    "if (rax_17 != 0)",
    "sub_14000c030(u\"PrivKey   : \", rdx_29)",
    "sub_14000c030(u\"\\n!!! parts after public exponen\u2026\", sub_140012f68(hMem, zx.q(r8_5 + 0x14), 0))",
    "return LocalFree(hMem)",
    "return result"
  ]
}