{
  "address": "0x1400b1d34",
  "rules": [
    "get common file path",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "contain loop",
    "hash data using murmur3/aeb1a4346751469b809f4261bcfbbb07/dbb00f9448c04dc1b720ac16935c1891",
    "get file version info",
    "link function at runtime on Windows"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8 {__saved_rbx}], rbx",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x270",
    "mov     r9d, dword [rel data_14014084c]",
    "mov     r8d, dword [rel data_140140844]",
    "xor     eax, eax  {0x0}",
    "mov     qword [rsp+0x41 {var_267}], rax  {0x0}",
    "mov     dword [rsp+0x49 {var_25f}], eax  {0x0}",
    "mov     word [rsp+0x4d {var_25b}], ax  {0x0}",
    "mov     byte [rsp+0x4f {var_259}], al  {0x0}",
    "mov     r14, rdx",
    "mov     edx, dword [rel data_140140848]",
    "lea     rax, [rel data_14011f6cc]",
    "mov     r15d, ecx",
    "mov     dword [rsp+0x30 {var_278}], 0xcf",
    "lea     rcx, [rel data_14011f6e0]  {u\"\\nmimikatz 2.2.0 (arch x64)\\nWin\u2026\"}",
    "mov     dword [rsp+0x28 {var_280}], 0x8f14989",
    "mov     byte [rsp+0x40 {var_268}], 0x1",
    "mov     qword [rsp+0x20], rax  {data_14011f6cc}",
    "call    sub_14000c030",
    "cmp     dword [rel data_14014084c], 0x2648",
    "jb      0x1400b1e3c  {data_14014084c}",
    "and     qword [rsp+0x20 {var_288}], 0x0",
    "lea     r8, [rel data_14011f8b8]  {u\"full\"}",
    "xor     r9d, r9d  {0x0}",
    "mov     rdx, r14",
    "mov     ecx, r15d",
    "call    sub_140013220",
    "lea     r12, [rel data_14013b760]",
    "mov     r13d, 0x11",
    "test    eax, eax",
    "je      0x1400b1f5c",
    "lea     rcx, [rel data_14011f778]  {u\"ntdll\"}",
    "call    qword [rel GetModuleHandleW]",
    "test    rax, rax",
    "je      0x1400b1e3c",
    "and     qword [rsp+0x20], 0x0",
    "lea     r8, [rel data_14011f9f0]",
    "xor     r9d, r9d  {0x0}",
    "mov     rdx, r14",
    "mov     ecx, r15d",
    "call    sub_140013220",
    "test    eax, eax",
    "je      0x1400b2164",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "mov     rbx, r12  {data_14013b760}",
    "mov     rbp, r13  {0x11}",
    "lea     rdx, [rel data_14011f788]  {\"NtQuerySystemInformationEx\"}",
    "mov     rcx, rax",
    "call    qword [rel GetProcAddress]",
    "test    rax, rax",
    "je      0x1400b1e3c",
    "xor     eax, eax  {0x0}",
    "mov     rbx, qword [rsp+0x2b0 {__saved_rbx}]",
    "add     rsp, 0x270",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "xor     edx, edx  {0x0}",
    "xor     ecx, ecx  {0x0}",
    "call    qword [rel GetSystemDirectoryW]",
    "mov     ebx, eax",
    "test    eax, eax",
    "je      0x1400b2150",
    "add     rbx, 0x8",
    "sub     rbp, 0x1",
    "jne     0x1400b1e7e",
    "mov     rdx, qword [rbx]",
    "lea     rcx, [rel data_14011f8c8]  {u\"%s\\t: \"}",
    "call    sub_14000c030",
    "mov     rdx, rdi",
    "mov     ecx, 0x40",
    "call    qword [rel LocalAlloc]",
    "mov     rsi, rax",
    "test    rax, rax",
    "je      0x1400b1f4e",
    "and     qword [rsp+0x28 {var_280}], 0x0",
    "lea     r9, [rsp+0x40 {var_268}]",
    "lea     rdx, [rsp+0x40 {var_268}]",
    "mov     r8d, 0x8",
    "mov     ecx, 0xa5",
    "mov     dword [rsp+0x20], 0x10",
    "call    rax",
    "test    eax, eax",
    "js      0x1400b1e2e",
    "call    qword [rel GetLastError]",
    "lea     rcx, [rel data_14011fb60]  {u\"ERROR kuhl_m_standard_version ; \u2026\"}",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     rdx, rbx",
    "mov     ecx, 0x40",
    "add     rdx, rdx",
    "call    qword [rel LocalAlloc]",
    "mov     rsi, rax",
    "test    rax, rax",
    "je      0x1400b2164",
    "mov     rcx, qword [rbx]",
    "xor     edx, edx  {0x0}",
    "call    GetFileVersionInfoSizeW",
    "mov     edi, eax",
    "test    eax, eax",
    "je      0x1400b1f4e",
    "mov     rcx, qword [rbx]",
    "mov     r9, rax",
    "mov     r8d, edi",
    "xor     edx, edx  {0x0}",
    "call    GetFileVersionInfoW",
    "test    eax, eax",
    "je      0x1400b1f31",
    "lea     rcx, [rel data_14011f830]  {u\"ERROR kuhl_m_standard_version ; \u2026\"}",
    "mov     edx, eax",
    "call    sub_14000c030",
    "test    byte [rsp+0x40 {var_268}], 0x1",
    "je      0x1400b1e19",
    "mov     edx, ebx",
    "mov     rcx, rax",
    "call    qword [rel GetSystemDirectoryW]",
    "lea     ecx, [rbx-0x1]",
    "cmp     eax, ecx",
    "jne     0x1400b2131",
    "call    qword [rel GetLastError]",
    "lea     rcx, [rel data_14011f970]  {u\"ERROR kuhl_m_standard_version ; \u2026\"}",
    "lea     r9, [rsp+0x2c0 {puLen}]",
    "lea     r8, [rsp+0x50 {lplpBuffer}]",
    "lea     rdx, [rel data_1400eaa44]",
    "mov     rcx, rsi",
    "call    VerQueryValueW",
    "test    eax, eax",
    "je      0x1400b1f22",
    "test    byte [rsp+0x41 {var_267}], 0x1",
    "je      0x1400b1e3c",
    "lea     rcx, [rel data_14011f7a8]  {u\"\\n> SecureKernel is running\\n\"}",
    "call    sub_14000c030",
    "call    qword [rel GetLastError]",
    "lea     rcx, [rel data_14011fad0]  {u\"ERROR kuhl_m_standard_version ; \u2026\"}",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     r8d, dword [rel data_14014084c]",
    "lea     rdx, [rel data_14011f9f8]  {u\"mimikatz_x64_sysfiles_%u\"}",
    "lea     rcx, [rsp+0x2c8 {hMem}]",
    "call    sub_140013b1c",
    "test    eax, eax",
    "je      0x1400b2145",
    "call    qword [rel GetLastError]",
    "lea     rcx, [rel data_14011f900]  {u\"ERROR kuhl_m_standard_version ; \u2026\"}",
    "jmp     0x1400b1f3e",
    "mov     rcx, qword [rsp+0x50 {lplpBuffer}]",
    "cmp     dword [rcx], 0xfeef04bd",
    "jne     0x1400b1f22",
    "lea     rcx, [rel data_14011f7e0]  {u\"> Credential Guard may be runnin\u2026\"}",
    "call    sub_14000c030",
    "jmp     0x1400b1e3c",
    "mov     rcx, rsi",
    "call    qword [rel LocalFree]",
    "jmp     0x1400b2164",
    "mov     rcx, qword [rsp+0x2c8 {hMem}]",
    "call    sub_140012dc8",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x1400b2121",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     eax, dword [rcx+0xc]",
    "mov     r8d, dword [rcx+0x8]",
    "lea     rcx, [rel data_14011f8d8]  {u\"%hu.%hu.%hu.%hu\\n\"}",
    "mov     r9d, eax",
    "mov     edx, r8d",
    "mov     dword [rsp+0x20 {var_288}], eax",
    "shr     r9d, 0x10",
    "shr     edx, 0x10",
    "call    sub_14000c030",
    "jmp     0x1400b1f45",
    "mov     rcx, qword [rsp+0x2c8 {hMem}]",
    "call    qword [rel LocalFree]",
    "jmp     0x1400b2145",
    "lea     rcx, [rel data_14011fa30]  {u\"CAB: %S\\n\"}",
    "mov     rdx, rax",
    "call    sub_14000c030",
    "mov     rcx, rdi",
    "call    sub_140002104",
    "mov     rbx, rax",
    "test    rax, rax",
    "je      0x1400b2118",
    "mov     rcx, rsi",
    "call    qword [rel LocalFree]",
    "mov     rcx, rdi",
    "call    qword [rel LocalFree]",
    "mov     r8, qword [r12]",
    "lea     rcx, [rsp+0x60 {pszDest}]",
    "mov     rdx, rsi",
    "call    qword [rel PathCombineW]",
    "test    rax, rax",
    "je      0x1400b2091",
    "call    qword [rel GetLastError]",
    "lea     rcx, [rel data_14011fa60]  {u\"ERROR kuhl_m_standard_version ; \u2026\"}",
    "mov     edx, eax",
    "call    sub_14000c030",
    "lea     rcx, [rsp+0x60 {pszDest}]",
    "call    sub_140009c9c",
    "test    eax, eax",
    "je      0x1400b20a5",
    "mov     rcx, qword [rbx]",
    "lea     r9, [rel sub_140016720]",
    "lea     r8, [rel sub_140001f8c]",
    "xor     edx, edx  {0x0}",
    "call    Ordinal_Cabinet_13",
    "test    eax, eax",
    "jne     0x1400b20e7",
    "add     r12, 0x8",
    "sub     r13, 0x1",
    "jne     0x1400b2031",
    "lea     rcx, [rsp+0x60 {pszDest}]",
    "call    sub_140012dc8",
    "mov     rbp, rax",
    "test    rax, rax",
    "je      0x1400b20a5",
    "mov     rcx, qword [rbx]",
    "call    Ordinal_Cabinet_14",
    "test    eax, eax",
    "jne     0x1400b210f",
    "mov     edx, dword [rbx+0x32c]",
    "mov     ecx, edx",
    "call    sub_140002088",
    "lea     rcx, [rel data_1400e1570]  {u\"ERROR kull_m_cabinet_close ; FCI\u2026\"}",
    "mov     r8, rax",
    "call    sub_14000c030",
    "mov     rdx, qword [r12]",
    "lea     rcx, [rel data_14011fa48]  {u\" -> %s\\n\"}",
    "call    sub_14000c030",
    "xor     r8d, r8d  {0x0}",
    "mov     rdx, rbp",
    "mov     rcx, rbx",
    "call    sub_1400022f4",
    "mov     rcx, rbp",
    "call    qword [rel LocalFree]",
    "jmp     0x1400b20a5",
    "mov     rcx, rbx",
    "call    qword [rel LocalFree]",
    "mov     edx, dword [rbx+0x32c]",
    "mov     ecx, edx",
    "call    sub_140002088",
    "lea     rcx, [rel data_1400e1610]  {u\"ERROR kull_m_cabinet_close ; FCI\u2026\"}",
    "mov     r8, rax",
    "call    sub_14000c030"
  ],
  "high_level_IL": [
    "data_14014084c",
    "data_140140844",
    "char var_267 = 0",
    "int32_t var_25f = 0",
    "int16_t var_25b = 0",
    "char var_259 = 0",
    "uint64_t rdx = zx.q(data_140140848)",
    "char var_268 = 1",
    "sub_14000c030(u\"\\nmimikatz 2.2.0 (arch x64)\\nWin\u2026\", rdx)",
    "if (data_14014084c u>= 0x2648)",
    "HMODULE hModule = GetModuleHandleW(u\"ntdll\")",
    "if (hModule != 0)",
    "int64_t rax_1 = GetProcAddress(hModule, \"NtQuerySystemInformationEx\")",
    "if (rax_1 != 0)",
    "int32_t rax_2",
    "int64_t rdx_2",
    "rax_2, rdx_2 = rax_1(0xa5, &var_268, 8, &var_268, 0x10, 0, 0xcf)",
    "if (rax_2 s< 0)",
    "sub_14000c030(u\"ERROR kuhl_m_standard_version ; \u2026\", zx.q(rax_2))",
    "if ((var_268 & 1) != 0)",
    "rdx_2 = sub_14000c030(u\"\\n> SecureKernel is running\\n\", rdx_2)",
    "if ((var_267 & 1) != 0)",
    "sub_14000c030(u\"> Credential Guard may be runnin\u2026\", rdx_2)",
    "int64_t var_288 = 0",
    "int32_t rax_3",
    "int64_t rdx_5",
    "rax_3, rdx_5 = sub_140013220(arg1, arg2, u\"full\", nullptr, nullptr)",
    "wchar16 const (** r12)[0xb] = &data_14013b760",
    "int64_t i_3 = 0x11",
    "if (rax_3 != 0)",
    "sub_14000c030(U\"\\n\", rdx_5)",
    "wchar16 const (** rbx_1)[0xb] = &data_14013b760",
    "int64_t i_2 = 0x11",
    "int64_t i",
    "uint32_t uBytes_1 = GetFileVersionInfoSizeW(*rbx_1, nullptr)",
    "uint64_t uBytes = zx.q(uBytes_1)",
    "if (uBytes_1 != 0)",
    "sub_14000c030(u\"%s\\t: \", *rbx_1)",
    "HLOCAL rax_4 = LocalAlloc(LMEM_ZEROINIT, uBytes)",
    "if (rax_4 != 0)",
    "if (GetFileVersionInfoW(*rbx_1, 0, uBytes.d, rax_4) == 0)",
    "sub_14000c030(u\"ERROR kuhl_m_standard_version ; \u2026\", zx.q(GetLastError()))",
    "int32_t* lplpBuffer",
    "BOOL rax_6 = VerQueryValueW(rax_4, &data_1400eaa44, &lplpBuffer, &puLen)",
    "int32_t* lplpBuffer_1",
    "if (rax_6 != 0)",
    "lplpBuffer_1 = lplpBuffer",
    "if (rax_6 == 0 || *lplpBuffer_1 != 0xfeef04bd)",
    "sub_14000c030(u\"ERROR kuhl_m_standard_version ; \u2026\", zx.q(GetLastError()))",
    "var_288.d = lplpBuffer_1[3]",
    "sub_14000c030(u\"%hu.%hu.%hu.%hu\\n\", zx.q(lplpBuffer_1[2] u>> 0x10))",
    "LocalFree(rax_4)",
    "rbx_1 = &rbx_1[1]",
    "i = i_2",
    "i_2 -= 1",
    "do while (i != 1)",
    "int32_t rax_9",
    "int64_t rdx_12",
    "rax_9, rdx_12 = sub_140013220(arg1, arg2, u\"cab\", nullptr, nullptr)",
    "if (rax_9 != 0)",
    "sub_14000c030(U\"\\n\", rdx_12)",
    "uint32_t rax_10 = GetSystemDirectoryW(nullptr, 0)",
    "uint64_t rbx_2 = zx.q(rax_10)",
    "if (rax_10 == 0)",
    "sub_14000c030(u\"ERROR kuhl_m_standard_version ; \u2026\", zx.q(GetLastError()))",
    "PWSTR rax_11 = LocalAlloc(LMEM_ZEROINIT, rbx_2 * 2)",
    "if (rax_11 != 0)",
    "if (GetSystemDirectoryW(rax_11, rbx_2.d) != (rbx_2 - 1).d)",
    "sub_14000c030(u\"ERROR kuhl_m_standard_version ; \u2026\", zx.q(GetLastError()))",
    "if (sub_140013b1c(&hMem, u\"mimikatz_x64_sysfiles_%u\", zx.q(data_14014084c)) != 0)",
    "HLOCAL hMem_1 = sub_140012dc8(hMem)",
    "if (hMem_1 != 0)",
    "sub_14000c030(u\"CAB: %S\\n\", hMem_1)",
    "HLOCAL hMem_2 = sub_140002104(hMem_1)",
    "if (hMem_2 != 0)",
    "int64_t i_1",
    "void pszDest",
    "if (PathCombineW(&pszDest, rax_11, *r12) == 0)",
    "sub_14000c030(u\"ERROR kuhl_m_standard_version ; \u2026\", zx.q(GetLastError()))",
    "if (sub_140009c9c() != 0)",
    "HLOCAL hMem_3 = sub_140012dc8(&pszDest)",
    "if (hMem_3 != 0)",
    "sub_14000c030(u\" -> %s\\n\", *r12)",
    "sub_1400022f4(hMem_2, hMem_3)",
    "LocalFree(hMem_3)",
    "r12 = &r12[1]",
    "i_1 = i_3",
    "i_3 -= 1",
    "do while (i_1 != 1)",
    "if (Ordinal_Cabinet_13(*hMem_2, 0, sub_140001f8c, sub_140016720) == 0)",
    "sub_14000c030(u\"ERROR kull_m_cabinet_close ; FCI\u2026\", zx.q(*(hMem_2 + 0x32c)))",
    "if (Ordinal_Cabinet_14(*hMem_2) == 0)",
    "sub_14000c030(u\"ERROR kull_m_cabinet_close ; FCI\u2026\", zx.q(*(hMem_2 + 0x32c)))",
    "LocalFree(hMem_2)",
    "LocalFree(hMem_1)",
    "LocalFree(hMem)",
    "LocalFree(rax_11)",
    "return 0"
  ]
}