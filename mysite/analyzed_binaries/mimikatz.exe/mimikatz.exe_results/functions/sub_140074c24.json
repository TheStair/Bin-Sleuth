{
  "address": "0x140074c24",
  "rules": [
    "hash data using djb2/1485ed9954f84e3481d22b64bc4cfca7",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "check OS version/0dbc6332c9724004b686b44a39c40b94",
    "contain loop",
    "hash data using jshash/79354a2ef36a4036b42806ea4b41f8bd",
    "encrypt data using chaskey/4b6f9d91d05f46dd9aa3662f80cb6278",
    "check OS version/fa26a21322994ec4bdbe5020e62bd777",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check Internet connectivity via WinINet/e5536f56688049548c83e5cf372d25ac",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "check OS version/e331473c09f0419eb22f4786f6872060"
  ],
  "disassembly": [
    "mov     qword [rsp+0x20], r9",
    "mov     qword [rsp+0x18], r8",
    "mov     qword [rsp+0x10], rdx",
    "push    rbx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x98",
    "mov     rsi, qword [rcx+0x10]",
    "xor     eax, eax",
    "mov     rbp, rdx",
    "mov     rdi, rcx",
    "lea     edx, [rax+0x11]",
    "xor     r9d, r9d",
    "xor     r8d, r8d",
    "mov     rcx, rsi",
    "mov     r13b, al",
    "mov     qword [rsp+0x50], rax",
    "mov     dword [rsp+0x60], eax",
    "mov     dword [rsp+0x58], eax",
    "mov     qword [rsp+0x78], rsi",
    "mov     dword [rsp+0x20], eax",
    "call    sub_140032364",
    "mov     rcx, qword [rsp+0x100]",
    "mov     rbx, qword [rbp+0x20]",
    "mov     r8, qword [rsp+0xf0]",
    "mov     r15, qword [rcx+0x48]",
    "movsxd  r14, dword [rbp+0x14]",
    "xor     r12d, r12d",
    "xor     edx, edx",
    "shl     r14, 0x6",
    "mov     dword [rsp+0x64], eax",
    "mov     rax, qword [r8+0x20]",
    "add     r14, rbx",
    "mov     qword [rsp+0x80], r15",
    "mov     dword [rsp+0xe0], r12d",
    "mov     qword [rsp+0x68], r14",
    "mov     qword [rsp+0x40], rdx",
    "mov     qword [rsp+0x48], rax",
    "lea     ecx, [rdx+0x3]",
    "lea     r9d, [r12+0x1]",
    "mov     r10, 0x8000000000000000",
    "cmp     rbx, r14",
    "jae     0x140074e1c",
    "not     rdx",
    "mov     word [r15+0x2c], r12w",
    "mov     word [r15+0x18], r12w",
    "or      rdx, r10",
    "mov     dword [r15+0x28], 0x4241",
    "mov     ebp, 0x3f",
    "and     rdx, qword [r8+0x58]",
    "cmp     bp, word [rax+0x46]",
    "mov     r14d, ebp",
    "mov     qword [rsp+0x40], rdx",
    "jl      0x140074e50",
    "cmp     qword [r15], 0x0",
    "mov     rbp, qword [rbx]",
    "jne     0x140074d33",
    "xor     ecx, ecx",
    "mov     dword [rsp+0x5c], r14d",
    "test    r14d, r14d",
    "jle     0x140074e7c",
    "movsx   r14d, word [rax+0x46]",
    "mov     r8, qword [rsp+0xf8]",
    "mov     rdx, qword [rsp+0xf0]",
    "mov     rcx, rbx",
    "call    sub_140074bb8",
    "test    eax, eax",
    "je      0x140074dea",
    "test    byte [rbx+0x12], 0x2",
    "jne     0x140074d33",
    "test    qword [r8+0x58], r10",
    "je      0x140074e93",
    "mov     eax, ecx",
    "bt      rdx, rax",
    "jae     0x140074e67",
    "mov     rdx, qword [rsp+0x40]",
    "movsxd  rcx, dword [rbx+0x28]",
    "mov     ebp, 0x1",
    "mov     rax, 0x8000000000000000",
    "shl     rbp, cl",
    "cmp     ecx, 0x40",
    "cmovge  rbp, rax",
    "test    r13b, r13b",
    "jne     0x140074da0",
    "test    byte [rbp+0x4], r9b",
    "jne     0x140074d33",
    "mov     rcx, qword [rdi]",
    "lea     edx, [r9+r12]",
    "lea     r9, [rsp+0x70]",
    "xor     r8d, r8d",
    "call    sub_140051cb8",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x1400752e2",
    "movsx   eax, word [rax+0x46]",
    "lea     r12d, [r12+rax-0x3f]",
    "mov     dword [rsp+0xe0], r12d",
    "add     ecx, r9d",
    "cmp     ecx, r14d",
    "jl      0x140074e5c",
    "add     r12d, r9d",
    "mov     rax, qword [rsp+0x48]",
    "mov     r10, 0x8000000000000000",
    "mov     rdx, qword [rsp+0x40]",
    "test    rdx, rbp",
    "jne     0x140074def",
    "mov     rax, rcx",
    "mov     rcx, qword [rsp+0x48]",
    "lea     rdx, [rel data_1400f7568]  {\"automatic index on %s(%s)\"}",
    "mov     r9, qword [rcx+0x8]",
    "mov     r8, qword [rcx]",
    "shl     rax, 0x5",
    "mov     r9, qword [rax+r9]",
    "mov     ecx, 0x11c",
    "call    sub_1400187fc",
    "mov     r13b, 0x1",
    "mov     r8d, dword [r8+0x44]",
    "mov     edx, ecx",
    "mov     rcx, rbp",
    "call    sub_140044e20",
    "test    eax, eax",
    "je      0x140074d33",
    "mov     rax, qword [rsp+0x50]",
    "test    rax, rax",
    "je      0x1400752f7",
    "mov     r10, qword [rsp+0x48]",
    "mov     rbx, qword [rsp+0xe8]",
    "mov     qword [r15+0x20], rax",
    "xor     r15d, r15d",
    "lea     rax, [rel data_1400f7588]  {\"auto-index\"}",
    "mov     qword [r13+0x18], r10",
    "and     qword [rsp+0x70], r15",
    "mov     qword [r13], rax",
    "mov     rbx, qword [rbx+0x20]",
    "cmp     rbx, qword [rsp+0x68]",
    "jae     0x140074fa6",
    "mov     rax, qword [rsp+0x48]",
    "mov     dword [rsp+0xe0], r12d",
    "mov     r8, qword [rsp+0xf0]",
    "add     rbx, 0x40",
    "mov     ecx, 0x3",
    "lea     r9d, [rcx-0x2]",
    "cmp     rbx, r14",
    "jb      0x140074ce6",
    "mov     rcx, qword [rdi]",
    "inc     r12d",
    "mov     rdx, r15",
    "mov     r8d, r12d",
    "call    sub_1400756b0",
    "test    eax, eax",
    "jne     0x1400752e2",
    "mov     rcx, qword [rdi]",
    "xor     r9d, r9d",
    "xor     r8d, r8d",
    "mov     rdx, rbp",
    "call    sub_140043fa4",
    "mov     rdx, qword [rsp+0x50]",
    "mov     rcx, rdi",
    "mov     r8, rax",
    "call    sub_140043af4",
    "mov     qword [rsp+0x50], rax",
    "add     rsp, 0x98",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "pop     rbx",
    "retn    ",
    "mov     rcx, qword [rdi]",
    "mov     rdx, rax",
    "call    sub_140043de4",
    "xor     ecx, ecx",
    "movsxd  rax, r15d",
    "lea     rbx, [rel data_1400d66b0]  {\"BINARY\"}",
    "lea     r11d, [rcx+0x1]",
    "test    r14d, r14d",
    "jle     0x140074ff7",
    "mov     rsi, qword [rsp+0x70]",
    "mov     r14, qword [rsp+0x68]",
    "xor     ebp, ebp",
    "xor     r12d, r12d",
    "mov     rdx, qword [rsp+0x40]",
    "movsxd  rcx, dword [rsp+0xe0]",
    "mov     rax, qword [r15+0x38]",
    "or      rdx, rbp",
    "mov     qword [rax+rcx*8], rbx",
    "mov     dword [rsp+0xe0], r12d",
    "mov     qword [rsp+0x40], rdx",
    "jmp     0x140074def",
    "mov     rax, qword [rsp+0xf0]",
    "mov     rcx, 0x8000000000000000",
    "test    qword [rax+0x58], rcx",
    "je      0x14007504a",
    "mov     r9, qword [rsp+0x40]",
    "mov     rdx, rax",
    "lea     r8, [rax+rax]",
    "shl     rdx, 0x3",
    "add     rbx, 0x40",
    "cmp     rbx, r14",
    "jb      0x140074ef9",
    "mov     ecx, dword [rbx+0x28]",
    "mov     eax, 0x1",
    "shl     rax, cl",
    "cmp     ecx, 0x40",
    "mov     rcx, 0x8000000000000000",
    "cmovge  rax, rcx",
    "test    rsi, rax",
    "jne     0x140074f7d",
    "mov     rax, qword [r13+0x8]",
    "and     dword [rsp+0x20], 0x0",
    "movsxd  rcx, r15d",
    "or      edx, 0xffffffff",
    "lea     r9d, [r12+0x1]",
    "mov     word [rax+rcx*2], dx",
    "mov     rax, qword [r13+0x40]",
    "mov     edx, 0x6f",
    "mov     qword [rax+rcx*8], rbx",
    "mov     eax, dword [rdi+0x34]",
    "mov     rbx, qword [rsp+0x100]",
    "mov     dword [rbx+0x8], eax",
    "add     dword [rdi+0x34], r11d",
    "mov     r8d, dword [rbx+0x8]",
    "mov     rcx, rsi",
    "call    sub_140032364",
    "mov     rdx, r13",
    "mov     rcx, rdi",
    "call    sub_140032d08",
    "mov     rax, qword [rsp+0xe8]",
    "movzx   r12d, byte [rbx+0x2c]",
    "imul    r12, r12, 0x70",
    "mov     rax, qword [rax]",
    "and     dword [rsp+0x20], 0x0",
    "xor     r9d, r9d",
    "mov     r14, qword [rax+0x8]",
    "mov     eax, 0x10",
    "mov     rcx, rsi",
    "test    byte [r12+r14+0x48], al",
    "je      0x14007510a",
    "cmp     bp, word [r10+0x46]",
    "movsxd  rdx, r15d",
    "jge     0x14007504a",
    "add     ecx, r11d",
    "cmp     ecx, r14d",
    "jl      0x140074fcb",
    "mov     rax, qword [r13+0x8]",
    "add     r15d, r11d",
    "mov     word [r8+rax], cx",
    "mov     rax, qword [r13+0x40]",
    "add     r8, 0x2",
    "mov     qword [rdx+rax], rbx",
    "add     rdx, 0x8",
    "mov     r8, qword [rsp+0xf8]",
    "mov     rdx, qword [rsp+0xf0]",
    "mov     rcx, rbx",
    "call    sub_140074bb8",
    "test    eax, eax",
    "je      0x140074f7d",
    "mov     rsi, qword [rsp+0x78]",
    "mov     r14d, dword [rsp+0x5c]",
    "mov     r12d, dword [rsp+0xe0]",
    "mov     r10, qword [rsp+0x48]",
    "mov     ebp, 0x3f",
    "mov     rdx, qword [rbx]",
    "mov     rcx, qword [r13+0x8]",
    "or      rsi, rax",
    "movzx   eax, word [rbx+0x28]",
    "mov     word [r12+rcx], ax",
    "mov     r8, qword [rdx+0x18]",
    "mov     rdx, qword [rdx+0x10]",
    "mov     rcx, rdi",
    "call    sub_140043358",
    "test    rax, rax",
    "je      0x140074f63",
    "mov     r8d, dword [rbx+0x4]",
    "mov     edx, 0x24",
    "mov     ebx, dword [r12+r14+0x3c]",
    "lea     edx, [rax+0x36]",
    "xor     r8d, r8d",
    "call    sub_140032364",
    "mov     ecx, dword [r12+r14+0x38]",
    "xor     r9d, r9d",
    "mov     dword [rsp+0x20], ecx",
    "lea     edx, [r9+0xd]",
    "mov     r8d, ebx",
    "mov     rcx, rsi",
    "mov     dword [rsp+0x58], eax",
    "call    sub_140032364",
    "and     dword [rsp+0x20], 0x0",
    "xor     r9d, r9d",
    "mov     r8d, ebx",
    "mov     rcx, rsi",
    "lea     edx, [r9+0xe]",
    "jmp     0x140075113",
    "mov     rcx, rdx",
    "shl     rcx, 0x3",
    "add     rdx, rdx",
    "mov     eax, ecx",
    "bt      r9, rax",
    "jae     0x140074fef",
    "lea     rcx, [rel data_1400d66b0]  {\"BINARY\"}",
    "mov     rcx, qword [rax]",
    "jmp     0x140074f6a",
    "mov     al, byte [rdi+0x1f]",
    "test    al, al",
    "jne     0x140075164",
    "dec     dword [rdi+0x44]",
    "mov     ecx, dword [rdi+0x44]",
    "mov     r9d, 0x10",
    "mov     dword [rsp+0x60], ecx",
    "mov     r8d, ecx",
    "mov     rcx, rdi",
    "mov     rdx, rax",
    "call    sub_1400485c0",
    "mov     r11, qword [rsp+0x80]",
    "bts     dword [r11+0x28], 0x11",
    "call    sub_140032364",
    "mov     ebp, eax",
    "mov     rax, qword [rsp+0x50]",
    "test    rax, rax",
    "je      0x140075150",
    "mov     rax, qword [r13+0x8]",
    "add     r15d, r11d",
    "mov     word [rdx+rax], bp",
    "mov     rax, qword [r13+0x40]",
    "add     ebp, r11d",
    "mov     qword [rcx+rax], rbx",
    "movsx   eax, word [r10+0x46]",
    "add     rdx, 0x2",
    "add     rcx, 0x8",
    "cmp     ebp, eax",
    "jl      0x140075023",
    "mov     rax, qword [r13+0x40]",
    "inc     r15d",
    "add     r12, 0x2",
    "mov     qword [rax+rbp], rcx",
    "add     rbp, 0x8",
    "dec     al",
    "movzx   eax, al",
    "mov     byte [rdi+0x1f], al",
    "mov     ebx, dword [rdi+rax*4+0xbc]",
    "mov     eax, 0x1",
    "add     dword [rdi+0x38], eax",
    "mov     ebx, dword [rdi+0x38]",
    "jmp     0x140075173",
    "cmp     qword [rsp+0x50], 0x0",
    "je      0x1400751fc",
    "lea     r8, [rcx+rcx*2]",
    "mov     rcx, qword [rsi+0x88]",
    "mov     eax, 0x10",
    "mov     word [rcx+r8*8-0x16], ax",
    "and     dword [rsp+0x38], 0x0",
    "mov     rcx, qword [rsp+0x100]",
    "and     qword [rsp+0x30], 0x0",
    "mov     r8d, dword [rcx+0x4]",
    "and     qword [rsp+0x28], 0x0",
    "and     dword [rsp+0x20], 0x0",
    "mov     r9d, ebx",
    "mov     rdx, r13",
    "mov     rcx, rdi",
    "call    sub_140055bac",
    "and     dword [rsp+0x20], 0x0",
    "mov     r9d, ebx",
    "mov     r13d, eax",
    "mov     rax, qword [rsp+0x100]",
    "mov     edx, 0x84",
    "mov     r8d, dword [rax+0x8]",
    "mov     rcx, rsi",
    "call    sub_140032364",
    "movsxd  rcx, dword [rsi+0x90]",
    "test    ecx, ecx",
    "jle     0x1400751e8",
    "mov     eax, 0x10",
    "mov     rcx, rsi",
    "test    byte [r12+r14+0x48], al",
    "je      0x14007525e",
    "mov     edx, dword [rsp+0x60]",
    "mov     rcx, rsi",
    "call    sub_14003278c",
    "mov     rax, qword [rsp+0x100]",
    "and     dword [rsp+0x20], 0x0",
    "lea     r9d, [rbp+0x1]",
    "mov     r8d, dword [rax+0x4]",
    "mov     edx, 0x5",
    "call    sub_140032364",
    "mov     edx, dword [rsp+0x58]",
    "lea     r9d, [r13+r15]",
    "call    sub_140032d34",
    "mov     rcx, qword [rsp+0x100]",
    "mov     edx, ebp",
    "mov     dword [rax+0x8], r9d",
    "mov     eax, dword [rcx+0x8]",
    "mov     r8d, dword [rcx+0x4]",
    "mov     r9d, dword [r12+r14+0x40]",
    "mov     rcx, rdi",
    "mov     dword [rsp+0x20], eax",
    "call    sub_140074b1c",
    "and     dword [rsp+0x20], 0x0",
    "xor     r8d, r8d",
    "lea     edx, [r8+0xb]",
    "mov     r9d, ebp",
    "mov     rcx, rsi",
    "call    sub_140032364",
    "and     dword [r12+r14+0x48], 0xffffffef",
    "jmp     0x14007527d",
    "mov     edx, ebp",
    "mov     rcx, rsi",
    "call    sub_140032d34",
    "mov     ecx, dword [rsi+0x90]",
    "mov     dword [rax+0x8], ecx",
    "test    ebx, ebx",
    "je      0x1400752cd",
    "lea     rcx, [rax+rax*2]",
    "mov     rax, qword [rsi+0x88]",
    "mov     edx, 0x3",
    "mov     word [rax+rcx*8-0x16], dx",
    "movsxd  rax, dword [rsi+0x90]",
    "test    eax, eax",
    "jle     0x14007529d",
    "mov     edx, dword [rsp+0x64]",
    "mov     rcx, rsi",
    "call    sub_140032d34",
    "mov     ecx, dword [rsi+0x90]",
    "mov     dword [rax+0x8], ecx",
    "cmp     byte [rdi+0x1f], 0x8",
    "jae     0x1400752cd",
    "movzx   eax, byte [rdi+0x1f]",
    "mov     dword [rdi+rax*4+0xbc], ebx",
    "mov     eax, 0x1",
    "add     byte [rdi+0x1f], al"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}