{
  "address": "0x1400ac1e4",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "get domain trust relationships",
    "contain loop",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/1a6c04bed22346cdaee8fbdaa0f123d3",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440"
  ],
  "disassembly": [
    "mov     r11, rsp {__return_addr}",
    "mov     qword [r11+0x8 {__saved_rbx}], rbx",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0xb0",
    "and     qword [r11-0x48 {var_48}], 0x0",
    "and     qword [rsp+0x50 {var_98}], 0x0",
    "and     qword [rsp+0x58 {var_90}], 0x0",
    "and     qword [rsp+0x20 {var_c8}], 0x0",
    "lea     rax, [rel data_140118c78]  {u\"trustAttributes\"}",
    "lea     rdi, [rel data_140118c40]  {u\"trustPartner\"}",
    "mov     qword [r11-0x68 {var_68}], rax  {data_140118c78, u\"trustAttributes\"}",
    "lea     rax, [rel data_140118c98]  {u\"trustDirection\"}",
    "lea     rsi, [rel data_140118c60]  {u\"flatName\"}",
    "mov     qword [r11-0x60 {var_60}], rax  {data_140118c98, u\"trustDirection\"}",
    "lea     rax, [rel data_140118cb8]  {u\"trustType\"}",
    "lea     r9, [rsp+0x48 {ServerName}]",
    "mov     qword [r11-0x58 {var_58}], rax  {data_140118cb8, u\"trustType\"}",
    "lea     rax, [rel data_140118cd0]  {u\"objectGUID\"}",
    "lea     r8, [rel data_1400ee2e0]  {u\"server\"}",
    "mov     qword [r11-0x78 {var_78}], rdi  {data_140118c40, u\"trustPartner\"}",
    "mov     qword [r11-0x70 {var_70}], rsi  {data_140118c60, u\"flatName\"}",
    "mov     qword [r11-0x50 {var_50}], rax  {data_140118cd0, u\"objectGUID\"}",
    "call    sub_140013220",
    "lea     rcx, [rel data_140118ce8]  {u\"RPC mode: \"}",
    "call    sub_14000c030",
    "mov     rcx, qword [rsp+0x48 {ServerName}]",
    "lea     r9, [rsp+0x108 {DomainCount}]",
    "lea     r8, [rsp+0x40 {var_a8}]",
    "mov     edx, 0x3f",
    "call    qword [rel DsEnumerateDomainTrustsW]",
    "mov     ebp, 0x1",
    "lea     r12, [rel data_1400e17c8]",
    "lea     r13, [rel data_1400e69c8]",
    "test    eax, eax",
    "jne     0x1400ac502",
    "lea     rcx, [rel data_140118fa0]  {u\"ERROR kuhl_m_net_trust ; DsEnume\u2026\"}",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     ebx, dword [rsp+0x100 {arg3}]",
    "mov     dword [rsp+0x100 {arg3}], ebx",
    "xor     ebx, ebx  {0x0}",
    "mov     dword [rsp+0x100 {arg3}], ebx  {0x0}",
    "cmp     dword [rsp+0x108 {DomainCount}], ebx",
    "jbe     0x1400ac4f6",
    "lea     rcx, [rel data_1400eb720]  {u\"ERROR kull_m_ldap_getLdapAndRoot\u2026\"}",
    "call    sub_14000c030",
    "xor     eax, eax  {0x0}",
    "lea     r8, [rsp+0x68 {hMem_1}]",
    "lea     rdx, [rsp+0x48 {ServerName}]",
    "lea     rcx, [rel data_140119030]  {u\"defaultNamingContext\"}",
    "xor     r9d, r9d  {0x0}",
    "call    sub_14000b23c",
    "jmp     0x1400ac570",
    "mov     rcx, qword [rsp+0x40 {var_a8}]",
    "call    NetApiBufferFree",
    "jmp     0x1400ac51e",
    "xor     esi, esi  {0x0}",
    "xor     eax, eax  {0x0}",
    "mov     rbx, qword [rsp+0xf0 {__saved_rbx}]",
    "add     rsp, 0xb0",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     r8, qword [rsp+0x68 {hMem_1}]",
    "lea     rdx, [rel data_140119060]  {u\"CN=System,%s\"}",
    "lea     rcx, [rsp+0x60 {hMem}]",
    "call    sub_140013b1c",
    "test    eax, eax",
    "je      0x1400ac939",
    "test    eax, eax",
    "je      0x1400ac94d",
    "lea     rcx, [rel data_140119010]  {u\"\\n\\nLDAP mode: \"}",
    "call    sub_14000c030",
    "mov     rcx, qword [rsp+0x48 {ServerName}]",
    "mov     edx, 0x185",
    "call    qword [rel Ordinal_WLDAP32_145]",
    "mov     r12, rax",
    "mov     qword [rsp+0x48 {ServerName}], rax",
    "test    rax, rax",
    "je      0x1400ac562",
    "add     ebx, ebp",
    "add     rdi, 0x8",
    "cmp     ebx, 0x20",
    "jb      0x1400ac2f1",
    "cmp     ebx, 0x6",
    "jae     0x1400ac30d",
    "mov     rcx, qword [rsp+0x68 {hMem_1}]",
    "call    qword [rel LocalFree]",
    "mov     rcx, r12",
    "call    qword [rel Ordinal_WLDAP32_13]",
    "mov     rdx, qword [rsp+0x60 {hMem}]",
    "lea     rax, [rsp+0x50 {var_98}]",
    "lea     r9, [rel data_140119080]  {u\"(objectClass=trustedDomain)\"}",
    "mov     qword [rsp+0x30 {var_b8_1}], rax {var_98}",
    "and     dword [rsp+0x28 {var_c0}], 0x0",
    "lea     rax, [rsp+0x70 {var_78}]",
    "mov     r8d, ebp  {0x1}",
    "mov     rcx, r12",
    "mov     qword [rsp+0x20 {var_c8_1}], rax {var_78}",
    "call    qword [rel Ordinal_WLDAP32_208]",
    "test    eax, eax",
    "jne     0x1400ac90d",
    "mov     rax, qword [rsp+0x40 {var_a8}]",
    "mov     ecx, ebx",
    "mov     edx, dword [rsi+rax+0x10]",
    "shr     edx, cl",
    "test    bpl, dl",
    "je      0x1400ac318",
    "lea     rcx, [rel data_1400e8e8c]",
    "call    sub_14000c030",
    "mov     r11, qword [rsp+0x40 {var_a8}]",
    "test    byte [rsi+r11+0x10], bpl",
    "je      0x1400ac366",
    "mov     rdx, r12  {data_1400e17c8}",
    "mov     rdx, qword [rdi]",
    "jmp     0x1400ac310",
    "lea     rcx, [rel data_140119120]  {u\"ERROR kuhl_m_net_trust ; ldap_se\u2026\"}",
    "mov     r8d, eax",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     rdx, qword [rsp+0x50 {var_98}]",
    "mov     rcx, r12",
    "call    qword [rel Ordinal_WLDAP32_36]",
    "lea     rcx, [rel data_1401190b8]  {u\"%u entries\\n\"}",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     rdx, qword [rsp+0x50 {var_98}]",
    "mov     rcx, r12",
    "call    qword [rel Ordinal_WLDAP32_26]",
    "mov     r14, rax",
    "test    rax, rax",
    "je      0x1400ac91e",
    "mov     edx, dword [rsi+r11+0x18]",
    "lea     rcx, [rel data_140118dc8]  {u\"     Type      : 0x%08x - \"}",
    "call    sub_14000c030",
    "mov     r11, qword [rsp+0x40 {var_a8}]",
    "mov     ecx, dword [rsi+r11+0x18]",
    "mov     eax, ecx",
    "sub     eax, ebp",
    "je      0x1400ac3e6",
    "test    byte [rsi+r11+0x10], 0x4",
    "jne     0x1400ac366",
    "mov     rcx, r13  {data_1400e69c8, u\"%s ; \"}",
    "call    sub_14000c030",
    "mov     rcx, qword [rsp+0x60 {hMem}]",
    "call    qword [rel LocalFree]",
    "call    qword [rel Ordinal_WLDAP32_41]",
    "mov     rcx, qword [rsp+0x50 {var_98}]",
    "test    rcx, rcx",
    "je      0x1400ac92e",
    "mov     r15, qword [rsp+0x48 {ServerName}]",
    "lea     rcx, [rel data_140118e00]  {u\"DOWNLEVEL (DC < 2000)\\n\"}",
    "sub     eax, ebp",
    "je      0x1400ac3dd",
    "mov     eax, dword [rsi+r11+0x14]",
    "lea     rcx, [rel data_140118d90]  {u\"     Parent    : [%2u] %s\\n\"}",
    "mov     r8, rax",
    "mov     edx, eax",
    "imul    r8, r8, 0x38",
    "mov     r8, qword [r8+r11]",
    "call    sub_14000c030",
    "mov     r11, qword [rsp+0x40 {var_a8}]",
    "mov     rbp, rax",
    "test    rax, rax",
    "jne     0x1400ac63b",
    "add     ebx, ebp",
    "add     rdi, 0x8",
    "cmp     ebx, 0x16",
    "jb      0x1400ac410",
    "cmp     ebx, 0x9",
    "jae     0x1400ac42c",
    "lea     rcx, [rel data_140118e30]  {u\"UPLEVEL (DC >= 2000)\\n\"}",
    "jmp     0x1400ac3ed",
    "sub     eax, ebp",
    "je      0x1400ac3d4",
    "lea     rcx, [rel data_1401190e0]  {u\"  %s: \"}",
    "mov     rdx, rbp",
    "call    sub_14000c030",
    "mov     r8, rbp",
    "mov     rdx, r14",
    "mov     rcx, r12",
    "call    qword [rel Ordinal_WLDAP32_142]",
    "mov     r13, rax",
    "test    rax, rax",
    "je      0x1400ac8ad",
    "mov     rcx, qword [rsp+0x58 {var_90}]",
    "test    rcx, rcx",
    "je      0x1400ac8ec",
    "mov     rax, qword [rsp+0x40 {var_a8}]",
    "mov     ecx, ebx",
    "mov     edx, dword [rsi+rax+0x1c]",
    "shr     edx, cl",
    "test    bpl, dl",
    "je      0x1400ac437",
    "xor     ebx, ebx  {0x0}",
    "lea     rdi, [rel data_1400d4fa8]",
    "mov     rdx, r12  {data_1400e17c8}",
    "mov     rdx, qword [rdi]",
    "jmp     0x1400ac42f",
    "call    sub_14000c030",
    "mov     rax, qword [rsp+0x40 {var_a8}]",
    "lea     rcx, [rel data_140118f18]  {u\"     Attributes: 0x%08x ( \"}",
    "mov     edx, dword [rsi+rax+0x1c]",
    "call    sub_14000c030",
    "xor     ebx, ebx  {0x0}",
    "lea     rdi, [rel data_1400d4f60]",
    "lea     rcx, [rel data_140118e60]  {u\"MIT Kerberos realm\\n\"}",
    "jmp     0x1400ac3ed",
    "cmp     eax, ebp",
    "je      0x1400ac3cb",
    "mov     rcx, rbp",
    "call    qword [rel Ordinal_WLDAP32_147]",
    "mov     r8, qword [rsp+0x58 {var_90}]",
    "mov     rdx, r14",
    "mov     rcx, r12",
    "call    qword [rel Ordinal_WLDAP32_167]",
    "lea     rdi, [rel data_140118c40]  {u\"trustPartner\"}",
    "lea     rdx, [rel data_140118cd0]  {u\"objectGUID\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "jne     0x1400ac697",
    "mov     rdx, r14",
    "mov     rcx, r12",
    "call    qword [rel Ordinal_WLDAP32_27]",
    "lea     rdi, [rel data_140118c40]  {u\"trustPartner\"}",
    "mov     r14, rax",
    "test    rax, rax",
    "jne     0x1400ac60a",
    "xor     edx, edx  {0x0}",
    "call    qword [rel Ordinal_WLDAP32_301]",
    "add     ebx, ebp",
    "add     rdi, 0x8",
    "cmp     ebx, 0xa",
    "jb      0x1400ac44b",
    "cmp     ebx, 0x2",
    "jae     0x1400ac468",
    "mov     rcx, r13  {data_1400e69c8, u\"%s ; \"}",
    "call    sub_14000c030",
    "lea     rcx, [rel data_140118e88]  {u\"DCE realm\\n\"}",
    "jmp     0x1400ac3ed",
    "cmp     ecx, 0x5",
    "jb      0x1400ac3a9",
    "mov     rdx, rdi  {data_140118c40, u\"trustPartner\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "je      0x1400ac88e",
    "mov     rcx, qword [r13]",
    "mov     rcx, qword [rcx+0x8]",
    "call    sub_1400130e8",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "jmp     0x1400ac8a4",
    "mov     rdx, r14",
    "mov     rcx, r12",
    "call    qword [rel Ordinal_WLDAP32_133]",
    "lea     rcx, [rel data_1401190d0]  {u\"\\n%s\\n\"}",
    "mov     rdx, rax",
    "call    sub_14000c030",
    "lea     r8, [rsp+0x58 {var_90}]",
    "mov     rdx, r14",
    "mov     rcx, r12",
    "call    qword [rel Ordinal_WLDAP32_127]",
    "jmp     0x1400ac8ce",
    "jmp     0x1400ac91e",
    "mov     rax, qword [rsp+0x40 {var_a8}]",
    "lea     ecx, [rbx+0x16]",
    "mov     edx, dword [rsi+rax+0x1c]",
    "shr     edx, cl",
    "test    bpl, dl",
    "je      0x1400ac473",
    "lea     rcx, [rel data_140118f50]  {u\")\\n     SID       : \"}",
    "call    sub_14000c030",
    "mov     rcx, qword [rsp+0x40 {var_a8}]",
    "mov     rcx, qword [rsi+rcx+0x20]",
    "call    sub_14001311c",
    "lea     rcx, [rel data_140118f78]  {u\"\\n     GUID      : \"}",
    "call    sub_14000c030",
    "mov     rax, qword [rsp+0x40 {var_a8}]",
    "mov     ebx, dword [rsp+0x100 {arg3}]",
    "mov     r11, rbx",
    "imul    r11, r11, 0x38",
    "lea     rcx, [r11+rax+0x28]",
    "call    sub_1400130e8",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "add     ebx, ebp",
    "add     rsi, 0x38",
    "mov     dword [rsp+0x100 {arg3}], ebx",
    "cmp     ebx, dword [rsp+0x108 {DomainCount}]",
    "jb      0x1400ac2c3",
    "mov     rdx, r12  {data_1400e17c8}",
    "mov     rdx, qword [rdi]",
    "jmp     0x1400ac46b",
    "cmp     ecx, 0x100000",
    "jb      0x1400ac3c2",
    "cmp     ecx, 0xfffff",
    "ja      0x1400ac3a9",
    "mov     rax, qword [r13]",
    "lea     rcx, [rel data_1401190f0]  {u\"%*S\\n\"}",
    "mov     r8, qword [rax+0x8]",
    "mov     edx, dword [rax]",
    "call    sub_14000c030",
    "mov     rdx, rsi  {data_140118c60, u\"flatName\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "je      0x1400ac88e",
    "mov     rcx, r13",
    "call    qword [rel Ordinal_WLDAP32_79]",
    "mov     r8, qword [rsp+0x40 {var_a8}]",
    "lea     rcx, [rel data_140118d00]  {u\"\\n[%2u] Netbios   : %s\\n     DNS\u2026\"}",
    "mov     edx, ebx",
    "mov     eax, dword [rsi+r8+0x10]",
    "mov     r9, qword [rsi+r8+0x8]",
    "mov     r8, qword [rsi+r8]",
    "mov     dword [rsp+0x20 {var_c8}], eax",
    "call    sub_14000c030",
    "xor     ebx, ebx  {0x0}",
    "lea     rdi, [rel data_1400d4ef8]",
    "lea     rdi, [rel data_140118c40]  {u\"trustPartner\"}",
    "lea     rsi, [rel data_140118c60]  {u\"flatName\"}",
    "mov     rcx, r13  {data_1400e69c8, u\"%s ; \"}",
    "call    sub_14000c030",
    "lea     rcx, [rel data_140102f48]",
    "jmp     0x1400ac3ed",
    "cmp     ecx, 0xfff00000",
    "ja      0x1400ac3c2",
    "lea     rcx, [rel data_140118ea0]  {u\"reserved for future use\\n\"}",
    "jmp     0x1400ac3ed",
    "mov     rax, qword [r13]",
    "mov     rdx, qword [rax+0x8]",
    "mov     r8d, dword [rax]",
    "test    rdx, rdx",
    "je      0x1400ac6e0",
    "lea     rcx, [rel data_140118ed8]  {u\"provider specific trust level\\n\"}",
    "jmp     0x1400ac3ed",
    "xor     eax, eax  {0x0}",
    "lea     rcx, [rsp+0x48 {ServerName}]",
    "call    sub_140013518",
    "mov     r15, qword [rsp+0x48 {ServerName}]",
    "jmp     0x1400ac6e2",
    "xor     edx, edx  {0x0}",
    "mov     rcx, r15",
    "lea     r8d, [rdx+0xa]",
    "call    qword [rel strtoul]",
    "lea     rcx, [rel data_140119100]  {u\"0x%08x - \"}",
    "mov     edx, eax",
    "mov     edi, eax",
    "call    sub_14000c030",
    "lea     rdx, [rel data_140118c78]  {u\"trustAttributes\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "jne     0x1400ac7b7",
    "test    eax, eax",
    "je      0x1400ac8a4",
    "lea     rdx, [rel data_140118cb8]  {u\"trustType\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "jne     0x1400ac853",
    "xor     ebx, ebx  {0x0}",
    "lea     rsi, [rel data_1400d4f60]",
    "lea     rdx, [rel data_140118c98]  {u\"trustDirection\"}",
    "mov     rcx, rbp",
    "call    qword [rel _wcsicmp]",
    "test    eax, eax",
    "jne     0x1400ac883",
    "sub     edi, 0x1",
    "je      0x1400ac845",
    "inc     ebx",
    "add     rsi, 0x8",
    "cmp     ebx, 0x16",
    "jb      0x1400ac72a",
    "cmp     ebx, 0x9",
    "jae     0x1400ac73e",
    "mov     rcx, r15",
    "call    qword [rel LocalFree]",
    "jmp     0x1400ac8a4",
    "mov     edx, edi",
    "lea     rax, [rel data_1400d4fb8]",
    "lea     rcx, [rel data_1400f7d88]",
    "and     edx, 0x3",
    "mov     rdx, qword [rax+rdx*8]",
    "call    sub_14000c030",
    "lea     rcx, [rel data_140118e00]  {u\"DOWNLEVEL (DC < 2000)\\n\"}",
    "sub     edi, 0x1",
    "je      0x1400ac83c",
    "mov     eax, edi",
    "mov     ecx, ebx",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0x1400ac751",
    "xor     ebx, ebx  {0x0}",
    "lea     rsi, [rel data_1400d4fa8]",
    "lea     rdx, [rel data_1400e17c8]",
    "mov     rdx, qword [rsi]",
    "jmp     0x1400ac745",
    "lea     rcx, [rel data_140118e30]  {u\"UPLEVEL (DC >= 2000)\\n\"}",
    "jmp     0x1400ac84c",
    "sub     edi, 0x1",
    "je      0x1400ac833",
    "inc     ebx",
    "add     rsi, 0x8",
    "cmp     ebx, 0xa",
    "jb      0x1400ac765",
    "cmp     ebx, 0x2",
    "jae     0x1400ac77a",
    "lea     rcx, [rel data_1400e69c8]  {u\"%s ; \"}",
    "call    sub_14000c030",
    "call    sub_14000c030",
    "jmp     0x1400ac883",
    "lea     rcx, [rel data_140118e60]  {u\"MIT Kerberos realm\\n\"}",
    "jmp     0x1400ac84c",
    "cmp     edi, 0x1",
    "je      0x1400ac82a",
    "lea     ecx, [rbx+0x16]",
    "mov     eax, edi",
    "shr     eax, cl",
    "test    al, 0x1",
    "je      0x1400ac78d",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "mov     ebx, dword [rsp+0x100 {arg3}]",
    "lea     rsi, [rel data_140118c60]  {u\"flatName\"}",
    "jmp     0x1400ac883",
    "lea     rdx, [rel data_1400e17c8]",
    "mov     rdx, qword [rsi]",
    "jmp     0x1400ac781",
    "lea     rcx, [rel data_140118e88]  {u\"DCE realm\\n\"}",
    "jmp     0x1400ac84c",
    "mov     rax, qword [rsp+0x40 {var_a8}]",
    "mov     ecx, ebx",
    "imul    rcx, rcx, 0x38",
    "mov     edx, dword [rcx+rax+0x18]",
    "cmp     edx, 0x5",
    "jb      0x1400ac808",
    "lea     rcx, [rel data_1400e69c8]  {u\"%s ; \"}",
    "call    sub_14000c030",
    "cmp     edx, 0x100000",
    "jb      0x1400ac821",
    "cmp     edx, 0xfffff",
    "ja      0x1400ac808",
    "lea     rcx, [rel data_140102f48]",
    "jmp     0x1400ac84c",
    "cmp     edx, 0xfff00000",
    "ja      0x1400ac821",
    "lea     rcx, [rel data_140118ea0]  {u\"reserved for future use\\n\"}",
    "jmp     0x1400ac84c",
    "lea     rcx, [rel data_140118ed8]  {u\"provider specific trust level\\n\"}",
    "jmp     0x1400ac84c"
  ],
  "high_level_IL": [
    "int64_t var_48 = 0",
    "int64_t var_98 = 0",
    "int64_t var_90 = 0",
    "int64_t var_c8 = 0",
    "wchar16 const* const var_68 = u\"trustAttributes\"",
    "wchar16 const* const var_60 = u\"trustDirection\"",
    "wchar16 const* const var_58 = u\"trustType\"",
    "wchar16 const* const var_78 = u\"trustPartner\"",
    "wchar16 const* const var_70 = u\"flatName\"",
    "wchar16 const* const var_50 = u\"objectGUID\"",
    "int64_t ServerName",
    "sub_14000c030(u\"RPC mode: \", sub_140013220(arg1, arg2, u\"server\", &ServerName, nullptr))",
    "struct DS_DOMAIN_TRUSTSW* var_a8",
    "uint32_t rax = DsEnumerateDomainTrustsW(ServerName, 0x3f, &var_a8, &DomainCount)",
    "int64_t rdx_17",
    "int32_t rbx",
    "if (rax != 0)",
    "rdx_17 = sub_14000c030(u\"ERROR kuhl_m_net_trust ; DsEnume\u2026\", zx.q(rax))",
    "rbx = arg3",
    "arg3 = rbx",
    "rbx = 0",
    "arg3 = 0",
    "if (DomainCount u> 0)",
    "int64_t* rsi_1 = nullptr",
    "struct DS_DOMAIN_TRUSTSW* r8_1 = var_a8",
    "*(&r8_1->DnsDomainName + rsi_1)",
    "*(rsi_1 + r8_1)",
    "var_c8.d = *(&r8_1->Flags + rsi_1)",
    "sub_14000c030(u\"\\n[%2u] Netbios   : %s\\n     DNS\u2026\", zx.q(rbx))",
    "int32_t i = 0",
    "wchar16 const (** const rdi_1)[0xa] = &data_1400d4ef8",
    "uint64_t rdx_3",
    "rdx_3 = zx.q(*(&var_a8->Flags + rsi_1) u>> i.b)",
    "if ((1 & rdx_3.b) != 0)",
    "wchar16 const (* rdx_4)[0xa]",
    "if (i u>= 6)",
    "rdx_4 = &data_1400e17c8",
    "rdx_4 = *rdi_1",
    "rdx_3 = sub_14000c030(u\"%s ; \", rdx_4)",
    "i += 1",
    "rdi_1 = &rdi_1[1]",
    "do while (i u< 0x20)",
    "sub_14000c030(u\")\\n\", rdx_3)",
    "struct DS_DOMAIN_TRUSTSW* r11_1 = var_a8",
    "if ((*(&r11_1->Flags + rsi_1) & 1) != 0 && (*(&r11_1->Flags + rsi_1) & 4) == 0)",
    "uint64_t rax_3 = zx.q(*(&r11_1->ParentIndex + rsi_1))",
    "*(rax_3 * 0x38 + r11_1)",
    "sub_14000c030(u\"     Parent    : [%2u] %s\\n\", zx.q(rax_3.d))",
    "r11_1 = var_a8",
    "int64_t rdx_7 = sub_14000c030(u\"     Type      : 0x%08x - \", zx.q(*(&r11_1->TrustType + rsi_1)))",
    "int32_t rcx_2 = *(&var_a8->TrustType + rsi_1)",
    "wchar16 const* const rcx_3",
    "if (rcx_2 == 1)",
    "rcx_3 = u\"DOWNLEVEL (DC < 2000)\\n\"",
    "if (rcx_2 == 2)",
    "rcx_3 = u\"UPLEVEL (DC >= 2000)\\n\"",
    "if (rcx_2 == 3)",
    "rcx_3 = u\"MIT Kerberos realm\\n\"",
    "if (rcx_2 == 4)",
    "rcx_3 = u\"DCE realm\\n\"",
    "if (rcx_2 u>= 5 && rcx_2 u<= 0xfffff)",
    "rcx_3 = u\"reserved for future use\\n\"",
    "if (rcx_2 u< 0x100000 || rcx_2 u> 0xfff00000)",
    "rcx_3 = &data_140102f48",
    "rcx_3 = u\"provider specific trust level\\n\"",
    "sub_14000c030(rcx_3, rdx_7)",
    "sub_14000c030(u\"     Attributes: 0x%08x ( \", zx.q(*(&var_a8->TrustAttributes + rsi_1)))",
    "int32_t i_1 = 0",
    "wchar16 const (** const rdi_2)[0xf] = &data_1400d4f60",
    "if ((1 & (*(&var_a8->TrustAttributes + rsi_1) u>> i_1.b).b) != 0)",
    "wchar16 const (* rdx_11)[0xf]",
    "if (i_1 u>= 9)",
    "rdx_11 = &data_1400e17c8",
    "rdx_11 = *rdi_2",
    "sub_14000c030(u\"%s ; \", rdx_11)",
    "i_1 += 1",
    "rdi_2 = &rdi_2[1]",
    "do while (i_1 u< 0x16)",
    "int32_t i_2 = 0",
    "wchar16 const (** const rdi_3)[0xc] = &data_1400d4fa8",
    "uint64_t rdx_13",
    "rdx_13 = zx.q(*(&var_a8->TrustAttributes + rsi_1) u>> (i_2.b + 0x16))",
    "if ((1 & rdx_13.b) != 0)",
    "wchar16 const (* rdx_14)[0xc]",
    "if (i_2 u>= 2)",
    "rdx_14 = &data_1400e17c8",
    "rdx_14 = *rdi_3",
    "rdx_13 = sub_14000c030(u\"%s ; \", rdx_14)",
    "i_2 += 1",
    "rdi_3 = &rdi_3[1]",
    "do while (i_2 u< 0xa)",
    "sub_14000c030(u\")\\n     SID       : \", rdx_13)",
    "*(&var_a8->DomainSid + rsi_1)",
    "sub_14000c030(u\"\\n     GUID      : \", sub_14001311c())",
    "sub_14000c030(U\"\\n\", sub_1400130e8())",
    "rbx = arg3 + 1",
    "rsi_1 = &rsi_1[7]",
    "arg3 = rbx",
    "do while (rbx u< DomainCount)",
    "rdx_17 = NetApiBufferFree(var_a8)",
    "sub_14000c030(u\"\\n\\nLDAP mode: \", rdx_17)",
    "int64_t ServerName_1",
    "int64_t rdx_19",
    "ServerName_1, rdx_19 = Ordinal_WLDAP32_145(ServerName, 0x185)",
    "ServerName = ServerName_1",
    "HLOCAL hMem_1",
    "int32_t rax_12",
    "if (ServerName_1 == 0)",
    "sub_14000c030(u\"ERROR kull_m_ldap_getLdapAndRoot\u2026\", rdx_19)",
    "rax_12 = 0",
    "rax_12 = sub_14000b23c(u\"defaultNamingContext\", &ServerName, &hMem_1, 0)",
    "if (rax_12 != 0)",
    "HLOCAL hMem",
    "if (sub_140013b1c(&hMem, u\"CN=System,%s\", hMem_1) != 0)",
    "int32_t rax_14 = Ordinal_WLDAP32_208(ServerName_1, hMem, 1, u\"(objectClass=trustedDomain)\", &var_78, 0, &var_98)",
    "if (rax_14 != 0)",
    "sub_14000c030(u\"ERROR kuhl_m_net_trust ; ldap_se\u2026\", zx.q(rax_14))",
    "sub_14000c030(u\"%u entries\\n\", zx.q(Ordinal_WLDAP32_36(ServerName_1, var_98)))",
    "int64_t i_5 = Ordinal_WLDAP32_26(ServerName_1, var_98)",
    "int64_t i_4 = i_5",
    "if (i_5 != 0)",
    "int64_t ServerName_2 = ServerName",
    "int64_t i_3",
    "sub_14000c030(u\"\\n%s\\n\", Ordinal_WLDAP32_133(ServerName_1, i_4))",
    "wchar16* string1 = Ordinal_WLDAP32_127(ServerName_1, i_4, &var_90)",
    "while (string1 != 0)",
    "sub_14000c030(u\"  %s: \", string1)",
    "int64_t rax_17 = Ordinal_WLDAP32_142(ServerName_1, i_4, string1)",
    "if (rax_17 != 0)",
    "if (_wcsicmp(string1, u\"objectGUID\") != 0)",
    "int32_t rax_19 = _wcsicmp(string1, u\"trustPartner\")",
    "int32_t rax_20",
    "if (rax_19 != 0)",
    "rax_20 = _wcsicmp(string1, u\"flatName\")",
    "if (rax_19 == 0 || rax_20 == 0)",
    "int32_t* rax_32 = *rax_17",
    "*(rax_32 + 8)",
    "sub_14000c030(u\"%*S\\n\", zx.q(*rax_32))",
    "int32_t* rax_21 = *rax_17",
    "int64_t rdx_31 = *(rax_21 + 8)",
    "int32_t rax_22",
    "if (rdx_31 == 0)",
    "rax_22 = 0",
    "rax_22 = sub_140013518(&ServerName, rdx_31, zx.q(*rax_21))",
    "ServerName_2 = ServerName",
    "if (rax_22 != 0)",
    "uint32_t rax_23 = strtoul(ServerName_2, nullptr, 0xa)",
    "sub_14000c030(u\"0x%08x - \", zx.q(rax_23))",
    "int32_t rax_24",
    "int64_t rdx_33",
    "rax_24, rdx_33 = _wcsicmp(string1, u\"trustAttributes\")",
    "if (rax_24 != 0)",
    "int32_t rax_29",
    "uint64_t TrustType",
    "rax_29, TrustType = _wcsicmp(string1, u\"trustType\")",
    "if (rax_29 != 0)",
    "if (_wcsicmp(string1, u\"trustDirection\") == 0)",
    "sub_14000c030(u\"%s\\n\", (&data_1400d4fb8)[zx.q(rax_23) & 3])",
    "wchar16* rcx_31",
    "if (rax_23 == 1)",
    "rcx_31 = u\"DOWNLEVEL (DC < 2000)\\n\"",
    "if (rax_23 == 2)",
    "rcx_31 = u\"UPLEVEL (DC >= 2000)\\n\"",
    "if (rax_23 == 3)",
    "rcx_31 = u\"MIT Kerberos realm\\n\"",
    "if (rax_23 == 4)",
    "rcx_31 = u\"DCE realm\\n\"",
    "TrustType = zx.q(var_a8[zx.q(rbx)].TrustType)",
    "if (TrustType.d u>= 5 && TrustType.d u<= 0xfffff)",
    "rcx_31 = u\"reserved for future use\\n\"",
    "if (TrustType.d u< 0x100000 || TrustType.d u> 0xfff00000)",
    "rcx_31 = &data_140102f48",
    "rcx_31 = u\"provider specific trust level\\n\"",
    "sub_14000c030(rcx_31, TrustType)",
    "int32_t k = 0",
    "wchar16 const (** const rsi_2)[0xf] = &data_1400d4f60",
    "if (((rax_23 u>> k.b).b & 1) != 0)",
    "wchar16 const (* rdx_34)[0xf]",
    "if (k u>= 9)",
    "rdx_34 = &data_1400e17c8",
    "rdx_34 = *rsi_2",
    "rdx_33 = sub_14000c030(u\"%s ; \", rdx_34)",
    "k += 1",
    "rsi_2 = &rsi_2[1]",
    "do while (k u< 0x16)",
    "int32_t k_1 = 0",
    "wchar16 const (** const rsi_3)[0xc] = &data_1400d4fa8",
    "if (((rax_23 u>> (k_1.b + 0x16)).b & 1) != 0)",
    "wchar16 const (* rdx_35)[0xc]",
    "if (k_1 u>= 2)",
    "rdx_35 = &data_1400e17c8",
    "rdx_35 = *rsi_3",
    "rdx_33 = sub_14000c030(u\"%s ; \", rdx_35)",
    "k_1 += 1",
    "rsi_3 = &rsi_3[1]",
    "do while (k_1 u< 0xa)",
    "sub_14000c030(U\"\\n\", rdx_33)",
    "rbx = arg3",
    "LocalFree(ServerName_2)",
    "*(*rax_17 + 8)",
    "sub_14000c030(U\"\\n\", sub_1400130e8())",
    "Ordinal_WLDAP32_79(rax_17)",
    "Ordinal_WLDAP32_147(string1)",
    "string1 = Ordinal_WLDAP32_167(ServerName_1, i_4, var_90)",
    "int64_t rcx_37 = var_90",
    "if (rcx_37 != 0)",
    "Ordinal_WLDAP32_301(rcx_37, 0)",
    "i_3 = Ordinal_WLDAP32_27(ServerName_1, i_4)",
    "i_4 = i_3",
    "do while (i_3 != 0)",
    "int64_t rcx_39 = var_98",
    "if (rcx_39 != 0)",
    "Ordinal_WLDAP32_41(rcx_39)",
    "LocalFree(hMem)",
    "LocalFree(hMem_1)",
    "Ordinal_WLDAP32_13(ServerName_1)",
    "return 0"
  ]
}