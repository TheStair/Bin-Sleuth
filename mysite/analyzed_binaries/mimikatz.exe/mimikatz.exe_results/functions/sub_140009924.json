{
  "address": "0x140009924",
  "rules": [
    "encrypt or decrypt via WinCrypt",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "allocate or change RWX memory/e5d60c23edee4683a25ac882b99be25c/be08ffa5ddd942e8ab0706a663121e4b",
    "contain loop"
  ],
  "disassembly": [
    "mov     qword [rsp+0x10], rbx",
    "mov     qword [rsp+0x20], r9",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "push    r12",
    "push    r13",
    "push    r14",
    "push    r15",
    "sub     rsp, 0x60",
    "mov     esi, dword [rcx+0x1c]",
    "mov     eax, 0x8004",
    "mov     rbp, rcx",
    "xor     edi, edi",
    "cmp     esi, 0x8009",
    "mov     r15, rdx",
    "cmove   esi, eax",
    "mov     ecx, esi",
    "call    sub_1400049d0",
    "mov     ecx, dword [rbp+0x28]",
    "call    sub_140004af4",
    "mov     ecx, dword [rbp+0x28]",
    "mov     ebx, eax",
    "call    sub_140004a60",
    "lea     ecx, [rdi+0x40]",
    "lea     r13d, [rax+rbx]",
    "mov     edx, r13d",
    "call    qword [rel LocalAlloc]",
    "mov     r12, rax",
    "test    rax, rax",
    "je      0x140009b2a",
    "mov     eax, edi",
    "mov     rbx, qword [rsp+0xa8]",
    "add     rsp, 0x60",
    "pop     r15",
    "pop     r14",
    "pop     r13",
    "pop     r12",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "retn    ",
    "mov     dword [rsp+0x40], 0x1",
    "mov     dword [rsp+0x38], r13d",
    "mov     qword [rsp+0x30], rax",
    "mov     eax, dword [rbp+0x20]",
    "lea     r13d, [rdi+0x14]",
    "lea     r14d, [rdi+0x10]",
    "mov     dword [rsp+0x28], eax",
    "lea     r9, [rbp+0x34]",
    "mov     r8d, r13d",
    "mov     rdx, r15",
    "mov     ecx, esi",
    "mov     dword [rsp+0x20], r14d",
    "call    sub_140003fc8",
    "test    eax, eax",
    "je      0x140009b21",
    "mov     rcx, r12",
    "call    qword [rel LocalFree]",
    "mov     ecx, dword [rbp+0x28]",
    "lea     rax, [rsp+0x58]",
    "xor     r9d, r9d",
    "mov     qword [rsp+0x28], rax",
    "lea     rax, [rsp+0x50]",
    "mov     r8d, ebx",
    "mov     rdx, r12",
    "mov     qword [rsp+0x20], rax",
    "call    sub_140004704",
    "test    eax, eax",
    "je      0x140009b0d",
    "call    qword [rel GetLastError]",
    "lea     rcx, [rel data_1400ea7d0]  {u\"ERROR kull_m_dpapi_unprotect_cre\u2026\"}",
    "mov     rcx, qword [rsp+0x50]",
    "lea     r8, [r12+rbx]",
    "lea     edx, [rdi+0x1]",
    "xor     r9d, r9d",
    "call    qword [rel CryptSetKeyParam]",
    "test    eax, eax",
    "je      0x140009ae5",
    "mov     rcx, qword [rsp+0x50]",
    "call    qword [rel CryptDestroyKey]",
    "mov     rcx, qword [rsp+0x58]",
    "call    sub_140003d2c",
    "test    eax, eax",
    "jne     0x140009b21",
    "mov     eax, dword [rbp+0x54]",
    "lea     ecx, [rdi+0x40]",
    "mov     rdx, rax",
    "mov     dword [rsp+0xa0], eax",
    "call    qword [rel LocalAlloc]",
    "mov     rsi, rax",
    "test    rax, rax",
    "je      0x140009ae5",
    "call    qword [rel GetLastError]",
    "lea     rcx, [rel data_1400ea6e0]  {u\"ERROR kull_m_dpapi_unprotect_cre\u2026\"}",
    "jmp     0x140009b1a",
    "mov     r8d, dword [rsp+0xa0]",
    "mov     rdx, qword [rbp+0x4c]",
    "mov     rcx, rax",
    "call    memcpy",
    "mov     rcx, qword [rsp+0x50]",
    "lea     r11, [rsp+0xa0]",
    "mov     qword [rsp+0x28], r11",
    "xor     r9d, r9d",
    "xor     r8d, r8d",
    "xor     edx, edx",
    "mov     qword [rsp+0x20], rsi",
    "call    qword [rel CryptDecrypt]",
    "test    eax, eax",
    "je      0x140009adc",
    "mov     edx, eax",
    "call    sub_14000c030",
    "mov     rcx, rsi",
    "call    qword [rel LocalFree]",
    "cmp     dword [rbp+0x2c], r13d",
    "mov     rcx, qword [rsp+0xc0]",
    "mov     rdx, rsi",
    "cmovb   r13d, dword [rbp+0x2c]",
    "mov     r8d, r13d",
    "call    memcpy",
    "mov     ebx, dword [rbp+0x30]",
    "mov     ebp, dword [rbp+0x2c]",
    "mov     rcx, qword [rsp+0xb8]",
    "cmp     ebx, r14d",
    "cmovb   r14d, ebx",
    "add     rbp, rsi",
    "mov     rdx, rbp",
    "mov     r8d, r14d",
    "call    memcpy",
    "add     ebx, 0xfffffff0",
    "mov     edi, 0x1",
    "je      0x140009adc",
    "xor     edx, edx",
    "test    ebx, ebx",
    "je      0x140009adc",
    "lea     rcx, [rbp+0x10]",
    "xor     eax, eax",
    "cmp     byte [rcx], al",
    "sete    al",
    "inc     edx",
    "inc     rcx",
    "and     edi, eax",
    "cmp     edx, ebx",
    "jb      0x140009ac6",
    "test    edi, edi",
    "je      0x140009adc"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}