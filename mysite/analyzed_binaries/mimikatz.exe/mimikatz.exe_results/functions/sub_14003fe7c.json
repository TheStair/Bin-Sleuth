{
  "address": "0x14003fe7c",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/a3c4a1cc0982489686093c2de66a39c8",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "PEB access/e2c35c8722ff407f92bb1a8869064106",
    "encrypt data using TEA/a99f0fb4fab7434084917883a6622883/6cf0dbdc06cf4e518b05ed91d6a55995",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/b698edc3bfd142ebb8f43c55408819b5",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "decrypt data using TEA/b1609112b4574d7d84a6736fb833fd96/bfe99336573d4b5189dbca2cbd3ed1f2"
  ],
  "disassembly": [
    "mov     qword [rsp+0x18], rbx",
    "mov     qword [rsp+0x8], rcx",
    "push    rbp",
    "push    rsi",
    "push    rdi",
    "sub     rsp, 0x50",
    "movsxd  rax, dword [rdx]",
    "mov     qword [rdx+0x8], rcx",
    "xor     ecx, ecx",
    "mov     rsi, rdx",
    "mov     qword [rsp+0x88], rcx",
    "mov     qword [rsp+0x40], rax",
    "test    rax, rax",
    "jle     0x14003ff70",
    "mov     ebx, dword [rsi]",
    "dec     ebx",
    "movsxd  rdi, ebx",
    "test    ebx, ebx",
    "jle     0x14004003f",
    "xor     ebp, ebp",
    "mov     rax, qword [rsp+0x70]",
    "mov     rax, qword [rax+0x18]",
    "movzx   eax, byte [rax+0x13]",
    "lea     rcx, [rdi*8+0x4]",
    "mov     qword [rsp+0x30], rcx",
    "inc     rcx",
    "add     rbp, 0x50",
    "cmp     rcx, qword [rsp+0x40]",
    "mov     qword [rsp+0x88], rcx",
    "jl      0x14003feb1",
    "mov     rdi, qword [rbx]",
    "mov     rdx, qword [rbx+0x8]",
    "xor     r8d, r8d",
    "mov     rax, qword [rdi+0x10]",
    "mov     rcx, rdi",
    "mov     rax, qword [rax+0x20]",
    "mov     qword [rsp+0x30], rax",
    "call    sub_14003fe7c",
    "test    eax, eax",
    "jne     0x14004004c",
    "mov     rax, qword [rsi+0x10]",
    "mov     ebp, dword [rax+rdi*8]",
    "mov     ecx, dword [rcx+rax]",
    "mov     ebp, ebx",
    "sub     ebp, eax",
    "add     ebp, ebp",
    "lea     ecx, [rbp+0x1]",
    "jmp     0x14003ffac",
    "mov     rax, qword [rsi+0x18]",
    "add     rax, rbp",
    "mov     qword [rsp+0x38], rax",
    "mov     rbx, qword [rax+0x48]",
    "test    rbx, rbx",
    "je      0x14003ff56",
    "mov     rbx, qword [rsp+0x80]",
    "add     rsp, 0x50",
    "pop     rdi",
    "pop     rsi",
    "pop     rbp",
    "retn    ",
    "mov     eax, dword [rbx+0x18]",
    "mov     dword [rsp+0x78], eax",
    "lea     rax, [rdi+0x58]",
    "cmp     qword [rax], 0x0",
    "jne     0x14003ff24",
    "mov     rax, qword [rsi+0x10]",
    "dec     ebx",
    "mov     dword [rax+rdi*4], ecx",
    "mov     rcx, qword [rsp+0x30]",
    "dec     rdi",
    "sub     rcx, 0x8",
    "mov     qword [rsp+0x30], rcx",
    "test    rdi, rdi",
    "jg      0x14003ff8c",
    "cmp     qword [rdx+0x18], 0x0",
    "jne     0x14003ffe0",
    "movsxd  rax, ebp",
    "mov     dword [rsp+0x78], ecx",
    "lea     r8, [rax+rax*4]",
    "movsxd  rax, ecx",
    "shl     r8, 0x4",
    "lea     rdx, [rax+rax*4]",
    "add     r8, qword [rsi+0x18]",
    "shl     rdx, 0x4",
    "add     rdx, qword [rsi+0x18]",
    "cmp     qword [r8+0x18], 0x0",
    "je      0x14004001c",
    "mov     rax, qword [rax]",
    "mov     rcx, qword [rsp+0x38]",
    "mov     qword [rbx+0x38], rax",
    "mov     rax, qword [rdi+0x60]",
    "mov     qword [rbx+0x10], rax",
    "movsxd  rax, dword [rsp+0x78]",
    "add     qword [rdi+0x60], rax",
    "call    sub_14003ebc8",
    "test    eax, eax",
    "jne     0x14004004c",
    "mov     rdx, qword [rdi+0x60]",
    "mov     rcx, qword [rsp+0x30]",
    "mov     r8, rax",
    "call    sub_14003f380",
    "and     qword [rdi+0x60], 0x0",
    "test    eax, eax",
    "jne     0x14004004c",
    "mov     eax, dword [rsi]",
    "cdq     ",
    "sub     eax, edx",
    "sar     eax, 0x1",
    "cmp     ebx, eax",
    "jl      0x14003ffa2",
    "mov     eax, dword [rdx+0x14]",
    "mov     r10, qword [rsi+0x8]",
    "mov     r9d, dword [r8+0x14]",
    "mov     r8, qword [r8+0x28]",
    "and     dword [rsp+0x88], 0x0",
    "mov     dword [rsp+0x28], eax",
    "mov     rax, qword [rdx+0x28]",
    "lea     rdx, [rsp+0x88]",
    "mov     rcx, r10",
    "mov     qword [rsp+0x20], rax",
    "call    qword [r10+0x40]",
    "mov     ecx, dword [rsp+0x78]",
    "test    eax, eax",
    "cmovle  ecx, ebp",
    "mov     ecx, ebp",
    "jmp     0x14004001c",
    "mov     rcx, qword [rsp+0x88]",
    "lea     rax, [rdi+0x58]"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}