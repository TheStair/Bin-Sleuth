{
  "address": "0x140076e70",
  "rules": [
    "check Internet connectivity via WinINet/e5536f56688049548c83e5cf372d25ac",
    "check OS version/fa26a21322994ec4bdbe5020e62bd777",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "hash data with CRC32/7620b456d97a4aaeb63e1213270df3d4",
    "check OS version/0dbc6332c9724004b686b44a39c40b94",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "check OS version/e331473c09f0419eb22f4786f6872060",
    "64-bit execution via heavens gate/d7fcc2def38746b09a33d0c7032e9b82",
    "contain loop"
  ],
  "disassembly": [
    "mov     qword [rsp+0x18 {__saved_rbx}], rbx",
    "mov     qword [rsp+0x8 {arg_8}], rcx",
    "push    rbp {__saved_rbp}",
    "push    rsi {__saved_rsi}",
    "push    rdi {__saved_rdi}",
    "push    r12 {__saved_r12}",
    "push    r13 {__saved_r13}",
    "push    r14 {__saved_r14}",
    "push    r15 {__saved_r15}",
    "sub     rsp, 0x30",
    "mov     rax, qword [rcx]",
    "mov     rdi, qword [rsp+0x90 {arg5}]",
    "mov     rbx, qword [rcx+0x18]",
    "mov     r12, qword [rax]",
    "mov     r15, qword [rax+0x8]",
    "movsxd  r11, dword [rdi]",
    "mov     rbp, qword [rcx+0x8]",
    "mov     rsi, qword [rdi+0x20]",
    "movzx   r13d, byte [rbx+0x10]",
    "imul    r13, r13, 0x70",
    "mov     rax, qword [rsp+0xa0 {arg7}]",
    "xor     r14d, r14d  {0x0}",
    "mov     qword [rbx], rdx",
    "cmp     r11d, r14d",
    "mov     rdx, qword [rdi+0x8]",
    "mov     r10, r8",
    "mov     dword [rax], r14d  {0x0}",
    "mov     qword [rsp+0x20 {var_48}], rbp",
    "mov     qword [rsp+0x78 {arg_10}], rsi",
    "jle     0x140076f11",
    "mov     r8, r11",
    "xor     edx, edx  {0x0}",
    "mov     rcx, rsi",
    "shl     r8, 0x3",
    "mov     r14, r11",
    "call    memset",
    "xor     edx, edx  {0x0}",
    "mov     qword [rdi+0x48], 0x19",
    "mov     qword [rdi+0x30], rdx  {0x0}",
    "mov     dword [rdi+0x28], edx  {0x0}",
    "mov     dword [rdi+0x3c], edx  {0x0}",
    "mov     dword [rdi+0x50], edx  {0x0}",
    "mov     rax, 0x546d42aea2879f2e",
    "mov     qword [rdi+0x40], rax  {0x546d42aea2879f2e}",
    "mov     rax, qword [r13+r15+0x60]",
    "mov     qword [rdi+0x58], rax",
    "mov     rax, qword [r13+r15+0x28]",
    "mov     rcx, qword [rax+0x60]",
    "cmp     rcx, rdx",
    "je      0x140076f73",
    "add     rdx, 0x5",
    "mov     r8d, r11d",
    "mov     rbp, qword [rcx+0x10]",
    "mov     rdx, rdi",
    "mov     rax, qword [rbp]",
    "mov     rcx, rbp",
    "call    qword [rax+0x18]",
    "mov     esi, eax",
    "xor     eax, eax  {0x0}",
    "cmp     esi, eax",
    "je      0x140076fc3",
    "mov     rax, qword [r12]",
    "add     rdx, 0xc",
    "sub     r8, 0x1",
    "jne     0x140076ee1",
    "test    word [rcx+0x14], r9w",
    "jne     0x140076f07",
    "mov     rcx, qword [rbp+0x10]",
    "call    sub_140016950",
    "xor     r10d, r10d  {0x0}",
    "mov     qword [rbp+0x10], r10  {0x0}",
    "cmp     esi, r10d",
    "je      0x140076fe6",
    "cmp     esi, 0x13",
    "je      0x140076fc3",
    "mov     rcx, qword [rcx+0x28]",
    "cmp     rcx, rdx",
    "jne     0x140076f65",
    "movsxd  rcx, dword [rdx+0x3]",
    "shl     rcx, 0x6",
    "add     rcx, qword [rbp+0x20]",
    "mov     byte [rdx], r14b  {0x0}",
    "mov     rax, qword [rcx+0x30]",
    "and     rax, r10",
    "cmp     rax, qword [rcx+0x30]",
    "jne     0x140076f07",
    "mov     byte [rdx], 0x1",
    "or      esi, 0xffffffff",
    "cmp     r14, r10",
    "mov     rcx, r10  {0x0}",
    "lea     r9d, [rsi+0x2]  {0x1}",
    "jle     0x140077005",
    "cmp     esi, 0x13",
    "cmove   esi, r10d  {0x0}",
    "mov     eax, esi",
    "jmp     0x140077253",
    "cmp     esi, 0x7",
    "jne     0x140076fa1",
    "cmp     qword [rcx], rax",
    "je      0x140076f73",
    "cmp     r14, r10",
    "mov     word [rbx+0x1e], r10w  {0x0}",
    "mov     rax, qword [rdi+0x8]",
    "mov     rdx, r10  {0x0}",
    "jle     0x1400770e7",
    "mov     rax, qword [rbx+0x38]",
    "mov     qword [rax+rcx*8], r10  {0x0}",
    "add     rcx, r9",
    "cmp     rcx, r14",
    "jl      0x140076ff5",
    "mov     rbx, qword [rsp+0x80 {__saved_rbx}]",
    "add     rsp, 0x30",
    "pop     r15 {__saved_r15}",
    "pop     r14 {__saved_r14}",
    "pop     r13 {__saved_r13}",
    "pop     r12 {__saved_r12}",
    "pop     rdi {__saved_rdi}",
    "pop     rsi {__saved_rsi}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     r8, qword [rbp+0x10]",
    "cmp     r8, rax",
    "jne     0x140076fb4",
    "mov     rcx, qword [r12]",
    "call    sub_140016efc",
    "jmp     0x140076fc3",
    "movzx   eax, word [rsp+0x98 {arg6}]",
    "mov     ecx, r10d  {0x0}",
    "not     ax",
    "and     word [rbx+0x1e], ax",
    "cmp     esi, r10d",
    "lea     eax, [r9+rsi]",
    "mov     word [rbx+0x2c], ax",
    "jl      0x14007711a",
    "lea     r8, [rax+0x5]",
    "mov     rax, qword [rsp+0x78 {arg_10}]",
    "mov     ebp, r14d",
    "lea     rdx, [rel data_1400f38e8]",
    "mov     rcx, r12",
    "call    sub_1400191b8",
    "mov     ecx, esi",
    "call    sub_14008335c",
    "mov     r8, rax",
    "mov     eax, dword [rdi+0x28]",
    "mov     dword [rbx+0x18], eax",
    "mov     al, byte [rdi+0x38]",
    "mov     byte [rbx+0x1c], al",
    "mov     rax, qword [rdi+0x30]",
    "mov     dword [rdi+0x38], r10d  {0x0}",
    "mov     qword [rbx+0x20], rax",
    "cmp     dword [rdi+0x3c], r10d",
    "je      0x14007717f",
    "mov     rax, qword [rbx+0x38]",
    "add     rdx, r9",
    "add     r8, 0xc",
    "cmp     rdx, r14",
    "jl      0x140077026",
    "cmp     ecx, ebp",
    "movsxd  rax, dword [r8+0x3]",
    "jge     0x14007713d",
    "mov     eax, r10d  {0x0}",
    "mov     eax, dword [rdi+0x10]",
    "jmp     0x140077182",
    "mov     r8, qword [r13+r15+0x28]",
    "lea     rdx, [rel data_1400f7598]  {\"%s.xBestIndex malfunction\"}",
    "mov     rcx, r12",
    "mov     r8, qword [r8]",
    "call    sub_1400191b8",
    "mov     eax, 0x1",
    "jmp     0x140077253",
    "add     ecx, r9d",
    "add     rax, 0x8",
    "cmp     ecx, esi",
    "jle     0x14007710a",
    "mov     ecx, dword [rax+rdx*8]",
    "sub     ecx, r9d",
    "js      0x1400770d7",
    "mov     r8, qword [r13+r15+0x28]",
    "lea     rdx, [rel data_1400f7598]  {\"%s.xBestIndex malfunction\"}",
    "mov     rcx, r12",
    "mov     r8, qword [r8]",
    "call    sub_1400191b8",
    "mov     eax, 0x1",
    "jmp     0x140077253",
    "cmp     eax, r10d",
    "jl      0x14007713d",
    "comisd  xmm0, qword [rel data_140130130]",
    "ja      0x1400771eb  {data_140130130}",
    "mov     cx, r10w  {0x0}",
    "jmp     0x14007720c",
    "mov     byte [rbx+0x1d], al",
    "mov     word [rbx+0x12], r10w  {0x0}",
    "movsd   xmm0, qword [rdi+0x40]",
    "comisd  xmm0, qword [rel data_1401300f8]",
    "movsd   qword [rsp+0xa0 {arg7}], xmm0",
    "ja      0x1400771a8",
    "cmp     qword [rax], r10",
    "je      0x14007715e",
    "mov     r9, qword [rsp+0x20 {var_48}]",
    "cmp     eax, dword [r9+0x14]",
    "jge     0x14007713d",
    "mov     rcx, qword [rsp+0xa0 {arg7}]",
    "mov     eax, 0x3fe",
    "shr     rcx, 0x34",
    "sub     cx, ax",
    "movzx   eax, cx",
    "shl     ax, 0x2",
    "add     cx, ax",
    "add     cx, cx",
    "movsd   xmm1, qword [rel data_1401300e0]",
    "xor     eax, eax  {0x0}",
    "comisd  xmm0, xmm1",
    "jbe     0x1400771d9",
    "mov     word [rbx+0x14], cx",
    "mov     rcx, qword [rdi+0x48]",
    "call    sub_14001a0b8",
    "mov     word [rbx+0x16], ax",
    "test    byte [rdi+0x50], r9b",
    "je      0x14007722a",
    "mov     r11, qword [rbx+0x38]",
    "movsxd  r10, ecx",
    "xor     r9d, r9d  {0x0}",
    "cmp     qword [r11+r10*8], r9",
    "jne     0x14007713d",
    "btr     dword [rbx+0x28], 0xc",
    "bts     dword [rbx+0x28], 0xc",
    "jmp     0x14007722f",
    "cvttsd2si rcx, xmm0",
    "add     rcx, rax",
    "call    sub_14001a0b8",
    "mov     cx, ax",
    "jmp     0x14007720c",
    "subsd   xmm0, xmm1",
    "comisd  xmm0, xmm1",
    "jae     0x1400771d9",
    "cmp     byte [r8], r9b",
    "je      0x14007713d",
    "mov     eax, edi",
    "mov     rcx, qword [rbx+0x20]",
    "call    sub_140016950",
    "mov     byte [rbx+0x1c], 0x0",
    "mov     rcx, qword [rsp+0x70 {arg_8}]",
    "mov     rdx, rbx",
    "call    sub_140075954",
    "cmp     byte [rbx+0x1c], 0x0",
    "mov     edi, eax",
    "je      0x140077251",
    "mov     rcx, 0x8000000000000000",
    "mov     rax, rcx  {-0x8000000000000000}",
    "mov     r9, rax",
    "mov     rax, qword [rsp+0x20 {var_48}]",
    "shl     r9, 0x6",
    "add     r9, qword [rax+0x20]",
    "mov     rax, qword [r9+0x30]",
    "or      qword [rbx], rax",
    "mov     rax, qword [rsp+0x78 {arg_10}]",
    "cmp     ecx, esi",
    "cmovg   esi, ecx",
    "mov     qword [r11+r10*8], r9",
    "xor     r10d, r10d  {0x0}",
    "cmp     ecx, 0x10",
    "jge     0x1400770b7",
    "test    byte [r9+0x14], 0x1",
    "mov     r9d, 0x1",
    "je      0x1400770d7",
    "cmp     byte [rax+rdx*8+0x4], r10b",
    "je      0x1400770b7",
    "mov     rcx, qword [rsp+0xa0 {arg7}]",
    "and     dword [rdi+0x50], 0xfffffffe",
    "mov     dword [rdi+0x3c], r10d  {0x0}",
    "mov     dword [rcx], r9d  {0x1}",
    "lea     eax, [r10+0x1]",
    "shl     ax, cl",
    "or      word [rbx+0x1e], ax",
    "mov     rax, qword [rsp+0x78 {arg_10}]"
  ],
  "high_level_IL": [
    "int64_t* rax = *arg1",
    "int64_t* rbx = arg1[3]",
    "int64_t* r12 = *rax",
    "int64_t r15 = rax[1]",
    "int64_t r11 = sx.q(*arg5)",
    "void* rbp = arg1[1]",
    "int64_t rsi = *(arg5 + 0x20)",
    "int64_t r13_1 = zx.q(rbx[2].b) * 0x70",
    "*rbx = arg2",
    "void* rdx = *(arg5 + 8)",
    "*arg7 = 0",
    "if (r11.d s> 0)",
    "char* rdx_1 = rdx + 5",
    "uint64_t i_1 = zx.q(r11.d)",
    "uint64_t i",
    "void* rcx_2 = (sx.q(*(rdx_1 + 3)) << 6) + *(rbp + 0x20)",
    "*rdx_1 = 0",
    "if ((*(rcx_2 + 0x30) & arg3) == *(rcx_2 + 0x30) && (*(rcx_2 + 0x14) & arg4) == 0)",
    "*rdx_1 = 1",
    "rdx_1 = &rdx_1[0xc]",
    "i = i_1",
    "i_1 -= 1",
    "do while (i != 1)",
    "int512_t zmm0 = memset(rsi, 0, r11 << 3)",
    "*(arg5 + 0x48) = 0x19",
    "*(arg5 + 0x30) = 0",
    "arg5[0xa] = 0",
    "arg5[0xf] = 0",
    "arg5[0x14] = 0",
    "*(arg5 + 0x40) = 0x546d42aea2879f2e",
    "*(arg5 + 0x58) = *(r13_1 + r15 + 0x60)",
    "int64_t* rcx_4 = *(*(r13_1 + r15 + 0x28) + 0x60)",
    "if (rcx_4 != 0)",
    "while (*rcx_4 != *r12)",
    "rcx_4 = rcx_4[5]",
    "if (rcx_4 == 0)",
    "break",
    "int64_t* rbp_1 = rcx_4[2]",
    "int32_t rsi_1 = (*(*rbp_1 + 0x18))(rbp_1, arg5)",
    "if (rsi_1 != 0 && rsi_1 != 0x13)",
    "if (rsi_1 != 7)",
    "char* r8_2 = rbp_1[2]",
    "if (r8_2 == 0)",
    "r8_2 = sub_14008335c(rsi_1)",
    "zmm0 = sub_1400191b8(r12, \"%s\", r8_2, zmm0)",
    "sub_140016efc(*r12)",
    "sub_140016950(rbp_1[2])",
    "rbp_1[2] = 0",
    "if (rsi_1 != 0)",
    "if (rsi_1 == 0x13)",
    "rsi_1 = 0",
    "return zx.q(rsi_1)",
    "int32_t rsi_2 = -1",
    "int64_t rcx_10 = 0",
    "if (r11 s> 0)",
    "*(rbx[7] + (rcx_10 << 3)) = 0",
    "rcx_10 += 1",
    "do while (rcx_10 s< r11)",
    "*(rbx + 0x1e) = 0",
    "int64_t rdx_3 = 0",
    "if (r11 s> 0)",
    "char* r8_3 = *(arg5 + 8) + 5",
    "int64_t rax_13 = rsi",
    "int32_t rcx_11 = *(rax_13 + (rdx_3 << 3))",
    "if (rcx_11 - 1 s>= 0)",
    "int64_t rax_14 = sx.q(*(r8_3 + 3))",
    "int64_t r10_1",
    "int64_t r11_1",
    "if (rcx_11 - 1 s< r11.d && rax_14.d s>= 0 && rax_14.d s< *(rbp + 0x14))",
    "r11_1 = rbx[7]",
    "r10_1 = sx.q(rcx_11 - 1)",
    "if (rcx_11 - 1 s>= r11.d || rax_14.d s< 0 || rax_14.d s>= *(rbp + 0x14) || *(r11_1 + (r10_1 << 3)) != 0 || *r8_3 == 0)",
    "sub_1400191b8(r12, \"%s.xBestIndex malfunction\", **(r13_1 + r15 + 0x28), zmm0)",
    "return 1",
    "void* r9_3 = (rax_14 << 6) + *(rbp + 0x20)",
    "*rbx |= *(r9_3 + 0x30)",
    "rax_13 = rsi",
    "if (rcx_11 - 1 s> rsi_2)",
    "rsi_2 = rcx_11 - 1",
    "*(r11_1 + (r10_1 << 3)) = r9_3",
    "if (rcx_11 - 1 s< 0x10 && *(rax_13 + (rdx_3 << 3) + 4) != 0)",
    "*(rbx + 0x1e) |= 1 << (rcx_11 - 1).b",
    "rax_13 = rsi",
    "if ((*(r9_3 + 0x14) & 1) != 0)",
    "arg5[0x14] &= 0xfffffffe",
    "arg5[0xf] = 0",
    "*arg7 = 1",
    "rdx_3 += 1",
    "r8_3 = &r8_3[0xc]",
    "do while (rdx_3 s< r11)",
    "uint32_t rcx_14 = 0",
    "*(rbx + 0x1e) &= not.w(arg6)",
    "*(rbx + 0x2c) = 1 + rsi_2.w",
    "if (rsi_2 s>= 0)",
    "int64_t* rax_20 = rbx[7]",
    "if (*rax_20 == 0)",
    "sub_1400191b8(r12, \"%s.xBestIndex malfunction\", **(r13_1 + r15 + 0x28), zmm0)",
    "return 1",
    "rcx_14 += 1",
    "rax_20 = &rax_20[1]",
    "do while (rcx_14 s<= rsi_2)",
    "rbx[3].d = arg5[0xa]",
    "int32_t rax_21",
    "rax_21.b = arg5[0xe].b",
    "*(rbx + 0x1c) = rax_21.b",
    "int64_t rax_22 = *(arg5 + 0x30)",
    "arg5[0xe] = 0",
    "rbx[4] = rax_22",
    "char rax_23",
    "if (arg5[0xf] == 0)",
    "rax_23 = 0",
    "rax_23 = (arg5[4]).b",
    "*(rbx + 0x1d) = rax_23",
    "*(rbx + 0x12) = 0",
    "zmm0.o = zx.o(*(arg5 + 0x40))",
    "if (not(zmm0.q f> 1.0))",
    "rcx_14.w = 0",
    "if (zmm0.q f> 2000000000.0)",
    "rcx_14.w = ((zmm0.o).q u>> 0x34).d.w - 0x3fe",
    "rcx_14.w *= 5",
    "rcx_14.w *= 2",
    "int64_t zmm1 = 0x43e0000000000000",
    "int64_t rax_24 = 0",
    "if (not(zmm0.q f<= zmm1))",
    "zmm0.q = zmm0.q f- zmm1",
    "if (not(zmm0.q f>= zmm1))",
    "rax_24 = -0x8000000000000000",
    "int16_t rax_25",
    "rax_25, rcx_14 = sub_14001a0b8(int.q(zmm0.q) + rax_24)",
    "rcx_14.w = rax_25",
    "*(rbx + 0x14) = rcx_14.w",
    "*(rbx + 0x16) = sub_14001a0b8(*(arg5 + 0x48))",
    "if ((arg5[0x14].b & 1) == 0)",
    "rbx[5].d &= 0xffffefff",
    "rbx[5].d |= 0x1000",
    "int32_t rax_28 = sub_140075954(arg1, rbx)",
    "if (*(rbx + 0x1c) != 0)",
    "sub_140016950(rbx[4])",
    "*(rbx + 0x1c) = 0",
    "return zx.q(rax_28)"
  ]
}