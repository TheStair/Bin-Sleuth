{
  "address": "0x1400a2c5c",
  "rules": [
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/b698edc3bfd142ebb8f43c55408819b5",
    "contain loop",
    "hash data with CRC32/dc8063c9cb1c41b9a5bafe66f5117ac4",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using TEA/a99f0fb4fab7434084917883a6622883/6cf0dbdc06cf4e518b05ed91d6a55995",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "decrypt data using TEA/b1609112b4574d7d84a6736fb833fd96/bfe99336573d4b5189dbca2cbd3ed1f2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/a3c4a1cc0982489686093c2de66a39c8",
    "decompress data using aPLib/88da69e00a6e49ce8c080be3a0beeb89"
  ],
  "disassembly": [
    "mov     rax, rsp {__return_addr}",
    "mov     qword [rax+0x8 {__saved_rbx}], rbx",
    "mov     qword [rax+0x10 {__saved_rbp}], rbp",
    "mov     qword [rax+0x18 {__saved_rsi}], rsi",
    "mov     qword [rax+0x20 {__saved_rdi}], rdi",
    "push    r12 {__saved_r12}",
    "sub     rsp, 0x30",
    "mov     ebp, r9d",
    "mov     rdi, r8",
    "mov     r12d, edx",
    "mov     ebx, ecx",
    "cmp     ecx, 0x6",
    "jae     0x1400a2c92",
    "lea     rdx, [rel data_1400e8c48]  {u\"unknown\"}",
    "lea     rdx, [rel data_14013c298]",
    "mov     rdx, qword [rdx+rbx*8]",
    "jmp     0x1400a2c99",
    "lea     rcx, [rel data_14010fab8]  {u\"    NTLM : \"}",
    "call    sub_14000c030",
    "mov     ebp, 0x10",
    "cmp     byte [rdi+0x20], sil",
    "je      0x1400a2e61",
    "sub     ebx, 0x1",
    "je      0x1400a2e23",
    "lea     rcx, [rel data_1400fada0]  {u\"\\n * %s\\n\"}",
    "call    sub_14000c030",
    "xor     esi, esi  {0x0}",
    "cmp     ebx, esi",
    "je      0x1400a2e3d",
    "lea     rcx, [rel data_14010fad0]  {u\"\\n    LM   : \"}",
    "call    sub_14000c030",
    "cmp     byte [rdi+0x21], sil",
    "je      0x1400a2e81",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, ebp  {0x10}",
    "mov     rcx, rdi",
    "call    sub_140012f68",
    "mov     rdx, rbp",
    "lea     rcx, [rel data_14010faf0]  {u\"    %.*s\\n\"}",
    "mov     r8, rdi",
    "shr     rdx, 0x1",
    "call    sub_14000c030",
    "jmp     0x1400a2f23",
    "sub     ebx, 0x1",
    "je      0x1400a2dd2",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "cmp     dword [rdi+0x24], esi",
    "je      0x1400a2f23",
    "lea     rcx, [rdi+0x10]",
    "xor     r8d, r8d  {0x0}",
    "mov     edx, ebp  {0x10}",
    "call    sub_140012f68",
    "mov     rbx, qword [rsp+0x40 {__saved_rbx}]",
    "mov     rbp, qword [rsp+0x48 {__saved_rbp}]",
    "mov     rsi, qword [rsp+0x50 {__saved_rsi}]",
    "mov     rdi, qword [rsp+0x58 {__saved_rdi}]",
    "add     rsp, 0x30",
    "pop     r12 {__saved_r12}",
    "retn     {__return_addr}",
    "cmp     byte [rdi+0x3], sil",
    "jbe     0x1400a2f23",
    "sub     ebx, 0x1",
    "je      0x1400a2d84",
    "cmp     word [rdi+0x44], si",
    "je      0x1400a2eb5",
    "mov     ebp, 0x10",
    "mov     r8d, dword [rdi+0xc]",
    "movzx   edx, word [rdi+0x8]",
    "lea     rcx, [rel data_14010fb20]  {u\"    Default Salt : %.*s\\n\"}",
    "add     r8, rdi",
    "shr     rdx, 0x1",
    "call    sub_14000c030",
    "movzx   r8d, word [rdi+0x4]",
    "lea     rdx, [rdi+0x10]",
    "lea     r9, [rel data_14010fb58]  {u\"Credentials\"}",
    "mov     rcx, rdi",
    "call    sub_1400a2f40",
    "movzx   r8d, word [rdi+0x6]",
    "lea     r9, [rel data_14010fb70]  {u\"OldCredentials\"}",
    "mov     rdx, rax",
    "mov     rcx, rdi",
    "call    sub_1400a2f40",
    "jmp     0x1400a2f23",
    "sub     ebx, 0x1",
    "je      0x1400a2d04",
    "cmp     word [rdi+0x64], si",
    "je      0x1400a2eda",
    "lea     rcx, [rdi+0x4c]",
    "lea     r9, [rel data_14010e090]  {u\"NTLM\"}",
    "mov     r8d, r12d",
    "mov     edx, ebp  {0x10}",
    "mov     dword [rsp+0x20 {var_18}], esi  {0x0}",
    "call    sub_1400b70cc",
    "lea     ebx, [rsi+0x1]",
    "lea     rcx, [rel data_14010fb08]  {u\"    %02u  \"}",
    "mov     edx, ebx",
    "call    sub_14000c030",
    "mov     ecx, esi",
    "xor     r8d, r8d  {0x0}",
    "inc     rcx",
    "mov     edx, ebp  {0x10}",
    "shl     rcx, 0x4",
    "add     rcx, rdi",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "movzx   eax, byte [rdi+0x3]",
    "mov     esi, ebx",
    "cmp     ebx, eax",
    "jb      0x1400a2de1",
    "jmp     0x1400a2f23",
    "mov     r8d, dword [rdi+0x10]",
    "movzx   edx, word [rdi+0xc]",
    "mov     r9d, dword [rdi+0x14]",
    "lea     rcx, [rel data_14010fb90]  {u\"    Default Salt : %.*s\\n    Def\u2026\"}",
    "add     r8, rdi",
    "shr     rdx, 0x1",
    "call    sub_14000c030",
    "movzx   r8d, word [rdi+0x4]",
    "lea     rdx, [rdi+0x18]",
    "lea     r9, [rel data_14010fb58]  {u\"Credentials\"}",
    "mov     rcx, rdi",
    "call    sub_1400a2ff0",
    "movzx   r8d, word [rdi+0x6]",
    "lea     r9, [rel data_14010fc00]  {u\"ServiceCredentials\"}",
    "mov     rdx, rax",
    "mov     rcx, rdi",
    "call    sub_1400a2ff0",
    "movzx   r8d, word [rdi+0x8]",
    "lea     r9, [rel data_14010fb70]  {u\"OldCredentials\"}",
    "mov     rdx, rax",
    "mov     rcx, rdi",
    "call    sub_1400a2ff0",
    "movzx   r8d, word [rdi+0xa]",
    "lea     r9, [rel data_14010fc28]  {u\"OlderCredentials\"}",
    "mov     rdx, rax",
    "mov     rcx, rdi",
    "call    sub_1400a2ff0",
    "jmp     0x1400a2f23",
    "cmp     ebx, 0x1",
    "je      0x1400a2cf3",
    "cmp     word [rdi+0x2c], si",
    "je      0x1400a2ef9",
    "movzx   edx, word [rdi+0x64]",
    "lea     rcx, [rdi+0x6c]",
    "lea     r9, [rel data_1400ee440]  {u\"ntlm\"}",
    "mov     r8d, r12d",
    "mov     dword [rsp+0x20 {var_18}], 0x1",
    "call    sub_1400b70cc",
    "lea     rcx, [rel data_14010fc50]  {u\"    Random Value : \"}",
    "call    sub_14000c030",
    "xor     r8d, r8d  {0x0}",
    "jmp     0x1400a2cd8",
    "lea     r8d, [rsi+0x1]",
    "cmp     word [rdi+0x5c], si",
    "je      0x1400a2f23",
    "lea     rcx, [rdi+0x34]",
    "lea     r9, [rel data_14010e0b0]  {u\"LM  \"}",
    "mov     r8d, r12d",
    "mov     edx, ebp  {0x10}",
    "mov     dword [rsp+0x20 {var_18}], esi  {0x0}",
    "call    sub_1400b70cc",
    "mov     edx, ebp",
    "mov     rcx, rdi",
    "call    sub_140012f68",
    "lea     rcx, [rel data_1400d27a8]",
    "call    sub_14000c030",
    "jmp     0x1400a2f23",
    "movzx   eax, word [rdi+0x64]",
    "movzx   edx, word [rdi+0x5c]",
    "lea     r9, [rel data_14010e0a0]  {u\"lm  \"}",
    "lea     rcx, [rax+rdi+0x6c]",
    "mov     r8d, r12d",
    "mov     dword [rsp+0x20 {var_18}], 0x1",
    "call    sub_1400b70cc"
  ],
  "high_level_IL": [
    "uint64_t rbp = zx.q(arg4)",
    "uint64_t rbx = zx.q(arg1)",
    "wchar16 const* const rdx",
    "if (arg1 u>= 6)",
    "rdx = u\"unknown\"",
    "rdx = (&data_14013c298)[rbx]",
    "uint32_t result",
    "int64_t rdx_1",
    "result, rdx_1 = sub_14000c030(u\"\\n * %s\\n\", rdx)",
    "int32_t rsi = 0",
    "if (rbx.d == 0)",
    "int64_t rdx_18 = sub_14000c030(u\"    NTLM : \", rdx_1)",
    "if (arg3[0x20] != 0)",
    "rdx_18 = sub_140012f68(arg3, 0x10, 0)",
    "int64_t rdx_19 = sub_14000c030(u\"\\n    LM   : \", rdx_18)",
    "if (arg3[0x21] != 0)",
    "rdx_19 = sub_140012f68(&arg3[0x10], 0x10, 0)",
    "result = sub_14000c030(U\"\\n\", rdx_19)",
    "if (*(arg3 + 0x24) != 0)",
    "if (*(arg3 + 0x44) != 0)",
    "result = sub_1400b70cc(&arg3[0x4c], 0x10, arg2, u\"NTLM\", 0)",
    "if (*(arg3 + 0x64) != 0)",
    "result = sub_1400b70cc(&arg3[0x6c], zx.d(*(arg3 + 0x64)), arg2, u\"ntlm\", 1)",
    "if (*(arg3 + 0x2c) != 0)",
    "result = sub_1400b70cc(&arg3[0x34], 0x10, arg2, u\"LM  \", 0)",
    "if (*(arg3 + 0x5c) != 0)",
    "return sub_1400b70cc(&arg3[zx.q(*(arg3 + 0x64)) + 0x6c], zx.d(*(arg3 + 0x5c)), arg2, u\"lm  \", 1)",
    "if (rbx.d == 1)",
    "return sub_14000c030(u\"    %.*s\\n\", rbp u>> 1)",
    "if (rbx.d != 2)",
    "if (rbx.d == 3)",
    "*(arg3 + 0xc)",
    "sub_14000c030(u\"    Default Salt : %.*s\\n\", zx.q(*(arg3 + 8)) u>> 1)",
    "return sub_1400a2f40(arg3, sub_1400a2f40(arg3, &arg3[0x10], *(arg3 + 4), u\"Credentials\"), *(arg3 + 6), u\"OldCredentials\")",
    "if (rbx.d == 4)",
    "*(arg3 + 0x10)",
    "*(arg3 + 0x14)",
    "sub_14000c030(u\"    Default Salt : %.*s\\n    Def\u2026\", zx.q(*(arg3 + 0xc)) u>> 1)",
    "return sub_1400a2ff0(arg3, sub_1400a2ff0(arg3, sub_1400a2ff0(arg3, sub_1400a2ff0(arg3, &arg3[0x18], *(arg3 + 4), u\"Credentials\"), *(arg3 + 6), u\"ServiceCredentials\"), *(arg3 + 8), u\"OldCredentials\"), *(arg3 + 0xa), u\"OlderCredentials\")",
    "int32_t r8",
    "if (rbx.d == 5)",
    "sub_14000c030(u\"    Random Value : \", rdx_1)",
    "r8 = 0",
    "r8 = 1",
    "return sub_14000c030(U\"\\n\", sub_140012f68(arg3, zx.q(rbp.d), r8))",
    "if (arg3[3] u> 0)",
    "int32_t rbx_5",
    "rbx_5 = rsi + 1",
    "sub_14000c030(u\"    %02u  \", zx.q(rbx_5))",
    "sub_14000c030(U\"\\n\", sub_140012f68(&arg3[(zx.q(rsi) + 1) << 4], 0x10, 0))",
    "result = zx.d(arg3[3])",
    "rsi = rbx_5",
    "do while (rbx_5 u< result)",
    "return result"
  ]
}