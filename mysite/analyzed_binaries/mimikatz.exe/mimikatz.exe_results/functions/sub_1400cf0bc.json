{
  "address": "0x1400cf0bc",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "compute adler32 checksum/aded99c950db4d9b8d119cbfc64de8e4",
    "contain loop",
    "hash data using murmur3/aeb1a4346751469b809f4261bcfbbb07/dbb00f9448c04dc1b720ac16935c1891"
  ],
  "disassembly": [
    "mov     qword [rsp+0x8], rbx",
    "mov     qword [rsp+0x10], rbp",
    "push    rsi",
    "push    rdi",
    "push    r13",
    "sub     rsp, 0x20",
    "mov     rax, qword [rel data_140139000]",
    "xor     rax, rsp",
    "mov     qword [rsp+0x10], rax",
    "and     dword [r8], 0x0",
    "and     dword [r8+0x4], 0x0",
    "and     dword [r8+0x8], 0x0",
    "mov     rbx, r8",
    "mov     esi, edx",
    "mov     rbp, rcx",
    "mov     edi, 0x404e",
    "test    edx, edx",
    "je      0x1400cf244",
    "cmp     dword [rbx+0x8], 0x0",
    "jne     0x1400cf279",
    "mov     r13d, 0x1",
    "bt      dword [rbx+0x8], 0xf",
    "jb      0x1400cf2b6",
    "mov     ecx, dword [rbx]",
    "mov     edx, dword [rbx+0x4]",
    "mov     r8d, edx",
    "mov     eax, ecx",
    "shl     edx, 0x10",
    "shr     eax, 0x10",
    "shr     r8d, 0x10",
    "shl     ecx, 0x10",
    "or      edx, eax",
    "mov     eax, 0xfff0",
    "mov     dword [rbx+0x8], r8d",
    "add     di, ax",
    "mov     dword [rbx+0x4], edx",
    "mov     dword [rbx], ecx",
    "test    r8d, r8d",
    "je      0x1400cf24a",
    "mov     eax, r13d",
    "cmp     r8d, ecx",
    "jae     0x1400cf178",
    "mov     word [rbx+0xa], di",
    "mov     rcx, qword [rsp+0x10]",
    "xor     rcx, rsp",
    "call    sub_1400c9220",
    "mov     rbx, qword [rsp+0x40]",
    "mov     rbp, qword [rsp+0x48]",
    "add     rsp, 0x20",
    "pop     r13",
    "pop     rdi",
    "pop     rsi",
    "retn    ",
    "mov     ecx, dword [rbx+0x4]",
    "mov     eax, dword [rbx]",
    "mov     edx, eax",
    "add     eax, eax",
    "mov     r8d, ecx",
    "mov     dword [rbx], eax",
    "lea     eax, [rcx+rcx]",
    "shr     edx, 0x1f",
    "or      eax, edx",
    "shr     r8d, 0x1f",
    "mov     ecx, 0xffff",
    "mov     dword [rbx+0x4], eax",
    "mov     eax, dword [rbx+0x8]",
    "add     di, cx",
    "add     eax, eax",
    "or      eax, r8d",
    "bt      eax, 0xf",
    "mov     dword [rbx+0x8], eax",
    "jae     0x1400cf280",
    "mov     eax, dword [rbx+0x4]",
    "mov     rcx, qword [rsp]",
    "xor     edx, edx",
    "shr     rcx, 0x20",
    "lea     r9d, [rax+rcx]",
    "cmp     r9d, eax",
    "jb      0x1400cf1bb",
    "lea     eax, [r10+0x1]",
    "xor     ecx, ecx",
    "cmp     eax, r10d",
    "jb      0x1400cf18f",
    "mov     dword [rbx], r8d",
    "test    eax, eax",
    "je      0x1400cf1a0",
    "mov     edx, r13d",
    "cmp     r9d, ecx",
    "jae     0x1400cf1be",
    "mov     ecx, r13d",
    "cmp     eax, r13d",
    "jae     0x1400cf192",
    "mov     eax, dword [rsp+0x8]",
    "mov     ecx, r9d",
    "add     r9d, r9d",
    "add     dword [rbx+0x8], eax",
    "mov     edx, dword [rbx+0x8]",
    "shr     ecx, 0x1f",
    "mov     eax, r8d",
    "add     r8d, r8d",
    "add     edx, edx",
    "shr     eax, 0x1f",
    "or      edx, ecx",
    "mov     dword [rbx], r8d",
    "or      r9d, eax",
    "mov     dword [rbx+0x8], edx",
    "xor     r10d, r10d",
    "mov     dword [rbx+0x4], r9d",
    "movsx   ecx, byte [rbp]",
    "lea     eax, [r8+rcx]",
    "mov     dword [rsp], ecx",
    "cmp     eax, r8d",
    "jb      0x1400cf20e",
    "add     dword [rbx+0x8], r13d",
    "mov     dword [rbx+0x4], r9d",
    "test    edx, edx",
    "je      0x1400cf1ca",
    "lea     eax, [r11+0x1]",
    "mov     dword [rbx+0x8], eax",
    "mov     dword [rbx+0x4], eax",
    "test    ecx, ecx",
    "je      0x1400cf1a0",
    "mov     r10d, r13d",
    "cmp     eax, ecx",
    "jae     0x1400cf211",
    "add     rbp, r13",
    "add     esi, 0xffffffff",
    "jne     0x1400cf106",
    "lea     eax, [r9+0x1]",
    "xor     ecx, ecx",
    "cmp     eax, r9d",
    "jb      0x1400cf228",
    "mov     dword [rbx], eax",
    "test    r10d, r10d",
    "je      0x1400cf238",
    "mov     rax, qword [rbx]",
    "mov     r11d, dword [rbx+0x8]",
    "lea     rcx, [rsp]",
    "mov     qword [rcx], rax",
    "mov     eax, dword [rbx+0x8]",
    "add     r11d, r11d",
    "mov     dword [rcx+0x8], eax",
    "mov     ecx, dword [rbx]",
    "mov     eax, dword [rbx+0x4]",
    "lea     r9d, [rcx+rcx]",
    "mov     edx, ecx",
    "lea     r10d, [rax+rax]",
    "mov     r8d, eax",
    "shr     edx, 0x1f",
    "mov     eax, r9d",
    "or      r10d, edx",
    "shr     r8d, 0x1f",
    "lea     edx, [r9+r9]",
    "or      r11d, r8d",
    "mov     ecx, r10d",
    "shr     eax, 0x1f",
    "shr     ecx, 0x1f",
    "add     r11d, r11d",
    "add     r10d, r10d",
    "or      r11d, ecx",
    "mov     ecx, dword [rsp]",
    "or      r10d, eax",
    "lea     r8d, [rdx+rcx]",
    "xor     eax, eax",
    "mov     dword [rbx], edx",
    "mov     dword [rbx+0x4], r10d",
    "mov     dword [rbx+0x8], r11d",
    "cmp     r8d, edx",
    "jb      0x1400cf175",
    "mov     ecx, r13d",
    "cmp     eax, r13d",
    "jae     0x1400cf22b",
    "lea     eax, [rdx+0x1]",
    "mov     dword [rbx+0x8], eax",
    "mov     dword [rbx+0x4], eax",
    "test    ecx, ecx",
    "je      0x1400cf238"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}