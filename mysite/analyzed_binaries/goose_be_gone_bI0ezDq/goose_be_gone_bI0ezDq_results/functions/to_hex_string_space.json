{
  "address": "0x1443",
  "rules": [
    "contain loop",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "populate SysWhispers2 syscall list/bac71c42a489454d9c62b98a7189c5d2",
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "sub     rsp, 0x40",
    "mov     qword [rbp-0x38 {var_40}], rdi",
    "mov     qword [rbp-0x40 {var_48}], rsi",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x8 {var_10}], rax",
    "xor     eax, eax  {0x0}",
    "mov     rdx, qword [rbp-0x40 {var_48}]",
    "mov     rax, rdx",
    "add     rax, rax",
    "add     rax, rdx",
    "mov     qword [rbp-0x20 {var_28}], rax",
    "mov     rax, qword [rbp-0x20 {var_28}]",
    "mov     rdi, rax",
    "call    malloc",
    "mov     qword [rbp-0x18 {var_20}], rax",
    "cmp     qword [rbp-0x18 {var_20}], 0x0",
    "jne     0x1498",
    "mov     rax, qword [rbp-0x18 {var_20}]",
    "mov     byte [rax], 0x0",
    "mov     qword [rbp-0x28 {i}], 0x0",
    "jmp     0x152c",
    "mov     eax, 0x0",
    "jmp     0x153e",
    "mov     rax, qword [rbp-0x28 {i}]",
    "cmp     rax, qword [rbp-0x40 {var_48}]",
    "jb      0x14ac",
    "mov     rdx, qword [rbp-0x8 {var_10}]",
    "sub     rdx, qword [fs:0x28]",
    "je      0x1552",
    "mov     rax, qword [rbp-0x40 {var_48}]",
    "sub     rax, 0x1",
    "cmp     qword [rbp-0x28 {i}], rax",
    "jne     0x14e8",
    "mov     rax, qword [rbp-0x18 {var_20}]",
    "leave    {__saved_rbp}",
    "retn     {__return_addr}",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "mov     rdx, qword [rbp-0x38 {var_40}]",
    "mov     rax, qword [rbp-0x28 {i}]",
    "add     rax, rdx",
    "movzx   eax, byte [rax]",
    "movzx   edx, al",
    "lea     rax, [rbp-0xc {s}]",
    "lea     rcx, [rel data_200d]  {\"%02x \"}",
    "mov     rsi, rcx  {data_200d, \"%02x \"}",
    "mov     rdi, rax {s}",
    "mov     eax, 0x0",
    "call    sprintf",
    "mov     rdx, qword [rbp-0x38 {var_40}]",
    "mov     rax, qword [rbp-0x28 {i}]",
    "add     rax, rdx",
    "movzx   eax, byte [rax]",
    "movzx   edx, al",
    "lea     rax, [rbp-0xc {s}]",
    "lea     rcx, [rel data_2008]  {\"%02x\"}",
    "mov     rsi, rcx  {data_2008, \"%02x\"}",
    "mov     rdi, rax {s}",
    "mov     eax, 0x0",
    "call    sprintf",
    "jmp     0x1514",
    "lea     rdx, [rbp-0xc {s}]",
    "mov     rax, qword [rbp-0x18 {var_20}]",
    "mov     rsi, rdx {s}",
    "mov     rdi, rax",
    "call    strcat",
    "add     qword [rbp-0x28 {i}], 0x1"
  ],
  "high_level_IL": [
    "void* fsbase",
    "int64_t rax = *(fsbase + 0x28)",
    "char* result_1 = malloc(arg2 * 3)",
    "char* result",
    "if (result_1 != 0)",
    "*result_1 = 0",
    "void* i = nullptr",
    "while (i u< arg2)",
    "void s",
    "if (i != arg2 - 1)",
    "sprintf(&s, \"%02x \", zx.q(*(i + arg1)), \"%02x \")",
    "sprintf(&s, \"%02x\", zx.q(*(i + arg1)), \"%02x\")",
    "strcat(result_1, &s)",
    "i += 1",
    "result = result_1",
    "result = nullptr",
    "*(fsbase + 0x28)",
    "if (rax == *(fsbase + 0x28))",
    "return result",
    "__stack_chk_fail()",
    "noreturn"
  ]
}