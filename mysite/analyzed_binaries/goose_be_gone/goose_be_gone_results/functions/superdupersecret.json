{
  "address": "0x1309",
  "rules": [
    "populate SysWhispers2 syscall list/bac71c42a489454d9c62b98a7189c5d2",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "contain loop",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "sub     rsp, 0x10",
    "mov     dword [rbp-0xc {var_14}], 0x10",
    "mov     eax, dword [rbp-0xc {var_14}]",
    "add     eax, 0x1",
    "cdqe    ",
    "mov     rdi, rax  {0x11}",
    "call    malloc",
    "mov     qword [rbp-0x8 {var_10}], rax",
    "cmp     qword [rbp-0x8 {var_10}], 0x0",
    "jne     0x133e",
    "mov     dword [rbp-0x10 {i}], 0x0",
    "jmp     0x138d",
    "mov     eax, 0x0",
    "jmp     0x13a9",
    "mov     eax, dword [rbp-0x10 {i}]",
    "cmp     eax, dword [rbp-0xc {var_14}]",
    "jl      0x1347",
    "leave    {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     edx, dword [rbp-0x10 {i}]",
    "mov     eax, edx",
    "shl     eax, 0x3",
    "sub     eax, edx",
    "add     eax, 0xd",
    "movsxd  rdx, eax",
    "imul    rdx, rdx, 0x4ec4ec4f",
    "shr     rdx, 0x20",
    "sar     edx, 0x3",
    "mov     ecx, eax",
    "sar     ecx, 0x1f",
    "sub     edx, ecx",
    "imul    ecx, edx, 0x1a",
    "sub     eax, ecx",
    "mov     edx, eax",
    "mov     eax, edx",
    "lea     ecx, [rax+0x41]",
    "mov     eax, dword [rbp-0x10 {i}]",
    "movsxd  rdx, eax",
    "mov     rax, qword [rbp-0x8 {var_10}]",
    "add     rax, rdx",
    "mov     edx, ecx",
    "mov     byte [rax], dl",
    "add     dword [rbp-0x10 {i}], 0x1",
    "mov     eax, dword [rbp-0xc {var_14}]",
    "movsxd  rdx, eax  {0x10}",
    "mov     rax, qword [rbp-0x8 {var_10}]",
    "add     rax, rdx",
    "mov     byte [rax], 0x0",
    "mov     rax, qword [rbp-0x8 {var_10}]"
  ],
  "high_level_IL": [
    "void* result = malloc(0x11)",
    "if (result == 0)",
    "return nullptr",
    "int32_t i = 0",
    "while (i s< 0x10)",
    "*(result + sx.q(i)) = ((i * 7 + 0xd) s% 0x1a).b + 0x41",
    "i += 1",
    "*(result + 0x10) = 0",
    "return result"
  ]
}