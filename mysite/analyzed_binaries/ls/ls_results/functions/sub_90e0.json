{
  "address": "0x90e0",
  "rules": [
    "terminate process",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "contain loop",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e"
  ],
  "disassembly": [
    "push    rbp",
    "mov     edx, 0x5",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "mov     r12d, edi",
    "push    rbx",
    "sub     rsp, 0x88",
    "mov     rbx, qword [rel data_23460]",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    edi, edi",
    "je      0x9148",
    "xor     edi, edi",
    "lea     rsi, [rel data_1b638]  {\"Usage: %s [OPTION]... [FILE]...\\n\"}",
    "call    dcgettext",
    "mov     rdx, rbx",
    "mov     edi, 0x2",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    __printf_chk",
    "mov     rbx, qword [rel stdout]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1b660]  {\"List information about the FILEs\u2026\"}",
    "mov     r13, qword [rbx]",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, r13",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1b6f0]  {\"\\nMandatory arguments to long op\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1b740]  {\"  -a, --all                  do \u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1b850]  {\"      --block-size=SIZE      wit\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1b8f0]  {\"  -B, --ignore-backups       do \u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1b938]  {\"  -c                         wit\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1ba50]  {\"  -C                         lis\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1bb68]  {\"  -f                         lis\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1bc38]  {\"      --format=WORD          acr\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1bcd0]  {\"      --full-time            lik\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1bd10]  {\"  -g                         lik\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1bd50]  {\"      --group-directories-first\\n\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1be48]  {\"  -G, --no-group             in \u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1be98]  {\"  -h, --human-readable       wit\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1bf30]  {\"  -H, --dereference-command-line\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1bfa0]  {\"      --dereference-command-line\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c050]  {\"      --hide=PATTERN         do \u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c0d8]  {\"      --hyperlink[=WHEN]     hyp\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c110]  {\"      --indicator-style=WORD\\n  \u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c200]  {\"  -i, --inode                pri\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "xor     edi, edi",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1c298]  {\"  -k, --kibibytes            def\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c338]  {\"  -l                         use\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c370]  {\"  -L, --dereference          whe\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c450]  {\"  -m                         fil\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c4a0]  {\"  -n, --numeric-uid-gid      lik\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c5d0]  {\"  -q, --hide-control-chars   pri\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c618]  {\"      --show-control-chars   sho\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c6b8]  {\"  -Q, --quote-name           enc\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c700]  {\"      --quoting-style=WORD   use\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c820]  {\"  -r, --reverse              rev\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c8e8]  {\"  -S                         sor\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c928]  {\"      --sort=WORD            sor\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1c9c8]  {\"      --time=WORD            sel\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1cbc8]  {\"      --time-style=TIME_STYLE\\n \u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1cc38]  {\"  -t                         sor\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1ccc8]  {\"  -u                         wit\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1cda8]  {\"  -U                         do \u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1cdf8]  {\"  -v                         nat\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1ce48]  {\"  -w, --width=COLS           set\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1cfe0]  {\"      --help        display this\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1d010]  {\"      --version     output versi\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1d050]  {\"\\nThe SIZE argument is an intege\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1d128]  {\"\\nThe TIME_STYLE argument can be\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1d2a0]  {\"\\nThe WHEN argument defaults to \u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     r13, qword [rbx]",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1d2f0]  {\"\\nUsing color to distinguish fil\u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     edx, 0x5",
    "mov     r13, qword [rbx]",
    "xor     edi, edi",
    "lea     rsi, [rel data_1d418]  {\"\\nExit status:\\n 0  if OK,\\n 1  \u2026\"}",
    "call    dcgettext",
    "mov     rsi, r13",
    "mov     rdi, rax",
    "call    fputs_unlocked",
    "mov     esi, 0x6c",
    "mov     edi, 0x73",
    "lea     rdx, [rel data_1ade9]  {\"test invocation\"}",
    "lea     rax, [rel data_1b46b]",
    "movq    xmm2, rdx",
    "lea     rcx, [rel data_1ae4e[4]]  {\"coreutils\"}",
    "movq    xmm1, rax",
    "lea     rdx, [rel data_1adf9]  {\"Multi-call invocation\"}",
    "punpcklqdq xmm1, xmm2",
    "movq    xmm3, rdx",
    "lea     rdx, [rbp-0xb0]",
    "movaps  xmmword [rbp-0xb0], xmm1",
    "movq    xmm1, rcx",
    "lea     rcx, [rel data_1ae0f]  {\"sha224sum\"}",
    "punpcklqdq xmm1, xmm3",
    "movaps  xmmword [rbp-0xa0], xmm1",
    "movq    xmm1, rcx",
    "lea     rcx, [rel data_1adda]  {\"sha2 utilities\"}",
    "movq    xmm0, rcx",
    "lea     rcx, [rel data_1ae19]  {\"sha256sum\"}",
    "punpcklqdq xmm1, xmm0",
    "movaps  xmmword [rbp-0x90], xmm1",
    "movq    xmm1, rcx",
    "lea     rcx, [rel data_1ae23]  {\"sha384sum\"}",
    "punpcklqdq xmm1, xmm0",
    "movaps  xmmword [rbp-0x80], xmm1",
    "movq    xmm1, rcx",
    "lea     rcx, [rel 0x1ae2d]  {\"sha512sum\"}",
    "punpcklqdq xmm1, xmm0",
    "movaps  xmmword [rbp-0x70], xmm1",
    "movq    xmm1, rcx",
    "punpcklqdq xmm1, xmm0",
    "pxor    xmm0, xmm0",
    "movaps  xmmword [rbp-0x60], xmm1",
    "movaps  xmmword [rbp-0x50], xmm0",
    "nop     dword [rax+rax]",
    "lea     rsi, [rel data_1b608]  {\"Try '%s --help' for more informa\u2026\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rcx, rbx",
    "mov     esi, 0x2",
    "mov     rdx, rax",
    "mov     rax, qword [rel stderr]",
    "mov     rdi, qword [rax]",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "mov     rax, qword [rdx+0x10]",
    "add     rdx, 0x10",
    "test    rax, rax",
    "jne     0x9820",
    "movzx   ecx, byte [rax+0x1]",
    "cmp     edi, ecx",
    "jne     0x9920",
    "movzx   ecx, byte [rax]",
    "cmp     esi, ecx",
    "jne     0x9920",
    "jmp     0x9841",
    "cmp     byte [rax+0x2], 0x0",
    "jne     0x9920",
    "mov     r13, qword [rdx+0x8]",
    "lea     rsi, [rel data_1ae37]  {\"\\n%s online help: <%s>\\n\"}",
    "mov     edx, 0x5",
    "xor     edi, edi",
    "test    r13, r13",
    "je      0x9936",
    "call    dcgettext",
    "lea     r14, [rel data_1d4b0]  {\"https://www.gnu.org/software/cor\u2026\"}",
    "lea     rdx, [rel data_1ae4e]  {\"GNU coreutils\"}",
    "mov     edi, 0x2",
    "mov     rsi, rax",
    "mov     rcx, r14",
    "lea     r13, [rel data_1ae4e[0xb]]  {\"ls\"}",
    "xor     eax, eax",
    "call    __printf_chk",
    "mov     edi, 0x5",
    "xor     esi, esi",
    "mov     r15, r13",
    "call    setlocale",
    "mov     rdi, rax",
    "test    rax, rax",
    "jne     0x989c",
    "call    dcgettext",
    "lea     r14, [rel data_1d4b0]  {\"https://www.gnu.org/software/cor\u2026\"}",
    "lea     rdx, [rel data_1ae4e]  {\"GNU coreutils\"}",
    "mov     edi, 0x2",
    "mov     rsi, rax",
    "mov     rcx, r14",
    "lea     r15, [rel data_1ae4e[0xb]]  {\"ls\"}",
    "xor     eax, eax",
    "call    __printf_chk",
    "mov     edi, 0x5",
    "xor     esi, esi",
    "call    setlocale",
    "mov     rdi, rax",
    "test    rax, rax",
    "je      0x98b5",
    "mov     edx, 0x3",
    "lea     rsi, [rel data_1ae5c]",
    "call    strncmp",
    "test    eax, eax",
    "jne     0x99b1",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1ae60]  {\"Full documentation <%s%s>\\n\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     rcx, r13",
    "mov     rdx, r14",
    "mov     edi, 0x2",
    "mov     rsi, rax",
    "xor     eax, eax",
    "lea     rbx, [rel data_1adf9[0xa]]  {\" invocation\"}",
    "call    __printf_chk",
    "jmp     0x98f2",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1ae60]  {\"Full documentation <%s%s>\\n\"}",
    "call    dcgettext",
    "mov     rcx, r15",
    "mov     rdx, r14",
    "mov     edi, 0x2",
    "mov     rsi, rax",
    "xor     eax, eax",
    "lea     rbx, [rel data_1af54]",
    "call    __printf_chk",
    "cmp     r13, r15",
    "lea     rax, [rel data_1adf9[0xa]]  {\" invocation\"}",
    "cmove   rbx, rax",
    "mov     rbx, qword [rbx]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1d4d8]  {\"Report any translation bugs to <\u2026\"}",
    "call    dcgettext",
    "mov     rdi, rax",
    "mov     rsi, rbx",
    "call    fputs_unlocked",
    "jmp     0x98b5",
    "xor     edi, edi",
    "lea     rsi, [rel data_1d520]  {\"or available locally via: info '\u2026\"}",
    "mov     edx, 0x5",
    "call    dcgettext",
    "mov     rcx, rbx",
    "mov     rdx, r13",
    "mov     edi, 0x2",
    "mov     rsi, rax",
    "xor     eax, eax",
    "call    __printf_chk",
    "jmp     0x9140",
    "mov     edi, r12d",
    "call    exit",
    "{ Does not return }"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}