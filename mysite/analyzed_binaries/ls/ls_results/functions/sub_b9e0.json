{
  "address": "0xb9e0",
  "rules": [
    "decompress data using aPLib/a5c76dae137d4aaa9aade786acafaa41",
    "encrypt data using chaskey/7025f739e4b341df894563ee3ec22dfd",
    "connect to WMI namespace via WbemLocator/50f8c95bd151440fa4fe29260efaf440",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "compress data via ZLIB inflate or deflate/b4331930fe164eaaa33c054d9962358d/96f49d00dc4240378bbb70bf9dd561cc"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "or      ch, 0x8",
    "mov     rbp, rsp",
    "push    r12",
    "mov     r12d, r8d",
    "push    rbx",
    "lea     r8, [rbp-0x120]",
    "mov     rbx, rdx",
    "mov     edx, ecx",
    "mov     ecx, r12d",
    "sub     rsp, 0x110",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x18], rax",
    "xor     eax, eax",
    "call    statx",
    "test    eax, eax",
    "jns     0xba40",
    "mov     ecx, dword [rbp-0x98]",
    "mov     edx, dword [rbp-0x94]",
    "mov     rsi, 0xfffff00000000000",
    "movd    xmm2, dword [rbp-0x10c]",
    "movd    xmm1, dword [rbp-0x11c]",
    "mov     rdi, rcx",
    "shl     rcx, 0x20",
    "shl     rdi, 0x8",
    "and     rcx, rsi",
    "and     edi, 0xfff00",
    "or      rcx, rdi",
    "movzx   edi, dl",
    "shl     rdx, 0xc",
    "or      rcx, rdi",
    "mov     rdi, 0xffffff00000",
    "and     rdx, rdi",
    "or      rdx, rcx",
    "movzx   ecx, word [rbp-0x104]",
    "movq    xmm0, rdx",
    "mov     edx, dword [rbp-0x108]",
    "movhps  xmm0, qword [rbp-0x100]",
    "movups  xmmword [rbx], xmm0",
    "movd    xmm0, ecx",
    "mov     ecx, dword [rbp-0x110]",
    "mov     dword [rbx+0x20], edx",
    "mov     edx, dword [rbp-0x9c]",
    "punpckldq xmm0, xmm2",
    "mov     qword [rbx+0x10], rcx",
    "mov     ecx, dword [rbp-0xa0]",
    "movq    qword [rbx+0x18], xmm0",
    "movq    xmm0, qword [rbp-0xf8]",
    "mov     r8, rcx",
    "shl     rcx, 0x20",
    "shl     r8, 0x8",
    "and     rcx, rsi",
    "punpcklqdq xmm0, xmm1",
    "movzx   esi, dl",
    "and     r8d, 0xfff00",
    "shl     rdx, 0xc",
    "movups  xmmword [rbx+0x30], xmm0",
    "or      rcx, r8",
    "and     rdx, rdi",
    "or      rcx, rsi",
    "mov     esi, dword [rbp-0xd8]",
    "or      rdx, rcx",
    "and     r12d, 0x800",
    "mov     qword [rbx+0x28], rdx",
    "mov     rdx, qword [rbp-0xf0]",
    "mov     qword [rbx+0x50], rsi",
    "mov     esi, dword [rbp-0xa8]",
    "mov     qword [rbx+0x40], rdx",
    "mov     rdx, qword [rbp-0xe0]",
    "mov     qword [rbx+0x60], rsi",
    "mov     esi, dword [rbp-0xb8]",
    "mov     qword [rbx+0x48], rdx",
    "mov     rdx, qword [rbp-0xb0]",
    "mov     qword [rbx+0x70], rsi",
    "mov     qword [rbx+0x58], rdx",
    "mov     rdx, qword [rbp-0xc0]",
    "mov     qword [rbx+0x68], rdx",
    "je      0xba1f",
    "mov     rdx, qword [rbp-0x18]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0xbba5",
    "test    byte [rbp-0x11f], 0x8",
    "je      0xbb98",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x110",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "retn    ",
    "pcmpeqd xmm0, xmm0",
    "movups  xmmword [rbx+0x58], xmm0",
    "jmp     0xba1f",
    "movq    xmm0, qword [rbp-0xd0]",
    "movd    xmm1, dword [rbp-0xc8]",
    "punpcklqdq xmm0, xmm1",
    "movups  xmmword [rbx+0x58], xmm0",
    "jmp     0xba1f"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}