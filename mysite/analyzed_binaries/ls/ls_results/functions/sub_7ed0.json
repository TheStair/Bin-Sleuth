{
  "address": "0x7ed0",
  "rules": [
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e"
  ],
  "disassembly": [
    "push    rbp",
    "mov     rbp, rsp",
    "push    r13",
    "push    r12",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x8",
    "test    rdx, rdx",
    "je      0x7f60",
    "mov     r13d, 0xf",
    "mov     r12d, 0x10",
    "jmp     0x7eec",
    "mov     r12, rdx",
    "lea     r13, [rdx-0x1]",
    "mov     eax, 0xfe0",
    "test    rsi, rsi",
    "mov     qword [rbx+0x30], r13",
    "cmove   rsi, rax",
    "mov     rax, qword [rbx+0x38]",
    "mov     qword [rbx], rsi",
    "test    byte [rbx+0x50], 0x1",
    "je      0x7f78",
    "mov     rdi, rsi",
    "call    rax",
    "jmp     0x7f0f",
    "mov     rdi, qword [rbx+0x48]",
    "call    rax",
    "mov     qword [rbx+0x8], rax",
    "test    rax, rax",
    "je      0x7f7f",
    "lea     rax, [rel obstack_alloc_failed_handler]",
    "call    qword [rax]",
    "nop     dword [rax+rax]",
    "{ Falls through into sub_7f90 }",
    "lea     rdx, [rax+r13+0x10]",
    "neg     r12",
    "and     rdx, r12",
    "movq    xmm0, rdx",
    "mov     rdx, qword [rbx]",
    "punpcklqdq xmm0, xmm0",
    "add     rdx, rax",
    "movups  xmmword [rbx+0x10], xmm0",
    "mov     qword [rax], rdx",
    "mov     qword [rbx+0x20], rdx",
    "mov     qword [rax+0x8], 0x0",
    "mov     eax, 0x1",
    "and     byte [rbx+0x50], 0xf9",
    "add     rsp, 0x8",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     rbp",
    "retn    "
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}