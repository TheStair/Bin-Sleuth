{
  "address": "0x12420",
  "rules": [
    "populate SysWhispers2 syscall list/bac71c42a489454d9c62b98a7189c5d2",
    "check OS version/fa26a21322994ec4bdbe5020e62bd777",
    "query environment variable",
    "check Internet connectivity via WinINet/e5536f56688049548c83e5cf372d25ac",
    "hide graphical window from taskbar/bbd5a45812ac411c80d2c86457ef37b7",
    "contain loop",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "check OS version/0dbc6332c9724004b686b44a39c40b94"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "mov     rbx, rdi",
    "sub     rsp, 0x18",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x28 {var_30}], rax",
    "xor     eax, eax  {0x0}",
    "test    rdi, rdi",
    "je      0x12570",
    "lea     rdi, [rel data_1b0ea[3]]  {\"BLOCK_SIZE\"}",
    "call    getenv",
    "mov     rbx, rax",
    "test    rax, rax",
    "jne     0x1244c",
    "xor     r12d, r12d  {0x0}",
    "cmp     byte [rbx], 0x27",
    "jne     0x1245e",
    "lea     rdi, [rel data_1b516]  {\"BLOCKSIZE\"}",
    "call    getenv",
    "mov     rbx, rax",
    "test    rax, rax",
    "jne     0x1244c",
    "lea     r13, [rel data_1e138]",
    "lea     rsi, [rel data_22a20]",
    "mov     rdi, rbx",
    "mov     rdx, r13  {data_1e138}",
    "call    sub_11e70",
    "test    eax, eax",
    "js      0x124a0",
    "add     rbx, 0x1",
    "mov     r12d, 0x4",
    "lea     rdi, [rel data_1b520]  {\"POSIXLY_CORRECT\"}",
    "call    getenv",
    "mov     dword [rel data_232dc], 0x0",
    "cmp     rax, 0x1",
    "sbb     rax, rax",
    "and     eax, 0x200",
    "add     rax, 0x200",
    "mov     qword [rel data_232d0], rax",
    "xor     eax, eax  {0x0}",
    "jmp     0x12550",
    "lea     rsi, [rbp-0x30 {var_38}]",
    "lea     rcx, [rel data_1b530]  {\"eEgGkKmMpPtTyYzZ0\"}",
    "mov     rdi, rbx",
    "lea     rdx, [rel data_232d0]",
    "call    sub_11f60",
    "test    eax, eax",
    "jne     0x12510",
    "mov     qword [rel data_232d0], 0x1",
    "cdqe    ",
    "or      r12d, dword [r13+rax*4]",
    "xor     eax, eax  {0x0}",
    "mov     dword [rel data_232dc], r12d",
    "jmp     0x12550",
    "mov     rdx, qword [rbp-0x28 {var_30}]",
    "sub     rdx, qword [fs:0x28]",
    "jne     0x125f6",
    "mov     dword [rel data_232dc], 0x0",
    "mov     rdx, qword [rel data_232d0]",
    "movzx   ecx, byte [rbx]",
    "lea     edx, [rcx-0x30]",
    "mov     rcx, qword [rbp-0x30 {var_38}]",
    "cmp     dl, 0x9",
    "ja      0x124e0",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x18",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "lea     rdi, [rel data_1b520]  {\"POSIXLY_CORRECT\"}",
    "call    getenv",
    "cmp     rax, 0x1",
    "sbb     rax, rax",
    "and     eax, 0x200",
    "add     rax, 0x200",
    "mov     qword [rel data_232d0], rax",
    "mov     eax, 0x4",
    "cmp     rbx, rcx",
    "jne     0x124d0",
    "jmp     0x124f7",
    "movzx   esi, byte [rbx+0x1]",
    "add     rbx, 0x1",
    "lea     edx, [rsi-0x30]",
    "cmp     dl, 0x9",
    "jbe     0x124f7",
    "cmp     byte [rbx-0x1], 0x42",
    "je      0x125e0",
    "mov     dword [rel data_232dc], r12d",
    "mov     rdx, qword [rel data_232d0]",
    "jmp     0x12521",
    "or      r12d, 0x180",
    "cmp     byte [rbx-0x2], 0x69",
    "jne     0x124f7",
    "or      r12b, 0x80",
    "test    rdx, rdx",
    "jne     0x12550",
    "jmp     0x124f3",
    "or      r12d, 0x20"
  ],
  "high_level_IL": [
    "char* rbx = arg1",
    "void* fsbase",
    "int64_t rax = *(fsbase + 0x28)",
    "int32_t result",
    "if (arg1 == 0)",
    "char* rax_8 = getenv(\"BLOCK_SIZE\")",
    "rbx = rax_8",
    "if (rax_8 != 0)",
    "goto label_1244c",
    "char* rax_9 = getenv(\"BLOCKSIZE\")",
    "rbx = rax_9",
    "if (rax_9 != 0)",
    "goto label_1244c",
    "char* rax_10 = getenv(\"POSIXLY_CORRECT\")",
    "data_232dc = 0",
    "data_232d0 = (zx.q((sbb.q(rax_10, rax_10, rax_10 u< 1)).d) & 0x200) + 0x200",
    "result = 0",
    "label_1244c:",
    "int32_t r12_1 = 0",
    "if (*rbx == 0x27)",
    "rbx = &rbx[1]",
    "r12_1 = 4",
    "int32_t rax_2 = sub_11e70(rbx, &data_22a20, &data_1e138)",
    "if (rax_2 s< 0)",
    "int64_t var_38",
    "result = sub_11f60(rbx, &var_38, &data_232d0, \"eEgGkKmMpPtTyYzZ0\")",
    "int64_t rdx_3",
    "if (result != 0)",
    "data_232dc = 0",
    "rdx_3 = data_232d0",
    "if (*rbx - 0x30 u> 9)",
    "char rsi_2",
    "if (rbx == var_38)",
    "if (rbx[-1] == 0x42)",
    "r12_1 |= 0x180",
    "if (rbx[-2] == 0x69)",
    "r12_1 |= 0x20",
    "r12_1.b |= 0x80",
    "r12_1 |= 0x20",
    "break",
    "rsi_2 = rbx[1]",
    "rbx = &rbx[1]",
    "do while (rsi_2 - 0x30 u> 9)",
    "data_232dc = r12_1",
    "rdx_3 = data_232d0",
    "if (rdx_3 == 0)",
    "char* rax_4 = getenv(\"POSIXLY_CORRECT\")",
    "data_232d0 = (zx.q((sbb.q(rax_4, rax_4, rax_4 u< 1)).d) & 0x200) + 0x200",
    "result = 4",
    "data_232d0 = 1",
    "result = 0",
    "data_232dc = r12_1 | *(&data_1e138 + (sx.q(rax_2) << 2))",
    "*(fsbase + 0x28)",
    "if (rax == *(fsbase + 0x28))",
    "return result",
    "__stack_chk_fail()",
    "noreturn"
  ]
}