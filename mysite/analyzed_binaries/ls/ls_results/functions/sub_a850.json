{
  "address": "0xa850",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23"
  ],
  "disassembly": [
    "endbr64 ",
    "mov     rdx, rdi",
    "mov     rcx, rsi",
    "mov     edi, dword [rsi+0xa8]",
    "mov     eax, dword [rdx+0xa8]",
    "cmp     eax, 0x9",
    "sete    sil",
    "cmp     eax, 0x3",
    "sete    al",
    "or      esi, eax",
    "cmp     edi, 0x3",
    "je      0xa8a8",
    "mov     eax, 0x1",
    "test    sil, sil",
    "je      0xa8f8",
    "cmp     edi, 0x9",
    "je      0xa8a8",
    "mov     esi, dword [rdx+0xac]",
    "xor     edi, edi",
    "and     esi, 0xf000",
    "cmp     esi, 0x4000",
    "sete    dil",
    "sub     eax, edi",
    "jne     0xa8a3",
    "mov     rax, qword [rcx+0x48]",
    "cmp     qword [rdx+0x48], rax",
    "setl    al",
    "setg    sil",
    "movzx   eax, al",
    "movzx   esi, sil",
    "sub     eax, esi",
    "jne     0xa8a3",
    "mov     eax, dword [rcx+0xac]",
    "mov     edi, 0x1",
    "and     eax, 0xf000",
    "cmp     eax, 0x4000",
    "sete    al",
    "movzx   eax, al",
    "test    sil, sil",
    "je      0xa8f8",
    "retn    ",
    "jmp     0xa8b2",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r12",
    "mov     r12, qword [rcx]",
    "push    rbx",
    "mov     rbx, qword [rdx]",
    "call    __errno_location",
    "mov     rsi, r12",
    "mov     rdi, rbx",
    "mov     dword [rax], 0x0",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "jmp     strcoll",
    "sub     eax, edi",
    "je      0xa8b2"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}