{
  "address": "0x11790",
  "rules": [
    "populate SysWhispers2 syscall list/bac71c42a489454d9c62b98a7189c5d2",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "contain loop",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     r10, rsi",
    "mov     r11, rcx",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "push    r13",
    "push    r12",
    "mov     r12, rdi",
    "push    rbx",
    "sub     rsp, 0x168",
    "mov     qword [rbp-0xc0], r8",
    "mov     qword [rbp-0xb8], r9",
    "test    al, al",
    "je      0x117ec",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0xe8], rax",
    "xor     eax, eax",
    "lea     r9, [rbp-0xe0]",
    "lea     rax, [rbp+0x10]",
    "xor     edi, edi",
    "mov     qword [rbp-0x158], rax",
    "lea     rcx, [rbp+0x10]",
    "xor     r8d, r8d",
    "xor     ebx, ebx",
    "mov     dword [rbp-0x160], 0x20",
    "mov     edx, 0x20",
    "lea     rsi, [rbp-0x140]",
    "mov     dword [rbp-0x15c], 0x30",
    "mov     qword [rbp-0x150], r9",
    "jmp     0x11870",
    "movaps  xmmword [rbp-0xb0], xmm0",
    "movaps  xmmword [rbp-0xa0], xmm1",
    "movaps  xmmword [rbp-0x90], xmm2",
    "movaps  xmmword [rbp-0x80], xmm3",
    "movaps  xmmword [rbp-0x70], xmm4",
    "movaps  xmmword [rbp-0x60], xmm5",
    "movaps  xmmword [rbp-0x50], xmm6",
    "movaps  xmmword [rbp-0x40], xmm7",
    "cmp     edx, 0x2f",
    "jbe     0x11848",
    "mov     eax, edx",
    "mov     r8d, 0x1",
    "add     edx, 0x8",
    "add     rax, r9",
    "mov     rax, qword [rax]",
    "mov     qword [rsi+rbx*8], rax",
    "test    rax, rax",
    "je      0x1188d",
    "mov     rax, rcx",
    "mov     edi, 0x1",
    "add     rcx, 0x8",
    "mov     rax, qword [rax]",
    "mov     qword [rsi+rbx*8], rax",
    "test    rax, rax",
    "jne     0x11862",
    "test    dil, dil",
    "je      0x11899",
    "add     rbx, 0x1",
    "cmp     rbx, 0xa",
    "je      0x1195a",
    "test    r8b, r8b",
    "je      0x118a4",
    "mov     qword [rbp-0x158], rcx",
    "mov     r9, r11",
    "mov     rcx, r10",
    "lea     r8, [rel data_1ae4e]  {\"GNU coreutils\"}",
    "mov     rdi, r12",
    "lea     rdx, [rel data_1b4c3]  {\"%s (%s) %s\\n\"}",
    "mov     esi, 0x2",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1b4cf]",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     r8d, 0x7e7",
    "mov     esi, 0x2",
    "mov     rdi, r12",
    "mov     rcx, rax",
    "lea     rdx, [rel data_1e140]  {\"Copyright %s %d Free Software Fo\u2026\"}",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "mov     rsi, r12",
    "mov     edi, 0xa",
    "call    fputc_unlocked",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1d8a8]  {\"License GPLv3+: GNU GPL version \u2026\"}",
    "xor     edi, edi",
    "call    dcgettext",
    "lea     rcx, [rel data_1d958]  {\"https://gnu.org/licenses/gpl.htm\u2026\"}",
    "mov     esi, 0x2",
    "mov     rdi, r12",
    "mov     rdx, rax",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "mov     rsi, r12",
    "mov     edi, 0xa",
    "call    fputc_unlocked",
    "mov     r11, qword [rbp-0x100]",
    "mov     r10, qword [rbp-0x108]",
    "mov     edx, 0x5",
    "mov     r9, qword [rbp-0x130]",
    "mov     r8, qword [rbp-0x138]",
    "lea     rsi, [rel data_1d980]  {\"Written by %s, %s, %s,\\n%s, %s, \u2026\"}",
    "mov     rcx, qword [rbp-0x140]",
    "mov     qword [rbp-0x188], r11",
    "mov     qword [rbp-0x180], r10",
    "mov     r14, qword [rbp-0x110]",
    "mov     qword [rbp-0x178], r9",
    "mov     r13, qword [rbp-0x118]",
    "mov     qword [rbp-0x170], r8",
    "mov     rbx, qword [rbp-0x120]",
    "mov     qword [rbp-0x168], rcx",
    "mov     r15, qword [rbp-0x128]",
    "mov     rcx, r10",
    "mov     r9, r11",
    "lea     r8, [rel data_1ae4e]  {\"GNU coreutils\"}",
    "mov     rdi, r12",
    "lea     rdx, [rel data_1b4c3]  {\"%s (%s) %s\\n\"}",
    "mov     esi, 0x2",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1b4cf]",
    "call    dcgettext",
    "mov     r8d, 0x7e7",
    "mov     esi, 0x2",
    "mov     rdi, r12",
    "mov     rcx, rax",
    "lea     rdx, [rel data_1e140]  {\"Copyright %s %d Free Software Fo\u2026\"}",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "mov     rsi, r12",
    "mov     edi, 0xa",
    "call    fputc_unlocked",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1d8a8]  {\"License GPLv3+: GNU GPL version \u2026\"}",
    "call    dcgettext",
    "mov     esi, 0x2",
    "mov     rdi, r12",
    "lea     rcx, [rel data_1d958]  {\"https://gnu.org/licenses/gpl.htm\u2026\"}",
    "mov     rdx, rax",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "mov     rsi, r12",
    "mov     edi, 0xa",
    "call    fputc_unlocked",
    "cmp     rbx, 0x9",
    "ja      0x11aae",
    "mov     dword [rbp-0x160], edx",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "lea     rsp, [rbp-0x28]",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "{Case 0x0}",
    "mov     rax, qword [rbp-0xe8]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x11e00",
    "lea     rdx, [rel jump_table_1db20]",
    "movsxd  rax, dword [rdx+rbx*4]",
    "add     rax, rdx",
    "jmp     rax",
    "{Case 0x8}",
    "mov     r10, qword [rbp-0x108]",
    "mov     r9, qword [rbp-0x130]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "mov     r8, qword [rbp-0x138]",
    "mov     rcx, qword [rbp-0x140]",
    "lea     rsi, [rel data_1da60]  {\"Written by %s, %s, %s,\\n%s, %s, \u2026\"}",
    "mov     qword [rbp-0x180], r10",
    "mov     r14, qword [rbp-0x110]",
    "mov     qword [rbp-0x178], r9",
    "mov     r13, qword [rbp-0x118]",
    "mov     qword [rbp-0x170], r8",
    "mov     rbx, qword [rbp-0x120]",
    "mov     qword [rbp-0x168], rcx",
    "mov     r15, qword [rbp-0x128]",
    "call    dcgettext",
    "mov     rdx, rax",
    "push    rax",
    "jmp     0x11a76",
    "{Case 0x7}",
    "mov     r9, qword [rbp-0x130]",
    "mov     r14, qword [rbp-0x110]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "mov     r13, qword [rbp-0x118]",
    "mov     rbx, qword [rbp-0x120]",
    "lea     rsi, [rel data_1da30]  {\"Written by %s, %s, %s,\\n%s, %s, \u2026\"}",
    "mov     r15, qword [rbp-0x128]",
    "mov     r8, qword [rbp-0x138]",
    "mov     qword [rbp-0x178], r9",
    "mov     rcx, qword [rbp-0x140]",
    "mov     qword [rbp-0x170], r8",
    "mov     qword [rbp-0x168], rcx",
    "call    dcgettext",
    "push    r14",
    "mov     r9, qword [rbp-0x178]",
    "push    r13",
    "mov     rdx, rax",
    "push    rbx",
    "push    r15",
    "{Case 0x6}",
    "mov     rcx, qword [rbp-0x140]",
    "mov     r8, qword [rbp-0x138]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "mov     r13, qword [rbp-0x118]",
    "mov     rbx, qword [rbp-0x120]",
    "lea     rsi, [rel data_1da08]  {\"Written by %s, %s, %s,\\n%s, %s, \u2026\"}",
    "mov     r15, qword [rbp-0x128]",
    "mov     r14, qword [rbp-0x130]",
    "mov     qword [rbp-0x168], rcx",
    "mov     qword [rbp-0x170], r8",
    "call    dcgettext",
    "mov     r9, r14",
    "push    rcx",
    "mov     rdx, rax",
    "push    r13",
    "push    rbx",
    "push    r15",
    "jmp     0x11bad",
    "{Case 0x5}",
    "mov     rcx, qword [rbp-0x140]",
    "mov     rbx, qword [rbp-0x120]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "mov     r15, qword [rbp-0x128]",
    "lea     rsi, [rel data_1d9e0]  {\"Written by %s, %s, %s,\\n%s, and \u2026\"}",
    "mov     r14, qword [rbp-0x130]",
    "mov     qword [rbp-0x168], rcx",
    "mov     r13, qword [rbp-0x138]",
    "call    dcgettext",
    "push    rbx",
    "mov     rcx, qword [rbp-0x168]",
    "mov     r9, r14",
    "push    r15",
    "mov     rdx, rax",
    "mov     r8, r13",
    "{Case 0x4}",
    "mov     r15, qword [rbp-0x128]",
    "mov     r14, qword [rbp-0x130]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "mov     r13, qword [rbp-0x138]",
    "mov     rbx, qword [rbp-0x140]",
    "lea     rsi, [rel data_1d9c0]  {\"Written by %s, %s, %s,\\nand %s.\\n\"}",
    "call    dcgettext",
    "mov     r9, r14",
    "push    r8",
    "mov     rdx, rax",
    "mov     r8, r13",
    "mov     rcx, rbx",
    "push    r15",
    "jmp     0x11c7c",
    "{Case 0x3}",
    "mov     r14, qword [rbp-0x130]",
    "mov     r13, qword [rbp-0x138]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "mov     rbx, qword [rbp-0x140]",
    "lea     rsi, [rel data_1b4fa]  {\"Written by %s, %s, and %s.\\n\"}",
    "call    dcgettext",
    "mov     r9, r14",
    "mov     r8, r13",
    "mov     esi, 0x2",
    "mov     rdx, rax",
    "mov     rcx, rbx",
    "mov     rdi, r12",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "jmp     0x11aae",
    "{Case 0x2}",
    "mov     r13, qword [rbp-0x138]",
    "mov     rbx, qword [rbp-0x140]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1b4e3]  {\"Written by %s and %s.\\n\"}",
    "call    dcgettext",
    "mov     r8, r13",
    "mov     rcx, rbx",
    "mov     esi, 0x2",
    "mov     rdx, rax",
    "mov     rdi, r12",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "jmp     0x11aae",
    "{Case 0x1}",
    "mov     rbx, qword [rbp-0x140]",
    "xor     edi, edi",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1b4d3]  {\"Written by %s.\\n\"}",
    "call    dcgettext",
    "mov     esi, 0x2",
    "mov     rdi, r12",
    "mov     rdx, rax",
    "mov     rcx, rbx",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "jmp     0x11aae",
    "{Case 0x9}",
    "mov     r11, qword [rbp-0x100]",
    "mov     r10, qword [rbp-0x108]",
    "mov     edx, 0x5",
    "lea     rsi, [rel data_1da90]  {\"Written by %s, %s, %s,\\n%s, %s, \u2026\"}",
    "mov     r9, qword [rbp-0x130]",
    "mov     r8, qword [rbp-0x138]",
    "mov     rcx, qword [rbp-0x140]",
    "mov     qword [rbp-0x188], r11",
    "mov     qword [rbp-0x180], r10",
    "mov     r14, qword [rbp-0x110]",
    "mov     qword [rbp-0x178], r9",
    "mov     r13, qword [rbp-0x118]",
    "mov     qword [rbp-0x170], r8",
    "mov     rbx, qword [rbp-0x120]",
    "mov     qword [rbp-0x168], rcx",
    "mov     r15, qword [rbp-0x128]",
    "jmp     0x11a63",
    "mov     r10, qword [rbp-0x180]",
    "mov     r9, qword [rbp-0x178]",
    "mov     rdi, r12",
    "xor     eax, eax",
    "mov     r8, qword [rbp-0x170]",
    "mov     rcx, qword [rbp-0x168]",
    "mov     esi, 0x2",
    "push    r10",
    "push    r14",
    "push    r13",
    "push    rbx",
    "push    r15",
    "call    __fprintf_chk",
    "add     rsp, 0x30",
    "mov     r8, qword [rbp-0x170]",
    "mov     rcx, qword [rbp-0x168]",
    "mov     rdi, r12",
    "xor     eax, eax",
    "mov     esi, 0x2",
    "call    __fprintf_chk",
    "add     rsp, 0x20",
    "jmp     0x11aae",
    "mov     esi, 0x2",
    "mov     rdi, r12",
    "xor     eax, eax",
    "call    __fprintf_chk",
    "pop     rsi",
    "pop     rdi",
    "jmp     0x11aae",
    "xor     edi, edi",
    "call    dcgettext",
    "mov     r11, qword [rbp-0x188]",
    "mov     rdx, rax",
    "push    r11"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}