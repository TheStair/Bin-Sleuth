{
  "address": "0xecd0",
  "rules": [
    "check OS version/fa26a21322994ec4bdbe5020e62bd777",
    "encrypt data using XTEA/4b6117a2d51f4354afd7eb58ab16e151/b698edc3bfd142ebb8f43c55408819b5",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using TEA/a99f0fb4fab7434084917883a6622883/6cf0dbdc06cf4e518b05ed91d6a55995",
    "check Internet connectivity via WinINet/e5536f56688049548c83e5cf372d25ac",
    "decrypt data using TEA/b1609112b4574d7d84a6736fb833fd96/bfe99336573d4b5189dbca2cbd3ed1f2",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/a3c4a1cc0982489686093c2de66a39c8",
    "contain loop",
    "check OS version/e331473c09f0419eb22f4786f6872060",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "check OS version/0dbc6332c9724004b686b44a39c40b94"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "mov     r15d, esi",
    "push    r14",
    "push    r13",
    "mov     r13, rdi",
    "push    r12",
    "mov     r12, rdx",
    "push    rbx",
    "sub     rsp, 0x18",
    "mov     qword [rbp-0x38], rcx",
    "movzx   eax, byte [rel data_23342]",
    "test    sil, sil",
    "je      0xed88",
    "mov     r14, qword [rdi]",
    "test    al, al",
    "je      0xed0a",
    "mov     r14, qword [rdi+0x8]",
    "test    al, al",
    "jne     0xed58",
    "sub     rsp, 0x8",
    "mov     edx, dword [r13+0xc4]",
    "xor     ecx, ecx",
    "mov     r9, r12",
    "push    qword [r13+0x10]",
    "xor     r15d, 0x1",
    "mov     rsi, qword [rel data_235a0]",
    "mov     rdi, r14",
    "movzx   r8d, r15b",
    "call    sub_e910",
    "mov     rbx, rax",
    "call    sub_bf40",
    "pop     rcx",
    "pop     rsi",
    "cmp     byte [rel data_23340], 0x0",
    "movzx   eax, byte [rdi+0xb9]",
    "jne     0xef50",
    "cmp     byte [rdi+0xb9], 0x0",
    "mov     r8d, dword [rdi+0xac]",
    "jne     0xeec0",
    "test    al, al",
    "je      0xeda7",
    "mov     r8d, dword [r13+0x30]",
    "xor     eax, eax",
    "cmp     byte [r13+0xb8], 0x0",
    "je      0xedb9",
    "mov     edi, 0xc",
    "call    sub_bbb0",
    "test    al, al",
    "jne     0xf060",
    "mov     r8d, dword [rdi+0xac]",
    "jmp     0xedab",
    "mov     edx, r8d",
    "and     edx, 0xf000",
    "cmp     edx, 0x8000",
    "je      0xf070",
    "mov     ecx, dword [r13+0xa8]",
    "lea     rdx, [rel data_19620]",
    "mov     ecx, dword [rdx+rcx*4]",
    "cmp     ecx, 0x5",
    "je      0xefe0",
    "mov     ecx, 0xc0",
    "jmp     0xee10",
    "mov     eax, 0xffffffff",
    "jmp     0xedab",
    "cmp     byte [r13+0xb8], 0x0",
    "jne     0xeed0",
    "test    r8d, 0x800",
    "je      0xf098",
    "cmp     edx, 0x4000",
    "je      0xf110",
    "mov     rdi, r14",
    "call    strlen",
    "mov     rbx, qword [rel data_23490]",
    "mov     rcx, rax",
    "test    rbx, rbx",
    "jne     0xf01a",
    "cmp     ecx, 0x7",
    "jne     0xf0d0",
    "lea     rax, [rel data_230c0]",
    "add     rcx, rax",
    "test    r8d, 0x400",
    "jne     0xf0f0",
    "mov     edi, 0x10",
    "call    sub_bbb0",
    "test    al, al",
    "je      0xf098",
    "mov     eax, r8d",
    "not     eax",
    "test    eax, 0x202",
    "je      0xf1d7",
    "cmp     edx, 0xa000",
    "je      0xf170",
    "mov     rdx, qword [rbx]",
    "cmp     rcx, rdx",
    "jb      0xf00d",
    "jmp     0xf0e0",
    "shl     rcx, 0x4",
    "jmp     0xee10",
    "test    eax, eax",
    "jne     0xf0d0",
    "mov     edi, 0x4",
    "mov     r9, r12",
    "call    sub_bbb0",
    "sub     rsp, 0x8",
    "mov     rdi, r14",
    "xor     ecx, ecx",
    "push    rbx",
    "mov     edx, r11d",
    "mov     rsi, r10",
    "mov     r15d, eax",
    "call    sub_e910",
    "mov     rbx, rax",
    "call    sub_bf40",
    "pop     rdi",
    "pop     r8",
    "test    r15b, r15b",
    "je      0xed3f",
    "sub     rsp, 0x8",
    "mov     edx, r11d",
    "mov     r9, r12",
    "mov     rsi, r10",
    "push    rbx",
    "mov     rdi, r14",
    "call    sub_e910",
    "mov     rbx, rax",
    "call    sub_bf40",
    "pop     rax",
    "pop     rdx",
    "mov     edi, 0x11",
    "call    sub_bbb0",
    "test    al, al",
    "je      0xf0a1",
    "mov     edi, 0x15",
    "call    sub_bbb0",
    "test    al, al",
    "je      0xf188",
    "mov     ecx, 0x100",
    "jmp     0xee10",
    "mov     edi, 0x14",
    "call    sub_bbb0",
    "mov     ecx, 0x140",
    "test    al, al",
    "jne     0xee10",
    "test    r8b, 0x2",
    "je      0xf13d",
    "mov     ecx, 0x70",
    "test    eax, eax",
    "je      0xede4",
    "mov     ecx, 0x80",
    "cmp     edx, 0x1000",
    "je      0xee10",
    "mov     rbx, qword [rbx+0x28]",
    "test    rbx, rbx",
    "je      0xf0e0",
    "mov     rdi, rcx",
    "mov     qword [rbp-0x40], rcx",
    "mov     rsi, qword [rbx+0x8]",
    "sub     rdi, rdx",
    "add     rdi, r14",
    "cmp     byte [rbx+0x20], 0x0",
    "jne     0xf000",
    "mov     ecx, 0x50",
    "jmp     0xee10",
    "cmp     byte [rel data_23340], 0x0",
    "mov     ecx, 0xd0",
    "jne     0xee10",
    "lea     rsp, [rbp-0x28]",
    "mov     rax, rbx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "jmp     0xee5f",
    "lea     rdi, [rel data_230c0]",
    "call    sub_be90",
    "lea     rdi, [rel data_230f0]",
    "call    sub_be90",
    "lea     rdi, [rel data_230d0]",
    "call    sub_be90",
    "jmp     0xee79",
    "lea     rdi, [rel data_230e0]",
    "call    sub_be90",
    "mov     ecx, 0x110",
    "jmp     0xee10",
    "and     r8d, 0x49",
    "je      0xf1b0",
    "cmp     byte [r13+0xc0], 0x0",
    "je      0xf188",
    "jmp     0xf120",
    "and     r8d, 0x200",
    "mov     ecx, 0x60",
    "je      0xee10",
    "mov     edi, 0x13",
    "call    sub_bbb0",
    "mov     ecx, 0x130",
    "test    al, al",
    "jne     0xee10",
    "jmp     0xee10",
    "mov     ecx, 0x90",
    "cmp     edx, 0xc000",
    "je      0xee10",
    "call    strncmp",
    "mov     rcx, qword [rbp-0x40]",
    "test    eax, eax",
    "je      0xf050",
    "cmp     rsi, rdi",
    "je      0xf050",
    "mov     edi, 0xd",
    "call    sub_bbb0",
    "cmp     al, 0x1",
    "sbb     rcx, rcx",
    "and     rcx, 0xffffffffffffffa0",
    "add     rcx, 0xd0",
    "nop     dword [rax]",
    "cmp     qword [rel data_230e8], 0x0",
    "je      0xefb0",
    "mov     rcx, qword [rel data_23478]",
    "test    rcx, rcx",
    "je      0xed3f",
    "mov     rax, qword [rbp-0x38]",
    "xor     edx, edx",
    "div     rcx",
    "xor     edx, edx",
    "mov     rsi, rax",
    "mov     rax, qword [rbp-0x38]",
    "lea     rax, [rbx+rax-0x1]",
    "div     rcx",
    "cmp     rsi, rax",
    "je      0xed3f",
    "cmp     qword [r13+0x28], 0x1",
    "jbe     0xefe0",
    "mov     edi, 0xe",
    "call    sub_bbb0",
    "test    al, al",
    "je      0xf1b0",
    "mov     ecx, 0x150",
    "jmp     0xee10",
    "mov     edi, 0x12",
    "call    sub_bbb0",
    "cmp     al, 0x1",
    "sbb     rcx, rcx",
    "and     cl, 0x40",
    "add     rcx, 0x120",
    "jmp     0xee10",
    "mov     ecx, 0xa0",
    "cmp     edx, 0x6000",
    "je      0xee10",
    "lea     rcx, [rbx+0x10]",
    "jmp     0xee1a",
    "test    rdx, rdx",
    "je      0xf050",
    "lea     rdi, [rel data_23230]",
    "call    sub_be90",
    "jmp     0xed3f",
    "mov     edi, 0x16",
    "call    sub_bbb0",
    "test    al, al",
    "je      0xefe0",
    "mov     ecx, 0xe0",
    "jmp     0xee10",
    "cmp     edx, 0x2000",
    "mov     ecx, 0xb0",
    "mov     eax, 0xd0",
    "cmovne  rcx, rax",
    "jmp     0xee10",
    "xor     r15d, 0x1",
    "cmp     qword [rcx+0x8], 0x0",
    "mov     rbx, qword [r13+0x10]",
    "mov     r10, qword [rel data_235a0]",
    "mov     r11d, dword [r13+0xc4]",
    "movzx   r8d, r15b",
    "je      0xef68",
    "call    sub_7d70",
    "mov     rcx, qword [rbp-0x40]",
    "test    eax, eax",
    "jne     0xf00d",
    "mov     ecx, 0x160",
    "jmp     0xee10"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}