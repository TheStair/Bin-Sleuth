{
  "address": "0xf6b0",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using HC-128/86aaff13b46c4951b9ca4e0a9171c391",
    "hash data using aphash/0032995a5e514e2ebf12018a2932c851",
    "check OS version/0dbc6332c9724004b686b44a39c40b94",
    "inject pe/0fa951270c554b5eb43a556aa3ef2963",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "hash data using aphash/c01783ca846f48c3a4751b50c0c12749",
    "encrypt data using chaskey/9e1fd69e115146dfb5013a18fb36c920",
    "populate SysWhispers2 syscall list/bac71c42a489454d9c62b98a7189c5d2",
    "check OS version/fa26a21322994ec4bdbe5020e62bd777",
    "check Internet connectivity via WinINet/e5536f56688049548c83e5cf372d25ac",
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "check for kernel debugger via shared user data structure/f02b2044f10f450f9f5b2b0d5d96cef0",
    "check for kernel debugger via shared user data structure/2b084810430e4f13a9526b5f4838cb62",
    "hash data using aphash/53c84e7b18b64c82aa36e25c45372fcd",
    "allocate or change RW memory/f065d51335ee4137b486ba2a6434de57",
    "check if file exists/a31a651e5a314ee9ac446400cc2abdd5/58dd2a2048194a11b60488e61f6f4fb2",
    "contain loop",
    "hash data with CRC32/7620b456d97a4aaeb63e1213270df3d4",
    "check OS version/e331473c09f0419eb22f4786f6872060",
    "PEB access/2627ea084e2f4bea91f14e6cd276939a",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "encrypt data using XXTEA/3026d94f6eda43e0bed136bd89733650/0d7bc900a8ea48098fc469578ae14b88"
  ],
  "disassembly": [
    "push    rbp {__saved_rbp}",
    "mov     rbp, rsp {__saved_rbp}",
    "push    r15 {__saved_r15}",
    "push    r14 {__saved_r14}",
    "push    r13 {__saved_r13}",
    "push    r12 {__saved_r12}",
    "push    rbx {__saved_rbx}",
    "sub     rsp, 0x1000",
    "or      qword [rsp {var_1030_1} {var_1030}], 0x0",
    "sub     rsp, 0x338",
    "movzx   edx, byte [rdi+0xb8]",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38 {var_40}], rax",
    "xor     eax, eax  {0x0}",
    "mov     r13, rdi",
    "test    dl, dl",
    "je      0xf8a0",
    "mov     eax, dword [rdi+0xa8]",
    "lea     rcx, [rel data_19648]  {\"?pcdb-lswd\"}",
    "mov     r9d, 0x3f3f",
    "cmp     byte [rel data_232c8], 0x0",
    "mov     word [rbp-0x1293 {var_129b}], r9w  {0x3f3f}",
    "movzx   eax, byte [rcx+rax]",
    "mov     byte [rbp-0x1291 {var_1299}], 0x0",
    "mov     byte [rbp-0x129c {var_12a4}], al",
    "mov     rax, 0x3f3f3f3f3f3f3f3f",
    "mov     qword [rbp-0x129b {var_12a3}], rax  {0x3f3f3f3f3f3f3f3f}",
    "jne     0xf865",
    "mov     eax, dword [rdi+0x30]",
    "mov     ecx, 0x2d",
    "mov     esi, eax",
    "and     esi, 0xf000",
    "cmp     esi, 0x8000",
    "je      0xf75d",
    "mov     eax, dword [r13+0xbc]",
    "cmp     eax, 0x1",
    "je      0xffa0",
    "mov     byte [rbp-0x1292 {var_129b+0x1}], 0x0",
    "mov     byte [rbp-0x129c {var_12a4}], cl",
    "mov     ecx, eax",
    "and     ecx, 0x100",
    "cmp     ecx, 0x1",
    "sbb     ecx, ecx",
    "and     ecx, 0xffffffbb",
    "add     ecx, 0x72",
    "mov     byte [rbp-0x129b {var_12a3}], cl",
    "mov     ecx, eax",
    "and     ecx, 0x80",
    "cmp     ecx, 0x1",
    "sbb     ecx, ecx",
    "and     ecx, 0xffffffb6",
    "add     ecx, 0x77",
    "mov     byte [rbp-0x129a {var_12a3+0x1}], cl",
    "mov     ecx, eax",
    "and     ecx, 0x40",
    "cmp     ecx, 0x1",
    "sbb     ecx, ecx",
    "test    ah, 0x8",
    "jne     0xfd10",
    "mov     ecx, 0x64",
    "cmp     esi, 0x4000",
    "je      0xf75d",
    "mov     byte [rbp-0x1292 {var_129b+0x1}], 0x2e",
    "jmp     0xf8f1",
    "cmp     eax, 0x2",
    "jne     0xf8f1",
    "movdqu  xmm0, xmmword [r13+0x60]",
    "jmp     0xf910",
    "ja      0xff20",
    "and     ecx, 0xffffffe0",
    "add     ecx, 0x73",
    "jmp     0xf7ae",
    "and     ecx, 0xffffffb5",
    "add     ecx, 0x78",
    "mov     ecx, 0x62",
    "cmp     esi, 0x6000",
    "je      0xf75d",
    "mov     eax, dword [rel data_243e4]",
    "cmp     eax, 0x2",
    "je      0xf890",
    "mov     eax, dword [rel data_243e4]",
    "mov     byte [rbp-0x1292 {var_129b+0x1}], 0x2b",
    "cmp     eax, 0x2",
    "jne     0xf8fc",
    "mov     byte [rbp-0x1350 {var_1358}], 0x1",
    "movaps  xmmword [rbp-0x1330 {var_1338}], xmm0",
    "movdqu  xmm1, xmmword [r13+0x70]",
    "movdqa  xmm2, xmm1",
    "movaps  xmmword [rbp-0x1330 {var_1338}], xmm1",
    "psrldq  xmm2, 0x8",
    "movdqa  xmm0, xmm2",
    "pand    xmm0, xmm1",
    "movq    rax, xmm0",
    "cmp     rax, 0xffffffffffffffff",
    "setne   byte [rbp-0x1350 {var_1358}]",
    "jmp     0xf91e",
    "test    eax, eax",
    "jne     0xfd00",
    "mov     byte [rbp-0x1299 {var_12a3+0x2}], cl",
    "mov     ecx, eax",
    "and     ecx, 0x20",
    "cmp     ecx, 0x1",
    "sbb     ecx, ecx",
    "and     ecx, 0xffffffbb",
    "add     ecx, 0x72",
    "mov     byte [rbp-0x1298 {var_12a3+0x3}], cl",
    "mov     ecx, eax",
    "and     ecx, 0x10",
    "cmp     ecx, 0x1",
    "sbb     ecx, ecx",
    "and     ecx, 0xffffffb6",
    "add     ecx, 0x77",
    "mov     byte [rbp-0x1297 {var_12a3+0x4}], cl",
    "mov     ecx, eax",
    "and     ecx, 0x8",
    "cmp     ecx, 0x1",
    "sbb     ecx, ecx",
    "test    ah, 0x4",
    "je      0xff70",
    "and     ecx, 0xffffffb5",
    "add     ecx, 0x78",
    "jmp     0xf7f9",
    "and     ecx, 0xffffffe0",
    "add     ecx, 0x73",
    "mov     ecx, 0x63",
    "cmp     esi, 0x2000",
    "je      0xf75d",
    "nop     dword [rax]",
    "lea     r14, [rbp-0xe80 {s}]",
    "mov     ebx, 0xe3b",
    "mov     r12d, 0xe3b",
    "mov     r15, r14 {s}",
    "jmp     0xf997",
    "lea     r9, [rel data_1af59]",
    "test    dl, dl",
    "je      0xf943",
    "cmp     byte [rel data_23349], 0x0",
    "je      0xfd20  {data_23349}",
    "movdqu  xmm0, xmmword [r13+0x80]",
    "jmp     0xf910",
    "movdqu  xmm0, xmmword [r13+0x70]",
    "mov     byte [rbp-0x1296 {var_12a3+0x5}], cl",
    "mov     ecx, eax",
    "and     ecx, 0x4",
    "cmp     ecx, 0x1",
    "sbb     ecx, ecx",
    "and     ecx, 0xffffffbb",
    "add     ecx, 0x72",
    "mov     byte [rbp-0x1295 {var_12a3+0x6}], cl",
    "mov     ecx, eax",
    "and     ecx, 0x2",
    "cmp     ecx, 0x1",
    "sbb     ecx, ecx",
    "and     ecx, 0xffffffb6",
    "add     ecx, 0x77",
    "mov     byte [rbp-0x1294 {var_12a3+0x7}], cl",
    "mov     ecx, eax",
    "and     ecx, 0x1",
    "test    ah, 0x2",
    "je      0xff58",
    "cmp     ecx, 0x1",
    "sbb     eax, eax",
    "and     eax, 0xffffffb5",
    "add     eax, 0x78",
    "jmp     0xf844",
    "cmp     ecx, 0x1",
    "sbb     eax, eax",
    "and     eax, 0xffffffe0",
    "add     eax, 0x74",
    "mov     ecx, 0x6c",
    "cmp     esi, 0xa000",
    "je      0xf75d",
    "cmp     byte [rel data_23348], 0x0",
    "je      0xfa75  {data_23348}",
    "lea     r14, [rbp-0xe80 {s}]",
    "mov     r8d, dword [rel data_232c4]",
    "mov     edx, 0xe3b",
    "xor     eax, eax  {0x0}",
    "lea     rcx, [rel data_1af66[5]]  {\"%*s \"}",
    "mov     esi, 0x2",
    "mov     rdi, r14 {s}",
    "mov     r12d, 0xe3b",
    "call    __sprintf_chk",
    "mov     ebx, 0xe3b",
    "movzx   edx, byte [r13+0xb8]",
    "movsxd  r10, eax",
    "cmp     r10, r12",
    "lea     r15, [r14+r10] {s}",
    "cmovae  r12, r10",
    "sub     r12, r10",
    "cmp     r12, rbx",
    "cmovae  rbx, r12",
    "mov     rcx, qword [r13+0x20]",
    "test    rcx, rcx",
    "jne     0x100b0",
    "mov     r10d, 0x20",
    "cmp     byte [rel data_232c8], 0x0",
    "mov     byte [rbp-0x1293 {var_129b}], al",
    "mov     word [rbp-0x1292 {var_129b+0x1}], r10w  {0x20}",
    "je      0xf8ea",
    "mov     ecx, 0x70",
    "cmp     esi, 0x1000",
    "je      0xf75d",
    "lea     r8, [rel data_1af59]",
    "test    dl, dl",
    "jne     0xfe08",
    "mov     esi, 0x1",
    "lea     rcx, [rel data_1af59]",
    "test    dl, dl",
    "jne     0x10108",
    "mov     byte [rbp-0x125c {var_1264}], 0x0",
    "lea     r9, [rbp-0x125c {var_1264}]",
    "mov     rdi, 0xcccccccccccccccd",
    "nop     dword [rax+rax]",
    "cmp     esi, 0xc000",
    "mov     ecx, 0x73",
    "mov     esi, 0x3f",
    "cmovne  ecx, esi  {0x3f}",
    "mov     byte [rbp-0x125c {var_1264}], 0x0",
    "mov     rcx, qword [r13+0x28]",
    "lea     r8, [rbp-0x125c {var_1264}]",
    "mov     rdi, 0xcccccccccccccccd",
    "nop     dword [rax]",
    "sub     rsp, 0x8",
    "mov     r9d, dword [rel data_232bc]",
    "mov     rdi, r15",
    "xor     eax, eax  {0x0}",
    "push    r8 {var_1378}",
    "lea     rcx, [rel data_1af5b]  {\"%s %*s \"}",
    "mov     rdx, r12",
    "lea     r8, [rbp-0x129c {var_12a4}]",
    "mov     esi, 0x2",
    "call    __sprintf_chk",
    "pop     rdi {var_1378}",
    "pop     r8 {var_1370}",
    "cdqe    ",
    "add     r15, rax",
    "cmp     byte [rel data_23678], 0x0",
    "jne     0xfde0  {data_23678}",
    "mov     rdi, qword [r13+0x58]",
    "mov     r8, qword [rel data_232d0]",
    "lea     rsi, [rbp-0x1270 {var_1278}]",
    "mov     ecx, 0x200",
    "mov     edx, dword [rel data_232dc]",
    "call    sub_cb80",
    "mov     rdi, rax",
    "mov     qword [rbp-0x1348 {var_1350_3}], rax",
    "call    strlen",
    "mov     rcx, qword [rbp-0x1348 {var_1350_3}]",
    "mov     rsi, rax",
    "jmp     0xf9b8",
    "mov     ebx, dword [rel data_232c0]",
    "mov     rdi, rcx",
    "mov     qword [rbp-0x1348 {var_1350}], rcx",
    "call    sub_140a0",
    "mov     rcx, qword [rbp-0x1348 {var_1350}]",
    "sub     ebx, eax",
    "test    ebx, ebx",
    "jle     0xff10",
    "mov     rax, rcx",
    "sub     r9, 0x1",
    "mul     rdi",
    "mov     rax, rcx",
    "shr     rdx, 0x3",
    "lea     rsi, [rdx+rdx*4]",
    "add     rsi, rsi",
    "sub     rax, rsi",
    "add     eax, 0x30",
    "mov     byte [r9], al",
    "mov     rax, rcx",
    "mov     rcx, rdx",
    "cmp     rax, 0x9",
    "ja      0x100d0",
    "jmp     0xf943",
    "mov     rax, rcx",
    "sub     r8, 0x1",
    "mul     rdi",
    "mov     rax, rcx",
    "shr     rdx, 0x3",
    "lea     rsi, [rdx+rdx*4]",
    "add     rsi, rsi",
    "sub     rax, rsi",
    "add     eax, 0x30",
    "mov     byte [r8], al",
    "mov     rax, rcx",
    "mov     rcx, rdx",
    "cmp     rax, 0x9",
    "ja      0xfe28",
    "jmp     0xfa84",
    "mov     esi, 0x2",
    "lea     rdi, [rel data_1af63]",
    "mov     qword [rbp-0x1348 {var_1350}], rax",
    "call    sub_8170",
    "mov     rax, qword [rbp-0x1348 {var_1350}]",
    "jmp     0xfac6",
    "cmp     byte [rel data_2308d], 0x0",
    "jne     0xfae8  {data_2308d}",
    "mov     rsi, r15",
    "jmp     0xfa1d",
    "lea     rsi, [r15+rbx]",
    "nop     word [rax+rax]",
    "mov     rsi, r15",
    "mov     rdi, r14 {s}",
    "sub     rsi, r14 {s}",
    "call    sub_8170",
    "cmp     byte [rel data_2308d], 0x0",
    "jne     0xfe60  {data_2308d}",
    "cmp     byte [rel data_2308c], 0x0",
    "jne     0xfae8  {data_2308c}",
    "mov     eax, 0xe3b",
    "add     rcx, 0x1",
    "lea     r15, [rsi+0x1]",
    "cmp     r12, rax",
    "cmovae  rax, r12",
    "mov     rdx, rax",
    "sub     rdx, r12",
    "add     rdx, 0x1",
    "cmp     rdx, rax",
    "cmovb   rdx, rax",
    "sub     r12, 0x1",
    "sub     r12, rax",
    "movzx   eax, byte [rcx-0x1]",
    "add     r12, rdx",
    "mov     byte [r15-0x1], al",
    "test    al, al",
    "jne     0xff10",
    "mov     eax, 0xe3b",
    "cmp     r12, rax",
    "cmovae  rax, r12",
    "mov     rdx, rax",
    "sub     rdx, r12",
    "add     rdx, 0x1",
    "cmp     rdx, rax",
    "cmovb   rdx, rax",
    "sub     r12, 0x1",
    "add     r15, 0x1",
    "sub     r12, rax",
    "add     r12, rdx",
    "mov     byte [r15-0x1], 0x20",
    "cmp     r15, rsi",
    "jne     0xf9e8",
    "cmp     byte [r13+0xb8], 0x0",
    "mov     edx, dword [rel data_232b8]",
    "lea     rdi, [rel data_1af59]",
    "mov     esi, dword [r13+0x34]",
    "jne     0x10070",
    "cmp     byte [rel data_2308c], 0x0",
    "jne     0xfe91  {data_2308c}",
    "cmp     byte [rel data_23343], 0x0",
    "je      0xffb0  {data_23343}",
    "mov     ebx, 0xe3b",
    "mov     byte [r15-0x1], 0x20",
    "movzx   edx, byte [r13+0xb8]",
    "cmp     r12, rbx",
    "cmovae  rbx, r12",
    "xor     edi, edi  {0x0}",
    "cmp     byte [rel data_232cc], 0x0",
    "jne     0xfe7f  {data_232cc}",
    "call    sub_af90",
    "cmp     byte [rel data_2308c], 0x0",
    "je      0xfb10  {data_2308c}",
    "cmp     byte [r13+0xb8], 0x0",
    "mov     edx, dword [rel data_232b4]",
    "lea     rdi, [rel data_1af59]",
    "mov     esi, dword [r13+0x38]",
    "jne     0xfff0",
    "cmp     byte [rel data_23343], 0x0",
    "jne     0xfec2  {data_23343}",
    "cmp     byte [rel data_23333], 0x0",
    "jne     0xfae8  {data_23333}",
    "nop     dword [rax]",
    "mov     edi, esi",
    "mov     qword [rbp-0x1358 {var_1360_3}], rsi",
    "mov     dword [rbp-0x1348 {var_1350}], edx",
    "call    sub_f4c0",
    "mov     rsi, qword [rbp-0x1358 {var_1360_3}]",
    "mov     edx, dword [rbp-0x1348 {var_1350}]",
    "mov     rdi, rax",
    "jmp     0xfe7f",
    "xor     edi, edi  {0x0}",
    "cmp     byte [rel data_232cc], 0x0",
    "jne     0xfeb0  {data_232cc}",
    "call    sub_af90",
    "cmp     byte [rel data_23343], 0x0",
    "je      0xfb1d  {data_23343}",
    "cmp     byte [r13+0xb8], 0x0",
    "mov     edx, dword [rel data_232b0]",
    "lea     rdi, [rel data_1af59]",
    "mov     esi, dword [r13+0x34]",
    "jne     0x10030",
    "cmp     byte [rel data_23333], 0x0",
    "jne     0xfef3  {data_23333}",
    "add     rax, rbx",
    "mov     rdx, rax",
    "sub     rdx, r12",
    "cmp     rdx, rbx",
    "cmovb   rdx, rbx",
    "sub     r12, rax",
    "lea     rbx, [rdx+r12]",
    "mov     r12d, 0xe3b",
    "cmp     rbx, r12",
    "cmovae  r12, rbx",
    "jmp     0xfb38",
    "mov     edi, esi",
    "mov     qword [rbp-0x1358 {var_1360_1}], rsi",
    "mov     dword [rbp-0x1348 {var_1350}], edx",
    "call    sub_f5f0",
    "mov     rsi, qword [rbp-0x1358 {var_1360_1}]",
    "mov     edx, dword [rbp-0x1348 {var_1350}]",
    "mov     rdi, rax",
    "jmp     0xfeb0",
    "xor     edi, edi  {0x0}",
    "cmp     byte [rel data_232cc], 0x0",
    "jne     0xfee1  {data_232cc}",
    "call    sub_af90",
    "cmp     byte [rel data_23333], 0x0",
    "je      0xfb2a  {data_23333}",
    "mov     rdi, qword [r13+0xb0]",
    "mov     edx, dword [rel data_232ac]",
    "xor     esi, esi  {0x0}",
    "call    sub_af90",
    "jmp     0xfb2a",
    "mov     r12d, 0xe3b",
    "mov     ebx, 0xe3b",
    "mov     r15, r14 {s}",
    "cmp     byte [r13+0xb8], 0x0",
    "je      0xfd40",
    "mov     edi, esi",
    "mov     qword [rbp-0x1358 {var_1360_2}], rsi",
    "mov     dword [rbp-0x1348 {var_1350}], edx",
    "call    sub_f4c0",
    "mov     rsi, qword [rbp-0x1358 {var_1360_2}]",
    "mov     edx, dword [rbp-0x1348 {var_1350}]",
    "mov     rdi, rax",
    "jmp     0xfee1",
    "mov     esi, 0x1",
    "lea     rcx, [rel data_1af59]",
    "jmp     0xfb95",
    "mov     eax, dword [r13+0x30]",
    "and     eax, 0xb000",
    "cmp     eax, 0x2000",
    "je      0x10290",
    "mov     r12d, dword [rel data_232a0]",
    "mov     rdi, rcx",
    "mov     qword [rbp-0x1348 {var_1350_2}], rcx",
    "call    sub_140a0",
    "mov     rcx, qword [rbp-0x1348 {var_1350_2}]",
    "sub     r12d, eax",
    "test    r12d, r12d",
    "jle     0x10518",
    "mov     rcx, qword [r13+0x40]",
    "mov     r11d, dword [rel data_232a8]",
    "mov     byte [rbp-0x127c {var_1284}], 0x0",
    "lea     rsi, [rbp-0x127c {var_1284}]",
    "mov     edi, dword [rel data_232a4]",
    "mov     r10d, dword [rel data_232a0]",
    "mov     qword [rbp-0x1348 {var_1350_5}], rbx",
    "mov     r9, 0xcccccccccccccccd",
    "mov     r8, rcx",
    "lea     eax, [rdi+r11+0x2]",
    "shr     r8, 0xc",
    "sub     r10d, eax",
    "xor     r8b, r8b  {0x0}",
    "movzx   eax, cl",
    "or      r8d, eax",
    "nop     ",
    "mov     rdi, qword [r13+0x48]",
    "mov     r8, qword [rel data_23080]",
    "lea     rsi, [rbp-0x1270 {var_1278}]",
    "mov     ecx, 0x1",
    "mov     edx, dword [rel data_232d8]",
    "call    sub_cb80",
    "mov     rdi, rax",
    "mov     qword [rbp-0x1348 {var_1350_1}], rax",
    "call    strlen",
    "mov     rcx, qword [rbp-0x1348 {var_1350_1}]",
    "mov     rsi, rax",
    "mov     r12, r15",
    "jmp     0xfbfd",
    "add     r12, r15",
    "nop     dword [rax]",
    "mov     rax, r8",
    "sub     rsi, 0x1",
    "mul     r9",
    "mov     rax, r8",
    "shr     rdx, 0x3",
    "lea     rbx, [rdx+rdx*4]",
    "add     rbx, rbx",
    "sub     rax, rbx",
    "add     eax, 0x30",
    "mov     byte [rsi], al",
    "mov     rax, r8",
    "mov     r8, rdx",
    "cmp     rax, 0x9",
    "ja      0x102e0",
    "mov     rax, rcx",
    "shr     rcx, 0x20",
    "mov     byte [rbp-0x125c {var_1264}], 0x0",
    "lea     r9, [rbp-0x125c {var_1264}]",
    "shr     rax, 0x8",
    "and     ecx, 0xfffff000",
    "mov     r8, 0xcccccccccccccccd",
    "and     eax, 0xfff",
    "or      ecx, eax",
    "nop     dword [rax]",
    "mov     eax, 0xe3b",
    "add     rcx, 0x1",
    "cmp     rbx, rax",
    "cmovae  rax, rbx",
    "mov     rdx, rax",
    "sub     rdx, rbx",
    "add     rdx, 0x1",
    "cmp     rdx, rax",
    "cmovb   rdx, rax",
    "sub     rbx, 0x1",
    "add     r12, 0x1",
    "sub     rbx, rax",
    "movzx   eax, byte [rcx-0x1]",
    "add     rbx, rdx",
    "mov     byte [r12-0x1], al",
    "test    al, al",
    "jne     0xfbfd",
    "mov     eax, 0xe3b",
    "cmp     rbx, rax",
    "cmovae  rax, rbx",
    "mov     rdx, rax",
    "sub     rdx, rbx",
    "add     rdx, 0x1",
    "cmp     rdx, rax",
    "cmovb   rdx, rax",
    "sub     rbx, 0x1",
    "add     r15, 0x1",
    "sub     rbx, rax",
    "add     rbx, rdx",
    "mov     byte [r15-0x1], 0x20",
    "cmp     r15, r12",
    "jne     0xfbc8",
    "mov     rax, rcx",
    "sub     r9, 0x1",
    "mul     r8",
    "mov     rax, rcx",
    "shr     rdx, 0x3",
    "lea     rbx, [rdx+rdx*4]",
    "add     rbx, rbx",
    "sub     rax, rbx",
    "add     eax, 0x30",
    "mov     byte [r9], al",
    "mov     rax, rcx",
    "mov     rcx, rdx",
    "cmp     rax, 0x9",
    "ja      0x10340",
    "xor     eax, eax  {0x0}",
    "test    r10d, r10d",
    "mov     rbx, qword [rbp-0x1348 {var_1350_5}]",
    "push    rsi {var_1370_1}",
    "cmovns  eax, r10d",
    "push    rdi {var_1378_2}",
    "mov     esi, 0x2",
    "mov     rdi, r15",
    "mov     rdx, rbx",
    "lea     rcx, [rel data_1af66]  {\"%*s, %*s \"}",
    "lea     r8d, [rax+r11]",
    "xor     eax, eax  {0x0}",
    "call    __sprintf_chk",
    "cdqe    ",
    "lea     rcx, [rax+r12]",
    "mov     rdx, rcx",
    "sub     rdx, rbx",
    "cmp     rdx, r12",
    "cmovb   rdx, r12",
    "sub     rbx, rcx",
    "lea     r12, [r15+rax]",
    "pop     rcx {var_1378_2}",
    "pop     rsi {var_1370_1}",
    "add     rbx, rdx",
    "jmp     0xfc3f",
    "mov     byte [r12-0x1], 0x20",
    "mov     byte [r12], 0x1",
    "cmp     byte [r13+0xb8], 0x0",
    "je      0xfc5b",
    "lea     r15, [rel data_1af59]",
    "cmp     byte [rbp-0x1350 {var_1358}], 0x0  {\"pwuid\"}",
    "jne     0x10150",
    "mov     r8, qword [rel data_23680]",
    "lea     rcx, [rbp-0x12e0 {var_12e8}]",
    "lea     rsi, [rbp-0x1338 {var_1340}]",
    "mov     qword [rbp-0x1338 {var_1340}], 0x0",
    "mov     rdx, rcx {var_12e8}",
    "mov     qword [rbp-0x1350 {var_1358}], rcx {var_12e8}",
    "mov     rdi, r8",
    "mov     qword [rbp-0x1348 {var_1350_6}], r8",
    "call    sub_e390",
    "test    rax, rax",
    "je      0x1046c",
    "mov     rdx, rbx",
    "mov     r9, r15",
    "lea     rcx, [rel data_1af66[5]]  {\"%*s \"}",
    "mov     rdi, r12",
    "mov     esi, 0x2",
    "xor     eax, eax  {0x0}",
    "call    __sprintf_chk",
    "movsxd  rbx, eax",
    "add     rbx, r12",
    "mov     r15, qword [rel data_23680]",
    "lea     rcx, [rbp-0x1320 {var_1328}]",
    "lea     rsi, [rbp-0x1330 {var_1338}]",
    "mov     rdx, rcx {var_1328}",
    "mov     qword [rbp-0x1348 {var_1350_4}], rcx {var_1328}",
    "mov     rdi, r15",
    "call    sub_e390",
    "test    rax, rax",
    "je      0x104a0",
    "mov     dword [rel data_23020], 0x0",
    "xor     r8d, r8d  {0x0}",
    "jmp     0xfc72",
    "cmp     byte [rel data_237cc], 0x0",
    "mov     rdx, qword [rel data_23240]",
    "mov     r8, qword [rbp-0x1348 {var_1350_6}]",
    "mov     rcx, qword [rbp-0x1350 {var_1358}]",
    "je      0x10431",
    "cmp     qword [r13+0x8], 0x0",
    "je      0xfcd7",
    "mov     eax, dword [rel data_23334]",
    "test    eax, eax",
    "jne     0xff80",
    "cmp     byte [r12], 0x0",
    "je      0x10277",
    "xor     r10d, r10d  {0x0}",
    "mov     rdx, qword [rbp-0x1328 {var_1338+0x8}]",
    "cmp     qword [rel data_23718], rdx",
    "setg    r10b",
    "setl    al",
    "mov     rdi, qword [rel data_23710]",
    "mov     rsi, qword [rbp-0x1330 {var_1338}]",
    "movzx   eax, al",
    "mov     r8d, r10d",
    "xor     r9d, r9d  {0x0}",
    "mov     rcx, qword [rbp-0x1348 {var_1350_4}]",
    "sub     r8d, eax",
    "cmp     rsi, rdi",
    "setg    r11b",
    "setl    r9b",
    "movzx   r11d, r11b",
    "sub     r9d, r11d",
    "lea     r9d, [r8+r9*2]",
    "test    r9d, r9d",
    "js      0x1057d",
    "sub     rsp, 0x8",
    "lea     rdi, [rbp-0x1270 {var_1278}]",
    "xor     r9d, r9d  {0x0}",
    "mov     esi, 0x3e9",
    "push    0x0",
    "push    r8 {var_1380_2}",
    "xor     r8d, r8d  {0x0}",
    "push    0xffffffffffffffff {var_1388}",
    "mov     qword [rbp-0x1348 {var_1350_7}], rdi {var_1278}",
    "call    sub_14780",
    "add     rsp, 0x20",
    "mov     rdi, qword [rbp-0x1348 {var_1350_7}]",
    "test    rax, rax",
    "mov     rsi, rax",
    "jne     0x1047e",
    "movsxd  rdx, dword [rbp-0x12d0 {var_12d8}]",
    "lea     rax, [rel data_237e0]",
    "shl     rdx, 0x7",
    "add     rdx, rax",
    "mov     rax, qword [rbp-0x38 {var_40}]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x105d3",
    "mov     esi, 0x4",
    "lea     rdi, [rel data_1af70]  {\" -> \"}",
    "call    sub_8170",
    "xor     edx, edx  {0x0}",
    "lea     rcx, [rbx+r12+0x4]",
    "mov     rdi, r13",
    "mov     esi, 0x1",
    "call    sub_ecd0",
    "mov     edx, dword [rel data_23334]",
    "test    edx, edx",
    "je      0xfcd7",
    "mov     esi, dword [r13+0x30]",
    "movzx   edi, byte [r13+0xb8]",
    "call    sub_bd80",
    "test    al, al",
    "je      0xfcd7",
    "mov     byte [r12], 0x20",
    "lea     rbx, [r12+0x1]",
    "jmp     0xfc94",
    "cmp     byte [r13+0xb8], 0x0",
    "je      0xfc5b",
    "xor     edi, edi  {0x0}",
    "lea     rsi, [rel data_23710]",
    "call    clock_gettime",
    "xor     r10d, r10d  {0x0}",
    "mov     rdx, qword [rbp-0x1328 {var_1338+0x8}]",
    "cmp     qword [rel data_23718], rdx",
    "setg    r10b",
    "setl    al",
    "mov     rdi, qword [rel data_23710]",
    "mov     rsi, qword [rbp-0x1330 {var_1338}]",
    "movzx   eax, al",
    "mov     r8d, r10d",
    "mov     rcx, qword [rbp-0x1348 {var_1350_4}]",
    "sub     r8d, eax",
    "jmp     0x101d8",
    "cmp     rdi, rsi",
    "lea     r9, [rdi-0xf0c2ac]",
    "setg    r11b",
    "setl    dil",
    "sub     eax, r10d",
    "movzx   edi, dil",
    "movzx   r11d, r11b",
    "sub     edi, r11d",
    "cmp     r9, rsi",
    "setg    sil",
    "lea     eax, [rax+rdi*2]",
    "setl    dil",
    "movzx   edi, dil",
    "movzx   esi, sil",
    "sub     esi, edi",
    "mov     edi, edx",
    "lea     esi, [r8+rsi*2]",
    "and     eax, esi",
    "shr     eax, 0x1f",
    "cmp     byte [rel data_237cc], 0x0",
    "je      0x10520  {data_237cc}",
    "call    sub_140a0",
    "mov     dword [rel data_23020], eax",
    "mov     r8d, eax",
    "test    eax, eax",
    "jns     0xfc72",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "lea     rsp, [rbp-0x28]",
    "pop     rbx {__saved_rbx}",
    "pop     r12 {__saved_r12}",
    "pop     r13 {__saved_r13}",
    "pop     r14 {__saved_r14}",
    "pop     r15 {__saved_r15}",
    "pop     rbp {__saved_rbp}",
    "retn     {__return_addr}",
    "mov     esi, dword [r13+0xac]",
    "xor     edx, edx  {0x0}",
    "mov     edi, 0x1",
    "call    sub_bd80",
    "test    al, al",
    "je      0xfcd7",
    "jmp     0xfdb1",
    "sub     rbx, r14 {s}",
    "mov     rdi, r14 {s}",
    "mov     rsi, rbx",
    "call    sub_8170",
    "mov     rcx, rbx",
    "xor     esi, esi  {0x0}",
    "mov     rdi, r13",
    "lea     rdx, [rel data_23620]",
    "call    sub_ecd0",
    "mov     edx, dword [r13+0xa8]",
    "mov     r12, rax",
    "cmp     edx, 0x6",
    "je      0xfd58",
    "mov     rcx, qword [rbp-0x1330 {var_1338}]",
    "mov     byte [rbp-0x127c {var_1284}], 0x0",
    "lea     r15, [rbp-0x127c {var_1284}]",
    "mov     rsi, 0x6666666666666667",
    "test    rcx, rcx",
    "js      0x10533",
    "and     eax, 0x1",
    "lea     rdx, [rel data_23240]",
    "mov     rdx, qword [rdx+rax*8]",
    "jmp     0x1024b",
    "shl     rax, 0x3f",
    "movsxd  rsi, dword [rbp-0x1310 {var_1318}]",
    "lea     rdx, [rel data_237e0]",
    "sar     rax, 0x3f",
    "and     eax, 0xc",
    "add     rax, rsi",
    "shl     rax, 0x7",
    "add     rdx, rax",
    "jmp     0x1046c",
    "mov     rdx, qword [rel stdout]",
    "add     qword [rel data_23350], 0x1",
    "mov     rdi, qword [rdx]",
    "mov     rdx, qword [rdi+0x28]",
    "cmp     rdx, qword [rdi+0x30]",
    "jae     0x105c6",
    "mov     rdi, rsi  {0x6666666666666667}",
    "mov     r8, r15 {var_1284}",
    "mov     esi, 0x30",
    "nop     ",
    "nop     dword [rax]",
    "sub     rsp, 0x8",
    "xor     r9d, r9d  {0x0}",
    "xor     r8d, r8d  {0x0}",
    "mov     esi, 0x3e9",
    "push    rdi {var_1378_1}",
    "mov     rdi, r12",
    "push    r15 {var_1380_1}",
    "push    0xffffffffffffffff {var_1388}",
    "call    sub_14780",
    "add     rsp, 0x20",
    "test    rax, rax",
    "je      0x104a0",
    "add     r12, rax",
    "movzx   esi, al",
    "call    __overflow",
    "jmp     0xfcd7",
    "lea     rcx, [rdx+0x1]",
    "mov     qword [rdi+0x28], rcx",
    "mov     byte [rdx], al",
    "jmp     0xfcd7",
    "mov     rax, rcx",
    "mov     r15, r8",
    "sub     r8, 0x1",
    "imul    rdi",
    "mov     rax, rcx",
    "sar     rax, 0x3f",
    "sar     rdx, 0x2",
    "sub     rdx, rax",
    "lea     rax, [rdx+rdx*4]",
    "lea     eax, [rsi+rax*2]",
    "sub     eax, ecx",
    "mov     rcx, rdx",
    "mov     byte [r8], al",
    "test    rdx, rdx",
    "jne     0x10540",
    "mov     byte [r8-0x1], 0x2d",
    "sub     r15, 0x2",
    "jmp     0xfc62",
    "mov     rax, rcx",
    "sub     r15, 0x1",
    "imul    rsi",
    "mov     rax, rcx",
    "sar     rax, 0x3f",
    "sar     rdx, 0x2",
    "sub     rdx, rax",
    "lea     rax, [rdx+rdx*4]",
    "add     rax, rax",
    "sub     rcx, rax",
    "add     ecx, 0x30",
    "mov     byte [r15], cl",
    "mov     rcx, rdx",
    "test    rdx, rdx",
    "jne     0x104e0",
    "jmp     0xfc62",
    "mov     r8d, dword [rel data_23020]",
    "test    r8d, r8d",
    "js      0x103c0"
  ],
  "high_level_IL": [
    "int64_t var_1030",
    "int64_t var_1030_1 = var_1030",
    "char rdx = arg1[0x17].b",
    "void* fsbase",
    "int64_t rax = *(fsbase + 0x28)",
    "char var_12a4",
    "int16_t var_129b",
    "if (rdx != 0)",
    "int32_t rax_2 = arg1[6].d",
    "char rcx_1 = 0x2d",
    "int32_t rsi_2 = rax_2 & 0xf000",
    "if (rsi_2 != 0x8000)",
    "rcx_1 = 0x64",
    "if (rsi_2 != 0x4000)",
    "rcx_1 = 0x62",
    "if (rsi_2 != 0x6000)",
    "rcx_1 = 0x63",
    "if (rsi_2 != 0x2000)",
    "rcx_1 = 0x6c",
    "if (rsi_2 != 0xa000)",
    "rcx_1 = 0x70",
    "if (rsi_2 != 0x1000)",
    "rcx_1 = 0x73",
    "if (rsi_2 != 0xc000)",
    "rcx_1 = 0x3f",
    "var_12a4 = rcx_1",
    "int32_t rcx_3 = rax_2 & 0x100",
    "int64_t var_12a3",
    "var_12a3.b = ((sbb.d(rcx_3, rcx_3, rcx_3 u< 1)).b & 0xbb) + 0x72",
    "int32_t rcx_8 = rax_2 & 0x80",
    "var_12a3:1.b = ((sbb.d(rcx_8, rcx_8, rcx_8 u< 1)).b & 0xb6) + 0x77",
    "int32_t rcx_13 = rax_2 & 0x40",
    "char rcx_14 = (sbb.d(rcx_13, rcx_13, rcx_13 u< 1)).b",
    "char rcx_16",
    "if ((rax_2:1.b & 8) != 0)",
    "rcx_16 = (rcx_14 & 0xe0) + 0x73",
    "rcx_16 = (rcx_14 & 0xb5) + 0x78",
    "var_12a3:2.b = rcx_16",
    "int32_t rcx_18 = rax_2 & 0x20",
    "var_12a3:3.b = ((sbb.d(rcx_18, rcx_18, rcx_18 u< 1)).b & 0xbb) + 0x72",
    "int32_t rcx_23 = rax_2 & 0x10",
    "var_12a3:4.b = ((sbb.d(rcx_23, rcx_23, rcx_23 u< 1)).b & 0xb6) + 0x77",
    "int32_t rcx_28 = rax_2 & 8",
    "char rcx_29 = (sbb.d(rcx_28, rcx_28, rcx_28 u< 1)).b",
    "char rcx_31",
    "if ((rax_2:1.b & 4) == 0)",
    "rcx_31 = (rcx_29 & 0xb5) + 0x78",
    "rcx_31 = (rcx_29 & 0xe0) + 0x73",
    "var_12a3:5.b = rcx_31",
    "int32_t rcx_33 = rax_2 & 4",
    "var_12a3:6.b = ((sbb.d(rcx_33, rcx_33, rcx_33 u< 1)).b & 0xbb) + 0x72",
    "int32_t rcx_38 = rax_2 & 2",
    "var_12a3:7.b = ((sbb.d(rcx_38, rcx_38, rcx_38 u< 1)).b & 0xb6) + 0x77",
    "int32_t rcx_43 = rax_2 & 1",
    "char rax_5",
    "if ((rax_2:1.b & 2) == 0)",
    "rax_5 = ((sbb.d(rax_2, rax_2, rcx_43 u< 1)).b & 0xb5) + 0x78",
    "rax_5 = ((sbb.d(rax_2, rax_2, rcx_43 u< 1)).b & 0xe0) + 0x74",
    "var_129b.b = rax_5",
    "var_129b = 0x20",
    "if (data_232c8 == 0)",
    "goto label_f8ea",
    "goto label_f865",
    "bool cond:0_1 = data_232c8 != 0",
    "var_12a4 = (*\"?pcdb-lswd\")[zx.q(arg1[0x15].d)]",
    "int64_t var_12a3_1",
    "__builtin_strncpy(&var_12a3_1, \"??????????\", 0xb)",
    "int32_t rax_7",
    "bool cond:1",
    "if (cond:0_1)",
    "label_f865:",
    "int32_t rax_6 = *(arg1 + 0xbc)",
    "if (rax_6 == 1)",
    "var_129b:1.b = 0x2e",
    "goto label_f8f1",
    "if (rax_6 != 2)",
    "goto label_f8f1",
    "rax_7 = data_243e4",
    "var_129b:1.b = 0x2b",
    "cond:1 = rax_7 u> 2",
    "if (rax_7 != 2)",
    "goto label_f8fc",
    "goto label_f890",
    "label_f8ea:",
    "var_129b:1.b = 0",
    "label_f8f1:",
    "rax_7 = data_243e4",
    "cond:1 = rax_7 u> 2",
    "bool var_1358",
    "uint128_t var_1338",
    "if (rax_7 == 2)",
    "label_f890:",
    "var_1358 = true",
    "var_1338 = *(arg1 + 0x60)",
    "label_f8fc:",
    "if (cond:1)",
    "uint128_t zmm1 = *(arg1 + 0x70)",
    "var_1338 = zmm1",
    "var_1358 = (_mm_bsrli_si128(zmm1, 8) & zmm1).q != -1",
    "uint128_t zmm0",
    "if (rax_7 != 0)",
    "zmm0 = *(arg1 + 0x80)",
    "zmm0 = *(arg1 + 0x70)",
    "var_1358 = true",
    "var_1338 = zmm0",
    "char var_1264",
    "void s",
    "int64_t slen_6",
    "int64_t slen_1",
    "void* s_2",
    "if (data_23349 == 0)",
    "slen_6 = 0xe3b",
    "slen_1 = 0xe3b",
    "s_2 = &s",
    "void* const r9_1 = &data_1af59",
    "if (rdx != 0)",
    "uint64_t i_8 = arg1[4]",
    "if (i_8 != 0)",
    "var_1264 = 0",
    "r9_1 = &var_1264",
    "uint64_t i",
    "r9_1 -= 1",
    "uint64_t i_14 = i_8 u/ 0xa",
    "*r9_1 = i_8.b - (i_14.b + (i_14 << 2).b) * 2 + 0x30",
    "i = i_8",
    "i_8 = i_14",
    "do while (i u> 9)",
    "int64_t r12 = 0xe3b",
    "int32_t rax_11 = __sprintf_chk(&s, 2, 0xe3b, \"%*s \", zx.q(data_232c4), r9_1)",
    "slen_6 = 0xe3b",
    "rdx = arg1[0x17].b",
    "int64_t r10_1 = sx.q(rax_11)",
    "s_2 = &s + r10_1",
    "if (r10_1 u>= 0xe3b)",
    "r12 = r10_1",
    "slen_1 = r12 - r10_1",
    "if (slen_1 u>= 0xe3b)",
    "slen_6 = slen_1",
    "void var_1278",
    "int16_t x87control",
    "if (data_23348 != 0)",
    "uint64_t rsi_3 = 1",
    "void* const rcx_44 = &data_1af59",
    "if (rdx != 0)",
    "void* rax_45",
    "int80_t st0_2",
    "st0_2, rax_45, x87control = sub_cb80(arg1[0xb], &var_1278, data_232dc, 0x200, data_232d0, x87control)",
    "rcx_44 = rax_45",
    "rsi_3 = strlen(rax_45)",
    "void* const rcx_45 = rcx_44",
    "uint64_t rbx_1 = zx.q(data_232c0 - sub_140a0(rcx_44, rsi_3))",
    "void* s_4",
    "if (rbx_1.d s> 0)",
    "s_4 = s_2 + rbx_1",
    "int64_t slen_2 = 0xe3b",
    "if (slen_1 u>= 0xe3b)",
    "slen_2 = slen_1",
    "int64_t slen_8 = slen_2 - slen_1 + 1",
    "if (slen_8 u< slen_2)",
    "slen_8 = slen_2",
    "s_2 += 1",
    "slen_1 = slen_1 - 1 - slen_2 + slen_8",
    "*(s_2 - 1) = 0x20",
    "do while (s_2 != s_4)",
    "goto label_fa1d",
    "char i_1",
    "s_4 = s_2",
    "label_fa1d:",
    "int64_t slen_3 = 0xe3b",
    "rcx_45 += 1",
    "s_2 = s_4 + 1",
    "if (slen_1 u>= 0xe3b)",
    "slen_3 = slen_1",
    "int64_t slen_9 = slen_3 - slen_1 + 1",
    "if (slen_9 u< slen_3)",
    "slen_9 = slen_3",
    "i_1 = *(rcx_45 - 1)",
    "slen_1 = slen_1 - 1 - slen_3 + slen_9",
    "*(s_2 - 1) = i_1",
    "do while (i_1 != 0)",
    "slen_6 = 0xe3b",
    "*(s_2 - 1) = 0x20",
    "rdx = arg1[0x17].b",
    "if (slen_1 u>= 0xe3b)",
    "slen_6 = slen_1",
    "void* const r8_2 = &data_1af59",
    "if (rdx != 0)",
    "var_1264 = 0",
    "uint64_t i_9 = arg1[5]",
    "r8_2 = &var_1264",
    "uint64_t i_2",
    "r8_2 -= 1",
    "uint64_t i_13 = i_9 u/ 0xa",
    "*r8_2 = i_9.b - (i_13.b + (i_13 << 2).b) * 2 + 0x30",
    "i_2 = i_9",
    "i_9 = i_13",
    "do while (i_2 u> 9)",
    "void* const rax_15 = sx.q(__sprintf_chk(s_2, 2, slen_1, \"%s %*s \", &var_12a4, zx.q(data_232bc), r8_2))",
    "void* s_3 = s_2 + rax_15",
    "if (data_23678 != 0)",
    "sub_8170(&data_1af63, 2)",
    "void* slen",
    "void* slen_7",
    "if (data_2308d != 0 || data_2308c != 0 || data_23343 != 0 || data_23333 != 0)",
    "sub_8170(&s, s_3 - &s)",
    "void* const var_1350",
    "if (data_2308d != 0)",
    "int32_t rdx_15 = data_232b8",
    "char* rdi_12 = &data_1af59",
    "uint64_t rsi_12 = zx.q(*(arg1 + 0x34))",
    "if (arg1[0x17].b != 0)",
    "rdi_12 = nullptr",
    "if (data_232cc == 0)",
    "var_1350.d = rdx_15",
    "rdx_15 = var_1350.d",
    "rdi_12 = sub_f4c0(rsi_12.d)",
    "sub_af90(rdi_12, rsi_12, rdx_15)",
    "if (data_2308c == 0)",
    "goto label_fb10",
    "goto label_fe99",
    "if (data_2308c != 0)",
    "label_fe99:",
    "int32_t rdx_16 = data_232b4",
    "char* rdi_13 = &data_1af59",
    "uint64_t rsi_13 = zx.q(arg1[7].d)",
    "if (arg1[0x17].b != 0)",
    "rdi_13 = nullptr",
    "if (data_232cc == 0)",
    "var_1350.d = rdx_16",
    "rdx_16 = var_1350.d",
    "rdi_13 = sub_f5f0(rsi_13.d)",
    "sub_af90(rdi_13, rsi_13, rdx_16)",
    "if (data_23343 == 0)",
    "goto label_fb1d",
    "goto label_feca",
    "label_fb10:",
    "if (data_23343 != 0)",
    "label_feca:",
    "int32_t rdx_17 = data_232b0",
    "char* rdi_14 = &data_1af59",
    "uint64_t rsi_14 = zx.q(*(arg1 + 0x34))",
    "if (arg1[0x17].b != 0)",
    "rdi_14 = nullptr",
    "if (data_232cc == 0)",
    "var_1350.d = rdx_17",
    "rdx_17 = var_1350.d",
    "rdi_14 = sub_f4c0(rsi_14.d)",
    "sub_af90(rdi_14, rsi_14, rdx_17)",
    "if (data_23333 != 0)",
    "sub_af90(arg1[0x16], 0, data_232ac)",
    "label_fb1d:",
    "if (data_23333 != 0)",
    "sub_af90(arg1[0x16], 0, data_232ac)",
    "slen_7 = &__elf_symbol_table[0x6d].st_name:3",
    "slen = &__elf_symbol_table[0x6d].st_name:3",
    "s_3 = &s",
    "void* rax_36 = rax_15 + slen_6",
    "int64_t slen_12 = rax_36 - slen_1",
    "if (slen_12 u< slen_6)",
    "slen_12 = slen_6",
    "slen = slen_12 + slen_1 - rax_36",
    "slen_7 = &__elf_symbol_table[0x6d].st_name:3",
    "if (slen u>= 0xe3b)",
    "slen_7 = slen",
    "char var_1284",
    "void* s_1",
    "char* rcx_46",
    "uint64_t rsi_7",
    "if (arg1[0x17].b == 0)",
    "rsi_7 = 1",
    "rcx_46 = &data_1af59",
    "label_fbab:",
    "char* rcx_47 = rcx_46",
    "uint64_t r12_6 = zx.q(data_232a0 - sub_140a0(rcx_46, rsi_7))",
    "if (r12_6.d s<= 0)",
    "s_1 = s_3",
    "s_1 = r12_6 + s_3",
    "void* slen_4 = &__elf_symbol_table[0x6d].st_name:3",
    "if (slen u>= 0xe3b)",
    "slen_4 = slen",
    "void* slen_10 = slen_4 - slen + 1",
    "if (slen_10 u< slen_4)",
    "slen_10 = slen_4",
    "s_3 += 1",
    "slen = slen - 1 - slen_4 + slen_10",
    "*(s_3 - 1) = 0x20",
    "do while (s_3 != s_1)",
    "char i_3",
    "void* slen_5 = &__elf_symbol_table[0x6d].st_name:3",
    "rcx_47 = &rcx_47[1]",
    "if (slen u>= 0xe3b)",
    "slen_5 = slen",
    "void* slen_11 = slen_5 - slen + 1",
    "if (slen_11 u< slen_5)",
    "slen_11 = slen_5",
    "s_1 += 1",
    "i_3 = rcx_47[-1]",
    "slen = slen - 1 - slen_5 + slen_11",
    "*(s_1 - 1) = i_3",
    "do while (i_3 != 0)",
    "*(s_1 - 1) = 0x20",
    "if ((arg1[6].d & 0xb000) != 0x2000)",
    "char* rax_18",
    "int80_t st0_1",
    "st0_1, rax_18 = sub_cb80(arg1[9], &var_1278, data_232d8, 1, data_23080, x87control)",
    "rcx_46 = rax_18",
    "rsi_7 = strlen(rax_18)",
    "goto label_fbab",
    "int64_t rcx_54 = arg1[8]",
    "int32_t r11_4 = data_232a8",
    "var_1284 = 0",
    "char* rsi_25 = &var_1284",
    "uint64_t rdi_29 = zx.q(data_232a4)",
    "int32_t r10_4 = data_232a0 - (rdi_29.d + r11_4 + 2)",
    "uint32_t r8_11",
    "r8_11.b = 0",
    "uint64_t i_12 = zx.q(r8_11) | zx.d(rcx_54.b)",
    "uint64_t i_4",
    "rsi_25 -= 1",
    "uint64_t i_15 = i_12 u/ 0xa",
    "*rsi_25 = i_12.b - (i_15.b + (i_15 << 2).b) * 2 + 0x30",
    "i_4 = i_12",
    "i_12 = i_15",
    "do while (i_4 u> 9)",
    "var_1264 = 0",
    "char* r9_8 = &var_1264",
    "uint64_t i_10 = (zx.q((rcx_54 u>> 0x20).d) & 0xfffff000) | ((rcx_54 u>> 8).d & 0xfff)",
    "uint64_t i_5",
    "r9_8 -= 1",
    "uint64_t i_16 = i_10 u/ 0xa",
    "*r9_8 = i_10.b - (i_16.b + (i_16 << 2).b) * 2 + 0x30",
    "i_5 = i_10",
    "i_10 = i_16",
    "do while (i_5 u> 9)",
    "int32_t rax_74 = 0",
    "char* var_1370_1 = rsi_25",
    "if (r10_4 s>= 0)",
    "rax_74 = r10_4",
    "uint64_t var_1378_2 = rdi_29",
    "int64_t rax_77 = sx.q(__sprintf_chk(s_3, 2, slen, \"%*s, %*s \", zx.q(rax_74 + r11_4)))",
    "void* rcx_57 = rax_77 + slen_7",
    "void* slen_13 = rcx_57 - slen",
    "if (slen_13 u< slen_7)",
    "slen_13 = slen_7",
    "s_1 = s_3 + rax_77",
    "slen = slen - rcx_57 + slen_13",
    "*s_1 = 1",
    "void* rbx_7",
    "void* const r15",
    "if (arg1[0x17].b == 0 || var_1358 == 0)",
    "label_fc5b:",
    "r15 = &data_1af59",
    "label_fc62:",
    "int32_t r8_6 = data_23020",
    "if (r8_6 s< 0)",
    "int64_t** r8_13 = data_23680",
    "int64_t var_1340 = 0",
    "void var_12e8",
    "var_1358.q = &var_12e8",
    "if (sub_e390(r8_13, &var_1340, &var_12e8) == 0)",
    "data_23020 = 0",
    "r8_6 = 0",
    "char* rdx_30 = data_23240",
    "int32_t var_12d8",
    "if (data_237cc != 0)",
    "rdx_30 = (sx.q(var_12d8) << 7) + &data_237e0",
    "int64_t rax_79 = sub_14780(&var_1278, 0x3e9, rdx_30, var_1358.q, 0, 0, 0xffffffff, r8_13, 0)",
    "if (rax_79 != 0)",
    "int32_t rax_80 = sub_140a0(&var_1278, rax_79)",
    "data_23020 = rax_80",
    "r8_6 = rax_80",
    "if (rax_80 s< 0)",
    "data_23020 = 0",
    "r8_6 = 0",
    "data_23020 = 0",
    "r8_6 = 0",
    "rbx_7 = sx.q(__sprintf_chk(s_1, 2, slen, \"%*s \", r8_6, r15)) + s_1",
    "int64_t** r15_1 = data_23680",
    "void var_1328",
    "struct tm* var_1350_4 = &var_1328",
    "if (sub_e390(r15_1, &var_1338, &var_1328) == 0)",
    "label_104a0:",
    "if (*s_1 != 0)",
    "if (arg1[0x17].b == 0)",
    "goto label_fc5b",
    "int64_t i_11 = var_1338.q",
    "var_1284 = 0",
    "r15 = &var_1284",
    "if (i_11 s< 0)",
    "char* r8_15 = &var_1284",
    "char* r15_2",
    "int64_t i_6",
    "r15_2 = r8_15",
    "r8_15 -= 1",
    "i_6 = i_11 s/ 0xa",
    "char rax_94 = (0x30 + i_6 * 0xa).b - i_11.b",
    "i_11 = i_6",
    "*r8_15 = rax_94",
    "do while (i_6 != 0)",
    "r8_15[-1] = 0x2d",
    "r15 = r15_2 - 2",
    "int64_t i_7",
    "r15 -= 1",
    "i_7 = i_11 s/ 0xa",
    "*r15 = i_11.b - (i_7.b + (i_7 << 2).b) * 2 + 0x30",
    "i_11 = i_7",
    "do while (i_7 != 0)",
    "goto label_fc62",
    "*s_1 = 0x20",
    "rbx_7 = s_1 + 1",
    "int64_t rdx_23 = var_1338:8.q",
    "int64_t temp0_2 = data_23718",
    "int32_t r10_2",
    "r10_2.b = temp0_2 s> rdx_23",
    "struct tm* rax_47",
    "rax_47.b = temp0_2 s< rdx_23",
    "int64_t rdi_23 = data_23710",
    "int64_t rsi_20 = var_1338.q",
    "uint32_t rax_48 = zx.d(rax_47.b)",
    "struct tm* rcx_53 = var_1350_4",
    "int32_t r8_9 = r10_2 - rax_48",
    "int32_t r9_4",
    "r9_4.b = rsi_20 s< rdi_23",
    "if (r8_9 + ((r9_4 - zx.d(rsi_20 s> rdi_23)) << 1) s< 0)",
    "clock_gettime(0, &data_23710)",
    "rdx_23 = var_1338:8.q",
    "int64_t temp1_1 = data_23718",
    "r10_2.b = temp1_1 s> rdx_23",
    "rdi_23 = data_23710",
    "rsi_20 = var_1338.q",
    "rax_48 = zx.d(temp1_1 s< rdx_23)",
    "rcx_53 = var_1350_4",
    "r8_9 = r10_2 - rax_48",
    "int64_t r9_7 = rdi_23 - 0xf0c2ac",
    "uint32_t r11_2",
    "r11_2.b = rdi_23 s> rsi_20",
    "rdi_23.b = rdi_23 s< rsi_20",
    "bool cond:16_1 = r9_7 s< rsi_20",
    "rsi_20.b = r9_7 s> rsi_20",
    "uint64_t rdi_25",
    "rdi_25.b = cond:16_1",
    "uint64_t rax_52 = zx.q(((rax_48 - r10_2 + ((zx.d(rdi_23.b) - zx.d(r11_2.b)) << 1)) & (r8_9 + ((zx.d(rsi_20.b) - zx.d(rdi_25.b)) << 1))) u>> 0x1f)",
    "char* rdx_24",
    "int32_t var_1318",
    "if (data_237cc == 0)",
    "rdx_24 = (&data_23240)[zx.q(rax_52.d) & 1]",
    "rdx_24 = &data_237e0 + (((zx.q((rax_52 << 0x3f s>> 0x3f).d) & 0xc) + sx.q(var_1318)) << 7)",
    "int64_t rax_58 = sub_14780(s_1, 0x3e9, rdx_24, rcx_53, 0, 0, 0xffffffff, r15_1, rdx_23.d)",
    "if (rax_58 == 0)",
    "goto label_104a0",
    "s_1 += rax_58",
    "*s_1 = 0x20",
    "rbx_7 = s_1 + 1",
    "uint64_t rbx_8 = rbx_7 - &s",
    "sub_8170(&s, rbx_8)",
    "uint64_t rax_23 = sub_ecd0(arg1, 0, &data_23620, rbx_8)",
    "int32_t rdx_12 = arg1[0x15].d",
    "char rax_27",
    "if (rdx_12 == 6)",
    "if (arg1[1] != 0)",
    "sub_8170(\" -> \", 4)",
    "sub_ecd0(arg1, 1, nullptr, rbx_8 + rax_23 + 4)",
    "if (data_23334 != 0)",
    "rax_27 = sub_bd80(1, *(arg1 + 0xac), 0)",
    "if (rax_27 != 0)",
    "goto label_fdb8",
    "if (data_23334 != 0)",
    "rax_27 = sub_bd80(arg1[0x17].b, arg1[6].d, rdx_12)",
    "if (rax_27 != 0)",
    "label_fdb8:",
    "data_23350 += 1",
    "FILE* f = *stdout",
    "char* _IO_write_ptr = f->_IO_write_ptr",
    "if (_IO_write_ptr u>= f->_IO_write_end)",
    "__overflow(f, zx.d(rax_27))",
    "f->_IO_write_ptr = &_IO_write_ptr[1]",
    "*_IO_write_ptr = rax_27",
    "*(fsbase + 0x28)",
    "if (rax == *(fsbase + 0x28))",
    "return ",
    "__stack_chk_fail()",
    "noreturn"
  ]
}