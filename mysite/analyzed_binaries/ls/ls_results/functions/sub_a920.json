{
  "address": "0xa920",
  "rules": [
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23"
  ],
  "disassembly": [
    "endbr64 ",
    "mov     rdx, rdi",
    "mov     edi, dword [rsi+0xa8]",
    "mov     eax, dword [rdx+0xa8]",
    "cmp     eax, 0x9",
    "sete    cl",
    "cmp     eax, 0x3",
    "sete    al",
    "or      ecx, eax",
    "cmp     edi, 0x3",
    "je      0xa970",
    "mov     eax, 0x1",
    "test    cl, cl",
    "je      0xa9c0",
    "cmp     edi, 0x9",
    "je      0xa970",
    "mov     ecx, dword [rdx+0xac]",
    "xor     edi, edi",
    "and     ecx, 0xf000",
    "cmp     ecx, 0x4000",
    "sete    dil",
    "sub     eax, edi",
    "jne     0xa96e",
    "mov     rax, qword [rdx+0x48]",
    "cmp     qword [rsi+0x48], rax",
    "setl    al",
    "setg    cl",
    "movzx   eax, al",
    "movzx   ecx, cl",
    "sub     eax, ecx",
    "jne     0xa96e",
    "mov     eax, dword [rsi+0xac]",
    "mov     edi, 0x1",
    "and     eax, 0xf000",
    "cmp     eax, 0x4000",
    "sete    al",
    "movzx   eax, al",
    "test    cl, cl",
    "je      0xa9c0",
    "retn    ",
    "jmp     0xa979",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r12",
    "mov     r12, qword [rdx]",
    "push    rbx",
    "mov     rbx, qword [rsi]",
    "call    __errno_location",
    "mov     rsi, r12",
    "mov     rdi, rbx",
    "mov     dword [rax], 0x0",
    "pop     rbx",
    "pop     r12",
    "pop     rbp",
    "jmp     strcoll",
    "sub     eax, edi",
    "je      0xa979"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}