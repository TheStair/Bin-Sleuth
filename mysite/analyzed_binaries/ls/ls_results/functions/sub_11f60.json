{
  "address": "0x11f60",
  "rules": [
    "populate SysWhispers2 syscall list/bac71c42a489454d9c62b98a7189c5d2",
    "check for time delay via GetTickCount/dcdc41ab318e4e618f624ba5aeac30b2",
    "validate payment card number using luhn algorithm with no lookup table/f595b07566ee46b3ba7870816078c34e",
    "contain loop",
    "encrypt data using RC4 KSA/ce2c5ff22cc84a5d8021901651b76a23",
    "write file on Windows/035d57bed47747649158312e9532f27d",
    "parse credit card information/57ac61c4268f4ccb8bf67b3aa3bc79f3"
  ],
  "disassembly": [
    "endbr64 ",
    "push    rbp",
    "mov     rbp, rsp",
    "push    r15",
    "push    r14",
    "mov     r14, rsi",
    "push    r13",
    "mov     r13, rdx",
    "push    r12",
    "push    rbx",
    "mov     rbx, rdi",
    "sub     rsp, 0x28",
    "mov     qword [rbp-0x48], rcx",
    "mov     rax, qword [fs:0x28]",
    "mov     qword [rbp-0x38], rax",
    "xor     eax, eax",
    "test    rsi, rsi",
    "lea     rax, [rbp-0x40]",
    "cmove   r14, rax",
    "call    __errno_location",
    "mov     dword [rax], 0x0",
    "mov     r12, rax",
    "movzx   r15d, byte [rbx]",
    "call    __ctype_b_loc",
    "mov     rcx, qword [rax]",
    "movzx   eax, r15b",
    "test    byte [rcx+rax*2+0x1], 0x20",
    "je      0x11fda",
    "cmp     r15b, 0x2d",
    "je      0x1204a",
    "mov     rax, rbx",
    "nop     dword [rax]",
    "mov     ebx, 0x4",
    "jmp     0x12013",
    "xor     edx, edx",
    "mov     rsi, r14",
    "mov     rdi, rbx",
    "call    __isoc23_strtoumax",
    "mov     rcx, qword [r14]",
    "mov     r15, rax",
    "cmp     rbx, rcx",
    "je      0x12058",
    "movzx   edx, byte [rax+0x1]",
    "add     rax, 0x1",
    "mov     r15, rdx",
    "test    byte [rcx+rdx*2+0x1], 0x20",
    "jne     0x11fc8",
    "mov     rax, qword [rbp-0x38]",
    "sub     rax, qword [fs:0x28]",
    "jne     0x12389",
    "movzx   r12d, byte [rcx]",
    "mov     qword [rbp-0x50], rcx",
    "test    r12b, r12b",
    "je      0x1204a",
    "mov     eax, dword [r12]",
    "test    eax, eax",
    "jne     0x12040",
    "call    __stack_chk_fail",
    "{ Does not return }",
    "add     rsp, 0x28",
    "mov     eax, ebx",
    "pop     rbx",
    "pop     r12",
    "pop     r13",
    "pop     r14",
    "pop     r15",
    "pop     rbp",
    "retn    ",
    "mov     rdi, qword [rbp-0x48]",
    "movsx   esi, r12b",
    "xor     ebx, ebx",
    "mov     r15d, 0x1",
    "call    strchr",
    "mov     rcx, qword [rbp-0x50]",
    "test    rax, rax",
    "je      0x1204a",
    "mov     ebx, 0x1",
    "cmp     eax, 0x22",
    "je      0x12002",
    "xor     ebx, ebx",
    "lea     eax, [r12-0x45]",
    "cmp     al, 0x2f",
    "ja      0x120f0",
    "movzx   r12d, byte [rcx]",
    "test    r12b, r12b",
    "jne     0x12120",
    "mov     rdi, qword [rbp-0x48]",
    "movsx   esi, r12b",
    "mov     qword [rbp-0x50], rcx",
    "call    strchr",
    "mov     rcx, qword [rbp-0x50]",
    "test    rax, rax",
    "jne     0x12083",
    "mov     qword [r13], r15",
    "mov     edi, 0x1",
    "mov     esi, 0x400",
    "mov     rdx, 0x81440030b945",
    "bt      rdx, rax",
    "jae     0x120f0",
    "{Case 0x1-0x2, 0x4, 0x6-0x8, 0xa, 0xc-0xd, 0x11, 0x13-0x16, 0x19-0x1f, 0x22-0x24, 0x26-0x28, 0x2a, 0x2c-0x31, 0x33-0x34}",
    "mov     qword [r13], r15",
    "or      ebx, 0x2",
    "jmp     0x12013",
    "lea     rdx, [rel jump_table_1db48]",
    "movzx   r12d, r12b",
    "movsxd  rax, dword [rdx+r12*4]",
    "add     rax, rdx",
    "jmp     rax",
    "mov     rdi, qword [rbp-0x48]",
    "mov     esi, 0x30",
    "mov     qword [rbp-0x50], rcx",
    "call    strchr",
    "mov     rcx, qword [rbp-0x50]",
    "test    rax, rax",
    "je      0x120f0",
    "{Case 0x9, 0x29}",
    "movsxd  rax, esi",
    "mul     r15",
    "jo      0x1235d",
    "{Case 0x21}",
    "movsxd  rax, edi",
    "add     rcx, rax",
    "mov     qword [r14], rcx",
    "cmp     byte [rcx], 0x0",
    "je      0x1200f",
    "{Case 0x5, 0x25}",
    "mov     rax, r15",
    "mul     rsi",
    "jo      0x123a9",
    "{Case 0xb, 0x2b}",
    "mov     rax, r15",
    "mul     rsi",
    "jo      0x1236b",
    "{Case 0x12, 0x32}",
    "mov     r9d, 0x4",
    "xor     r10d, r10d",
    "nop     dword [rax]",
    "{Case 0x0}",
    "mov     rax, r15",
    "mov     edx, 0x1",
    "shl     rax, 0xa",
    "shr     r15, 0x36",
    "mov     r15, 0xffffffffffffffff",
    "cmovne  ebx, edx",
    "cmove   r15, rax",
    "jmp     0x12159",
    "{Case 0x35}",
    "lea     rax, [r15+r15]",
    "mov     edx, 0x1",
    "shr     r15, 0x3f",
    "mov     r15, 0xffffffffffffffff",
    "cmovne  ebx, edx",
    "cmove   r15, rax",
    "jmp     0x12159",
    "{Case 0x20}",
    "mov     rax, r15",
    "mov     edx, 0x1",
    "shl     rax, 0x9",
    "shr     r15, 0x37",
    "mov     r15, 0xffffffffffffffff",
    "cmovne  ebx, edx",
    "cmove   r15, rax",
    "jmp     0x12159",
    "{Case 0x18}",
    "mov     r9d, 0x7",
    "xor     r10d, r10d",
    "nop     dword [rax]",
    "{Case 0x17}",
    "mov     r9d, 0x8",
    "xor     r10d, r10d",
    "nop     dword [rax+rax]",
    "{Case 0x3}",
    "mov     r9d, 0x6",
    "xor     r10d, r10d",
    "nop     dword [rax+rax]",
    "{Case 0xe}",
    "mov     r9d, 0x5",
    "xor     r10d, r10d",
    "nop     dword [rax+rax]",
    "{Case 0x10}",
    "mov     r9d, 0x9",
    "xor     r10d, r10d",
    "nop     dword [rax+rax]",
    "{Case 0xf}",
    "mov     r9d, 0xa",
    "xor     r10d, r10d",
    "nop     dword [rax+rax]",
    "movzx   eax, byte [rcx+0x1]",
    "cmp     al, 0x44",
    "je      0x1234e",
    "mov     ebx, 0x1",
    "or      r15, 0xffffffffffffffff",
    "jmp     0x12159",
    "mov     r15, rax",
    "or      ebx, 0x2",
    "jmp     0x1200f",
    "or      rdx, 0xffffffffffffffff",
    "mov     r9d, 0x1",
    "jmp     0x1219d",
    "mov     rdx, rax",
    "xor     r9d, r9d",
    "or      rdx, 0xffffffffffffffff",
    "mov     r9d, 0x1",
    "jmp     0x121ac",
    "mov     rdx, rax",
    "xor     r9d, r9d",
    "jmp     0x121ac",
    "mov     r10d, 0x1",
    "or      r15, 0xffffffffffffffff",
    "jmp     0x121ef",
    "sub     r9d, 0x1",
    "jne     0x121e0",
    "mov     r10d, 0x1",
    "or      r15, 0xffffffffffffffff",
    "jmp     0x1227f",
    "sub     r9d, 0x1",
    "jne     0x12270",
    "mov     r10d, 0x1",
    "or      r15, 0xffffffffffffffff",
    "jmp     0x122a7",
    "sub     r9d, 0x1",
    "jne     0x12298",
    "mov     r10d, 0x1",
    "or      r15, 0xffffffffffffffff",
    "jmp     0x122cf",
    "sub     r9d, 0x1",
    "jne     0x122c0",
    "mov     r10d, 0x1",
    "or      r15, 0xffffffffffffffff",
    "jmp     0x122f7",
    "sub     r9d, 0x1",
    "jne     0x122e8",
    "mov     r10d, 0x1",
    "or      r15, 0xffffffffffffffff",
    "jmp     0x1231f",
    "sub     r9d, 0x1",
    "jne     0x12310",
    "mov     r10d, 0x1",
    "or      r15, 0xffffffffffffffff",
    "jmp     0x12343",
    "sub     r9d, 0x1",
    "jne     0x12338",
    "mov     edi, 0x2",
    "mov     esi, 0x3e8",
    "jmp     0x120fa",
    "cmp     al, 0x69",
    "je      0x12173",
    "mov     rax, rdx",
    "mul     rsi",
    "jo      0x1239a",
    "mov     r9d, 0x1",
    "or      rdx, 0xffffffffffffffff",
    "jmp     0x121ac",
    "mov     rdx, rax",
    "mov     rax, rsi",
    "mul     rdx",
    "jo      0x123b8",
    "mov     rax, r15",
    "mul     rsi",
    "mov     r15, rax",
    "jo      0x123d6",
    "or      ebx, r10d",
    "jmp     0x12159",
    "mov     rax, r15",
    "mul     rsi",
    "mov     r15, rax",
    "jo      0x1237a",
    "jmp     0x121f5",
    "mov     rax, r15",
    "mul     rsi",
    "mov     r15, rax",
    "jo      0x123e5",
    "jmp     0x121f5",
    "mov     rax, r15",
    "mul     rsi",
    "mov     r15, rax",
    "jo      0x123c7",
    "jmp     0x121f5",
    "mov     rax, r15",
    "mul     rsi",
    "mov     r15, rax",
    "jo      0x123f4",
    "jmp     0x121f5",
    "mov     rax, r15",
    "mul     rsi",
    "mov     r15, rax",
    "jo      0x12403",
    "jmp     0x121f5",
    "mov     rax, r15",
    "mul     rsi",
    "mov     r15, rax",
    "jo      0x1238e",
    "jmp     0x121f5",
    "sub     r12d, 0x42",
    "cmp     r12b, 0x35",
    "ja      0x1213e",
    "xor     edi, edi",
    "cmp     byte [rcx+0x2], 0x42",
    "mov     esi, 0x400",
    "sete    dil",
    "lea     edi, [rdi+rdi+0x1]",
    "jmp     0x120fa",
    "xor     edi, edi",
    "cmp     al, 0x42",
    "mov     esi, 0x400",
    "mov     edx, 0x3e8",
    "sete    dil",
    "add     edi, 0x1",
    "cmp     al, 0x42",
    "cmove   rsi, rdx",
    "jmp     0x120fa",
    "mov     r9d, 0x1",
    "or      r15, 0xffffffffffffffff",
    "jmp     0x121bb",
    "mov     r15, rax",
    "or      ebx, r9d",
    "jmp     0x12159"
  ],
  "high_level_IL": [
    "No High Level IL Loaded"
  ]
}